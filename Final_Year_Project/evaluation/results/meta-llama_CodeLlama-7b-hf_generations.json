{"references": ["\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n", "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n", "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n", "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n", "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n", "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n", "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n", "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n", "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n", "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n", "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"], "predictions": [["    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n\n    return False\n\n\ndef get_close_elements(numbers: List[float], threshold: float) -> List[float]:\n    \"\"\" Get all numbers in given list of numbers, that are closer to each other than given threshold.\n    >>> get_close_elements([1.0, 2.0, 3.0], 0.5)\n    []\n    >>> get_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    [2.8]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                result.append(numbers[i])\n                result.append(numbers[j])\n\n    return result\n\n\ndef get_close_elements_sum(numbers: List[float], threshold: float) -> float:\n    \"\"\" Get sum of all numbers in given list of numbers, that are closer to each other than given threshold.\n    >>> get_close_elements_sum([1.0, 2.0, 3.0], 0.5)\n    0.0\n    >>> get_close_elements_sum([1.0, 2.8, 3.0, 4.0, 5.0, 2", "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n\ndef has_close_elements_v2(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements_v2([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements_v2([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n\ndef has_close_elements_v3(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements_v3([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements_v3([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n", "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n\ndef has_close_elements_optimized(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements_optimized([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements_optimized([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    # use a set to remove duplicate values\n    # note that you can not use a dict here, as it won't work with lists\n    seen: set[float] = set()\n    for n in numbers:\n        if n in seen:\n            return True\n        else:\n            seen.add(n)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n\n# ==========================================================================================\n#                                      TESTS\n# ==========================================================================================\n\n# tests for has_close_elements function\ndef test_has_close_elements_1():\n    \"\"\" Test has_close_elements function with test case #1. \"\"\"\n    numbers: List[float] = [1.", "    for index1, number1 in enumerate(numbers[:-1]):\n        for index2, number2 in enumerate(numbers[index1 + 1 :], index1 + 1):\n            if abs(number1 - number2) <= threshold:\n                return True\n    return False\n\n\ndef has_close_elements_with_index(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for index1, number1 in enumerate(numbers[:-1]):\n        for index2, number2 in enumerate(numbers[index1 + 1 :], index1 + 1):\n            if abs(number1 - number2) <= threshold:\n                return True\n    return False\n\n\ndef has_close_elements_with_index_and_pos(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5", "    for i, number1 in enumerate(numbers):\n        for number2 in numbers[i + 1:]:\n            if abs(number1 - number2) < threshold:\n                return True\n    return False\n\n\ndef has_close_elements_v2(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements_v2([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements_v2([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i, number1 in enumerate(numbers):\n        for j, number2 in enumerate(numbers[i + 1:]):\n            if abs(number1 - number2) < threshold:\n                return True\n    return False\n\n\ndef has_close_elements_v3(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements_v3([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements_v3([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for number1"], ["    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n        else:\n            continue\n    while stack:\n        result.append(''.join(stack))\n        stack = stack[:-1]\n    return result\n\n\ndef main():\n    print(separate_paren_groups('( ) (( )) (( )( ))'))\n    print(separate_paren_groups('((( )))'))\n    print(separate_paren_groups('()'))\n    print(separate_paren_groups('( )'))\n    print(separate_paren_groups('()()'))\n    print(separate_paren_groups('(())()))'))\n    print(separate_paren_groups('((()))()()'))\n    print(separate_paren_groups('(((())))()))'))\n\n\nif __name__ == '__main__':\n    main()\n", "    # TODO: Your code goes here\n    # -------\n    # EXAMPLE:\n    #     >>> separate_paren_groups('( ) (( )) (( )( ))')\n    #     ['()', '(())', '(()())']\n    #\n    # SOLUTION:\n    #     def separate_paren_groups(paren_string: str) -> List[str]:\n    #         list_of_paren_groups = []\n    #         for i in range(len(paren_string)):\n    #             if paren_string[i] == '(':\n    #                 count = 0\n    #                 paren_group = ''\n    #                 for j in range(i, len(paren_string)):\n    #                     if paren_string[j] == '(':\n    #                         count += 1\n    #                     if paren_string[j] == ')':\n    #                         count -= 1\n    #                     if count == 0:\n    #                         list_of_paren_groups.append(paren_group)\n    #                         break\n    #                     else:\n    #                         paren_group += paren_string[j]\n    #         return list_of_paren_groups\n    #\n    #\n    #     if __name__ == '__main__':\n    #         print(separate_paren_groups('( ) (( )) (( )( ))'))\n    #\n    # -------\n    pass\n\n\nif __name__ == '__main__':\n    # Do not", "    # create the stack\n    stack = []\n    # create an empty list to append the groups into\n    groups = []\n\n    # for every character in the string\n    for char in paren_string:\n        # if the character is a left paren, add it to the stack\n        if char == '(':\n            stack.append(char)\n        # if the character is a right paren\n        if char == ')':\n            # while the stack is not empty\n            while stack:\n                # pop the top character off of the stack\n                char = stack.pop()\n                # if the popped character is a left paren\n                if char == '(':\n                    # append the string of characters to the list\n                    groups.append(''.join(stack))\n                    # break out of the while loop\n                    break\n                # if the popped character is not a left paren\n                else:\n                    # append the popped character to the stack\n                    stack.append(char)\n    # return the list of strings\n    return groups\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n\n    print(\"All tests passed!\")\n\n    # print(separate_paren_groups('( ) (( )) (( )( ))'))\n    # print(separate_paren_groups('()'))\n    # print(separate_paren_groups('()()'))\n    # print(separate_paren_groups('()()()'))\n    # print(separate_paren_groups('(((()))))'))\n    # print(", "    return [a.strip() for a in paren_string.split('()')]\n\n\ndef balanced_paren(paren_string: str) -> bool:\n    \"\"\"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to check if the\n    parentheses are balanced or not.\n    A string containing balanced parentheses is defined as follows:\n    - An empty string is balanced\n    - A string with only one open parenthesis is not balanced\n    - A string with only one closed parenthesis is not balanced\n    - A string with n open parenthesis and n closed parenthesis is balanced\n    - A string with m open parenthesis and n closed parenthesis is not balanced if m != n\n    >>> balanced_paren('( ) (( )) (( )( ))')\n    True\n    >>> balanced_paren('(( ))')\n    True\n    >>> balanced_paren(')()')\n    False\n    >>> balanced_paren('()()')\n    True\n    \"\"\"\n    if not paren_string:\n        return True\n    if len(paren_string.strip('()')) % 2 != 0:\n        return False\n    for paren in paren_string:\n        if paren == '(':\n            return False\n    return True\n\n\ndef paren_pairs(paren_string: str) -> List[str]:\n    \"\"\"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to return a list of\n    the balanced pairs.\n    For example, the input '( ) ((", "    return []\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    print('module complete')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["\n    return number % 1\n\n\ndef is_even(number: float) -> bool:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return whether the number is even.\n    >>> is_even(3.5)\n    False\n    \"\"\"\n    return truncate_number(number) == 0\n\n\ndef is_odd(number: float) -> bool:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return whether the number is odd.\n    >>> is_odd(3.5)\n    True\n    \"\"\"\n\n    return not is_even(number)\n\n\ndef is_positive(number: float) -> bool:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return whether the number is positive.\n    >>> is_positive(3.5)\n    True\n    \"\"\"\n\n    return number > 0\n\n\ndef is_negative(number: float) -> bool:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return whether the number is negative.\n    >>> is_negative(3.5)\n    False\n    \"\"\"\n\n    return not is_positive(number)\n\n\ndef is_integer", "    integer_part, decimals = math.modf(number)\n    return decimals\n\n\ndef is_prime(number: int) -> bool:\n    \"\"\" Returns whether a given number is a prime number or not\n    >>> is_prime(7)\n    True\n    \"\"\"\n    if number < 2:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n\n\ndef is_palindrome(number: int) -> bool:\n    \"\"\" Returns whether a given number is a palindrome or not.\n    A palindrome is a number that reads the same when read from left to right\n    and from right to left.\n    >>> is_palindrome(23432)\n    True\n    \"\"\"\n    return str(number) == str(number)[::-1]\n\n\ndef get_sum_of_digits(number: int) -> int:\n    \"\"\" Returns the sum of all digits in a given number.\n    >>> get_sum_of_digits(23432)\n    23\n    \"\"\"\n    return sum(map(int, str(number)))\n\n\ndef get_product_of_digits(number: int) -> int:\n    \"\"\" Returns the product of all digits in a given number.\n    >>> get_product_of_digits(23432)\n    42\n    \"\"\"\n    return reduce(lambda a, b: a * b, map(int, str(number)))\n\n\ndef get_number_of_digits(number: int) -> int:\n    \"\"\" Returns the number of digits in a given number.\n    >>> get_number_of_digits(23432)\n    5\n    \"\"\"\n   ", "    return number % 1\n\n\ndef get_data(url: str) -> list:\n    \"\"\" Fetch data from the API endpoint.\n\n    :param url: Endpoint URL\n    :return: List of data\n    \"\"\"\n    return requests.get(url).json()['data']\n\n\ndef get_count(url: str) -> int:\n    \"\"\" Get count of data from the API endpoint.\n\n    :param url: Endpoint URL\n    :return: Count of data\n    \"\"\"\n    return int(requests.get(url).json()['count'])\n\n\ndef get_page(url: str, page: int) -> list:\n    \"\"\" Get data from the API endpoint.\n\n    :param url: Endpoint URL\n    :param page: Page number\n    :return: List of data\n    \"\"\"\n    return get_data(f'{url}/page/{page}')\n\n\ndef get_all_pages(url: str) -> list:\n    \"\"\" Get data from the API endpoint.\n\n    :param url: Endpoint URL\n    :return: List of data\n    \"\"\"\n    return get_page(url, 1) + get_page(url, 2) + get_page(url, 3)\n\n\ndef get_max_count(url: str) -> int:\n    \"\"\" Get maximum count of data from the API endpoint.\n\n    :param url: Endpoint URL\n    :return: Maximum count of data\n    \"\"\"\n    return get_count(f'{url}/count')\n\n\ndef get_max_page(url: str) -> int:\n    \"\"\" Get maximum page number of data from the API endpoint.\n\n    :param url: Endpoint URL\n    :return: Maximum page number of data\n    \"\"\"\n    return math.ceil(get", "    if number > 0:\n        return number % 1\n    elif number < 0:\n        return 1 - (number % 1)\n    else:\n        return 0\n\n\ndef get_fraction(number: float) -> Tuple[int, float]:\n    \"\"\" Given a floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the integer and decimal parts of the number.\n    >>> get_fraction(3.5)\n    (3, 0.5)\n    \"\"\"\n    if number > 0:\n        return int(number), number % 1\n    elif number < 0:\n        number = number * -1\n        return int(number), 1 - (number % 1)\n    else:\n        return 0, 0\n\n\ndef get_number(integer: int, decimal: float) -> float:\n    \"\"\" Given the integer and decimal parts of a number,\n    return the number.\n    >>> get_number(3, 0.5)\n    3.5\n    \"\"\"\n    if integer == 0 and decimal == 0:\n        return 0\n    return integer + decimal\n\n\ndef get_number_from_frac_str(frac_str: str) -> float:\n    \"\"\" Given a fraction string, return the decimal number.\n\n    >>> get_number_from_frac_str(\"3/5\")\n    0.6\n    >>> get_number_from_frac_str(\"-3/5\")\n    -0.6\n    >>> get_number_from_frac_str(\"3\")\n    3\n    >>> get_number_from_frac_str(\"-3\")\n    -3", "    return number - int(number)\n\n\ndef get_random_number(min_value, max_value) -> float:\n    \"\"\" Return a random number between min_value and max_value.\n    >>> get_random_number(0, 10)\n    8.114309240897851\n    >>> get_random_number(0, 10)\n    2.360853010840192\n    \"\"\"\n    return min_value + (max_value - min_value) * random.random()\n\n\ndef get_random_number_from_list(numbers: list) -> float:\n    \"\"\" Return a random number from a list of numbers.\n    >>> get_random_number_from_list([10, 20, 30])\n    10.0\n    >>> get_random_number_from_list([10, 20, 30])\n    10.0\n    \"\"\"\n    return numbers[int(len(numbers) * random.random())]\n\n\ndef get_random_number_from_dict(numbers: dict) -> float:\n    \"\"\" Return a random number from a dict of numbers.\n    >>> get_random_number_from_dict({\"a\": 10, \"b\": 20, \"c\": 30})\n    10.0\n    >>> get_random_number_from_dict({\"a\": 10, \"b\": 20, \"c\": 30})\n    10.0\n    \"\"\"\n    return list(numbers.values())[int(len(numbers) * random.random())]\n\n\ndef get_random_number_from_set(numbers: set) -> float:\n    \"\"\" Return a"], ["    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    do", "    acc = 0\n    for i in operations:\n        acc += i\n        if acc < 0:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n\n\"\"\"\ndef below_zero(operations: List[int]) -> bool:\n    acc = 0\n    for i in operations:\n        acc += i\n        if acc < 0:\n            return True\n    return False\n\"\"\"\n\n\ndef below_zero_v2(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    acc = 0\n    for i in operations:\n        if acc < 0:\n            return True\n        acc += i\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n\n\"\"\"\ndef below_zero_v2(operations: List[int]) -> bool:\n    acc = 0\n    for i in operations:\n        if acc < 0:\n            return True\n        acc += i\n    return False\n\"\"\"\n\n\ndef below_zero_v3(operations: List", "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance -= operation\n            if balance < 0:\n                return True\n        else:\n            balance += operation\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n\n", "    acc = 0\n    for x in operations:\n        if acc < 0:\n            return True\n        acc += x\n    return False\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(below_zero([1, 2, 3]))\n    print(below_zero([1, 2, -4, 5]))\n    print(\"Coding", "    balance = 0\n\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        elif balance + operation >= 0:\n            balance += operation\n        else:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n\n\"\"\"\nStatus:\n    Accepted\n\nRuntime:\n    Python: 28 ms (beats 81.62% of python submissions)\n\nMemory Usage:\n    Python: 14.7 MB (beats 74.02% of python submissions)\n\"\"\"\n\n\ndef below_zero_2(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        elif balance + operation >= 0:\n            balance += operation\n        else:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n\n\"\"\"\nStatus:\n    Accepted\n\nRuntime:\n   "], ["    return sum([abs(number - mean(numbers)) for number in numbers]) / len(numbers)\n\n\ndef mean(numbers: List[float]) -> float:\n    \"\"\" Calculate mean of a list of numbers.\n    >>> mean([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \"\"\"\n    return sum(numbers) / len(numbers)\n\n\ndef median(numbers: List[float]) -> float:\n    \"\"\" Calculate median of a list of numbers.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \"\"\"\n    return mean(sorted(numbers))\n\n\ndef std_deviation(numbers: List[float]) -> float:\n    \"\"\" Calculate standard deviation of a list of numbers.\n    >>> std_deviation([1.0, 2.0, 3.0, 4.0])\n    0.7071067811865475\n    \"\"\"\n    avg = mean(numbers)\n    return sum([(number - avg) ** 2 for number in numbers]) / len(numbers)\n\n\ndef std_deviation_population(numbers: List[float]) -> float:\n    \"\"\" Calculate standard deviation of a list of numbers.\n    >>> std_deviation_population([1.0, 2.0, 3.0, 4.0])\n    0.7071067811865475\n    \"\"\"\n    avg = mean(numbers)\n    return sum([(number - avg) **", "    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    abs_diff = [abs(num - mean) for num in numbers]\n    return sum(abs_diff) / len(numbers)\n\n\ndef variance(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate the variance of this\n    dataset.\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n    1.25\n    \"\"\"\n    if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    squared_diff = [pow(num - mean, 2) for num in numbers]\n    return sum(squared_diff) / len(numbers)\n\n\ndef standard_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate the standard deviation of\n    this dataset.\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    1.1180339887498949\n    \"\"\"\n    return variance(numbers) ** 0.5\n\n\ndef median(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate the median of this\n    dataset.\n    >>> median([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \"\"\"\n    if not numbers:\n        return 0.0\n    numbers.sort()\n    if len(numbers) %", "    mean = mean_from_list(numbers)\n    return sum([abs(n - mean) for n in numbers]) / len(numbers)\n\n\ndef mean_from_list(numbers: List[float]) -> float:\n    \"\"\" Calculate mean value of a given list of numbers.\n    >>> mean_from_list([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \"\"\"\n    return sum(numbers) / len(numbers)\n\n\ndef std_deviation(numbers: List[float], mean: float) -> float:\n    \"\"\" Calculate standard deviation of a given list of numbers around a\n    given mean value.\n    >>> std_deviation([1.0, 2.0, 3.0, 4.0], 2.5)\n    0.8164965809277261\n    \"\"\"\n    return sum([(n - mean) ** 2 for n in numbers]) / len(numbers)\n\n\ndef std_deviation_from_list(numbers: List[float]) -> float:\n    \"\"\" Calculate standard deviation of a given list of numbers.\n    >>> std_deviation_from_list([1.0, 2.0, 3.0, 4.0])\n    0.8164965809277261\n    \"\"\"\n    mean = mean_from_list(numbers)\n    return std_deviation(numbers, mean)\n\n\ndef z_score(number: float, mean: float, std_dev: float) -> float:\n    \"\"\" Calculate a z-score of", "\n    # Calculate the mean\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the absolute difference between each element and the mean\n    diff = [abs(x - mean) for x in numbers]\n\n    # Return the mean of the absolute differences\n    return sum(diff) / len(diff)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    # Uncomment to run locally\n    # mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    # mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 4", "\n    if len(numbers) == 0:\n        return 0.0\n\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["    if len(numbers) < 2:\n        return numbers\n\n    return [*numbers[:-1], delimeter, *numbers[-2:]]\n\n\ndef interleave(numbers1: List[int], numbers2: List[int]) -> List[int]:\n    \"\"\" Interleave two lists of numbers\n    >>> interleave([], [])\n    []\n    >>> interleave([1, 2, 3], [4, 5])\n    [1, 4, 2, 5, 3]\n    \"\"\"\n    numbers = [*numbers1, *numbers2]\n    return intersperse(numbers, 0)\n\n\ndef interleave_lists(lists: List[List[int]]) -> List[int]:\n    \"\"\" Interleave all lists of numbers\n    >>> interleave_lists([[], [1, 2, 3], [4, 5]])\n    []\n    >>> interleave_lists([[1, 2, 3], [4, 5], []])\n    [1, 4, 2, 5, 3]\n    \"\"\"\n    numbers = [x for lst in lists for x in lst]\n    return intersperse(numbers, 0)\n\n\ndef interleave_lists_v2(lists: List[List[int]]) -> List[int]:\n    \"\"\" Interleave all lists of numbers\n    >>> interleave_lists_v2([[], [1, 2, 3], [4, 5]])\n    []\n    >>> interleave_lists_v2([[1, 2, 3], [4, 5], []])\n    [1, 4, 2, 5, 3]\n    \"\"\"\n   ", "    if len(numbers) == 0:\n        return numbers\n    result = []\n    for index in range(len(numbers) - 1):\n        result.append(numbers[index])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    print(\"All tests passed.\")\n\n    # print(intersperse([], 4))\n    # print(intersperse([1, 2, 3], 4))\n    # print(intersperse([1, 2, 3], 10))\n    # print(intersperse([1, 2, 3, 4, 5], 10))\n    # print(intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 10))\n    # print(intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 20))\n    # print(intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 30))\n    # print(intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 40))\n    # print(inters", "    return [x for xs in zip(numbers, delimeter * [delimeter]) for x in xs]\n\n\ndef test_intersperse() -> None:\n    assert intersperse([], 4) == []\n    assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]\n    assert intersperse([1, 2, 3, 4], 5) == [1, 5, 2, 5, 3, 5, 4]\n    assert intersperse([1], 4) == [1]\n    assert intersperse([1, 2], 4) == [1, 4, 2]\n    assert intersperse([1, 2, 3, 4, 5, 6], 7) == [1, 7, 2, 7, 3, 7, 4, 7, 5, 7, 6]\n\n\nif __name__ == '__main__':\n    test_intersperse()\n", "    return [i for i in numbers] + [delimeter] * (len(numbers) - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n", "    if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n        return numbers\n    return [numbers[0]] + [delimeter] * (len(numbers) - 2) + [numbers[-1]]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()\n    print(\"Tests passed!\")\n    from time import time\n\n    start = time()\n    test_cases = [\n        [1, 2, 3],\n        [1, 2, 3, 4],\n        [1, 2, 3, 4, 5],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7, 8],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,"], ["    result = []\n    open_paren_count = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_paren_count += 1\n        if char == ')':\n            open_paren_count -= 1\n        if open_paren_count == 0:\n            result.append(0)\n        if char == '(':\n            result[i] = 1 + result[i - 1]\n        if char == ')':\n            result[i] = max(result[i], result[i - 1] - 1)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "    return [len(grp) for grp in paren_string.split() if grp]\n\n\ndef main():\n    import sys\n    args = sys.argv[1:]\n\n    if len(args) == 0:\n        print('Usage: {} FILE [FILE ...]'.format(sys.argv[0]))\n        sys.exit(1)\n\n    for arg in args:\n        try:\n            with open(arg, 'r') as in_file:\n                data = in_file.read()\n        except IOError:\n            print('File {} not found.'.format(arg))\n            sys.exit(1)\n\n        print('Max nesting depth of {} is {}'.format(arg, max(parse_nested_parens(data))))\n\n\nif __name__ == '__main__':\n    main()\n\n# vim: tabstop=", "    return [max(0, len(x) - x.count(')')) for x in paren_string.split()]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    print(parse_nested_parens('(()()) ((())) () ((())()())'))\n    print(parse_nested_parens('(()((()))()(()))'))\n    print(parse_nested_parens('()'))\n    print(parse_nested_parens('((()))(()())(()))'))\n    print(parse_nested_parens('(((())))'))\n    print(parse_nested_parens('((((((((()))))))))))'))\n    print(parse_nested_parens('((()(()()))(()()))'))\n    print(parse_nested_parens('(()()(((())))))()'))\n    print(parse_nested_parens('()()(()(())))))))))()()()()()()()()'))\n    print(parse_nested_parens('(((()))(()()))))))))))())))()(())))'))\n    print(parse_nested_parens('((()))(()())()(()))'))\n    print(parse_nested_parens('()(()()))()()'))\n    print(parse_nested_parens('((()())((()())()))'))\n    print(parse_nested_parens('()(()))()()'))\n    print(parse_nested_parens('()(()))()()'))\n    print(parse_nested_parens('((()(()()))))))'))\n    print(parse_nested_parens('((()(()))()(()))'))\n    print(parse", "    # Your code goes here\n    return [len(list(filter(lambda x: x == ')', paren_string[i:i+j]))) for i, j in zip(range(0, len(paren_string), 3), range(1, 4))]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n", "    # Your code here\n    pass\n\n\ndef test_parse_nested_parens():\n    assert parse_nested_parens(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n    assert parse_nested_parens(\"\") == []\n    assert parse_nested_parens(\"((())\") == [1]\n\n\nif __name__ == '__main__':\n    test_parse_nested_parens()\n\n\n\"\"\"\nSPECS:\n\nTIME COMPLEXITY: O(n)\nSPACE COMPLEXITY: O(1)\n\"\"\"\n\n"], ["    return [string for string in strings if substring in string]\n\n\ndef filter_by_substring_regex(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_regex([], 'a')\n    []\n    >>> filter_by_substring_regex(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    >>> filter_by_substring_regex(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    >>> filter_by_substring_regex(['abc', 'bacd', 'cde', 'array'], 'd')\n    ['bacd', 'array']\n    >>> filter_by_substring_regex(['abc', 'bacd', 'cde', 'array'], 'd+')\n    ['bacd', 'array']\n    >>> filter_by_substring_regex(['abc', 'bacd', 'cde', 'array'], '(a|b)')\n    ['abc', 'bacd']\n    >>> filter_by_substring_regex(['abc', 'bacd', 'cde', 'array'], '(a|b)+')\n    ['abc', 'bacd']\n    >>> filter_by_substring_regex(['abc', 'bacd', 'cde', 'array'], '(a|b)+$')\n    ['bacd']\n    >>> filter_by_substring_regex(['abc', 'bacd', 'cde', 'array'], '(a|b)+$')\n    ['bacd']\n    >>> filter_by_substring_regex", "\n    return [string for string in strings if substring in string]\n\n\ndef filter_by_substring_improved(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_improved([], 'a')\n    []\n    >>> filter_by_substring_improved(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n\n    return [string for string in strings if substring in string]\n\n\ndef filter_by_substring_functional(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_functional([], 'a')\n    []\n    >>> filter_by_substring_functional(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n\n    return list(filter(lambda x: substring in x, strings))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n", "    return [string for string in strings if substring in string]\n\n\ndef filter_by_substring_2(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring.\n    Use 'all' function to avoid using any other loops\n    >>> filter_by_substring_2([], 'a')\n    []\n    >>> filter_by_substring_2(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda x: substring in x, strings))\n\n\ndef filter_by_substring_3(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring.\n    Use 'all' function to avoid using any other loops\n    >>> filter_by_substring_3([], 'a')\n    []\n    >>> filter_by_substring_3(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if all(substring in string)]\n\n\ndef filter_by_substring_4(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring.\n    Use 'all' function to avoid using any other loops\n    >>> filter_by_substring_4([], 'a')\n    []\n    >>> filter_by_substring_4(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(", "\n    return [string for string in strings if substring in string]\n\n\ndef get_substring_count(string: str, substring: str) -> int:\n    \"\"\" Count how many times substring is present in string\n    >>> get_substring_count('', 'a')\n    0\n    >>> get_substring_count('abc', 'a')\n    1\n    >>> get_substring_count('abc', 'ab')\n    1\n    >>> get_substring_count('abc', 'bc')\n    1\n    >>> get_substring_count('abc', 'abc')\n    1\n    >>> get_substring_count('abc', 'bc')\n    1\n    >>> get_substring_count('abc', 'bc')\n    1\n    >>> get_substring_count('abc', 'c')\n    1\n    >>> get_substring_count('abc', 'd')\n    0\n    \"\"\"\n\n    return string.count(substring)\n\n\ndef get_longest_substring(string: str, substrings: List[str]) -> str:\n    \"\"\" Return the longest substring that is present in string\n    >>> get_longest_substring('', ['a'])\n    ''\n    >>> get_longest_substring('abc', [])\n    ''\n    >>> get_longest_substring('abc', ['a'])\n    'a'\n    >>> get_longest_substring('abc', ['a', 'b'])\n    'b'\n    >>> get_longest_substring('abc', ['a', 'bc'])\n    'bc'\n    >>> get_longest_substring('abc', ['a', 'bc', 'c'])\n    'bc'\n    >>> get_longest_substring('abc', ['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n\n   ", "    return [string for string in strings if substring in string]\n\n\ndef filter_by_length(strings: List[str], min_length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that are longer than given min length\n    >>> filter_by_length([], 2)\n    []\n    >>> filter_by_length(['abc', 'bacd', 'cde', 'array'], 2)\n    ['bacd', 'cde', 'array']\n    \"\"\"\n    return [string for string in strings if len(string) > min_length]\n\n\ndef filter_by_longest_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring and are the longest\n    >>> filter_by_longest_substring([], 'a')\n    []\n    >>> filter_by_longest_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['array']\n    \"\"\"\n    return [string for string in strings if substring in string and len(string) == max(len(substring), len(string))]\n\n\ndef filter_by_longest_substring_not_containing(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that are the longest and do not contain given substring\n    >>> filter_by_longest_substring_not_containing([], 'a')\n    []\n    >>> filter_by_longest_substring_not_containing(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc']\n    \"\"\"\n    return [string for string in strings if len(string) == max"], ["\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n\n    try:\n        numbers = [int(n) for n in input(\"Enter numbers: \").split()]\n        print(f\"Sum: {sum_product(numbers)[0]}, Product: {sum_product(numbers)[1]}\")\n    except ValueError as e:\n        print(e)\n    except TypeError as e:\n        print(e)\n    except IndexError as e:\n        print(e)\n    except Exception as e:\n        print(e)\n", "    sum_result = 0\n    product_result = 1\n\n    for number in numbers:\n        sum_result += number\n        product_result *= number\n\n    return sum_result, product_result\n\n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(sum_product([1, 2, 3, 4]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert sum_product([1, 2, 3, 4]) == (10, 24)\n    assert sum_product([]) == (0, 1)\n    print(\"Coding", "    return sum(numbers), reduce(lambda x, y: x * y, numbers, 1)\n\n\ndef is_prime(number: int) -> bool:\n    \"\"\" Checks if a number is prime.\n    >>> is_prime(2)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(10)\n    False\n    \"\"\"\n    for x in range(2, number):\n        if number % x == 0:\n            return False\n    return True\n\n\ndef prime_factors(number: int) -> List[int]:\n    \"\"\" Return a list of prime factors of a number.\n    >>> prime_factors(10)\n    [2, 5]\n    >>> prime_factors(9)\n    [3]\n    \"\"\"\n    factors = []\n    while number > 1:\n        for x in range(2, number + 1):\n            if number % x == 0:\n                factors.append(x)\n                number = number // x\n                break\n    return factors\n\n\ndef find_factors(number: int) -> List[Tuple[int, int]]:\n    \"\"\" Return a list of tuples with prime factors and their exponents.\n    >>> find_factors(10)\n    [(2, 1), (5, 1)]\n    >>> find_factors(9)\n    [(3, 1)]\n    >>> find_factors(1000)\n    [(2, 3), (5, 3)]\n    >>> find_factors(10000)\n    [(2", "    sum_ = 0\n    prod = 1\n\n    for i in numbers:\n        sum_ += i\n        prod *= i\n\n    return sum_, prod\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n\n    print(sum_product([]))\n    print(sum_product([1, 2, 3, 4]))\n    print(sum_product([-1, -2, -3, -4]))\n    print(sum_product([1, -2, 3, -4]))\n    print(sum_product([1, 2, -3, 4]))\n    print(sum_product([-1, 2, -3, 4]))\n    print(sum_product([1, 2, 3, -4]))\n    print(sum_product([-1, -2, -3, -4]))\n    print(sum_product([-1, -2, -3, 4]))\n    print(sum_product([-1, 2, -3, 4]))\n    print(sum_product([1, -2, 3, -4]))\n    print(sum_product([1, -2, -3, 4]))\n    print(sum_product([-1, 2, 3, 4]))\n    print(sum_product([1, -2, 3, -4]))\n    print(sum_product([-1, -2, 3, -4]))\n    print(sum_product([-1, -2, -3, 4]))\n    print(sum_product([-1, 2", "    return (sum(numbers), reduce(lambda a, b: a * b, numbers, 1))\n\n\ndef sum_product_2(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_2([])\n    (0, 1)\n    >>> sum_product_2([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    return sum(numbers), reduce(lambda a, b: a * b, numbers, 1)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n"], ["    max_so_far = numbers[0]\n    res = [max_so_far]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n        res.append(max_so_far)\n    return res\n\n\ndef get_max_gain_from_rolling_max(rolling_max: List[int]) -> int:\n    \"\"\" Given a list of rolling maximum, get the maximum gain one could achieve by buying one stock at the\n    beginning and selling it at the end.\n    >>> get_max_gain_from_rolling_max([1, 2, 3, 2, 3, 4, 2])\n    4\n    \"\"\"\n    max_gain = 0\n    for i in range(1, len(rolling_max)):\n        max_gain = max(max_gain, rolling_max[i] - rolling_max[i - 1])\n    return max_gain\n\n\ndef get_max_gain_from_prices(prices: List[int]) -> int:\n    \"\"\" Given a list of prices, get the maximum gain one could achieve by buying one stock at the beginning and\n    selling it at the end.\n    >>> get_max_gain_from_prices([1, 2, 3, 2, 3, 4, 2])\n    4\n    >>> get_max_gain_from_prices([1, 2, 3, 2, 3, 4, 1])\n    3\n    \"\"\"\n    rolling_max = rolling_max(prices)\n    return get_max_gain", "    res = []\n    max_so_far = float(\"-inf\")\n    for n in numbers:\n        max_so_far = max(max_so_far, n)\n        res.append(max_so_far)\n    return res\n\n\ndef find_pairs_with_sum(numbers: List[int], sum: int) -> List[Tuple[int, int]]:\n    \"\"\"Find all pairs in the given list of integers where the sum of the two numbers is equal to the given\n    sum, and return a list of pairs, each pair being a tuple of the form (a, b) where a is the index of the\n    first number in the pair and b is the index of the second number.\n    >>> find_pairs_with_sum([1, 2, 3, 4, 5], 3)\n    [(0, 2), (1, 3)]\n    \"\"\"\n    pairs = []\n    for idx, num in enumerate(numbers):\n        other = sum - num\n        if other in numbers[idx + 1 :]:\n            pairs.append((idx, numbers[idx + 1 :].index(other) + idx + 1))\n    return pairs\n\n\ndef count_inversions(numbers: List[int]) -> int:\n    \"\"\"Count the number of inversions in the given list of integers, where an inversion is defined as two elements\n    that are out of order with respect to one another.\n    >>> count_inversions([1, 2, 3, 4, 5])\n    0\n    >>> count_inversions([5, 4, 3, 2, 1])\n    10\n    \"\"\"\n    if len(numbers) <= 1:\n        return 0\n   ", "    result: List[int] = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(numbers[i], result[i - 1]))\n    return result\n\n\ndef merge_sort(numbers: List[int]) -> List[int]:\n    \"\"\" Merge sort algorithm implementation\n\n    >>> merge_sort([2, 1, 4, 3])\n    [1, 2, 3, 4]\n    >>> merge_sort([1, 2, 3, 4])\n    [1, 2, 3, 4]\n    \"\"\"\n    if len(numbers) <= 1:\n        return numbers\n    mid = len(numbers) // 2\n    left = numbers[:mid]\n    right = numbers[mid:]\n    return merge(merge_sort(left), merge_sort(right))\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    \"\"\" Merge algorithm implementation\n\n    >>> merge([1, 3, 5], [2, 4, 6])\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    result = []\n    while len(left) and len(right):\n        if left[0] < right[0]:\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n    result += left + right\n    return result\n\n\ndef quick_sort(numbers: List[int]) -> List[int]:\n    \"\"\" Quick sort algorithm implementation\n\n    >>> quick_sort([2, 1, 4, 3])\n    [1, 2, 3, ", "    if len(numbers) == 0:\n        return numbers\n    rolling_max = [numbers[0]]\n    for i in range(1, len(numbers)):\n        rolling_max.append(max(rolling_max[-1], numbers[i]))\n    return rolling_max\n\n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 1, 1, 2, 2, 2, 2]\n    \"\"\"\n    if len(numbers) == 0:\n        return numbers\n    rolling_min = [numbers[0]]\n    for i in range(1, len(numbers)):\n        rolling_min.append(min(rolling_min[-1], numbers[i]))\n    return rolling_min\n\n\ndef moving_average(numbers: List[int], window: int) -> List[float]:\n    \"\"\" From a given list of integers and a window, generate a list of moving average\n    values for each element in the list.\n    >>> moving_average([1, 2, 3, 2, 3, 4, 2], 2)\n    [1.5, 2.0, 2.5, 2.5, 3.5, 4.0, 3.0]\n    \"\"\"\n    moving_average = []\n    for i in range(len(numbers)):\n        moving_average.append(sum(numbers[i:i + window]) / window)\n    return moving_average\n\n\ndef", "    max_list = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_list.append(max(max_list[-1], numbers[i]))\n    return max_list\n\n\ndef rolling_max_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max_min([1, 2, 3, 2, 3, 4, 2])\n    [(1, 2), (2, 3), (3, 3), (3, 4), (4, 2)]\n    \"\"\"\n    max_list = [numbers[0]]\n    min_list = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_list.append(max(max_list[-1], numbers[i]))\n        min_list.append(min(min_list[-1], numbers[i]))\n    return list(zip(max_list, min_list))\n\n\ndef rolling_max_min_index(numbers: List[int]) -> List[Tuple[int, int]]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max_min_index([1, 2, 3, 2, 3, 4, 2])\n    [(0, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 2)]\n    \"\"\"\n    max_list = [numbers[0]]\n    min_list = [numbers[0]]\n    for"], ["    # find the longest postfix that is a palindrome\n    postfix = string[::-1]\n    while not is_palindrome(postfix):\n        postfix = postfix[:-1]\n    # append reverse of prefix to the end of the string\n    prefix = string[:-len(postfix)]\n    return prefix + postfix[::-1]\n\n\ndef main() -> None:\n    \"\"\" See docstring for make_palindrome function. \"\"\"\n    # test cases\n    test_cases = [\n        '',\n        'catac',\n        'cata',\n        'c',\n        'ac',\n        'ca',\n        'a',\n    ]\n    for test_case in test_cases:\n        result = make_palindrome(test_case)\n        print(f'make_palindrome(\"{test_case}\")'\n              f' = \"{result}\"')\n\n\nif __name__ == \"__main__\":\n    main()\n\n\"\"\"\nTODO:\n- check if the string is already a palindrome\n- find the longest postfix that is a palindrome\n- append reverse of prefix to the end of the string\n\n---\n\nAlternative solution using regex:\n\nimport re\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n", "    if not string or is_palindrome(string):\n        return string\n    prefix = get_longest_prefix(string)\n    postfix = get_longest_postfix(string)\n    return string + postfix[::-1]\n\n\ndef get_longest_prefix(string: str) -> str:\n    \"\"\" Find the longest prefix of a given string that is a palindrome \"\"\"\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(prefix + string[i:]):\n            prefix += string[i]\n        else:\n            break\n    return prefix\n\n\ndef get_longest_postfix(string: str) -> str:\n    \"\"\" Find the longest postfix of a given string that is a palindrome \"\"\"\n    postfix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:len(string) - i]):\n            postfix = string[len(string) - i:]\n        else:\n            break\n    return postfix\n\n\ndef main():\n    print(make_palindrome(''))\n    print(make_palindrome('cat'))\n    print(make_palindrome('cata'))\n    print(make_palindrome('abc'))\n    print(make_palindrome('abba'))\n    print(make_palindrome('a'))\n    print(make_palindrome", "    if not is_palindrome(string):\n        for i in range(len(string), 0, -1):\n            if is_palindrome(string[:i]):\n                return string[:i] + string[i:][::-1]\n\n    return string\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n\n    import sys\n\n    for line in sys.stdin.readlines():\n        line = line.strip()\n        if line == '':\n            break\n        print(make_palindrome(line))\n\n", "\n    # Base cases\n    if string == '':\n        return ''\n\n    # Recursive cases\n    if is_palindrome(string):\n        return string\n\n    # Longest prefix of the string that is a palindrome\n    longest_palindrome_prefix = make_palindrome(string[:-1])\n    # Suffix of the string that is a palindrome\n    palindrome_suffix = string[-1:]\n    # Reverse of the string prefix\n    reversed_prefix = palindrome_suffix[::-1]\n    # Result string\n    result = longest_palindrome_prefix + reversed_prefix\n\n    return result\n\n\ndef main() -> None:\n    \"\"\" Main function \"\"\"\n\n    # Input\n    string = input()\n\n    # Process\n    result = make_palindrome(string)\n\n    # Output\n    print(result)\n\n\nif __name__ == '__main__':\n    main()\n", "    if not is_palindrome(string):\n        # find the longest postfix that is a palindrome\n        postfix = string[::-1]\n        while not is_palindrome(postfix):\n            postfix = postfix[1:]\n        prefix = postfix[1:]\n        # append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n        return string + prefix[::-1]\n    return string\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"], ["    if len(a) != len(b):\n        raise ValueError('Input strings must have the same length')\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n\n\ndef string_xor_list(strings: List[str]) -> str:\n    \"\"\" Input is a list of strings. Perform binary XOR on all these inputs and return result also as a string.\n    >>> string_xor_list(['010', '110', '101'])\n    '011'\n    \"\"\"\n    if len(strings) == 0:\n        raise ValueError('Input list must have at least one string')\n    result = strings[0]\n    for s in strings[1:]:\n        result = string_xor(result, s)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n    input = ['010', '110', '101']\n    print('Input:', input)\n    print('Result:', string_xor_list(input))\n", "    if len(a) != len(b):\n        raise ValueError(\"Input lengths do not match\")\n\n    result = \"\"\n    for i, j in zip(a, b):\n        result += str(int(i) ^ int(j))\n    return result\n\n\ndef string_xor_list(lst: List[str]) -> str:\n    \"\"\" Input is a list of strings consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor_list(['010', '110'])\n    '100'\n    \"\"\"\n    if len(lst) == 0:\n        return \"\"\n    result = lst[0]\n    for i in lst[1:]:\n        result = string_xor(result, i)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    # print(string_xor('010', '110'))\n    # print(string_xor_list(['010', '110']))\n\n    lst = [\"001\", \"100\", \"111\", \"011\"]\n    print(string_xor_list(lst))\n    lst = [\"010\", \"110\"]\n    print(string_xor_list(lst))\n    lst = [\"01010\", \"11111\"]\n    print(string_xor_list(lst))\n    lst = [\"001\", \"110\", \"111\", \"011\"]\n    print(string_xor_list(lst))\n    lst = [\"1111111111\", \"0000", "    return \"\".join(map(lambda a, b: str(int(a) ^ int(b)), a, b))\n\n\ndef string_xor_alt(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return \"\".join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n\ndef string_xor_alt2(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return \"\".join([str(int(a) ^ int(b)) for a, b in zip(a, b)])\n\n\ndef string_xor_alt3(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return \"\".join(map(lambda a, b: str(int(a) ^ int(b)), a, b))\n\n\ndef string_xor_alt4(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and ", "    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n\ndef string_xor_list(strings: List[str]) -> str:\n    \"\"\" Perform binary XOR on all the strings in the list and return result as a string.\n    >>> string_xor_list(['010', '110', '101'])\n    '100'\n    \"\"\"\n    return string_xor(*strings)\n\n\ndef string_xor_list_reversed(strings: List[str]) -> str:\n    \"\"\" Perform binary XOR on all the strings in the list in reverse order and return result as a string.\n    >>> string_xor_list_reversed(['010', '110', '101'])\n    '100'\n    \"\"\"\n    return string_xor_list(strings[::-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n    # from time import perf_counter\n    #\n    # start = perf_counter()\n    #\n    # string_xor_list_reversed(['010', '110', '101'])\n    #\n    # end = perf_counter()\n    #\n    # print(f'{end - start:.4f}')\n\n    # from time import perf_counter\n    #\n    # start = perf_counter()\n    #\n    # string_xor_list_reversed(['010', '110', '101'])\n    #\n    # end = perf_counter()\n    #\n    # print(f'{end - start:.4f}')\n\n    # from time import perf_counter\n    #\n", "    if len(a) != len(b):\n        raise ValueError('Incorrect length of the strings')\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '1':\n            result += '0'\n        elif a[i] == '0' and b[i] == '0':\n            result += '0'\n        else:\n            result += '1'\n    return result\n\n\ndef string_xor_v2(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor_v2('010', '110')\n    '100'\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError('Incorrect length of the strings')\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '1':\n            result += '0'\n        elif a[i] == '0' and b[i] == '0':\n            result += '0'\n        else:\n            result += '1'\n    return result\n\n\ndef string_xor_v3(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor_v3('010', '110')\n    '100'\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError('Incorrect"], ["\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n        elif len(string) == len(longest_string) and string < longest_string:\n            longest_string = string\n    return longest_string\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "    if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n\n    longest_str = strings[0]\n    for str_ in strings:\n        if len(str_) > len(longest_str):\n            longest_str = str_\n    return longest_str\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    # import cProfile\n    # cProfile.run(\"longest([])\")\n    # cProfile.run(\"longest(['a', 'b', 'c'])\")\n    # cProfile.run(\"longest(['a', 'bb', 'ccc'])\")\n    # cProfile.run(\"longest(['a', 'bb', 'ccc', 'dddd', 'eeee', 'ffff', 'gggg'])\")\n\n    # import pstats\n    # pstats.Stats(\"profiling.stats\").strip_dirs().sort_stats(\"tottime\").print_stats()\n\n    # import pstats\n    # pstats.Stats(\"profiling.stats\").sort_stats(\"cumulative\").print_stats()\n\n    # import pstats\n    # pstats.Stats(\"profiling.stats\").sort_stats(\"cumulative\").print_stats()\n\n    # import pstats\n    # pstats.Stats(\"profiling.stats\").sort_stats(\"tottime\").print_stats()\n\n    # import pstats\n    # pstats.Stats(\"profiling.stats\").sort_stats(\"time\").print_stats()\n\n    # import pstats\n    # pstats.Stats(\"profiling.stats\").sort_stats(\"time\").print_stats(10)", "\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n        elif len(s) == len(longest_str):\n            longest_str = s\n    return longest_str\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n\ndef longest_v2(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest_v2([])\n\n    >>> longest_v2(['a', 'b', 'c'])\n    'a'\n    >>> longest_v2(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n        elif len(s) == len(longest_str):\n            longest_str = s\n    return longest_str\n\n\ndef longest_v3(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest_v3([])\n\n    >>> longest_v3(['a', 'b', 'c'])\n    'a'\n    >>> longest_", "    if len(strings) == 0:\n        return None\n\n    return max(strings, key=len)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n# 04_longest.py\n#!/usr/bin/env python3\n#\n# def longest(strings: List[str]) -> Optional[str]:\n#     \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n#     strings of the same length. Return None in case the input list is empty.\n#     >>> longest([])\n#\n#     >>> longest(['a', 'b', 'c'])\n#     'a'\n#     >>> longest(['a', 'bb', 'ccc'])\n#     'ccc'\n#     \"\"\"\n#     if len(strings) == 0:\n#         return None\n#\n#     return max(strings, key=len)\n#\n#\n# if __name__ == '__main__':\n#     import doctest\n#     doctest.testmod()\n#\n#\n# 04_longest.py\n# #!/usr/bin/env python3\n#\n# def longest(strings: List[str]) -> Optional[str]:\n#     \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n#     strings of the same length. Return None in case the input list is empty.\n#     >>> longest([])\n#\n#     >>> longest(['a', 'b', 'c'])\n#     'a'\n#     >>> longest(['a', 'bb', 'ccc'])\n#     'ccc'\n#     \"\"\"\n#     if len(strings) == 0", "    pass\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n#     def longest(strings: List[str]) -> Optional[str]:\n#         \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n#         strings of the same length. Return None in case the input list is empty.\n#         >>> longest([])\n#\n#         >>> longest(['a', 'b', 'c'])\n#         'a'\n#         >>> longest(['a', 'bb', 'ccc'])\n#         'ccc'\n#         \"\"\"\n#         if len(strings) == 0:\n#             return None\n#         else:\n#             longest_str = strings[0]\n#             for str in strings:\n#                 if len(str) > len(longest_str):\n#                     longest_str = str\n#             return longest_str\n#\n#\n#\n# def longest(strings: List[str]) -> Optional[str]:\n#     \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n#     strings of the same length. Return None in case the input list is empty.\n#     >>> longest([])\n#\n#     >>> longest(['a', 'b', 'c'])\n#     'a'\n#     >>> longest(['a', 'bb', 'ccc'])\n#     'ccc'\n#     \"\"\"\n#     # if len(strings) == 0:\n#     #     return None\n#     # else:\n#     #     longest_str = strings[0]\n#     #     for str in strings:\n#     #         if len(str) > len(longest_str):"], ["    while b:\n        a, b = b, a % b\n    return a\n\n\ndef gcd_recursively(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b using recursion\n    >>> gcd_recursively(3, 5)\n    1\n    >>> gcd_recursively(25, 15)\n    5\n    \"\"\"\n    return b if a == b else gcd_recursively(b, a % b)\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return (a * b) // greatest_common_divisor(a, b)\n\n\ndef lcm_recursively(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b using recursion\n    >>> lcm_recursively(3, 5)\n    15\n    >>> lcm_recursively(25, 15)\n    75\n    \"\"\"\n    return a * b // gcd_recursively(a, b)\n\n\ndef test_gcd():\n    \"\"\" Check that greatest common divisor function returns correct result \"\"\"\n    assert greatest_common_divisor(3, 5) == 1\n    assert greatest_common_divisor(3, 15) == 3\n    assert greatest_common_divisor(15, 3) == 3\n    assert greatest_common_divisor(15, 15) == 15\n    assert greatest_common_div", "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef is_multiple(a: int, b: int) -> bool:\n    \"\"\" Returns True if a is multiple of b\n    >>> is_multiple(12, 3)\n    True\n    >>> is_multiple(25, 15)\n    False\n    \"\"\"\n\n    return greatest_common_divisor(a, b) == a\n\n\ndef is_coprime(a: int, b: int) -> bool:\n    \"\"\" Returns True if a and b are coprime\n    >>> is_coprime(12, 3)\n    False\n    >>> is_coprime(25, 15)\n    True\n    \"\"\"\n\n    return greatest_common_divisor(a, b) == 1\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(12, 3)\n    12\n    >>> least_common_multiple(25, 15)\n    15\n    \"\"\"\n\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef least_common_multiple_all(*args) -> int:\n    \"\"\" Return a least common multiple of a list of integers\n    >>> least_common_multiple_all(12, 3, 5)\n    30\n    >>> least_common_multiple_all(12, 3, 5, 7, 11)\n    210\n    \"\"\"\n\n    return reduce(lambda x, y: least_common_multiple(x, y), args)\n\n\ndef factor(n: int) -> list:\n    \"\"\" Return a list of", "    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef main() -> None:\n    \"\"\" Print greatest common divisors of every pair of natural numbers\n    \"\"\"\n    n = int(input())\n    for i in range(n):\n        a, b = map(int, input().split())\n        print(greatest_common_divisor(a, b))\n\n\nif __name__ == '__main__':\n    main()\n", "    while a != b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\n\ndef is_coprime(a: int, b: int) -> bool:\n    \"\"\" Check if two integers a and b are coprime\n    >>> is_coprime(3, 5)\n    True\n    >>> is_coprime(25, 15)\n    False\n    \"\"\"\n    return greatest_common_divisor(a, b) == 1\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if integer n is a prime number\n    >>> is_prime(3)\n    True\n    >>> is_prime(25)\n    False\n    \"\"\"\n    return all(map(lambda x: is_coprime(n, x), range(2, n)))\n\n\ndef is_composite(n: int) -> bool:\n    \"\"\" Check if integer n is a composite number\n    >>> is_composite(3)\n    False\n    >>> is_composite(25)\n    True\n    \"\"\"\n    return not is_prime(n)\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of all divisors of n\n    >>> factorize(3)\n    [1, 3]\n    >>> factorize(25)\n    [1, 5, 25]\n    \"\"\"\n    return list(range(1, n + 1))\n\n\ndef is_perfect_square(n: int) -> bool:\n    \"\"\" Check if integer n is a perfect square number\n    >>> is_perfect_square(3)\n    False\n    >>> is_perfect_square(25)\n    True\n    \"\"\"\n    return is_square(sqrt(n", "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Checks if number n is prime\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(20)\n    False\n    \"\"\"\n    if n % 2 == 0 and n > 2:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef get_prime_factors(n: int) -> list:\n    \"\"\" Return a list of all prime factors of a given number n\n    >>> get_prime_factors(100)\n    [2, 2, 5, 5]\n    >>> get_prime_factors(11)\n    [11]\n    >>> get_prime_factors(13)\n    [13]\n    \"\"\"\n    prime_factors = []\n    while n > 1:\n        p = 2\n        while p * p <= n:\n            if n % p == 0:\n                n //= p\n                prime_factors.append(p)\n            else:\n                p += 1\n        prime_factors.append(n)\n    return prime_factors\n\n\ndef is_amicable_numbers(a: int, b: int) -> bool:\n    \"\"\" Checks if two numbers a and b are amicable\n    >>> is_amicable_numbers(11, 22)\n    True\n    >>> is_amicable_numbers(12, 2"], ["    return [string[:i] for i in range(1, len(string) + 1)]\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n    \"\"\"\n    return [string[i:] for i in range(len(string))]\n\n\ndef all_substrings(string: str) -> List[str]:\n    \"\"\" Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c']\n    \"\"\"\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return True if the input string is a palindrome, False otherwise.\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('a')\n    True\n    >>> is_palindrome('aa')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abc')\n    False\n    >>> is_palindrome('abbc')\n    False\n    \"\"\"\n    return string == string[::-1]\n\n\ndef is_permutation(string: str, string2: str) -> bool:\n    \"\"\" Return True if the input strings are permutations of each other, False otherwise.\n    >>> is_permutation('abc', 'acb')\n    True\n    >>> is_permutation('abc', 'acb')\n    True\n    >>> is_permutation('abc", "    return [string[0:i] for i in range(len(string) + 1)]\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n    \"\"\"\n    return [string[i:] for i in range(len(string) + 1)]\n\n\ndef get_all_words(string: str, prefix: str = None, suffix: str = None) -> List[str]:\n    \"\"\" Return all substrings from shortest to longest of the input string\n    >>> get_all_words('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \"\"\"\n    if prefix is None:\n        prefix = all_prefixes(string)\n    if suffix is None:\n        suffix = all_suffixes(string)\n    return [f'{prefix}{word}{suffix}' for word in string.split('')]\n\n\ndef count_letters(string: str) -> int:\n    \"\"\" Return number of letters in the input string\n    >>> count_letters('abc')\n    3\n    \"\"\"\n    return len(string.replace(' ', ''))\n\n\ndef count_words(string: str) -> int:\n    \"\"\" Return number of words in the input string\n    >>> count_words('abc')\n    1\n    \"\"\"\n    return len(string.split(' '))\n\n\ndef remove_whitespace(string: str) -> str:\n    \"\"\" Return input string without any whitespace\n    >>> remove_whitespace('abc')\n    'abc'\n    \"\"\"\n    return string.replace(' ', '')\n\n\ndef count_syllables(string: str) -> int:\n    \"\"\" Return number of syllables in the input string\n    >>> count_", "    return [string[0:i] for i in range(len(string) + 1)]\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['bc', 'c', '']\n    \"\"\"\n    return [string[len(string) - i:] for i in range(len(string) + 1)]\n\n\ndef all_substrings(string: str) -> List[str]:\n    \"\"\" Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c']\n    \"\"\"\n    return [string[i:j] for i in range(len(string) + 1) for j in range(i, len(string) + 1)]\n\n\ndef longest_common_substring(string1: str, string2: str) -> str:\n    \"\"\" Return longest common substring of the input strings\n    >>> longest_common_substring('abcde', 'axbyez')\n    'abc'\n    \"\"\"\n    m = len(string1)\n    n = len(string2)\n    L = [[0 for i in range(n + 1)] for j in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif string1[i - 1] == string2[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - ", "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['bc', 'c', '']\n    \"\"\"\n    suffixes = []\n    for i in range(len(string) + 1):\n        suffixes.append(string[i:])\n    return suffixes\n\n\ndef all_infixes(string: str) -> List[str]:\n    \"\"\" Return list of all infixes from shortest to longest of the input string\n    >>> all_infixes('abc')\n    ['a', 'ab', 'abc', 'bc', 'c']\n    \"\"\"\n    infixes = []\n    for i in range(len(string) - 1):\n        infixes.append(string[i: i + 2])\n    return infixes\n\n\ndef common_prefix(s1: str, s2: str) -> str:\n    \"\"\" Return common prefix of two strings\n    >>> common_prefix('abcd', 'abcde')\n    'abc'\n    \"\"\"\n    min_len = min(len(s1), len(s2))\n    for i in range(min_len):\n        if s1[i] != s2[i]:\n            return s1[:i]\n    return s1[:min_len]\n\n\ndef common_suffix(s1: str, s2: str) -> str:\n    \"\"\" Return common suffix of two strings\n    >>> common_suffix('abcd', 'abce')\n    'd'\n    \"\"\"\n    min_len = min(len(s1), len(s2))\n    for i in range(min", "    return [string[:i + 1] for i in range(len(string))]\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n    \"\"\"\n    return [string[len(string) - i:] for i in range(len(string))]\n\n\ndef all_substrings(string: str) -> List[str]:\n    \"\"\" Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n    ['a', 'b', 'c', 'ab', 'bc', 'abc']\n    \"\"\"\n    return [string[i:j + 1] for i in range(len(string)) for j in range(i, len(string))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    # print(all_prefixes('abc'))\n    # print(all_suffixes('abc'))\n    # print(all_substrings('abc'))\n\n    # print(all_prefixes('abc'))\n    # print(all_suffixes('abc'))\n    # print(all_substrings('abc'))\n\n    # print(all_prefixes('abc'))\n    # print(all_suffixes('abc'))\n    # print(all_substrings('abc'))\n\n    # print(all_prefixes('abc'))\n    # print(all_suffixes('abc'))\n    # print(all_substrings('abc'))\n\n    # print(all_prefixes('abc'))\n    # print(all_suffixes('abc'))\n    # print(all_substrings('abc'))\n\n    # print(all_prefixes('abc'))\n    #"], ["\n    # Your code here\n    return ' '.join([str(i) for i in range(n+1)])\n\n\ndef main() -> None:\n    \"\"\" Main function \"\"\"\n\n    # Input n\n    n = int(input())\n\n    # Print string sequence\n    print(string_sequence(n))\n\n\nif __name__ == '__main__':\n    main()\n", "    return \" \".join(str(n) for n in range(n+1))\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n\n\"\"\"\nTask\n\nWrite a function that returns a string containing space-delimited numbers starting from 0 upto n inclusive.\n\n\"\"\"\n\n\n\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return \" \".join(str(n) for n in range(n+1))\n\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n\n\"\"\"\nTask\n\nWrite a function that returns a string containing space-delimited numbers starting from 0 upto n inclusive.\n\n\"\"\"\n\n\n\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return \" \".join(str(n) for n in range(n+1))\n\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n\n\"\"\"\nTask\n\nWrite a function that returns a string containing space-delimited numbers starting from 0 upto n inclusive.\n\n\"\"\"\n\n\n\n\ndef string_", "    return ' '.join(str(x) for x in range(n + 1))\n\n\nif __name__ == '__main__':\n    print(string_sequence(5))\n", "    return \" \".join(str(i) for i in range(n + 1))\n\n\ndef count_words(text: str) -> int:\n    \"\"\" Return the number of words in a given string.\n    >>> count_words('')\n    0\n    >>> count_words('one')\n    1\n    >>> count_words('one two')\n    2\n    \"\"\"\n    return len(text.split())\n\n\ndef capitalize_first_letter(s: str) -> str:\n    \"\"\" Return a string with first letter in uppercase.\n    >>> capitalize_first_letter('string')\n    'String'\n    >>> capitalize_first_letter('string sequence')\n    'String sequence'\n    \"\"\"\n    if len(s) == 0:\n        return s\n    return s[0].upper() + s[1:]\n\n\ndef get_index_of_word(s: str, word: str) -> int:\n    \"\"\" Return the index of a word in a string.\n    >>> get_index_of_word('string', 'string')\n    0\n    >>> get_index_of_word('string sequence', 'string')\n    0\n    >>> get_index_of_word('string sequence', 'sequence')\n    6\n    \"\"\"\n    return s.find(word)\n\n\ndef check_substring(s: str, word: str) -> bool:\n    \"\"\" Return whether a given string contains a given word as a substring.\n    >>> check_substring('string', 'string')\n    True\n    >>> check_substring('string sequence', 'string')\n    True\n    >>> check_substring('string sequence', 'sequence')\n    True\n    >>> check_substring('string sequence', 'foo')\n    False\n    \"\"\"\n    return word in s\n\n\ndef check_first_and_last_letter(s: str, letter: str)", "    return ' '.join([str(i) for i in range(n + 1)])\n\n\nif __name__ == '__main__':\n    n = int(input().strip())\n    print(string_sequence(n))\n"], ["    return len(set(string.lower()))\n\n\nif __name__ == '__main__':\n    string = input()\n    print(count_distinct_characters(string))\n", "    return len(set(string.lower()))\n\n\n# --------------------------------------------------------------------------------\n\n\ndef split_by_capital_letters(string: str) -> list:\n    \"\"\" Given a string, split it into substrings, where each substring is either\n        a lowercase character or a capital letter.\n    >>> split_by_capital_letters('Jerry')\n    ['J', 'e', 'r', 'r', 'y']\n    >>> split_by_capital_letters('Jerry, the Brave')\n    ['J', 'e', 'r', 'r', 'y', ',', ' ', 't', 'h', 'e', ' ', 'B', 'r', 'a', 'v', 'e']\n    \"\"\"\n    return re.findall(r'([A-Z]+|[a-z]+)', string)\n\n\n# --------------------------------------------------------------------------------\n\n\ndef split_by_lengths(string: str, *lengths: int) -> list:\n    \"\"\" Given a string and a list of lengths, split the string into substrings,\n        where each substring has one of the lengths.\n    >>> split_by_lengths('Jerry', 1, 2, 3)\n    ['J', 'e', 'r', 'r', 'y']\n    >>> split_by_lengths('Jerry', 1, 2, 4)\n    ['J', 'e', 'rry']\n    >>> split_by_lengths('Jerry', 1, 3, 4)\n    ['J', 'erry']\n    \"\"\"\n    if not lengths:\n        return [string]\n\n    substrings = []\n    for length in lengths:\n        substrings.extend(split_by_lengths(string, *lengths[1:]))\n        for", "\n    return len(set(string.lower()))\n\n\ndef has_duplicates(string: str) -> bool:\n    \"\"\" Given a string, return True if there are any duplicates (regardless of case) and False otherwise\n    >>> has_duplicates('xyzXYZ')\n    True\n    >>> has_duplicates('Jerry')\n    False\n    >>> has_duplicates('')\n    False\n    \"\"\"\n\n    return len(string) != len(set(string.lower()))\n\n\ndef has_unique_chars(string: str) -> bool:\n    \"\"\" Given a string, return True if it contains only unique characters (regardless of case) and False otherwise\n    >>> has_unique_chars('xyzXYZ')\n    False\n    >>> has_unique_chars('Jerry')\n    True\n    >>> has_unique_chars('')\n    True\n    \"\"\"\n\n    return len(string) == len(set(string.lower()))\n\n\ndef has_unique_chars_v2(string: str) -> bool:\n    \"\"\" Given a string, return True if it contains only unique characters (regardless of case) and False otherwise\n    >>> has_unique_chars_v2('xyzXYZ')\n    False\n    >>> has_unique_chars_v2('Jerry')\n    True\n    >>> has_unique_chars_v2('')\n    True\n    \"\"\"\n\n    if not string:\n        return True\n\n    return len(string) == len(set(string.lower()))\n\n\ndef has_unique_chars_v3(string: str) -> bool:\n    \"\"\" Given a string, return True if it contains only unique characters (regardless of case) and False otherwise\n    >>> has_unique_chars_v3('xyzXYZ')\n    False\n    >>> has", "    return len(set(string))\n\n\ndef count_vowels(string: str) -> int:\n    \"\"\" Given a string, find out how many vowels (regardless of case) does it consist of\n    >>> count_vowels('xyzXYZ')\n    0\n    >>> count_vowels('Jerry')\n    2\n    \"\"\"\n    return sum([1 for c in string if c in ['a', 'e', 'i', 'o', 'u']])\n\n\ndef count_consonants(string: str) -> int:\n    \"\"\" Given a string, find out how many consonants (regardless of case) does it consist of\n    >>> count_consonants('xyzXYZ')\n    5\n    >>> count_consonants('Jerry')\n    2\n    \"\"\"\n    return sum([1 for c in string if c not in ['a', 'e', 'i', 'o', 'u']])\n\n\ndef count_even_indexed_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many characters (regardless of case) do they consist of, that are indexed even\n    >>> count_even_indexed_characters('xyzXYZ')\n    6\n    >>> count_even_indexed_characters('Jerry')\n    5\n    \"\"\"\n    return sum([1 for i, c in enumerate(string) if i % 2 == 0])\n\n\ndef count_odd_indexed_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many characters (regardless of case) do they consist of, that are indexed odd\n    >>> count_odd_indexed_characters('xyzXYZ')\n    6\n    >>> count_odd_indexed_characters('Jerry')\n    5\n   ", "    return len(set(string.lower()))\n\n\nif __name__ == '__main__':\n    print(count_distinct_characters('xyzXYZ'))\n    print(count_distinct_characters('Jerry'))\n    print(count_distinct_characters(''))\n    print(count_distinct_characters('abcd'))\n    print(count_distinct_characters('aBCdE'))\n    print(count_distinct_characters('abcd'))\n    print(count_distinct_characters('abCD'))\n    print(count_distinct_characters('aBcD'))\n    print(count_distinct_characters('abcde'))\n    print(count_distinct_characters('ABCDE'))\n    print(count_distinct_characters('AbCdE'))\n    print(count_distinct_characters('abcdEF'))\n    print(count_distinct_characters('abCDfG'))\n    print(count_distinct_characters('aBCDefG'))\n    print(count_distinct_characters('aBCDefG'))\n    print(count_distinct_characters('aBCDefG'))\n    print(count_distinct_characters('aBCDefG'))\n    print(count_distinct_characters('aBCDefG'))\n    print(count_distinct_characters('aBCDefG'))\n    print(count_distinct_characters('aBCDefG'))\n    print(count_distinct_characters('aBCDefG'))\n    print(count_distinct_characters('aBCDefG'))\n    print(count_distinct_characters('aBCDefG'))\n    print(count_distinct_characters('aBCDefG'))\n    print(count_distinct_characters('aBC"], ["    music_string = music_string.replace(\"|\", \"\")\n    music_string = music_string.replace(\"o\", \"4\")\n    music_string = music_string.replace(\".\", \"1\")\n    return [int(x) for x in music_string]\n\n\ndef beats_per_minute(beats_list: List[int]) -> int:\n    \"\"\" Takes a list of beats and returns the number of beats per minute in the music\n    that is represented by this list of beats.\n\n    >>> beats_per_minute([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])\n    80\n    \"\"\"\n    return len(beats_list) / 60\n\n\ndef rhythm_and_beats(music_string: str) -> str:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return string with the rhythm of the music in this format:\n    \"4 2 1 2 2 1 1 1 1 4 4\"\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat", "    music_string = music_string.strip()\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4][music_string.find('o o|') : music_string.find('o o|') + 13]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    print(\"Module 'music' passed all tests.\")\n\n\n# print(parse_music('o o| .| o| o| .| .| .| .| o o'))\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n# print(parse_music('o o| .| o| o| .| .| .| .| o o'))\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n# print(parse_music('o o| .| o| o| .| .| .| .| o o'))\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n# print(parse_music('o o| .| o| o| .|", "    return [4 if c == 'o' else 2 if c == 'o|' else 1 for c in music_string]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n    return [1, 2, 1, 2, 1, 1, 1, 1, 4, 4]\n\n\ndef play_music(music_list: List[int]):\n    \"\"\" This function plays the music. It should play each note for as long as it takes.\n    It does not return anything.\n\n    >>> music_list = [1, 2, 1, 2, 1, 1, 1, 1, 4, 4]\n    >>> play_music(music_list)\n    \"\"\"\n\n\nif __name__ == '__main__':\n    music_list = parse_music('o o| .| o| o| .| .| .| .| o o')\n    play_music(music_list)\n\n    # Uncomment these two lines to see the output (it will be pretty loud though)\n    # import time\n    # time.sleep(1)\n\n    # Output:\n    # o\n    # o\n    # .\n    # o\n    # o\n    # .\n    # .\n    # .\n    # .\n    # o\n    # o\n\n    # You can play with this function by adding and removing music notes.\n    # Try playing \"Amazing grace\" from the \"Let it be\" song.\n\n    # Note: the function can take more than one argument, but for this", "\n    pass\n\n\ndef main():\n    music_string = 'o o| .| o| o| .| .| .| .| o o'\n    print(parse_music(music_string))\n\n\nif __name__ == '__main__':\n    main()\n\n\n\"\"\"\nNotes:\n1. This is a very simple example of parsing a string into a list.\n2. There are a few things you should know about this exercise:\n    * You should probably get rid of all the whitespace from the string before parsing it.\n    * I suggest you to add a parameter to the function which can be used to specify the beat length.\n      I.e. you can parse the music with a beat length of 2 and the function will return a list of 4 2s.\n      You can also parse the music with a beat length of 1 and the function will return a list of 10 1s.\n    * To get rid of whitespace from the string you can use the strip() method on a string.\n      This method returns a copy of the string with leading and trailing whitespace removed.\n    * To get a list of integers from a string you can use the list() constructor.\n      This constructor takes a sequence and returns a list where every element is an element of the sequence.\n    * You can use the len() function to get the length of a list.\n      The len() function returns the length of a sequence or the number of"], ["\n    if len(substring) == 0:\n        return 0\n\n    count = 0\n    index = 0\n\n    while index < len(string):\n        if string[index] == substring[0]:\n            match = True\n            temp_index = index\n            while match and temp_index < len(string) and temp_index < len(substring):\n                if string[temp_index] == substring[temp_index - index]:\n                    match = True\n                    temp_index += 1\n                else:\n                    match = False\n        else:\n            match = False\n\n        if match:\n            count += 1\n            index = temp_index\n        else:\n            index += 1\n\n    return count\n\n\ndef how_many_times_no_overlap(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Don't count overlaping cases.\n    >>> how_many_times_no_overlap('', 'a')\n    0\n    >>> how_many_times_no_overlap('aaa', 'a')\n    1\n    >>> how_many_times_no_overlap('aaaa', 'aa')\n    2\n    \"\"\"\n\n    if len(substring) == 0:\n        return 0\n\n    count = 0\n    index = 0\n\n    while index < len(string):\n        if string[index] == substring[0]:\n            match = True\n            temp_index = index\n            while match and temp_index < len(string) and temp_index < len(substring):\n                if string[temp_index] == substring[temp_index - index]:\n                    match = True\n                    temp_index += 1\n", "    return string.count(substring)\n\n\ndef is_substring(string: str, substring: str) -> bool:\n    \"\"\" Check if the substring is a part of the string.\n    >>> is_substring('', 'a')\n    False\n    >>> is_substring('a', 'a')\n    True\n    >>> is_substring('aaa', 'aa')\n    True\n    >>> is_substring('aaa', 'aaa')\n    True\n    \"\"\"\n    return substring in string\n\n\ndef is_substring_and_count(string: str, substring: str) -> int:\n    \"\"\" Count how many times the substring is a part of the string.\n    >>> is_substring_and_count('', 'a')\n    0\n    >>> is_substring_and_count('a', 'a')\n    1\n    >>> is_substring_and_count('aaa', 'aa')\n    2\n    >>> is_substring_and_count('aaaa', 'aa')\n    3\n    >>> is_substring_and_count('aaaa', 'aaa')\n    1\n    \"\"\"\n    return string.count(substring)\n\n\ndef are_substrings_equal(string: str, substring: str) -> bool:\n    \"\"\" Check if the substring is equal to the part of the string.\n    >>> are_substrings_equal('', 'a')\n    False\n    >>> are_substrings_equal('a', 'a')\n    True\n    >>> are_substrings_equal('aaa', 'aa')\n    False\n    >>> are_substrings_equal('aaaa', 'aa')\n    True\n    >>> are_substrings_equal('aaaa', 'aaa')\n    False\n    \"\"\"\n    return string.startswith(substring)\n\n\ndef are_substrings_equal_", "    return string.count(substring)\n\n\ndef remove_char(string: str, char: str) -> str:\n    \"\"\" Remove a char from a string.\n    >>> remove_char('aaa', 'a')\n    'aa'\n    >>> remove_char('aaa', 'b')\n    'aaa'\n    >>> remove_char('aaaa', 'aa')\n    'aa'\n    >>> remove_char('aabaab', 'aa')\n    'aabaab'\n    >>> remove_char('aabaab', 'a')\n    'abaab'\n    \"\"\"\n    if char not in string:\n        return string\n\n    new_string = ''\n    for i in range(len(string)):\n        if string[i] != char:\n            new_string += string[i]\n\n    return new_string\n\n\ndef remove_chars(string: str, chars: str) -> str:\n    \"\"\" Remove chars from a string.\n    >>> remove_chars('aaa', 'a')\n    'aa'\n    >>> remove_chars('aaa', 'b')\n    'aaa'\n    >>> remove_chars('aaaa', 'aa')\n    'aa'\n    >>> remove_chars('aabaab', 'aa')\n    'aabaab'\n    >>> remove_chars('aabaab', 'a')\n    'abaab'\n    \"\"\"\n    new_string = ''\n    for i in range(len(string)):\n        if string[i] not in chars:\n            new_string += string[i]\n\n    return new_string\n\n\ndef remove_first_char(string: str, char: str) -> str:\n    \"\"\" Remove the first occurrence of a char from a string.\n    >>> remove_first", "    index = 0\n    count = 0\n    while True:\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        index += len(substring)\n        count += 1\n    return count\n\n\ndef longest_substring(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> longest_substring('', 'a')\n    0\n    >>> longest_substring('aaa', 'a')\n    3\n    >>> longest_substring('aaaa', 'aa')\n    3\n    \"\"\"\n    index = 0\n    count = 0\n    while True:\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        index += len(substring)\n        count += 1\n    return count\n\n\ndef get_longest_substring_and_its_count(string: str, substring: str) -> str:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> get_longest_substring_and_its_count('', 'a')\n    (0, '')\n    >>> get_longest_substring_and_its_count('aaa', 'a')\n    (3, 'aaa')\n    >>> get_longest_substring_and_its_count('aaaa', 'aa')\n    (3, 'aaa')\n    \"\"\"\n    index = 0\n    count = 0\n    while True:\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        index += len(substring)\n        count += 1\n    return count, string[index - count * len", "    # TODO Complete the function\n    return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    string = input(\"String: \")\n    substring = input(\"Substring: \")\n    result = how_many_times(string, substring)\n    print(f\"'{string}' occurs {result} times in '{substring}'\")\n\n\n\"\"\"\nSample run:\n\n"], ["    nums = numbers.split(' ')\n    nums.sort()\n    return ' '.join(nums)\n\n\ndef is_palindrome(input_string: str) -> bool:\n    \"\"\" Input is a string containing any number of characters.\n    Return True if the input string is a palindrome, False otherwise\n    >>> is_palindrome('eye')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('redivider')\n    False\n    \"\"\"\n    return input_string == input_string[::-1]\n\n\ndef longest_substring(input_string: str, substring: str) -> int:\n    \"\"\" Input is a string of lowercase alphabetic characters.\n    Return the length of the longest substring of input_string that matches substring exactly.\n    >>> longest_substring('abracadabra', 'abra')\n    3\n    >>> longest_substring('abracadabra', 'ad')\n    1\n    >>> longest_substring('abracadabra', 'adab')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(input_string)):\n        for j in range(i, len(input_string)):\n            if input_string[i:j+1] == substring:\n                count = max(count, j-i+1)\n    return count\n\n\ndef longest_substring_diff(input_string: str, substring: str, diff: int) -> int:\n    \"\"\" Input is a string of lowercase alphabetic characters.\n    Return the length of the longest substring of input_string that matches substring exactly,\n    but where all characters have been replaced by a", "    num = []\n    for x in numbers.split(' '):\n        num.append(int(x))\n\n    num.sort()\n    return \" \".join(str(x) for x in num)\n\n\ndef sort_numbers_2(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_2('three one five')\n    'one three five'\n    \"\"\"\n    num = []\n    for x in numbers.split(' '):\n        num.append(int(x))\n\n    num.sort()\n    return \" \".join(str(x) for x in num)\n\n\ndef sort_words(words: str) -> str:\n    \"\"\" Input is a space-delimited string of words.\n    Return the string with words sorted from smallest to largest\n    >>> sort_words('quick brown fox')\n    'brown fox quick'\n    \"\"\"\n    word = []\n    for x in words.split(' '):\n        word.append(x)\n\n    word.sort()\n    return \" \".join(x for x in word)\n\n\ndef sort_words_2(words: str) -> str:\n    \"\"\" Input is a space-delimited string of words.\n    Return the string with words sorted from smallest to largest\n    >>> sort_words_2('quick brown fox')\n    'brown fox quick'\n    \"\"\"\n    word", "\n    # TODO: Implement a solution\n    return\n\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Check if the string is a palindrome\n    A palindrome is a word, phrase, or sentence that reads the same backward as forward\n    >>> is_palindrome('dad')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('never odd or even')\n    True\n    \"\"\"\n\n    # TODO: Implement a solution\n    return\n\n\ndef is_subsequence(a: str, b: str) -> bool:\n    \"\"\" Check if string a is a subsequence of string b\n    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements\n    >>> is_subsequence('hello', 'hello world')\n    True\n    >>> is_subsequence('world', 'hello world')\n    False\n    \"\"\"\n\n    # TODO: Implement a solution\n    return\n\n\ndef contains_duplicates(numbers: str) -> bool:\n    \"\"\" Check if the string contains duplicate numbers\n    A number can be repeated more than once\n    >>> contains_duplicates('one two two three')\n    True\n    >>> contains_duplicates('one two three')\n    False\n    \"\"\"\n\n    # TODO: Implement a solution\n    return\n\n\ndef get_duplicates(numbers: str) -> str:\n    \"\"\" Get the duplicates in the string\n    A number can be repeated more than once\n    >>> get_duplicates('one two two three')\n    'two two'\n    \"\"\"\n\n    # TODO: Implement a solution\n    return\n\n", "    numbers = numbers.split()\n    numbers.sort()\n    return ' '.join(numbers)\n\n\ndef is_sorted(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return 'yes' if the numbers in the string are sorted in ascending order, or 'no' if they are not.\n    >>> is_sorted('three one five')\n    'no'\n    >>> is_sorted('one two three')\n    'yes'\n    \"\"\"\n    numbers = numbers.split()\n    return 'yes' if numbers == sorted(numbers) else 'no'\n\n\ndef first_occurrence(numbers: str, target: int) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the position of the first occurrence of target in the string,\n    or 'not found' if target is not in the string.\n    >>> first_occurrence('three one five', 3)\n    '2'\n    >>> first_occurrence('three one five', 6)\n    'not found'\n    \"\"\"\n    numbers = numbers.split()\n    index = numbers.index(str(target))\n    return str(index) if str(target) in numbers else 'not found'\n\n\ndef last_occurrence(numbers:", "    return ' '.join(sorted(numbers.split()))\n\n\ndef sort_numbers_2(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_2('three one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split(), key=lambda x: (x[:-1], int(x[-1]))))\n\n\ndef sort_numbers_3(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_3('three one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split(), key=lambda x: (int(x[:-1]), x[-1])))\n\n\ndef sort_numbers_4(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to"], ["    # TODO: Put your code here\n    pass\n\n\nif __name__ == '__main__':\n    from _pytest.python import assert_raises\n\n    def test_find_closest_elements():\n        assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n        assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n        assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 3.0]) == (2.0, 3.0)\n        assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 3.0, 4.0]) == (3.0, 4.0)\n        assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 4.0, 5.0]) == (4.0, 5.0)\n        assert find_closest_elements([1.0, 2", "    if len(numbers) < 2:\n        raise ValueError(\"Not enough numbers to find the closest two\")\n    first = numbers[0]\n    second = numbers[0]\n    for n in numbers[1:]:\n        if abs(n - first) < abs(second - first):\n            second = first\n            first = n\n        elif abs(n - first) == abs(second - first):\n            second = n\n    return first, second\n\n\ndef find_closest_elements_2(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements_2([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements_2([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Not enough numbers to find the closest two\")\n    first = numbers[0]\n    second = numbers[0]\n    for n in numbers[", "    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n\n    return min(numbers, key=lambda x: abs(x - numbers[0]))\n\n\ndef get_closest_numbers(numbers: List[float]) -> List[float]:\n    \"\"\" From a supplied list of numbers, return a list of two numbers that are the closest to each other.\n    >>> get_closest_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    [2.0, 2.2]\n    >>> get_closest_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    [2.0, 2.0]\n    >>> get_closest_numbers([1.0, 2.0, 3.0, 4.0, 5.0])\n    [2.0, 3.0]\n    >>> get_closest_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n    [2.0, 3.0]\n    >>> get_closest_numbers([1.0, 2.0,", "\n    # Find the smallest and largest numbers in the list.\n    minimum = numbers[0]\n    maximum = numbers[0]\n    for number in numbers[1:]:\n        if number < minimum:\n            minimum = number\n        if number > maximum:\n            maximum = number\n\n    # Find the index for each number.\n    indices = [numbers.index(number) for number in numbers]\n\n    # Select the pair of numbers whose indices differ by the least amount.\n    pair = []\n    for index in indices:\n        if indices.count(index) == 1:\n            pair.append(numbers[index])\n\n    return (min(pair), max(pair))\n\n\ndef find_closest_elements_brute_force(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements_brute_force([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements_brute_force([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2", "\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements\")\n\n    min_diff = float(\"inf\")\n    min_index_1 = 0\n    min_index_2 = 1\n    for i, val in enumerate(numbers):\n        for j, other_val in enumerate(numbers):\n            if i == j:\n                continue\n            diff = abs(val - other_val)\n            if diff < min_diff:\n                min_diff = diff\n                min_index_1 = i\n                min_index_2 = j\n    return numbers[min_index_1], numbers[min_index_2]\n\n\nif __name__ == \"__main__\":\n    from pytest import main\n\n    main([__file__])\n"], ["    if not len(numbers):\n        raise ValueError(\"The input list must have at least two elements\")\n    scale = max(numbers) - min(numbers)\n    if scale == 0:\n        raise ValueError(\"The input list must have at least two different elements\")\n    return [(x - min(numbers)) / scale for x in numbers]\n\n\ndef rescale_to_unit_square(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1, while preserving\n    the ratios between the numbers\n    >>> rescale_to_unit_square([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.3333333333333333, 0.6666666666666667, 1.0, 1.0]\n    \"\"\"\n    if not len(numbers):\n        raise ValueError(\"The input list must have at least two elements\")\n    scale = max(numbers) - min(numbers)\n    if scale == 0:\n        raise ValueError(\"The input list must have at least two different elements\")\n    return [(x - min(numbers)) / scale * 1.0 / (len(numbers) - 1) for x in numbers]\n\n\ndef rescale_to_unit_circle(numbers: List[float]) -> List[float]:\n    \"\"\" Given", "    assert len(numbers) >= 2\n    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]\n\n\ndef rescale_to_unit_range(numbers: List[float], range_start: float, range_end: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become range_start and the largest will become range_end\n    >>> rescale_to_unit_range([1.0, 2.0, 3.0, 4.0, 5.0], 0, 100)\n    [0.0, 25.0, 50.0, 75.0, 100.0]\n    \"\"\"\n    assert len(numbers) >= 2\n    return [(x - min(numbers)) * (range_end - range_start) / (max(numbers) - min(numbers)) + range_start for x in numbers]\n\n\ndef rescale_to_unit_range_int(numbers: List[float], range_start: float, range_end: float) -> List[int]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become range_start and the largest will become range_end\n    >>> rescale_to_unit_range([1.0, 2.0, 3.0, 4.0, 5.0], 0, 100)\n    [0, ", "    if len(numbers) < 2:\n        raise ValueError(\"At least two elements are required\")\n    return [x / numbers[-1] for x in numbers]\n\n\ndef rescale_to_unit_interval(number: float) -> float:\n    \"\"\" Scale the number into the unit interval, such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit_interval(0.0)\n    0.0\n    >>> rescale_to_unit_interval(2.0)\n    1.0\n    >>> rescale_to_unit_interval(0.1)\n    0.1\n    >>> rescale_to_unit_interval(1.1)\n    1.0\n    \"\"\"\n    return number / 1.0\n\n\ndef rescale_from_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_from_unit([0.0, 0.25, 0.5, 0.75, 1.0])\n    [1.0, 2.0, 3.0, 4.0, 5.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"At least two elements are required\")\n    return [x * numbers[-1] for x in numbers]\n\n\ndef rescale_from_unit_interval(number: float) -> float", "    if len(numbers) < 2:\n        raise ValueError(\"rescale_to_unit() requires at least two numbers\")\n    return [n * (1 / max_val) for n, max_val in zip(numbers, sorted(numbers, reverse=True))]\n\n\ndef rescale_to_unit_sum(numbers: List[float], sum_value: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become `sum_value`\n    >>> rescale_to_unit_sum([1.0, 2.0, 3.0, 4.0, 5.0], 10.0)\n    [0.0, 2.222222222222222, 4.444444444444444, 6.666666666666666, 8.888888888888889]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"rescale_to_unit_sum() requires at least two numbers\")\n    return [n * (sum_value / max_val) for n, max_val in zip(numbers, sorted(numbers, reverse=True))]\n\n\ndef rescale_to_unit_sum_ratio(numbers: List[float], sum_value: float) -> List[float]:\n    \"\"\" Given list of numbers (of at", "    if not numbers:\n        raise ValueError(\"Cannot rescale an empty list\")\n    if len(numbers) == 1:\n        return [1.0]\n    min_val = min(numbers)\n    max_val = max(numbers)\n    diff = max_val - min_val\n    return [1.0 * (x - min_val) / diff for x in numbers]\n\n\ndef rescale_to_unit_with_constant_intercept(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit_with_constant_intercept([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Cannot rescale an empty list\")\n    if len(numbers) == 1:\n        return [1.0]\n    min_val = min(numbers)\n    max_val = max(numbers)\n    diff = max_val - min_val\n    scale_factor = 1.0 * (max_val - min_val)\n    intercept = -1.0 * min_val\n    return [1.0 * (x + intercept) / scale_factor for x in numbers]\n\n\ndef rescale_to_unit_with_min_max"], ["    return [value for value in values if isinstance(value, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    []\n    \"\"\"\n    return [value for value in values if isinstance(value, float)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['abc']\n    \"\"\"\n    return [value for value in values if isinstance(value, str)]\n\n\ndef filter_dicts(values: List[Any]) -> List[dict]:\n    \"\"\" Filter given list of any python values only for dicts\n    >>> filter_dicts(['a', 3.14, 5])\n    []\n    >>> filter_dicts([1, 2, 3, 'abc', {}, []])\n    [{}]\n    \"\"\"\n    return [value for value in values if isinstance(value, dict)]\n\n\ndef filter_lists(values: List[Any]) -> List[list]:\n    \"\"\" Filter given list of any python values only for lists\n    >>> filter_lists(['a', 3.14, 5])\n    []\n    >>> filter_lists([1, 2, 3, 'abc', {}, []])\n    [[]]\n    \"\"\"\n", "    return list(filter(lambda x: isinstance(x, int), values))\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['abc']\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, str), values))\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    []\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, float), values))\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    []\n    >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n    []\n    >>> filter_booleans([1, 2, 3, 'abc', {}, [], True, False])\n    [True, False]\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, bool), values))\n\n\ndef filter_lists(values: List[Any]) -> List[list]:\n    \"\"\" Filter given list of any python values only for lists\n    >>> filter_lists(['", "    return [value for value in values if isinstance(value, int)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2.5, 3.14, 'abc', {}, []])\n    [2.5, 3.14]\n    \"\"\"\n    return [value for value in values if isinstance(value, float)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a']\n    >>> filter_strings([1, 2.5, 3.14, 'abc', {}, []])\n    ['abc']\n    \"\"\"\n    return [value for value in values if isinstance(value, str)]\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for booleans\n    >>> filter_booleans(['a', 3.14, 5])\n    []\n    >>> filter_booleans([1, 2.5, 3.14, 'abc', {}, []])\n    []\n    >>> filter_booleans([True, False, 'True', 'False', 'abc', {}, []])\n    [True, False]\n    \"\"\"\n    return [value for value in values if isinstance(value, bool)]\n\n\ndef filter_tuples(values: List[Any]) -> List[tuple]:\n    \"\"\"", "    return [value for value in values if isinstance(value, int)]\n\n\ndef filter_even_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for even integers\n    >>> filter_even_integers(['a', 3.14, 5])\n    []\n    >>> filter_even_integers([1, 2, 3, 'abc', {}, []])\n    [2]\n    >>> filter_even_integers([1, 2, 3, 4, 5])\n    [2, 4]\n    \"\"\"\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n\ndef filter_odd_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for odd integers\n    >>> filter_odd_integers(['a', 3.14, 5])\n    []\n    >>> filter_odd_integers([1, 2, 3, 'abc', {}, []])\n    [1, 3]\n    >>> filter_odd_integers([1, 2, 3, 4, 5])\n    [1, 3, 5]\n    \"\"\"\n    return [value for value in values if isinstance(value, int) and value % 2 != 0]\n\n\ndef filter_positive_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for positive integers\n    >>> filter_positive_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_positive_integers([1, 2, 3, 'abc', {}, []])", "    return list(filter(lambda x: isinstance(x, int), values))\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats(['a', 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    []\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, float), values))\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings(['a', 3.14, 5])\n    ['a']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['abc']\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, str), values))\n\n\ndef filter_numbers(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for numbers\n    >>> filter_numbers(['a', 3.14, 5])\n    [3.14]\n    >>> filter_numbers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, (int, float)), values))\n\n\ndef filter_lists(values: List[Any]) -> List[list]:\n    \"\"\" Filter given list of any python values only for lists\n    >>> filter_lists(['a', 3.14, 5])\n    []\n    >>> filter_lists([1, 2"], ["    return len(string)\n\n\ndef strlen2(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen2('')\n    0\n    >>> strlen2('abc')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen3(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen3('')\n    0\n    >>> strlen3('abc')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen4(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen4('')\n    0\n    >>> strlen4('abc')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen5(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen5('')\n    0\n    >>> strlen5('abc')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen6(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen6('')\n    0\n    >>> strlen6('abc')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen7(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen7('')\n    0\n    >>> strlen7('abc')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen8(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen8('')\n    0\n    >>> strlen8('abc')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen9(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen9('')\n    0\n    >>> strlen9('abc')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef strlen10(string", "\n    return len(string)\n\n\ndef strlen_recursive(string: str) -> int:\n    \"\"\" Return length of given string using recursion\n    >>> strlen_recursive('')\n    0\n    >>> strlen_recursive('abc')\n    3\n    \"\"\"\n\n    if not string:\n        return 0\n    return 1 + strlen_recursive(string[1:])\n\n\ndef strlen_fast(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen_fast('')\n    0\n    >>> strlen_fast('abc')\n    3\n    \"\"\"\n\n    return string.count('')\n\n\ndef strlen_pythonic(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen_pythonic('')\n    0\n    >>> strlen_pythonic('abc')\n    3\n    \"\"\"\n\n    return len(string)\n\n\ndef strlen_cython(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen_cython('')\n    0\n    >>> strlen_cython('abc')\n    3\n    \"\"\"\n\n    return len(string)\n\n\ndef strlen_builtin(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen_builtin('')\n    0\n    >>> strlen_builtin('abc')\n    3\n    \"\"\"\n\n    return len(string)\n\n\ndef strlen_fastest(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen_fastest('')\n    0\n    >>> strlen_fastest('abc')\n    3\n    \"\"\"\n\n    return len(string)\n\n\ndef strlen_pythonic_recursive(string: str) -> int:\n    \"\"\" Return length of given string using recursion\n    >>> strlen_pythonic_recursive('')\n    0\n    >>> strlen_pythonic_", "    return len(string)\n\n\ndef charat(string: str, index: int) -> str:\n    \"\"\" Return char at given index of given string\n    >>> charat('abc', 0)\n    'a'\n    >>> charat('abc', 1)\n    'b'\n    >>> charat('abc', 2)\n    'c'\n    \"\"\"\n    return string[index]\n\n\ndef concat(string1: str, string2: str) -> str:\n    \"\"\" Concatenate given strings\n    >>> concat('abc', 'def')\n    'abcdef'\n    \"\"\"\n    return string1 + string2\n\n\ndef substr(string: str, index: int, length: int) -> str:\n    \"\"\" Return substring of given string\n    >>> substr('abcdef', 0, 3)\n    'abc'\n    >>> substr('abcdef', 3, 3)\n    'def'\n    >>> substr('abcdef', 0, 6)\n    'abcdef'\n    \"\"\"\n    return string[index:index+length]\n\n\ndef replace(string: str, old: str, new: str) -> str:\n    \"\"\" Replace all occurences of substring 'old' with substring 'new'\n    >>> replace('abcabc', 'abc', '123')\n    '123123'\n    \"\"\"\n    return string.replace(old, new)\n\n\ndef startswith(string: str, substring: str) -> bool:\n    \"\"\" Return True if given string starts with given substring, else False\n    >>> startswith('abcdef', 'abc')\n    True\n    >>> startswith('abcdef', 'def')\n    False\n    \"\"\"\n    return string.startswith(substring)\n\n\ndef endswith(string: str, substring: str) -> bool:\n    \"\"\" Return True if given string ends with given substring, else False\n    >>> endswith('abcdef', 'def')\n    True\n    >>> endswith('abcdef', 'abc')", "    return len(string)\n\n\ndef print_str_reversed(string: str):\n    \"\"\" Print string in reverse order\n    >>> print_str_reversed('')\n\n    >>> print_str_reversed('abc')\n    cba\n    \"\"\"\n    print(string[::-1])\n\n\ndef count_chars(string: str, char: str) -> int:\n    \"\"\" Count number of chars in string\n    >>> count_chars('', '')\n    0\n    >>> count_chars('', 'a')\n    0\n    >>> count_chars('abc', '')\n    3\n    >>> count_chars('abc', 'a')\n    1\n    >>> count_chars('abc', 'b')\n    1\n    >>> count_chars('abc', 'c')\n    1\n    \"\"\"\n    return string.count(char)\n\n\ndef str_without_vowels(string: str) -> str:\n    \"\"\" Remove vowels from string\n    >>> str_without_vowels('')\n    ''\n    >>> str_without_vowels('a')\n    ''\n    >>> str_without_vowels('e')\n    ''\n    >>> str_without_vowels('i')\n    ''\n    >>> str_without_vowels('o')\n    ''\n    >>> str_without_vowels('u')\n    ''\n    >>> str_without_vowels('abcde')\n    'bc'\n    \"\"\"\n    return string.replace(\"a\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"o\", \"\").replace(\"u\", \"\")\n\n\ndef str_without_consonants(string: str) -> str:\n    \"\"\" Remove consonants from string\n    >>> str_without_consonants('')\n    ''\n    >>> str_without_consonants('a')\n    ''\n    >>> str_without_consonants('e')\n    ''\n    >>> str_without", "    return len(string)\n\n\ndef to_camel_case(string: str) -> str:\n    \"\"\" Return given string in camel case.\n    >>> to_camel_case('')\n    ''\n    >>> to_camel_case('abc')\n    'Abc'\n    >>> to_camel_case('_abc')\n    'Abc'\n    >>> to_camel_case('__abc')\n    'Abc'\n    >>> to_camel_case('abc_123')\n    'Abc123'\n    >>> to_camel_case('abc_123_')\n    'Abc123'\n    \"\"\"\n    string = string.replace('_', ' ')\n    string = string.title()\n    string = re.sub('[A-Z][a-z]+', lambda match: match.group(0)[:1].lower() + match.group(0)[1:], string)\n    return string\n\n\ndef to_snake_case(string: str) -> str:\n    \"\"\" Return given string in snake case.\n    >>> to_snake_case('')\n    ''\n    >>> to_snake_case('Abc')\n    'abc'\n    >>> to_snake_case('Abc123')\n    'abc123'\n    \"\"\"\n    string = string.replace(' ', '_')\n    string = re.sub('[A-Z]+', lambda match: match.group(0)[:1].lower() + match.group(0)[1:], string)\n    return string\n\n\ndef to_pascal_case(string: str) -> str:\n    \"\"\" Return given string in pascal case.\n    >>> to_pascal_case('')\n    ''\n    >>> to_pascal_case('abc')\n    'Abc'\n    >>> to_pascal_case('_abc')\n    'Abc'\n    >>> to_pascal_case('__abc')\n"], ["    for x in range(2, n):\n        if n % x == 0:\n            return x\n\n    return n\n\n\nif __name__ == \"__main__\":\n    print(largest_divisor(15))\n    print(largest_divisor(100))\n    print(largest_divisor(10))\n    print(largest_divisor(1))\n    print(largest_divisor(0))\n    print(largest_divisor(101))\n    print(largest_divisor(1000))\n    print(largest_divisor(2000))\n    print(largest_divisor(10000000))\n    print(largest_divisor(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "    if n % 2 == 0:\n        return n // 2\n    return n // 2 * 2\n\n\ndef smallest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the smallest number that divides n evenly, larger than 1\n    >>> smallest_divisor(15)\n    3\n    \"\"\"\n    return n // largest_divisor(n)\n\n\ndef divisors_of_n(n: int) -> int:\n    \"\"\" For a given number n, find the number of divisors of n\n    >>> divisors_of_n(15)\n    10\n    \"\"\"\n    return largest_divisor(n) * smallest_divisor(n)\n\n\ndef divisors_of_number(numbers: List[int]) -> List[int]:\n    \"\"\" For a list of numbers, find the number of divisors of each number\n    >>> divisors_of_number([15, 20])\n    [10, 20]\n    \"\"\"\n    return [divisors_of_n(n) for n in numbers]\n\n\ndef main() -> None:\n    \"\"\"\n    >>> main()\n    10\n    \"\"\"\n    numbers = [15, 20]\n    print(divisors_of_number(numbers))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n    while n % 2 == 0:\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n\n\ndef sum_of_divisors(n: int) -> int:\n    \"\"\" For a given number n, find the sum of all of its divisors\n    >>> sum_of_divisors(12)\n    28\n    \"\"\"\n\n    return n + largest_divisor(n)\n\n\ndef sum_of_divisors_less_than(n: int) -> int:\n    \"\"\" For a given number n, find the sum of all of its divisors that are less than n\n    >>> sum_of_divisors_less_than(25)\n    25\n    \"\"\"\n\n    return sum(range(1, n))\n\n\ndef perfect_number(n: int) -> bool:\n    \"\"\" For a given number n, check if it is a perfect number\n    >>> perfect_number(6)\n    True\n    >>> perfect_number(7)\n    False\n    \"\"\"\n\n    return sum_of_divisors(n) == 2 * n\n\n\ndef abundant_number(n: int) -> bool:\n    \"\"\" For a given number n, check if it is an abundant number\n    >>> abundant_number(12)\n    True\n    >>> abundant_number(13)\n    False\n    \"\"\"\n\n    return sum_of_divisors(n) > n\n\n\ndef perfect_abundant_number(n: int) -> bool:\n    \"\"\" For a given number n, check if it is a perfect number or an abundant number\n    >>> perfect_abundant_number(28)\n    True\n    >>> perfect_abundant_number(29)\n    False\n    \"\"\"\n\n", "    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return 0\n\n\ndef main() -> None:\n    \"\"\" Print the largest number that divides n evenly, smaller than n.\n    >>> main()\n    5\n    10\n    21\n    \"\"\"\n    print(largest_divisor(15))\n    print(largest_divisor(10))\n    print(largest_divisor(21))\n\n\nif __name__ == \"__main__\":\n    main()\n", "    for divisor in range(1, n+1):\n        if n % divisor == 0:\n            return divisor\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not for auto"], ["    factors: List[int] = []\n    while n != 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                n = n / i\n                factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    from math import sqrt\n\n    print(factorize(int(sqrt(100) + 1)))\n    print(factorize(int(sqrt(100) * sqrt(100) + 1)))\n    print(factorize(int(sqrt(100) * sqrt(100) * sqrt(100) + 1)))\n    print(factorize(int(sqrt(100) * sqrt(100) * sqrt(100) * sqrt(100) + 1)))\n    print(factorize(int(sqrt(100) * sqrt(100) * sqrt(100) * sqrt(100) * sqrt(100) + 1)))\n    print(factorize(int(sqrt(100) * sqrt(100) * sqrt(100) * sqrt(100) * sqrt(100) * sqrt(100) + 1)))\n    print(factorize(int(sqrt(100) * sqrt(100) * sqrt(100) * sqrt(100) * sqrt(", "    factors: List[int] = []\n    prime_factors: List[int] = []\n    while n > 1:\n        for prime in range(2, n + 1):\n            if n % prime == 0:\n                prime_factors.append(prime)\n                n //= prime\n                break\n    for prime in prime_factors:\n        count = 0\n        for factor in factors:\n            if prime == factor:\n                count += 1\n        if count > 0:\n            factors[factors.index(prime)] += count\n        else:\n            factors.append(prime)\n    return factors\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.", "    primes = []\n    while n % 2 == 0:\n        primes.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            primes.append(i)\n            n = n // i\n    if n > 2:\n        primes.append(n)\n    return primes\n\n\ndef get_divisors(n: int) -> List[int]:\n    \"\"\" Return list of all divisors of given integer in the order from smallest to largest.\n    Each of the divisors should be listed number of times corresponding to how many times it appeares in divisor list.\n    Input number should be equal to the product of all divisors\n    >>> get_divisors(8)\n    [1, 2, 4, 8]\n    >>> get_divisors(25)\n    [1, 5, 25]\n    >>> get_divisors(70)\n    [1, 2, 3, 5, 6, 7, 10, 14, 21, 70]\n    \"\"\"\n    factors = factorize(n)\n    return [x for x in range(1, n + 1) if all(x % y != 0 for y in factors)]\n\n\ndef get_divisor_count(n: int) -> int:\n    \"\"\" Return number of divisors of given integer\n    >>> get_divisor_count(8)\n    4\n    >>> get", "    factors = []\n    for factor in range(2, n+1):\n        while n%factor==0:\n            factors.append(factor)\n            n = n // factor\n    return factors\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n    # print(factorize(8))\n    # print(factorize(25))\n    # print(factorize(70))\n\n    # print(factorize(1000000000))\n\n    # print(factorize(1))\n    # print(factorize(0))\n    # print(factorize(-1))\n    # print(factorize(-10))\n    # print(factorize(10))\n    # print(factorize(1234567890))\n    # print(factorize(12345678901234567890))\n    # print(factorize(123456789012345678901234567890))\n    # print(factorize(1234567890123456789012345678901234567890))\n    # print(factorize(12345678901234567890123456789012345678901234567890))\n", "    factors: List[int] = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n            n = n / i\n    return factors\n\n\ndef is_permutation(n: int, m: int) -> bool:\n    \"\"\" Return True if numbers are permutation of each other and False otherwise.\n    >>> is_permutation(4, 6)\n    False\n    >>> is_permutation(4, 24)\n    True\n    >>> is_permutation(4, 120)\n    True\n    \"\"\"\n    n_factors: List[int] = factorize(n)\n    m_factors: List[int] = factorize(m)\n    if len(n_factors) != len(m_factors):\n        return False\n    for i in range(len(n_factors)):\n        if n_factors[i] != m_factors[i]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n\n    # print(factorize(12))\n    # print(factorize(100))\n    # print(factorize(1000))\n    # print(factorize(10000))\n    # print(factorize(100000))\n    # print(factorize(1000000))\n    # print(factorize(10000000))\n    # print("], ["    # TODO - your code here\n    return [numbers[i] for i, n in enumerate(numbers) if numbers.count(n) == 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    print(\"All tests passed\")\n\n\n\"\"\"\nThis function should remove all duplicates in a list of integers.\n\nExample:\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n\"\"\"\n\n\"\"\"\nThe problem with this function is that it removes all duplicates, including those which only occur once.\n\"\"\"\n\n\"\"\"\nExample:\n>>> remove_duplicates([1, 2, 3, 2, 4, 1, 5])\n[1, 3, 4, 5]\n\"\"\"\n\n\"\"\"\nThe problem with this function is that it removes all duplicates, including those which only occur once.\n\"\"\"\n\n\"\"\"\n>>> remove_duplicates([1, 2, 3, 2, 4, 1, 5])\n[1, 3, 4, 5]\n\"\"\"\n\n\"\"\"\nThe problem with this function is that it removes all duplicates, including those which only occur once.\n\"\"\"\n\n\"\"\"\n>>> remove_duplicates([1, 2, 3, 2, 4, 1, 5])\n[1, 3, 4, 5]\n\"\"\"\n\n\"\"\"\nThe problem with this function is that it removes all duplicates, including those which only occur once.\n\"\"\"\n\n\"\"\"\n>>> remove_duplicates([1, 2, 3, 2, 4, 1, 5])\n[", "    # TODO: Remove duplicates from a list of integers.\n    # TODO: Keep order of elements left the same as in the input.\n    # HINT: Use a set.\n    # HINT: You should write an efficient algorithm.\n    seen: set = set()\n    result: list = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n\ndef main() -> None:\n    \"\"\" Run sample remove_duplicates() calls.\n    \"\"\"\n    print(remove_duplicates([1, 2, 3, 2, 4]))\n    print(remove_duplicates([1, 2, 3, 4]))\n    print(remove_duplicates([1, 2, 2, 3, 3, 4]))\n    print(remove_duplicates([]))\n    print(remove_duplicates([1, 2, 3, 4, 5]))\n    print(remove_duplicates([1, 2, 3, 4, 5, 5]))\n    print(remove_duplicates([1, 2, 3, 4, 5, 5, 5]))\n    print(remove_duplicates([1, 2, 3, 4, 5, 5, 6]))\n    print(remove_duplicates([1, 2, 3, 4, 5, 5, 6, 6]))\n    print(remove_duplicates([1, 2, 3, 4, 5, 5, 6, 6, 7]))\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n\"\"\"\nSample run:\npython3 5_remove_duplicates.py", "    # Your code here\n\n\nif __name__ == '__main__':\n    import doctest\n    do", "    result = []\n    for n in numbers:\n        if n not in result:\n            result.append(n)\n    return result\n\n\ndef remove_duplicates_2(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    seen = set()\n    for n in numbers:\n        if n not in seen:\n            result.append(n)\n            seen.add(n)\n    return result\n\n\ndef remove_duplicates_3(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    seen = set()\n    for n in numbers:\n        if n not in seen:\n            result.append(n)\n            seen.add(n)\n    return result\n\n\ndef remove_duplicates_4(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    result = []\n    seen = set()\n    for n in numbers:\n        if n not in seen", "    # your code here\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n\n\ndef remove_duplicates2(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates2([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # your code here\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n            result.sort()\n    return result\n\n\ndef remove_duplicates3(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates3([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # your code here\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n            result.sort()\n    return result\n\n\ndef remove_duplicates4(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates4([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # your code here\n    result = []\n    for num in numbers:\n        if num not"], ["    return ''.join(map(lambda x: x.upper() if x.islower() else x.lower(), string))\n\n\ndef flip_case_2(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case_2('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join(map(lambda x: x.upper() if x.isupper() else x.lower(), string))\n\n\ndef flip_case_3(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case_3('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join(map(lambda x: x.swapcase(), string))\n\n\ndef flip_case_4(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case_4('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join(map(str.swapcase, string))\n\n\ndef flip_case_5(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case_5('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join(map(str.swapcase, string))\n\n\ndef flip_case_6(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case_6('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join(map(str.__class__.__dict__['swapcase'], string))", "\n    return \"\".join(chr(97 + (ord(char) - 97)) if char.islower() else char for char in string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n", "    return string.swapcase()\n\n\ndef split_string(string: str, num_splits: int) -> list[str]:\n    \"\"\" Splits a given string into a list of strings.\n    >>> split_string('Hello World!', 2)\n    ['Hello', 'World!']\n    \"\"\"\n    return [string[i:i + num_splits] for i in range(0, len(string), num_splits)]\n\n\ndef format_string(string: str, width: int) -> str:\n    \"\"\" Formats a string to a given width.\n    >>> format_string('Hello World!', 10)\n    'Hello World!'\n    \"\"\"\n    return string.rjust(width)\n\n\ndef format_string_2(string: str, width: int) -> str:\n    \"\"\" Formats a string to a given width.\n    >>> format_string('Hello World!', 10)\n    'Hello World!'\n    \"\"\"\n    return string.rjust(width, ' ')\n\n\ndef format_string_3(string: str, width: int) -> str:\n    \"\"\" Formats a string to a given width.\n    >>> format_string('Hello World!', 10)\n    'Hello World!'\n    \"\"\"\n    return string.ljust(width)\n\n\ndef format_string_4(string: str, width: int) -> str:\n    \"\"\" Formats a string to a given width.\n    >>> format_string('Hello World!', 10)\n    'Hello World!'\n    \"\"\"\n    return string.ljust(width, ' ')\n\n\ndef capitalize_string(string: str) -> str:\n    \"\"\" Capitalizes the first letter of a given string.\n    >>> capitalize_string('hello world!')\n    'Hello world!'\n    \"\"\"\n    return string.capitalize()\n\n\ndef count_vowels(string: str) -> int:\n", "    string = string.lower()\n    return string.swapcase()\n\n\ndef split_and_join(string: str, delimiter: str = \" \") -> str:\n    \"\"\" Split a string into words and join them back.\n    >>> split_and_join('Hello there!')\n    'Hello there!'\n    \"\"\"\n    words = string.split(delimiter)\n    return delimiter.join(words)\n\n\ndef compress_string(string: str, delimiter: str = \" \") -> str:\n    \"\"\" Remove duplicate words from a string.\n    >>> compress_string('Hello there!')\n    'Hello there!'\n    >>> compress_string('Hello there Hello!')\n    'Hello there Hello!'\n    \"\"\"\n    return delimiter.join(set(string.split(delimiter)))\n\n\ndef remove_duplicates(string: str, delimiter: str = \" \") -> str:\n    \"\"\" Remove duplicate words from a string.\n    >>> remove_duplicates('Hello there!')\n    'Hello there!'\n    >>> remove_duplicates('Hello there Hello!')\n    'Hello there'\n    \"\"\"\n    words = string.split(delimiter)\n    return delimiter.join(set(words))\n\n\ndef swap_case(string: str) -> str:\n    \"\"\" Swap the case of all characters in a string.\n    >>> swap_case('Hello there!')\n    'hELLO tHERE!'\n    \"\"\"\n    return string.swapcase()\n\n\ndef title_case(string: str) -> str:\n    \"\"\" Convert a string to title case.\n    >>> title_case('Hello there!')\n    'Hello There!'\n    \"\"\"\n    words = string.split()\n    return ' '.join([word[0].upper() + word[1:].lower() for word in words])\n\n\ndef remove_punctuation(string: str) -> str:\n    \"\"\" Remove all punctuation characters from a string.\n    >>> remove_p", "    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    print('[1/4] OK')\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Check whether the given string is a palindrome.\n\n    >>> is_palindrome('madam')\n    True\n    >>> is_palindrome('mad')\n    False\n    \"\"\"\n    return string == flip_case(string)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    print('[2/4] OK')\n\n\ndef has_all_vowels(string: str) -> bool:\n    \"\"\" Check whether the given string has all vowels.\n\n    >>> has_all_vowels('madam')\n    True\n    >>> has_all_vowels('mad')\n    False\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    for char in string:\n        if char not in vowels:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    print('[3/4] OK')\n\n\ndef has_no_vowels(string: str) -> bool:\n    \"\"\" Check whether the given string has no vowels.\n\n    >>> has_no_vowels('madam')\n    False\n    >>> has_no_vowels('mad')\n    True\n    \"\"\"\n    return not has_all_vowels("], ["    return \"\".join(strings)\n\n\ndef insert_at_index(string: str, index: int, insert: str) -> str:\n    \"\"\" Insert the insert string at the given index\n    >>> insert_at_index('abc', 1, 'x')\n    'axbc'\n    >>> insert_at_index('abc', 0, 'x')\n    'xabc'\n    >>> insert_at_index('abc', 3, 'x')\n    'abcx'\n    \"\"\"\n    return string[:index] + insert + string[index:]\n\n\ndef remove_char_at_index(string: str, index: int) -> str:\n    \"\"\" Remove the character at the given index\n    >>> remove_char_at_index('abc', 1)\n    'ac'\n    >>> remove_char_at_index('abc', 0)\n    'bc'\n    >>> remove_char_at_index('abc', 3)\n    'ab'\n    \"\"\"\n    return string[:index] + string[index + 1:]\n\n\ndef remove_first_occurence(string: str, remove: str) -> str:\n    \"\"\" Remove the first occurence of the given string\n    >>> remove_first_occurence('abc', 'c')\n    'ab'\n    >>> remove_first_occurence('abc', 'b')\n    'ac'\n    \"\"\"\n    return string.replace(remove, \"\", 1)\n\n\ndef remove_last_occurence(string: str, remove: str) -> str:\n    \"\"\" Remove the last occurence of the given string\n    >>> remove_last_occurence('abc', 'c')\n    'ab'\n    >>> remove_last_occurence('abc', 'b')\n    'ac'\n    \"\"\"\n    return string.replace(remove, \"\", string.count(remove) - 1)\n\n\ndef replace_first_", "    return ''.join(strings)\n\n\ndef split(string: str, seperator: str) -> List[str]:\n    \"\"\" Split the string into a list of strings split by the seperator\n    >>> split('a,b,c', ',')\n    ['a', 'b', 'c']\n    \"\"\"\n    return string.split(seperator)\n\n\ndef split_on_spaces(string: str) -> List[str]:\n    \"\"\" Split the string into a list of strings split by spaces\n    >>> split_on_spaces('a b c')\n    ['a', 'b', 'c']\n    \"\"\"\n    return split(string, ' ')\n\n\ndef split_on_newlines(string: str) -> List[str]:\n    \"\"\" Split the string into a list of strings split by newlines\n    >>> split_on_newlines('a\\nb\\nc')\n    ['a', 'b', 'c']\n    \"\"\"\n    return split(string, '\\n')\n\n\ndef split_on_tabs(string: str) -> List[str]:\n    \"\"\" Split the string into a list of strings split by tabs\n    >>> split_on_tabs('a\\tb\\tc')\n    ['a', 'b', 'c']\n    \"\"\"\n    return split(string, '\\t')\n\n\ndef split_on_commas(string: str) -> List[str]:\n    \"\"\" Split the string into a list of strings split by commas\n    >>> split_on_commas('a,b,c')\n    ['a', 'b', 'c']\n    \"\"\"\n    return split(string, ',')\n\n\ndef split_on_semicolons(string: str) -> List[str]:\n    \"\"\" Split the string into a list of strings split by semicolons\n    >>> split_on_semicolons('a;b;c')\n    ['a', 'b', 'c']\n    \"\"\"\n    return", "    result = ''\n    for s in strings:\n        result += s\n    return result\n\n\ndef count_words(s: str) -> int:\n    \"\"\" Count the number of words in a string\n    >>> count_words('')\n    0\n    >>> count_words('foo bar')\n    2\n    >>> count_words('foo bar  baz')\n    3\n    \"\"\"\n    return len(s.split())\n\n\ndef count_letters(s: str) -> int:\n    \"\"\" Count the number of letters in a string\n    >>> count_letters('')\n    0\n    >>> count_letters('foo bar')\n    6\n    >>> count_letters('foo bar  baz')\n    12\n    \"\"\"\n    return len(s)\n\n\ndef count_vowels(s: str) -> int:\n    \"\"\" Count the number of vowels in a string\n    >>> count_vowels('')\n    0\n    >>> count_vowels('foo bar')\n    3\n    >>> count_vowels('foo bar  baz')\n    6\n    >>> count_vowels('foo bar  baz qux quux quuz quuux')\n    16\n    \"\"\"\n    return sum([1 for c in s if c in 'aeiou'])\n\n\ndef count_consecutive_vowels(s: str) -> int:\n    \"\"\" Count the number of consecutive vowels in a string\n    >>> count_consecutive_vowels('')\n    0\n    >>> count_consecutive_vowels('foo bar')\n    0\n    >>> count_consecutive_vowels('foo bar  baz')\n    0\n    >>> count_consecutive_vowels('foo bar  baz qux quux quuz quuux')\n    3\n    \"\"\"\n    vowels = 'aeiou'\n    result = 0\n    for", "    return \"\".join(strings)\n\n\ndef reverse(strings: List[str]) -> str:\n    \"\"\" Reverse list of strings\n    >>> reverse([])\n    ''\n    >>> reverse(['a', 'b', 'c'])\n    'cba'\n    \"\"\"\n    return concatenate(strings[::-1])\n\n\ndef count(strings: List[str], substring: str) -> int:\n    \"\"\" Count number of occurances of substring in list of strings\n    >>> count([], '')\n    0\n    >>> count(['a', 'b', 'c'], '')\n    0\n    >>> count(['a', 'b', 'c'], 'a')\n    1\n    >>> count(['a', 'b', 'c'], 'b')\n    1\n    >>> count(['a', 'b', 'c'], 'c')\n    1\n    >>> count(['a', 'b', 'c'], 'ab')\n    0\n    >>> count(['a', 'b', 'c'], 'bc')\n    0\n    >>> count(['a', 'b', 'c'], 'ac')\n    0\n    >>> count(['a', 'b', 'c'], 'a')\n    1\n    >>> count(['a', 'b', 'c'], 'b')\n    1\n    >>> count(['a', 'b', 'c'], 'c')\n    1\n    >>> count(['a', 'b', 'c'], 'ab')\n    0\n    >>> count(['a', 'b', 'c'], 'bc')\n    0\n    >>> count(['a', 'b', 'c'], 'ac')\n    0\n    >>> count(['a', 'b', 'c'], 'a')\n    1\n    >>> count(['a', 'b', 'c'], 'b')\n    1\n    >>> count(['a', 'b', 'c'], 'c')\n    1\n    >>> count(['a', 'b', 'c'], 'ab')\n    0\n    >>> count(['a',", "    return ''.join(strings)\n\n\nif __name__ == '__main__':\n    import doct"], ["    result = []\n    for s in strings:\n        if s.startswith(prefix):\n            result.append(s)\n    return result\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([], 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'rray')\n    ['array']\n    \"\"\"\n    result = []\n    for s in strings:\n        if s.endswith(suffix):\n            result.append(s)\n    return result\n\n\ndef filter_by_length(strings: List[str], min_length: int, max_length: int = None) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones with a given length.\n    >>> filter_by_length([], 2)\n    []\n    >>> filter_by_length(['abc', 'bcd', 'cde', 'array'], 2)\n    ['bcd', 'cde']\n    \"\"\"\n    result = []\n    for s in strings:\n        if len(s) >= min_length:\n            if max_length is None or len(s) <= max_length:\n                result.append(s)\n    return result\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain a given substring.\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'],", "    return [x for x in strings if x.startswith(prefix)]\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([], 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [x for x in strings if x.endswith(suffix)]\n\n\ndef filter_by_length(strings: List[str], length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that are of a given length.\n    >>> filter_by_length([], 4)\n    []\n    >>> filter_by_length(['abc', 'bcd', 'cde', 'array'], 4)\n    ['abc', 'cde']\n    \"\"\"\n    return [x for x in strings if len(x) == length]\n\n\ndef filter_by_length_range(strings: List[str], min_length: int, max_length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that are of a given range of lengths.\n    >>> filter_by_length_range([], 4, 6)\n    []\n    >>> filter_by_length_range(['abc', 'bcd', 'cde', 'array'], 4, 6)\n    ['abc', 'cde']\n    \"\"\"\n    return [x for x in strings if len(x) >= min_length and len(x) <= max_length]\n\n\ndef filter_by_length_range_", "    return [string for string in strings if string.startswith(prefix)]\n\n\ndef filter_by_prefix_reversed(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix, in reversed order.\n    >>> filter_by_prefix_reversed([], 'a')\n    []\n    >>> filter_by_prefix_reversed(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['array', 'abc']\n    \"\"\"\n    return filter_by_prefix(strings, prefix)[::-1]\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([], 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.endswith(suffix)]\n\n\ndef filter_by_suffix_reversed(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix, in reversed order.\n    >>> filter_by_suffix_reversed([], 'a')\n    []\n    >>> filter_by_suffix_reversed(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['array', 'abc']\n    \"\"\"\n    return filter_by_suffix(strings, suffix)[::-1]\n\n\ndef filter", "\n    return [string for string in strings if string.startswith(prefix)]\n\n\ndef filter_by_length(strings: List[str], length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have a given length.\n    >>> filter_by_length([], 1)\n    []\n    >>> filter_by_length(['abc', 'bcd', 'cde', 'array'], 1)\n    []\n    >>> filter_by_length(['abc', 'bcd', 'cde', 'array'], 2)\n    ['bc', 'cd']\n    >>> filter_by_length(['abc', 'bcd', 'cde', 'array'], 3)\n    ['abc', 'bcd']\n    >>> filter_by_length(['abc', 'bcd', 'cde', 'array'], 4)\n    ['abc', 'bcd', 'cde']\n    >>> filter_by_length(['abc', 'bcd', 'cde', 'array'], 5)\n    ['abc', 'bcd', 'cde', 'array']\n    \"\"\"\n\n    return [string for string in strings if len(string) == length]\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([], 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n\n    return [string for string in strings if string.endswith(suffix)]\n\n\ndef filter_by_length_and_suffix(strings", "    return [s for s in strings if s.startswith(prefix)]\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([], 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'y')\n    ['array']\n    \"\"\"\n    return [s for s in strings if s.endswith(suffix)]\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that include a given substring.\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'r')\n    ['array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n\ndef filter_by_even_length(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have even length.\n    >>> filter_by_even_length([])\n    []\n    >>> filter_by_even_length(['abc', 'bcd', 'cde', 'array'])\n    ['bcd', 'array']\n    \"\"\"\n    return [s for s in strings if len(s) % 2 == 0]\n\n\ndef filter_by_odd_length(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have odd length.\n    >>> filter_by_odd_length([])\n    []\n    >>>"], ["    return [i for i in l if i > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -3, -10]\n    \"\"\"\n    return [i for i in l if i < 0]\n\n\ndef get_zero(l: list):\n    \"\"\"Return only zero numbers in the list.\n    >>> get_zero([-1, 2, -4, 5, 6])\n    []\n    >>> get_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [0]\n    \"\"\"\n    return [i for i in l if i == 0]\n\n\ndef get_even(l: list):\n    \"\"\"Return only even numbers in the list.\n    >>> get_even([-1, 2, -4, 5, 6])\n    [2, 6]\n    >>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [2, 3, 3, 123]\n    \"\"\"\n    return [i for i in l if i %", "\n    return [n for n in l if n > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -3, -10]\n    \"\"\"\n\n    return [n for n in l if n < 0]\n\n\ndef get_zero(l: list):\n    \"\"\"Return only zero numbers in the list.\n    >>> get_zero([-1, 2, -4, 5, 6])\n    []\n    >>> get_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [0]\n    \"\"\"\n\n    return [n for n in l if n == 0]\n\n\ndef get_non_zero(l: list):\n    \"\"\"Return only non-zero numbers in the list.\n    >>> get_non_zero([-1, 2, -4, 5, 6])\n    [-1, 2, 5, 6]\n    >>> get_non_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3,", "    return [x for x in l if x >= 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -3, -10]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_non_zero(l: list):\n    \"\"\"Return only non zero numbers in the list.\n    >>> get_non_zero([-1, 2, -4, 0, 5, 6])\n    [2, 5, 6]\n    >>> get_non_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, 0])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x != 0]\n\n\ndef get_even(l: list):\n    \"\"\"Return only even numbers in the list.\n    >>> get_even([-1, 2, -4, 0, 5, 6])\n    [2, 0, 6]\n    >>> get_even([5, 3, -5, 2, -3, 3, 9, 0,", "    return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -3, -10]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_non_negative(l: list):\n    \"\"\"Return only non-negative numbers in the list.\n    >>> get_non_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_non_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 0, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n\n\ndef get_non_positive(l: list):\n    \"\"\"Return only non-positive numbers in the list.\n    >>> get_non_positive([-1, 2, -4, 5, 6])\n    [-1, -4, 5, 6]\n    >>> get_non_positive([5, 3, -5, ", "    return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, -10]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -3, -10]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_zeros(l: list):\n    \"\"\"Return only zeros in the list.\n    >>> get_zeros([-1, 2, -4, 5, 6])\n    []\n    >>> get_zeros([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [0, 0]\n    \"\"\"\n    return [x for x in l if x == 0]\n\n\ndef get_abs(l: list):\n    \"\"\"Return absolute value of each element in the list.\n    >>> get_abs([-1, 2, -4, 5, 6])\n    [1, 2, 4, 5, 6]\n    >>> get_abs([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 5,"], ["    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n   ", "    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime2(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime3(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime4(n):\n   ", "    # return False\n    # return True\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_fast(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime_fast(6)\n    False\n    >>> is_prime_fast(101)\n    True\n    >>> is_prime_fast(11)\n    True\n    >>> is_prime_fast(13441)\n    True\n    >>> is_prime_fast(61)\n    True\n    >>> is_prime_fast(4)\n    False\n    >>> is_prime_fast(1)\n    False\n    \"\"\"\n    # return False\n    # return True\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_fastest(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime_fastest(6)\n    False\n    >>> is_prime_fastest(101)\n    True\n    >>> is_prime_fastest(11)\n    True\n    >>> is", "    if n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n    T = int(input())\n    for _ in range(T):\n        n = int(input())\n        if is_prime(n):\n            print('Prime')\n        else:\n            print('Not prime')\n\n\nif __name__ == '__main__':\n    main()\n\n# https://www.acmicpc.", "    if n <= 1:\n        return False\n\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n\n    return True\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"], ["    n = len(xs) - 1\n    c = xs[n] / poly(xs, 1)\n    return -c / (n - 1)\n\n\ndef find_zeros(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zeros find all zero points of poly(x) = 0.\n    find_zeros returns a list of zero points, even if there are many.\n    Moreover, find_zeros only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zeros([1, 2]), 2) # f(x) = 1 + 2x\n    [-0.5, 0.5]\n    >>> round(find_zeros([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3", "    # TODO: Implement\n    pass\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    from math import isclose\n    xs = [1, 2, 3, 4]\n    x = 2\n    if not isclose(poly(xs, x), find_zero(xs)):\n        raise Exception('test_find_zero failed')\n\n    xs = [1, 2, 3, 4, 5, 6, 7, 8]\n    x = 2\n    if not isclose(poly(xs, x), find_zero(xs)):\n        raise Exception('test_find_zero failed')\n\n    xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, ", "    if len(xs) % 2 == 1:\n        raise ValueError(\"poly must have an even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"poly must have a non-zero coefficient\")\n    x = -xs[-1] / xs[-2]\n    return x\n\n\ndef find_roots(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_roots finds all roots of poly(x) = 0.\n    \"\"\"\n    if len(xs) % 2 == 1:\n        raise ValueError(\"poly must have an even number of coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"poly must have a non-zero coefficient\")\n    return set([find_zero(xs[::-1][i:i + 2]) for i in range(0, len(xs), 2)])\n\n\ndef is_root(x: float,", "    return -poly(xs[::-1], 1) / poly(xs[::-1], 0)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "    if len(xs) % 2 == 1 or xs[-1] != 0:\n        raise ValueError(\"xs must have even number of coefficients and largest coefficient must be zero\")\n    n = len(xs) // 2\n    for i in range(n):\n        if xs[i] != 0:\n            break\n    else:\n        raise ValueError(\"xs must have at least one non zero coefficient\")\n    x0 = -xs[i + n] / xs[i + n - 1]\n    return x0\n\n\ndef find_zero_2(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero_2 finds all zero points, even if there are many.\n    find_zero_2 only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero_2([1, 2]), 2) # f(x)"], ["    assert type(l) == list, \"l is not a list\"\n    if not l:\n        return l\n    if len(l) % 3 == 0:\n        return l\n    sorted_list = sorted(l)\n    k = 0\n    for i in range(0, len(l), 3):\n        sorted_list[k] = l[i]\n        k += 1\n    for i in range(1, len(l), 3):\n        sorted_list[k] = l[i]\n        k += 1\n    for i in range(2, len(l), 3):\n        sorted_list[k] = l[i]\n        k += 1\n    return sorted_list\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        [\n            [1, 2, 3],\n            [1, 2, 3]\n        ],\n        [\n            [5, 6, 3, 4, 8, 9, 2],\n            [2, 6, 3, 4, 8, 9, 5]\n        ]\n    ]\n\n    for t in test_cases:\n        l = t[0]\n        expected = t[1]\n        actual = sort_third(l)\n        if expected == actual:\n            print(\"Test Case #\" + str(test_cases.index(t)) +\n                  \" passed: \" + str(actual))\n       ", "\n    l.sort()\n    return l\n\n\ndef test_sort_third():\n    \"\"\"test_sort_third:\n    This function tests the sort_third function and makes sure it is working as expected.\n    \"\"\"\n\n    test_values = [\n        ([1, 2, 3], [1, 2, 3]),\n        ([5, 6, 3, 4, 8, 9, 2], [2, 6, 3, 4, 8, 9, 5]),\n        ([2, 1, 3, 5], [1, 2, 3, 5]),\n        ([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8]),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n    ]\n\n    for test_value in test_values:\n        output = sort_third(test_value[0])\n        assert output ==", "\n    # TODO: Put your function here\n\n\nif __name__ == '__main__':\n    l = []\n    for i in range(10):\n        l.append(randint(0, 100))\n    print(l)\n    print(sort_third(l))\n\n    l = []\n    for i in range(10):\n        l.append(randint(0, 100))\n    print(l)\n    print(sort_third(l))\n\n    l = []\n    for i in range(10):\n        l.append(randint(0, 100))\n    print(l)\n    print(sort_third(l))\n\n    l = []\n    for i in range(10):\n        l.append(randint(0, 100))\n    print(l)\n    print(sort_third(l))\n\n    l = []\n    for i in range(10):\n        l.append(randint(0, 100))\n    print(l)\n    print(sort_third(l))\n\n    l = []\n    for i in range(10):\n        l.append(randint(0, 100))\n    print(l)\n    print(sort_third(l))\n\n    l = []\n    for i in range(10):\n        l.append(randint(0, 100))\n    print(l)\n    print(", "    # code goes here\n    return l\n\n\nif __name__ == '__main__':\n    print('Example:')\n    print(sort_third([1, 2, 3]))\n\n    # These \"asserts\" using only for self-checking and not", "    # your code here\n    l = l[::-1]\n    l = sorted(l)\n    l = l[::-1]\n    return l\n"], ["    return sorted(set(l))\n\n\ndef unique_with_count(l: list):\n    \"\"\"Return unique elements with count of each element\n    >>> unique_with_count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [(0, 1), (2, 1), (3, 3), (5, 2), (9, 1), (123, 1)]\n    \"\"\"\n    return [(x, l.count(x)) for x in unique(l)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n\n# print(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n# print(unique_with_count([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n\n\n\"\"\"\n1. Write a function to return the unique elements in a list.\n2. Write a function to return the unique elements in a list with their counts.\n3. Write a function to return the unique elements in a list while keeping the original order.\n\"\"\"\n\n\n# def unique(l: list):\n#     \"\"\"Return sorted unique elements in a list\n#     >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n#     [0, 2, 3, 5, 9, 123]\n#     \"\"\"\n#     return sorted(set(l))\n\n\n# def unique_with_count(l: list):\n#     \"\"\"Return unique elements with count of each element\n#     >>> unique_with_count([5, 3, 5", "    l = sorted(set(l))\n    return l\n\n\ndef get_unique_elements_in_list(l):\n    \"\"\"Return sorted unique elements in a list\n    >>> get_unique_elements_in_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    l = sorted(set(l))\n    return l\n\n\ndef get_unique_elements_in_list_using_set_function(l):\n    \"\"\"Return sorted unique elements in a list\n    >>> get_unique_elements_in_list_using_set_function([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    l = sorted(set(l))\n    return l\n\n\ndef get_unique_elements_in_list_using_set_comprehension(l):\n    \"\"\"Return sorted unique elements in a list\n    >>> get_unique_elements_in_list_using_set_comprehension([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    l = sorted(set(l))\n    return l\n\n\ndef get_unique_elements_in_list_using_set_comprehension_and_lambda(l):\n    \"\"\"Return sorted unique elements in a list\n    >>> get_unique_elements_in_list_using_set_comprehension_and_lambda([5, 3, ", "    return list(set(l))\n\n\ndef find_unique_elements(l: list):\n    \"\"\"Return only unique elements in a list\n    >>> find_unique_elements([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 3, 2, 9, 0, 123]\n    \"\"\"\n    return list(set(l))\n\n\ndef find_duplicate_elements(l: list):\n    \"\"\"Return only duplicate elements in a list\n    >>> find_duplicate_elements([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [5, 3, 3]\n    \"\"\"\n    return [x for x in l if x in l[:l.index(x)]]\n\n\ndef find_missing_elements(l: list):\n    \"\"\"Return missing elements in a list\n    >>> find_missing_elements([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [4, 1]\n    \"\"\"\n    return [x for x in range(min(l), max(l)) if x not in l]\n\n\ndef find_missing_elements_v2(l: list):\n    \"\"\"Return missing elements in a list\n    >>> find_missing_elements([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [4, 1]\n    \"\"\"\n    return [x for x in range(min(l), max(l)) if x not in l]\n\n\ndef find_missing_elements_v3(l: list):\n    \"\"\"Return missing elements in a list\n    >>> find_missing_elements([5, ", "\n    l.sort()\n    return [x for x in l if x not in l[1:]]\n\n\nif __name__ == '__main__':\n    print(\"", "\n    return sorted(set(l))\n\n\ndef main():\n    l = [5, 3, 5, 2, 3, 3, 9, 0, 123]\n    print(unique(l))\n\n\nif __name__ == \"__main__\":\n    main()\n"], ["    return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l)\n\n\ndef max_abs_element(l: list):\n    \"\"\"Return maximum absolute element in the list.\n    >>> max_abs_element([1, 2, 3])\n    3\n    >>> max_abs_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l, key=abs)\n\n\ndef min_abs_element(l: list):\n    \"\"\"Return minimum absolute element in the list.\n    >>> min_abs_element([1, 2, 3])\n    1\n    >>> min_abs_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -5\n    \"\"\"\n    return min(l, key=abs)\n\n\ndef max_abs_diff(l: list):\n    \"\"\"Return maximum absolute difference between two adjacent elements in the list.\n    >>> max_abs_diff([1, 2, 3])\n    2\n    >>> max_abs_diff([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n", "    m = l[0]\n    for i in l[1:]:\n        if i > m:\n            m = i\n    return m\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    m = l[0]\n    for i in l[1:]:\n        if i < m:\n            m = i\n    return m\n\n\ndef mean_element(l: list):\n    \"\"\"Return mean element in the list.\n    >>> mean_element([1, 2, 3])\n    2.0\n    >>> mean_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    2.7833333333333333\n    \"\"\"\n    return sum(l) / len(l)\n\n\ndef median_element(l: list):\n    \"\"\"Return median element in the list.\n    >>> median_element([1, 2, 3])\n    2.0\n    >>> median_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    2.0\n    \"\"\"\n    l = sorted(l)\n    return l[int(len(l) / 2)]\n\n\ndef mode_element(l: list):\n    \"\"\"Return mode element in the list.\n    >>> mode_element([", "\n    return max(l)\n\n\ndef average(l: list):\n    \"\"\"Return average of the list.\n    >>> average([1, 2, 3])\n    2.0\n    >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    10.38095238095238\n    \"\"\"\n\n    return sum(l) / len(l)\n\n\ndef count_even(l: list):\n    \"\"\"Return number of even elements in the list.\n    >>> count_even([1, 2, 3])\n    0\n    >>> count_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    4\n    \"\"\"\n\n    return sum(1 for n in l if n % 2 == 0)\n\n\ndef count_negative(l: list):\n    \"\"\"Return number of negative elements in the list.\n    >>> count_negative([1, 2, 3])\n    0\n    >>> count_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    3\n    \"\"\"\n\n    return sum(1 for n in l if n < 0)\n\n\ndef sum_positive(l: list):\n    \"\"\"Return sum of the positive elements in the list.\n    >>> sum_positive([1, 2, 3])\n    6\n    >>> sum_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,", "    m = 0\n    for x in l:\n        if x > m:\n            m = x\n    return m\n\n\nprint(max_element([1, 2, 3]))\nprint(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n", "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        if l[0] >= l[1]:\n            return l[0]\n        else:\n            return l[1]\n    else:\n        return max(l[0], max_element(l[1:]))\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        if l[0] <= l[1]:\n            return l[0]\n        else:\n            return l[1]\n    else:\n        return min(l[0], min_element(l[1:]))\n\n\ndef max_and_min_element(l: list):\n    \"\"\"Return max and min elements in the list.\n    >>> max_and_min_element([1, 2, 3])\n    (3, 1)\n    >>> max_and_min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (123, -10)\n    \"\"\"\n    max_ = max_element(l)\n    min_ = min_element(l)"], ["    pass\n\n\ndef main():\n    print(fizz_buzz(int(input())))\n\n\nif __name__ == '__main__':\n    main()\n", "    ...\n\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ...\n\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ...\n\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ...\n\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ...\n\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than", "    return n\n\n\n# @lc code=end\n\n# @lc info=start\n# x = fizz_buzz(50)\n# print(x)\n# @lc info=end\n\n# @lc tests=start\n# Example Tests\n# tests.assert_equals(fizz_buzz(50), 0)\n# tests.assert_equals(fizz_buzz(78), 2)\n# tests.assert_equals(fizz_buzz(79), 3)\n\n# @lc tests=end\n\n# @lc rank=null\n# @lc diff=null\n\n# @lc", "    # Your code goes here\n    count = 0\n    for i in range(1,n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i) in ['7','17','27','37','47','57','67','77','87','97','07']:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)\n\n\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    # Your code goes here\n    count = 0\n    for i in range(1,n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i) in ['7','17','27','37','47','57','67','77','87','97','07']:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)\n\n\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>", "    c = 0\n    for i in range(n):\n        if (i+1)%11==0 or (i+1)%13==0:\n            if str(i+1) == \"7\":\n                c += 1\n    return c\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(fizz_buzz(50))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert fizz_buzz(50) == 0\n    assert fizz_buzz(78) == 2\n    assert fizz_buzz(79) == 3\n    print(\"Coding complete!\")\n"], ["    pass\n\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    >>> sort_odd([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_odd([5, 6, 3, 4])\n    [3, 6, 4, 5]\n    \"\"\"\n    pass\n\n\ndef partition(l: list, p: int, r: int):\n    \"\"\"This function takes a list l, and two integers p and r.\n    It partitions the list l into two halves such that l[p] <= l[p+1] <= ... <= l[r-1] <= l[r].\n    >>> partition([1, 2, 3], 0, 2)\n    [1, 2, 3]\n    >>> partition([5, 6, 3, 4], 1, 3)\n    [5, 3, 4, 6]\n    >>> partition([3, 2, 1], 0, 2)\n    [3, 2, 1]\n    \"\"\"\n    pass\n\n\ndef merge(l: list, p: int, q: int, r: int):\n    \"\"\"This function takes a list l, two integers p and q, and an integer r.\n    It merges the two halves of l[p:q+1] and l[q+1:r+", "    pass\n\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    >>> sort_odd([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_odd([5, 6, 3, 4])\n    [5, 6, 4, 3]\n    \"\"\"\n    pass\n\n\ndef sort_lists(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that l' is equal to l, but sorted.\n    The even and odd indicies of l' are, respectively, the even and odd indicies of l,\n    but sorted.\n    >>> sort_lists([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_lists([5, 6, 3, 4])\n    [3, 5, 4, 6]\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    from random import randint\n\n    # Test your function on random lists, and check that the result\n    # is equal to the result of the built-in sorted() function.\n    from random import randint\n\n    for i in range(10):\n        print(\"Test #\", i + 1)\n        l = [randint(1, 1000", "    l = list(l)\n    l1 = []\n    for i in range(0, len(l), 2):\n        l1.append(l[i])\n    l2 = []\n    for i in range(1, len(l), 2):\n        l2.append(l[i])\n    l1.sort()\n    l2.sort()\n    l = l1 + l2\n    return l\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n", "    l.sort()\n    for i in range(1, len(l), 2):\n        l[i] = l[i-2]\n    return l\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "    n = len(l)\n    l1 = l[::2]\n    l1.sort()\n    l2 = l[1::2]\n    l2.sort()\n    l = [0]*n\n    for i in range(n):\n        if i % 2 == 0:\n            l[i] = l1[i//2]\n        else:\n            l[i] = l2[i//2]\n    return l\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n\n# ## Solution\n\n# In[4]:\n\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    n = len(l)\n    l1 = l[::2]\n    l1.sort()\n    l2 = l[1::2]\n    l2.sort()\n    l = [0]*n\n    for i in range(n):\n        if i % 2 == 0:\n            l[i] = l1[i//2]\n        else:\n            l[i] = l2[i//2]"], ["    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # rotate elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[2:] + group[0:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\nif __name__ == \"__main__\":\n    # test cases\n    print(encode_cyclic('aaaa'))\n    print(encode_cyclic('aaaab'))\n    print(encode_cyclic('aaaac'))\n    print(encode_cyclic('aaaad'))\n    print(encode_cyclic('aaaae'))\n    print(encode_cyclic('aaaaf'))\n    print(encode_cyclic('aaaaa'))\n    print(encode_cyclic('aaaab'))\n    print(encode_cyclic('aaaac'))\n    print(encode_cyclic('aaaad'))\n    print(encode_cyclic('aaaae'))\n    print(encode_cyclic('aaaaf'))\n    print(encode_cyclic('aaaaa'))\n    print(encode_cyclic('aaaab'))\n    print(encode_cyclic('aaaac'))\n    print(encode_", "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef test_encode_decode_cyclic():\n    assert encode_cyclic(decode_cyclic(\"abc\")) == \"abc\"\n    assert encode_cyclic(decode_cyclic(\"abcd\")) == \"abcd\"\n    assert encode_cyclic(decode_cyclic(\"abcde\")) == \"abcde\"\n    assert encode_cyclic(decode_cyclic(\"abcdef\")) == \"abcdef\"\n    assert encode_cyclic(decode_cyclic(\"abcdefg\")) == \"abcdefg\"\n    assert encode_cyclic(decode_cyclic(\"abcdefgh\")) == \"abcdefgh\"\n    assert encode_cyclic(decode_cyclic(\"abcdefghi\")) == \"abcdefghi\"\n    assert encode_cyclic(decode_cyclic(\"abcdefghij\")) == \"abcdefghij\"\n    assert encode_cyclic(decode_cyclic(\"abcdefghijk\")) == \"abcdefghijk\"\n    assert", "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\n# ----------------------------------------------------------------\n\n\ndef encode_cyclic_new(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic_new(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 *", "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef main():\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    # print(f'Original: {s}')\n    # print(f'Encoded: {encode_cyclic(s)}')\n    # print(f'Decoded: {decode_cyclic(encode_cyclic(s))}')\n    # print(f'Decoded: {decode_cyclic(s)}')\n\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    s_encoded = encode_cyclic(s)\n    s_decoded = decode_cyclic(s_encoded)\n    s_decoded_reencoded = encode_cyclic(s_decoded)\n    print(f'Original: {s}')\n    print(f'Encoded: {s_encoded}')\n    print(f'Decoded: {s_decoded}')\n    print(f'", "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\n# Test\ns = 'aaabbbccc'\nprint(f\"encode_cyclic: {encode_cyclic(s)}\")\nprint(f\"decode_cyclic: {decode_cyclic(encode_cyclic(s))}\")\n\ns = 'aaabbbccc'\nprint(f\"encode_cyclic: {encode_cyclic(s)}\")\nprint(f\"decode_cyclic: {decode_cyclic(encode_cyclic(s))}\")\n\ns = 'aaabbbccc'\nprint(f\"encode_cyclic: {encode_cyclic(s)}\")\nprint(f\"decode_cyclic: {decode_cyclic(encode_cyclic(s))}\")\n\ns = 'aaabbbccc'\nprint(f\"encode_cyclic: {encode_cyclic(s)}\")\nprint(f\"decode_cyclic: {decode_cyclic(encode_cyclic(s))}\")\n\ns"], ["    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return fib(n)\n\n\n# If we were to store the prime numbers in a set, it'd be O(n) to check if a number is prime or not,\n# and in order to check if it is a Fibonacci number, we'd have to iterate over the set to see\n# if the number is in it. This is a bit wasteful.\n#\n# Instead, let's use a sieve of Eratosthenes. This is an algorithm that generates all primes up to\n# a certain number in O(n log log n) time.\n#\n# We can use that to generate all the Fibonacci numbers, and check if they're prime in O(n) time.\n#\n# https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\n\ndef sieve_of_eratosthenes(n: int):\n    \"\"\"\n    sieve_of_eratosthenes returns a list of all primes up to n\n    >>> sieve_of_eratosthenes(10)\n    [2, 3, 5, 7]\n    >>> sieve_of_eratosthenes(30)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    \"\"\"\n    primes = [True] * n\n    primes[0] = False\n    primes[1] = False\n\n    for i in range(2, int(n**0.5)+1):\n", "    pass\n\n\nclass TestPrimeFib(unittest.TestCase):\n    def test_prime_fib(self):\n        self.assertEqual(prime_fib(1), 2)\n        self.assertEqual(prime_fib(2), 3)\n        self.assertEqual(prime_fib(3), 5)\n        self.assertEqual(prime_fib(4), 13)\n        self.assertEqual(prime_fib(5), 89)\n        self.assertEqual(prime_fib(6), 100)\n        self.assertEqual(prime_fib(7), 121)\n        self.assertEqual(prime_fib(8), 159)\n        self.assertEqual(prime_fib(9), 200)\n        self.assertEqual(prime_fib(10), 250)\n        self.assertEqual(prime_fib(11), 310)\n        self.assertEqual(prime_fib(12), 369)\n        self.assertEqual(prime_fib(13), 428)\n        self.assertEqual(prime_fib(14), 489)\n        self.assertEqual(prime_fib(15), 550)\n        self.assertEqual(prime_fib(16), 619)\n        self.assertEqual(prime_fib(17), 688)\n        self.assertEqual(prime_fib(18), 757)\n        self.assertEqual(prime_fib(19), 826)\n        self.assert", "    def prime_fib(n: int):\n        \"\"\"\n        prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n        >>> prime_fib(1)\n        2\n        >>> prime_fib(2)\n        3\n        >>> prime_fib(3)\n        5\n        >>> prime_fib(4)\n        13\n        >>> prime_fib(5)\n        89\n        \"\"\"\n        return 2 if n == 1 else 3 if n == 2 else fib(n) and is_prime(fib(n))\n\n\n    def fib(n: int):\n        \"\"\"\n        fib returns n-th Fibonacci number\n        >>> fib(1)\n        1\n        >>> fib(2)\n        1\n        >>> fib(3)\n        2\n        >>> fib(4)\n        3\n        >>> fib(5)\n        5\n        >>> fib(6)\n        8\n        >>> fib(7)\n        13\n        >>> fib(8)\n        21\n        >>> fib(9)\n        34\n        >>> fib(10)\n        55\n        \"\"\"\n        return 1 if n == 1 else 1 if n == 2 else fib(n - 1) + fib(n - 2)\n\n\n    def is_prime(n: int):\n        \"\"\"\n        is_prime returns True if n is a prime number\n        >>> is_prime(2)\n        True\n        >>> is_prime(3)\n        True\n        >>> is_prime(4)\n        False\n        >>> is_prime(5)\n        True\n        >>> is_prime(6)\n", "    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    a = 1\n    b = 2\n    for i in range(3, n):\n        a, b = b, a + b\n        if is_prime(a):\n            return a\n\n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns true if n is prime, false otherwise.\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    False\n    >>> is_prime(17)\n    True\n    >>> is_prime(18)\n    False\n    >>> is_prime(19)\n    False\n    >>> is_prime(20)\n    False\n    >>> is_prime(21)\n    True\n    >>> is_prime(22)\n    False\n    >>> is_prime(23)\n    False\n    >>> is_prime", "    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        return fib(n-1) + fib(n-2)\n\n\ndef fib(n: int):\n    \"\"\"\n    fib returns n-th number of Fibonacci sequence.\n    >>> fib(0)\n    0\n    >>> fib(1)\n    1\n    >>> fib(2)\n    1\n    >>> fib(3)\n    2\n    >>> fib(4)\n    3\n    >>> fib(5)\n    5\n    >>> fib(6)\n    8\n    >>> fib(7)\n    13\n    >>> fib(8)\n    21\n    >>> fib(9)\n    34\n    >>> fib(10)\n    55\n    >>> fib(11)\n    89\n    >>> fib(12)\n    144\n    >>> fib(13)\n    233\n    >>> fib(14)\n    377\n    >>> fib(15)\n    610\n    >>> fib(16)\n    987\n    >>> fib(17)\n    1597\n    >>> fib(18)\n    2584\n    >>> fib(19)\n    4181\n    >>> fib(20)\n    6765\n    \"\"\"\n    if n < 0:\n        raise"], ["    # your code here\n    if not l or len(l) < 3:\n        return False\n    if len(l) == 3:\n        return l[0] + l[1] + l[2] == 0\n    l.sort()\n    first_index = 0\n    last_index = len(l) - 1\n    while first_index < len(l) and last_index >= 0:\n        if l[first_index] + l[last_index] == 0:\n            return True\n        if l[first_index] + l[last_index] > 0:\n            last_index -= 1\n        else:\n            first_index += 1\n    return False\n\n\ndef triples_sum_to_zero_2(l: list):\n    \"\"\"\n    triples_sum_to_zero_2 takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero_2([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero_2([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero_2([1, 2, 3,", "    l = sorted(l)\n    if len(l) < 3:\n        return False\n\n    for i in range(len(l) - 2):\n        x = l[i]\n        for j in range(i + 1, len(l) - 1):\n            y = l[j]\n            for k in range(j + 1, len(l)):\n                z = l[k]\n                if x + y + z == 0:\n                    return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n    # print(triples_sum_to_zero([1, 3, 5, 0]))\n    # print(triples_sum_to_zero([1, 3, -2, 1]))\n    # print(triples_sum_to_zero([1, 2, 3, 7]))\n    # print(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))\n    # print(triples_sum_to_zero([1]))\n\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if", "    pass\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n\n\n\"\"\"\ntriples_sum_to_zero([1, 3, 5, 0])\nFalse\ntriples_sum_to_zero([1, 3, -2, 1])\nTrue\ntriples_sum_to_zero([1, 2, 3, 7])\nFalse\ntriples_sum_to_zero([2, 4, -5, 3, 9, 7])\nTrue\ntriples_sum_to_zero([1])\nFalse\n\"\"\"\n\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, ", "    pass\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n# these two lines are added by me\n# I am using this to test the code\n\n# >>> triples_sum_to_zero([1, 3, 5, 0])\n# False\n# >>> triples_sum_to_zero([1, 3, -2, 1])\n# True\n# >>> triples_sum_to_zero([1, 2, 3, 7])\n# False\n# >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n# True\n# >>> triples_sum_to_zero([1])\n# False\n\n\n# These three lines are added by me\n# I am using this to test the code\n# I have written a sample test case\n# to check the code for the sample test case\n# and also to check that the code works for all the test cases\n\n# >>> triples_sum_to_zero([1, 2, 3])\n# False\n\n\n# These four lines are added by me\n# I am using this to test the code\n# I have written a sample test case\n# to check the code for the sample test case\n# and also to check that the code works for all the test cases", "    return False\n\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    unique = set(l)\n    return len(unique) >= 3 and len(unique) < 5\n\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False"], ["\n    return n\n\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n\n    n = int(input())\n    print(car_race_collision(n))\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n# Problem statement:\n#\n# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n#\n# This function outputs the number of such collisions.\n#\n# Input Format\n#\n# A single line containing the integer n.\n#\n# Constraints\n#\n# 1 <= n <= 200\n#\n# Output Format\n#\n# A single integer value representing the number of collisions.\n#\n# Sample Input\n#\n# 3\n#\n# Sample Output\n#\n# 3\n\n# Explanation\n#\n# There are 3 collisions:\n#\n# The first collision occurs at the point where the cars start out being far from", "\n    # The number of cars is 3n\n    # the cars are in the form of a list with [left_car, right_car]\n    # The cars are in the form of a list with [left_car, right_car]\n    # The cars are in the form of a list with [left_car, right_car]\n    # The cars are in the form of a list with [left_car, right_car]\n    # The cars are in the form of a list with [left_car, right_car]\n\n    # Assume that n is odd\n\n    def car_race_collision(n: int):\n        # This function assumes that n is odd\n        # It also assumes that n is a multiple of 3\n\n        # A set of n cars is represented by a list of 2n cars\n        # We can group the cars into 2 sets of cars\n        # The left to right cars are at indices 0, 1, 2, ... 2n - 1\n        # The right to left cars are at indices 2, 3, 4, ... 2n\n        # The function outputs the number of collisions\n        # The function returns -1 if the input is invalid\n\n        # The cars are in the form of a list with [left_car, right_car]\n        if n % 2 == 0 or n % 3 != 0:\n            return -1\n\n        # The cars are in the form of a list with [left_", "    pass\n\n\ndef car_race_collision_2(n: int):\n    \"\"\"\n    This is a more efficient version of the above algorithm.\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    print(car_race_collision(4))\n    print(car_race_collision(5))\n    print(car_race_collision(6))\n    print(car_race_collision(7))\n    print(car_race_collision(8))\n    print(car_race_collision(9))\n    print(car_race_collision(10))\n    print(car_race_collision(11))\n    print(car_race_collision(12))\n    print(car_race_collision(13))\n    print(car_race_collision(14))\n    print(car_race_collision(15))\n    print(car_race_collision(16))\n    print(car_race_collision(17))\n    print(car_race_collision(18))\n    print(car_race_collision(19))\n    print(car_race_collision(20))\n    print(car_race_collision(21))\n    print(car_race_collision(22))\n    print(car_race_collision(23))\n    print(car_race_collision(24", "    def car_race_collision(n: int):\n        ...\n\n    print(car_race_collision(5))  # 4\n    print(car_race_collision(4))  # 6\n    print(car_race_collision(3))  # 10\n    print(car_race_collision(2))  # 12\n    print(car_race_collision(1))  # 12\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    main()\n\n\n\"\"\"\n\nTask\n\nWrite a function car_race_collision(n) that takes a parameter n which represents the number of cars on the road. The function returns the number of collisions between the cars.\n\nNote: The cars are infinitely sturdy and strong; as a result, they continue moving in their trajectory as if they did not collide.\n\nExamples\ncar_race_collision(5) \u279e 4\n\ncar_race_collision(4) \u279e 6\n\ncar_race_collision(3) \u279e 10\n\ncar_race_collision(2) \u279e 12\n\ncar_race_collision(1) \u279e 12\n\n\n\n\"\"\"\n\n#solution 1\ndef car_race_collision(n):\n    collisions = 0", "    pass\n\n\ndef car_race_collision_v2(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n\n    This function is a better implementation.\n    \"\"\"\n    pass\n\n\ndef car_race_collision_v3(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not col"], ["    return [i + 1 for i in l]\n\n\ndef get_max_val(l: list):\n    \"\"\"Return max value in list.\n    >>> get_max_val([2, 3, 4])\n    4\n    >>> get_max_val([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    123\n    \"\"\"\n    return max(l)\n\n\ndef get_min_val(l: list):\n    \"\"\"Return min value in list.\n    >>> get_min_val([2, 3, 4])\n    2\n    >>> get_min_val([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    0\n    \"\"\"\n    return min(l)\n\n\ndef get_sum_val(l: list):\n    \"\"\"Return sum of elements in list.\n    >>> get_sum_val([2, 3, 4])\n    9\n    >>> get_sum_val([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    414\n    \"\"\"\n    return sum(l)\n\n\ndef get_mean_val(l: list):\n    \"\"\"Return mean value in list.\n    >>> get_mean_val([2, 3, 4])\n    3.0\n    >>> get_mean_val([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    40.833", "    return [x+1 for x in l]\n\n\ndef incr_list2(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]\n\n\ndef incr_list3(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x+1 for x in l]\n\n\ndef incr_list4(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,", "\n    l_new = []\n    for i in l:\n        l_new.append(i + 1)\n\n    return l_new\n\n\n# ----------------------------------------------------------------------\n#   List Comprehension\n# ----------------------------------------------------------------------\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\n    l_new = [i + 1 for i in l]\n\n    return l_new\n\n\n# ----------------------------------------------------------------------\n#   List Comprehension\n# ----------------------------------------------------------------------\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\n    l_new = [i + 1 for i in l]\n\n    return l_new\n\n\n# -----------------", "    return [i + 1 for i in l]\n\n\ndef square_list(l: list):\n    \"\"\"Return list with elements squared.\n    >>> square_list([1, 2, 3])\n    [1, 4, 9]\n    >>> square_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [25, 9, 25, 4, 9, 9, 81, 0, 1481]\n    \"\"\"\n    return [i * i for i in l]\n\n\ndef list_concat(l1: list, l2: list):\n    \"\"\"Return concatenation of two lists.\n    >>> list_concat([1, 2, 3], [4, 5, 6])\n    [1, 2, 3, 4, 5, 6]\n    >>> list_concat([5, 3, 5, 2, 3, 3, 9, 0, 123], [1, 2, 3, 4, 5, 6])\n    [5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 2, 3, 4, 5, 6]\n    \"\"\"\n    return l1 + l2\n\n\ndef list_reverse(l: list):\n    \"\"\"Return reversed list.\n    >>> list_reverse([1, 2, 3])\n    [3, 2, 1]\n    >>> list_reverse([5, ", "    return [x+1 for x in l]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n\"\"\"\nPartially applied functions\n----------------------------\n\nIn functional programming, partial application is the idea of applying a function to a fixed number of arguments, and returning a function that can be applied to the remaining arguments.\n\nFor example, the following function takes three arguments, and returns the sum of the two arguments.\n\n>>> add(1, 2)\n3\n\nWe can partially apply the first argument, and return a new function that takes only the second argument.\n\n>>> add_one = add(1)\n>>> add_one(2)\n3\n\nWe can partially apply the second argument, and return a new function that takes only the first argument.\n\n>>> add_two = add(2)\n>>> add_two(1)\n3\n\nPartially applied functions are useful in a number of contexts.\n\nFunctions that are built from other functions\n-------------------------------------------------\n\nFunctions can be built from other functions, and are often used as building blocks for other functions.\n\nFor example, the following function is a partial application of the function `map`, and returns a new function that takes a single argument, and applies the function `map` to the arguments `(f, [x])`.\n\n>>> apply_map = map([1])\n>>> apply_map(lambda x: x + 1)\n[2]\n\nFunctions that take a function as an argument\n-----------------------------------------------\n\nFunctions can be built from other functions, and are often used as building blocks for other functions.\n\nFor example, the"], ["    # Your code here\n    pass\n\nif __name__ == '__main__':\n    pairs_sum_to_zero([1, 3, 5, 0])\n    pairs_sum_to_zero([1, 3, -2, 1])\n    pairs_sum_to_zero([1, 2, 3, 7])\n    pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    pairs_sum_to_zero([1])\n    pairs_sum_to_zero([1, 0, 2, 3, 4, 5, 6, 7, 8, 9])\n    pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8", "    return True\n\n\nif __name__ == \"__main__\":\n    print(pairs_sum_to_zero([1, 3, 5, 0]))\n    print(pairs_sum_to_zero([1, 3, -2, 1]))\n    print(pairs_sum_to_zero([1, 2, 3, 7]))\n    print(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))\n    print(pairs_sum_to_zero([1]))\n    print(pairs_sum_to_zero([1, 2, 3, 7, 10, 100, 200]))\n\n    print(pairs_sum_to_zero([]))\n    print(pairs_sum_to_zero([1, 2, 3, 7, 10, 100, 200, 300]))\n    print(pairs_sum_to_zero([1, 2, 3, 7, 10, 100, 200, 300, 400]))\n\n    print(pairs_sum_to_zero([1, 2, 3, 7, 10, 100, 200, 300, 40", "\n    pass\n\n\ndef test_pairs_sum_to_zero():\n    assert pairs_sum_to_zero([1, 3, 5, 0]) == False\n    assert pairs_sum_to_zero([1, 3, -2, 1]) == False\n    assert pairs_sum_to_zero([1, 2, 3, 7]) == False\n    assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True\n    assert pairs_sum_to_zero([1]) == False\n\n    with raises(Exception):\n        pairs_sum_to_zero([])\n\n\ndef two_sum(l, target):\n    \"\"\"\n    two_sum takes a list of integers as an input.\n    It returns two numbers that sum to the target.\n    If there are more than one pair of numbers that sum to target,\n    return any one of them.\n    If there are no two numbers that sum to target, return None.\n    >>> two_sum([1, 3, 5, 0], 10)\n    (1, 9)\n    >>> two_sum([1, 3, -2, 1], 0)\n    (3, 2)\n    >>> two_sum([1, 2, 3, 7], 8)\n    (1, 7)\n", "    # your code here\n    return False\n\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # your code here\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n\n    return False\n\n\nif __name__ == '__main__':\n    l = [1, 3, 5, 0]\n    print(pairs_sum_to_zero(l))\n\n    l = [1, 3, -2", "    # Your code here\n\n\nprint(pairs_sum_to_zero([1, 3, 5, 0]))\nprint(pairs_sum_to_zero([1, 3, -2, 1]))\nprint(pairs_sum_to_zero([1, 2, 3, 7]))\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))\nprint(pairs_sum_to_zero([1]))\n\n\n# ----------------------------------------------------------\n\n# 2.\n\n\ndef pairs_sum_to_zero_2(l):\n    \"\"\"\n    pairs_sum_to_zero_2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_2([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_2([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_2([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_2([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_2"], ["\n    if base < 10:\n        return str(int(x, base))\n    if base > 9:\n        return str(int(x, base))\n\n\ndef main():\n    print(change_base(123, 2))\n    print(change_base(123, 8))\n    print(change_base(123, 10))\n    print(change_base(123, 16))\n    print(change_base(123, 20))\n\n\nif __name__ == '__main__':\n    main()\n\n# \u4ee5\u4e0a\u5185\u5bb9", "    assert 2 < base < 10\n\n    # start of your code\n    x_str = str(x)\n    res = ''\n    for i in range(len(x_str)):\n        res += str(int(x_str[i]) * (base ** (len(x_str) - i - 1)))\n    return res\n    # end of your code\n\n\ndef change_base_test():\n    print('change_base')\n    test_cases = [\n        (8, 3),\n        (8, 2),\n        (7, 2)\n    ]\n    for test_case in test_cases:\n        x, base = test_case\n        print('x = {} base = {} =>'.format(x, base))\n        result = change_base(x, base)\n        print(result)\n\n\nif __name__ == '__main__':\n    change_base_test()\n", "    x = str(x)\n    return ''.join(map(str, [int(i, base) for i in x]))\n\n\ndef change_base2(x, base):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base2(8, 3)\n    '22'\n    >>> change_base2(8, 2)\n    '1000'\n    >>> change_base2(7, 2)\n    '111'\n    \"\"\"\n    x = str(x)\n    return ''.join(map(str, [int(i, base) for i in x]))\n\n\ndef change_base3(x, base):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base3(8, 3)\n    '22'\n    >>> change_base3(8, 2)\n    '1000'\n    >>> change_base3(7, 2)\n    '111'\n    \"\"\"\n    x = str(x)\n    return ''.join(map(str, [int(i, base) for i in x]))\n\n\ndef change_base4(x, base):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base4(8, 3)\n    '22'\n    >>> change_base4(8, 2)\n    '1000'\n    >>> change_", "\n    # initialize result as an empty string\n    res = ''\n\n    # while x is not equal to 0\n    while x != 0:\n        # append the last digit of x\n        res += str(x % base)\n        # divide x by base\n        x //= base\n\n    # return the result\n    return res[::-1]\n\n\ndef main():\n    print(change_base(8, 3))\n    print(change_base(8, 2))\n    print(change_base(7, 2))\n\n\nif __name__ == '__main__':\n    main()\n", "    assert 2 <= base < 10\n    assert x >= 0\n\n    if x == 0:\n        return '0'\n\n    # start from the most significant digit, so that the result is\n    # right-justified\n    # 12345 -> 123 45\n    res = []\n    while x:\n        res.append(str(x % base))\n        x //= base\n    res.reverse()\n    return ''.join(res)\n\n\ndef to_binary(x: int):\n    \"\"\"Convert integer to binary, return string representation.\"\"\"\n    return change_base(x, 2)\n\n\ndef to_decimal(x: str):\n    \"\"\"Convert binary string to decimal, return integer.\"\"\"\n    # assume input is a string of 0 and 1\n    assert all(c in '01' for c in x)\n    # compute the result recursively\n    return _to_decimal(x, 2)\n\n\ndef _to_decimal(x: str, base: int):\n    \"\"\"Helper function for to_decimal.\"\"\"\n    assert len(x) > 0\n    assert 2 <= base < 10\n    if len(x) == 1:\n        return int(x)\n    # compute the result recursively\n    return base * _to_decimal(x[:-1], base) + int(x[-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    do"], ["    return a * h / 2\n\n\ndef triangle_perimeter(a, b, c):\n    \"\"\"Given lengths of three sides of a triangle, return perimeter.\n    >>> triangle_perimeter(4, 5, 6)\n    15\n    \"\"\"\n    return a + b + c\n\n\ndef triangle_condition(a, b, c):\n    \"\"\"Given lengths of three sides of a triangle, return whether it's possible to construct the triangle with those sides.\n    >>> triangle_condition(1, 1, 1)\n    False\n    >>> triangle_condition(3, 4, 5)\n    True\n    \"\"\"\n    return a < b + c and b < a + c and c < a + b\n\n\ndef triangle_type(a, b, c):\n    \"\"\"Given lengths of three sides of a triangle, return its type.\n    >>> triangle_type(3, 4, 5)\n    'Acute'\n    >>> triangle_type(3, 4, 7)\n    'Right'\n    >>> triangle_type(3, 4, 10)\n    'Obtuse'\n    >>> triangle_type(3, 4, 11)\n    'Impossible'\n    \"\"\"\n    if triangle_condition(a, b, c):\n        if triangle_area(a, b) == triangle_area(a, c):\n            return 'Right'\n        elif triangle_area(a, b) < triangle_area(a, c):\n            return 'Acute'\n        else:\n            return 'Obtuse'\n    else:\n        return 'Impossible'\n\n\ndef triangle_type_conditional(a, b, c):\n    \"\"\"Given lengths of three sides of a triangle, return its type.\n    >>> triangle_type_conditional(3, 4, 5)\n    'Right'\n    >>> triangle_type_conditional(3, 4, 7)\n    'Acute'", "    return 0.5 * a * h\n\n\ndef triangle_perimeter(a, h):\n    \"\"\"Given length of a side and high return perimeter for a triangle.\n    >>> triangle_perimeter(5, 3)\n    11\n    \"\"\"\n    return 2 * a + 2 * h\n\n\ndef triangle_area_perimeter(a, h):\n    \"\"\"Given length of a side and high return perimeter and area for a triangle.\n    >>> triangle_area_perimeter(5, 3)\n    (7.5, 11)\n    \"\"\"\n    return (triangle_area(a, h), triangle_perimeter(a, h))\n\n\ndef triangle_area_perimeter_ratio(a, h):\n    \"\"\"Given length of a side and high return ratio of area to perimeter for a triangle.\n    >>> triangle_area_perimeter_ratio(5, 3)\n    1.6666666666666667\n    \"\"\"\n    return triangle_area(a, h) / triangle_perimeter(a, h)\n\n\ndef triangle_perimeter_to_area_ratio(a, h):\n    \"\"\"Given length of a side and high return ratio of perimeter to area for a triangle.\n    >>> triangle_perimeter_to_area_ratio(5, 3)\n    1.3333333333333333\n    \"\"\"\n    return triangle_perimeter(a, h) / triangle_area(a, h)\n\n\ndef triangle_perimeter_to_hypotenuse_ratio(a, h):\n    \"\"\"Given length of a side and high return ratio of perimeter to hypotenuse for a triangle.\n    >>> triangle_perimeter_to_hypotenuse_ratio(5, 3)\n    1.5\n    \"\"\"\n    return triangle_perimeter(a, h) / (a + h", "    return (a * h) / 2\n\n\ndef is_rectangle_area_triangular(rectangle, triangle):\n    \"\"\"Given length of a side and high return True if area of a triangle\n    is less than area of a rectangle, False otherwise.\n    >>> is_rectangle_area_triangular(5, 3)\n    True\n    >>> is_rectangle_area_triangular(5, 3.5)\n    False\n    \"\"\"\n    return triangle_area(rectangle, rectangle) < triangle_area(triangle, triangle)\n\n\ndef is_rectangle_area_triangular_2(rectangle, triangle):\n    \"\"\"Given length of a side and high return True if area of a triangle\n    is less than area of a rectangle, False otherwise.\n    >>> is_rectangle_area_triangular_2(5, 3)\n    True\n    >>> is_rectangle_area_triangular_2(5, 3.5)\n    False\n    \"\"\"\n    return triangle_area(triangle, triangle) < rectangle_area(rectangle, rectangle)\n\n\ndef is_rectangle_area_triangular_3(rectangle, triangle):\n    \"\"\"Given length of a side and high return True if area of a triangle\n    is less than area of a rectangle, False otherwise.\n    >>> is_rectangle_area_triangular_3(5, 3)\n    True\n    >>> is_rectangle_area_triangular_3(5, 3.5)\n    False\n    \"\"\"\n    return is_rectangle_area_triangular_2(rectangle, triangle)\n\n\ndef is_rectangle_area_triangular_4(rectangle, triangle):\n    \"\"\"Given length of a side and high return True if area of a triangle\n    is less than area of a rectangle, False otherwise.\n    >>> is_rectangle_area_triangular_4(5, 3)\n    True\n    >>> is_rectangle_area_tri", "    return (a*h)/2\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "    return a * h / 2\n\n\n# print(triangle_area(5, 3))\n\n# 2\n\n\ndef square_area(a):\n    \"\"\"Given length of a side return area for a square.\n    >>> square_area(5)\n    25\n    \"\"\"\n    return a * a\n\n\n# print(square_area(5))\n\n# 3\n\n\ndef rectangle_area(a, b):\n    \"\"\"Given lengths of two sides return area for a rectangle.\n    >>> rectangle_area(5, 4)\n    20\n    \"\"\"\n    return a * b\n\n\n# print(rectangle_area(5, 4))\n\n# 4\n\n\ndef rhombus_area(a, b):\n    \"\"\"Given lengths of two sides return area for a rhombus.\n    >>> rhombus_area(5, 4)\n    25\n    \"\"\"\n    return a * b / 2\n\n\n# print(rhombus_area(5, 4))\n\n# 5\n\n\ndef circle_area(r):\n    \"\"\"Given radius of a circle return area for a circle.\n    >>> circle_area(5)\n    78.5\n    \"\"\"\n    return 3.14 * r * r\n\n\n# print(circle_area(5))\n\n# 6\n\n\ndef triangle_perimeter(a, h):\n    \"\"\"Given length of a side and high return perimeter for a triangle.\n    >>> triangle_perimeter(5, 3)\n    12\n    \"\"\"\n    return a * 2 + h * 2\n\n\n# print(triangle_perimeter(5, 3))\n\n# 7\n\n\ndef square_perimeter(a):\n    \"\"\"Given length of a side return perimeter for a square.\n    >>> square_perimeter(5)\n    20\n    \"\"\"\n    return a * 4\n\n\n# print("], ["    pass\n\n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    4\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    14\n    \"\"\"\n    pass\n\n\ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 2\n    fib6(3) -> 0\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(", "    return 0\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n\n# ==============================================================================\n#\n#   fib4_recursive\n#\n# ------------------------------------------------------------------------------\n#\n#   (C) 2021 Frank-Rene Schaefer\n#\n# ==============================================================================\n\n\ndef fib4_recursive(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4_recursive(5)\n    4\n    >>> fib4_recursive(6)\n    8\n    >>> fib4_recursive(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2", "    # Your code here\n\n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    4\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    14\n    \"\"\"\n    # Your code here\n\n\ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 2\n    fib6(3) -> 0\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-", "    # TODO: Implement me\n    pass\n\n\ndef fib4_memo(n: int, memo: list = None):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef fib4_iter(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)", "    pass\n\n\ndef fib4_iterative(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4_iterative(5)\n    4\n    >>> fib4_iterative(6)\n    8\n    >>> fib4_iterative(7)\n    14\n    \"\"\"\n    pass\n\n\ndef fib4_recursive(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a"], ["    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n\ndef median_1(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_1([3, 1, 2, 4, 5])\n    3\n    >>> median_1([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n\ndef median_2(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_2([3, 1, 2, 4, 5])\n    3\n    >>> median_2([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return l[len(l) // 2]\n    else:\n        return l[len(l) // 2] + l[len(l) // 2 - 1]\n\n\ndef median_3(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_3([3, 1, 2, 4, 5])\n    3\n    >>> median_", "    return l[len(l)//2]\n\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2 - 1] + l[len(l)//2]) / 2\n    else:\n        return l[len(l)//2]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2 - 1] + l[len(l)//2]) / 2\n    else:\n        return l[len(l)//2]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000,", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2-1] + l[len(l)//2]) / 2\n    else:\n        return l[len(l)//2]\n\n\n\ndef median_of_median_list(median_list):\n    \"\"\"Return median of the medians of the list.\n    >>> median_of_median_list([3, 1, 2, 4, 5])\n    3\n    >>> median_of_median_list([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    median_list.sort()\n    return median(median_list)\n\n\ndef median_list(l: list):\n    \"\"\"Return a list of the medians of the given list.\n    >>> median_list([3, 1, 2, 4, 5])\n    [3, 2, 2, 4, 4]\n    >>> median_list([-10, 4, 6, 1000, 10, 20])\n    [-10, 4, 6, 1000, 10, 15]\n    \"\"\"\n    median_list = []\n    for i in range(0, len(l), 2):\n        median_list.append(median([l[i], l[i+1]]))\n    return median_list\n\n\ndef median_of_median_list_list(l: list):\n    \"\"\"Return a list of the medians of the medians of the given list.\n    >>> median_of_median_list_list([3, 1, 2, 4, 5", "    l.sort()\n    return l[len(l)//2]\n\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2-1] + l[len(l)//2]) / 2\n\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2-1] + l[len(l)//2]) / 2\n\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    else:\n", "\n    return sum(l) / float(len(l))\n\n\ndef main():\n    \"\"\"Main function.\n    \"\"\"\n\n    # Acquire the data\n    data = []\n    for _ in xrange(int(raw_input())):\n        line = raw_input()\n        data.append([float(x) for x in line.split()])\n\n    # Calculate and output the median\n    for row in data:\n        print('{0:.1f}'.format(median(row)))\n\n\nif __name__ == '__main__':\n    main()\n"], ["    if len(text) == 1:\n        return True\n    elif len(text) == 2:\n        return text[0] == text[-1]\n    elif len(text) == 3:\n        return text[0] == text[-1] and text[1] == text[-2]\n    else:\n        return text[0] == text[-1] and text[1] == text[-2] and text[2] == text[-3]\n\n\ndef get_substrings(text: str):\n    \"\"\"\n    Returns substrings of given text\n    >>> get_substrings('aba')\n    ['', 'a', 'ab', 'ba', 'aba', 'b']\n    \"\"\"\n    result = []\n    for i in range(0, len(text) + 1):\n        result.append(text[0:i])\n    for i in range(0, len(text)):\n        result.append(text[i:len(text)])\n    return result\n\n\ndef get_all_substrings(text: str):\n    \"\"\"\n    Returns substrings of given text\n    >>> get_all_substrings('aba')\n    ['', 'a', 'ab', 'b', 'ba', 'aba', 'b']\n    \"\"\"\n    result = []\n    for i in range(0, len(text) + 1):\n        result.append(text[0:i])\n    for i in range(0, len(text)):\n        result.append(text[i:len(text)])\n    return result\n\n\ndef get_unique_substrings(text: str):\n    \"\"\"\n    Returns substrings of given text, but without duplicates\n    >>> get_unique_substrings('aba')\n    ['', 'a', 'ab', 'b', 'ba', 'aba', 'b", "\n    def is_palindrome(text: str):\n        if len(text) < 2:\n            return True\n\n        start_index = 0\n        end_index = len(text) - 1\n\n        while start_index < end_index:\n            if text[start_index] != text[end_index]:\n                return False\n            start_index += 1\n            end_index -= 1\n        return True\n\n\ndef get_min_edit_distance(text1: str, text2: str, memo: dict):\n    \"\"\"\n    Gets the minimum edit distance between two strings\n    >>> get_min_edit_distance('a', 'a')\n    0\n    >>> get_min_edit_distance('a', 'b')\n    1\n    >>> get_min_edit_distance('a', 'ab')\n    1\n    >>> get_min_edit_distance('a', 'ba')\n    1\n    >>> get_min_edit_distance('a', 'baa')\n    2\n    >>> get_min_edit_distance('ab', 'b')\n    1\n    >>> get_min_edit_distance('ab', 'a')\n    1\n    >>> get_min_edit_distance('ab', 'ba')\n    2\n    >>> get_min_edit_distance('aab', 'ab')\n    1\n    >>> get_min_edit_distance('aab', 'ba')\n    2\n    >>> get_min_edit_distance('aab', 'abb')\n    2\n    >>> get_min_edit_distance('aab', 'baa')\n    2\n    >>> get_min_edit_distance('aab', 'baab')\n    2\n    >>> get_min_edit_distance('aab', 'bab')\n    1\n", "    if text == text[::-1]:\n        return True\n    else:\n        return False\n\n\ndef is_palindrome_2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_2('')\n    True\n    >>> is_palindrome_2('aba')\n    True\n    >>> is_palindrome_2('aaaaa')\n    True\n    >>> is_palindrome_2('zbcd')\n    False\n    \"\"\"\n    if text == text[::-1]:\n        return True\n    else:\n        return False\n\n\ndef is_palindrome_3(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_3('')\n    True\n    >>> is_palindrome_3('aba')\n    True\n    >>> is_palindrome_3('aaaaa')\n    True\n    >>> is_palindrome_3('zbcd')\n    False\n    \"\"\"\n    if text == text[::-1]:\n        return True\n    else:\n        return False\n\n\ndef is_palindrome_4(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_4('')\n    True\n    >>> is_palindrome_4('aba')\n    True\n    >>> is_palindrome_4('aaaaa')\n    True\n    >>> is_palindrome_4('zbcd')\n    False\n    \"\"\"\n    if text == text[::-1]:\n        return True\n    else:\n        return False\n\n\ndef is_palindrome_5(text: str):\n    \"\"\"\n    Checks if given string is a pal", "    return text == text[::-1]\n\n\ndef main():\n    \"\"\"\n    Execute main function\n    \"\"\"\n    print(is_palindrome('zbcd'))\n    print(is_palindrome('aba'))\n    print(is_palindrome('aaaaa'))\n    print(is_palindrome(''))\n\n\nif __name__ == '__main__':\n    \"\"\"\n    Execute main function\n    \"\"\"\n    main()\n", "    return text == text[::-1]\n\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_"], ["    # TODO: Implement this function.\n    pass\n\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Returns the inverse of n modulo p.\n    >>> modp_inv(4, 5)\n    4\n    >>> modp_inv(2, 5)\n    3\n    >>> modp_inv(1, 5)\n    4\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(2, 11)\n    1\n    >>> modp_inv(3, 11)\n    2\n    >>> modp_inv(4, 11)\n    3\n    >>> modp_inv(5, 11)\n    4\n    >>> modp_inv(6, 11)\n    5\n    >>> modp_inv(7, 11)\n    6\n    >>> modp_inv(8, 11)\n    7\n    >>> modp_inv(9, 11)\n    8\n    >>> modp_inv(10, 11)\n    9\n    >>> modp_inv(11, 11)\n    10\n    >>> modp_inv(12, 11)\n    11\n    >>> modp_inv(13, 11)\n    12\n    >>> modp_inv(14, 11)\n    13\n    >>> modp_inv(15, 11)\n    14\n    >>> modp_inv(16, 11)\n    15\n    >>> modp_inv(17, 11)\n    1", "    assert 0 <= n < p\n    return pow(2, n, p)\n\n\ndef modp_vec(vec: Vector, p: int):\n    \"\"\"Return the vector of 2^vec modulo p (be aware of numerics).\n    >>> modp_vec([1, 1, 0, 1], 101)\n    [1, 1, 0, 1]\n    >>> modp_vec([1, 1, 0, 1], 11)\n    [2, 2, 0, 2]\n    \"\"\"\n    return [modp(i, p) for i in vec]\n\n\ndef mult_modp(vec1: Vector, vec2: Vector, p: int):\n    \"\"\"Return the product of vec1 and vec2 modulo p.\n    >>> mult_modp([1, 0, 1], [1, 1, 1], 101)\n    [1, 1, 1]\n    >>> mult_modp([1, 0, 1], [1, 1, 1], 11)\n    [10, 0, 10]\n    >>> mult_modp([1, 0, 1], [1, 1, 0], 101)\n    [1, 0, 1]\n    \"\"\"\n    return [\n        (vec1[i] * vec2[i] + (vec1[i] * vec2[i] - 1)) % p\n        for i in range(len(vec1))\n    ]\n\n\ndef mult_modp_vec(vec1: Vector, vec2: Vector, p:", "    return pow(2, n, p)\n\n\n# This is my first time solving a programming question. I don't know if I'm doing it right, so feel free to point out anything wrong.\ndef solution(m: int, n: int, p: int):\n    \"\"\"Return the number of integers from 1 to m, inclusive, which are NOT Fermat primes.\n    >>> solution(1000, 1000, 101)\n    280\n    >>> solution(1000, 1000, 103)\n    100\n    >>> solution(1000, 1000, 107)\n    32\n    >>> solution(1000, 1000, 109)\n    5\n    >>> solution(1000, 1000, 111)\n    2\n    >>> solution(1000, 1000, 113)\n    1\n    >>> solution(1000, 1000, 127)\n    1\n    >>> solution(1000, 1000, 131)\n    1\n    >>> solution(1000, 1000, 137)\n    1\n    >>> solution(1000, 1000, 149)\n    1\n    >>> solution(1000, 1000, 151)\n    1\n    >>> solution(1000, 1000, 157)\n    1\n    >>> solution(1000, ", "    if n < p:\n        return n\n    if p == 0:\n        return 0\n    if p == 1:\n        return 0\n    if p == 2:\n        return 1\n\n    m = modp(n, p//2)\n    if m == 0:\n        return 0\n    if m == 1:\n        if n == (p//2)-1:\n            return 1\n        else:\n            return 0\n    if m == 2:\n        if n == (p//2)-1:\n            return 2\n        else:\n            return 1\n    if m == 3:\n        if n == (p//2)-1:\n            return 3\n        else:\n            return 2\n\n    return 0\n\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    if n == 2:\n        return True\n    if n % 3 == 0:\n        return False\n    if n == 3:\n        return True\n    if n == 5:\n        return True\n    if n % 5 == 0:\n        return False\n    if n == 7:\n        return True\n    if n % 7 == 0:\n        return False\n    if n % 11 == 0:\n        return False\n    if n == 11:\n        return True\n    if n == 13:\n        return True\n    if n % 13 == 0:\n        return False\n    if n", "    if p == 1:\n        return 0\n    if p == 2:\n        return n\n    if n >= p:\n        return modp(n - p, p)\n    else:\n        return n\n\n\ndef factorial(n: int):\n    \"\"\"Return n!.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\ndef is_prime(n: int):\n    \"\"\"Return whether n is a prime number.\"\"\"\n    if n == 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef nth_prime(n: int):\n    \"\"\"Return the n-th prime number.\"\"\"\n    if n == 1:\n        return 2\n    else:\n        return primes(n - 1) + 1\n\n\ndef primes(n: int):\n    \"\"\"Return the first n prime numbers.\"\"\"\n    if n == 0:\n        return []\n    else:\n        return [2] + [i for i in range(3, int(sqrt(n)) + 1) if is_prime(i)]\n\n\ndef sieve(n: int):\n    \"\"\"Return the first n prime numbers using the sieve of eratosthenes.\"\"\"\n    if n == 0:\n        return []\n    else:\n        return [2] + [i for i in range(3, n + 1) if i not in [j * i for j in range(2, int(n / i) + "], ["    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef is_valid_shift(s: str) -> bool:\n    \"\"\"\n    returns true if the given string is valid encoded with encode_shift function.\n    \"\"\"\n    for ch in s:\n        if ord(ch) < ord(\"a\") or ord(ch) > ord(\"z\"):\n            return False\n    return True\n\n\ndef is_valid_decode(s: str) -> bool:\n    \"\"\"\n    returns true if the given string is valid encoded with decode_shift function.\n    \"\"\"\n    for ch in s:\n        if ord(ch) < ord(\"a\") or ord(ch) > ord(\"z\"):\n            return False\n    return True\n\n\ndef main():\n    while True:\n        command = input()\n        if command == \"0\":\n            break\n        elif command == \"1\":\n            s = input()\n            print(encode_shift(s))\n        elif command == \"2\":\n            s = input()\n            if is_valid_shift(s):\n                print(decode_shift(s))\n            else:\n                print(\"invalid\")\n        elif command == \"3\":\n            s = input()\n            if is_valid_decode(s):\n                print(\"valid\")\n            else:\n                print(\"invalid\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n\"\"\"\nSample Input 1:\n\n1\n1\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef encode_rotate(s: str):\n    \"\"\"\n    returns encoded string by rotating each character in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 13 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_rotate(s: str):\n    \"\"\"\n    takes as input string encoded with encode_rotate function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 13 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef encode_double(s: str):\n    \"\"\"\n    returns encoded string by doubling each character.\n    \"\"\"\n    return \"\".join([ch * 2 for ch in s])\n\n\ndef decode_double(s: str):\n    \"\"\"\n    takes as input string encoded with encode_double function. Returns decoded string.\n    \"\"\"\n    return \"\".join([ch[:len(ch) // 2] for ch in s])\n\n\ndef encode_triple(s: str):\n    \"\"\"\n    returns encoded string by tripling each character.\n    \"\"\"\n    return \"\".join([ch * 3 for ch in s])\n\n\ndef decode_triple(s: str):\n    \"\"\"\n    takes as input string encoded with encode_triple function. Returns decoded string.\n    \"\"\"\n    return \"\".join([ch[:len(ch) // 3] for ch in s])\n\n\ndef encode_reverse(s: str):\n", "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef main():\n    \"\"\"\n    decode_shift(\"zaz bax dox mux\") == \"aa bb cc dd\"\n    decode_shift(\"zaa bba dda ee\") == \"az bb cc dd\"\n    decode_shift(\"zaa bb aa cc\") == \"az bb aa cc\"\n    \"\"\"\n\n    print(decode_shift(\"zaz bax dox mux\"))\n    print(decode_shift(\"zaa bba dda ee\"))\n    print(decode_shift(\"zaa bb aa cc\"))\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n#  1. \ucf54\ub4dc\ub97c \uc2e4\ud589\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ub450 \uc904\uc758 \uacb0\uacfc\uac00 \ucd9c\ub825\ub41c\ub2e4.\n#  aa bb cc dd\n#  az bb cc dd\n#  az bb aa cc\n#  2. \uc704 \ucf54\ub4dc\uc758 \ud568\uc218 encode_shift \uc640 decode_shift \ub294 \ud568\uc218\uc758 \uc774\ub984\uc774 \uac19\uc73c\ub098 \uac01\uac01 \ub2e4\ub978 \uc5ed\ud560\uc744 \ud558\uace0 \uc788\ub2e4. \n#  encode_shift \ub294 \ubb38\uc790\uc5f4\uc744 \uc785\ub825 \ubc1b\uc544 5 \ub9cc\ud07c \uac01 \ubb38\uc790\uc758 \ucf54\ub4dc \uac12\uc744 \uc99d\uac00\uc2dc\ufffd\ufffd", "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\nif __name__ == '__main__':\n    print(encode_shift('abcd'))\n    print(decode_shift('fghj'))\n    print(encode_shift('abcdefghijklmnopqrstuvwxyz'))\n    print(decode_shift('zabcdefghijklmnopqrstuvwxy'))\n    print(encode_shift('zabcdefghijklmnopqrstuvwxy'))\n    print(decode_shift('fghjklmnopqrstuvwxyzabcdef'))\n    print(encode_shift('fghjklmnopqrstuvwxyzabcdef'))\n    print(decode_shift('zabcdefghijklmnopqrstuvwxy'))\n    print(encode_shift('zabcdefghijklmnopqrstuvwxy'))\n    print(decode_shift('fghjklmnopqrstuvwxyzabcdef'))\n    print(encode_shift('fghjklmnopqrstuvwxyzabcdef'))\n    print(decode_shift('zabcdefghijklmnopqrstuvwxy'))\n    print(encode_shift('zabcdefghijklmnopqrstuvwxy'))\n    print(decode_shift('fghjklmnopqrstuvwxyzabcdef'))\n    print(encode_shift('fghjklmnopqrstuvwxyzabcdef'))\n    print(decode_shift('zabcdefghijklmnopqrstuvwxy'))\n    print(encode_shift('z", "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\nclass EncoderDecoder(object):\n    \"\"\"\n    Encodes and Decodes strings.\n    \"\"\"\n\n    def __init__(self, shift: int = 5):\n        \"\"\"\n        :param shift: int\n        \"\"\"\n        self.shift = shift\n\n    def encode(self, s: str) -> str:\n        \"\"\"\n        :param s: str\n        :return: str\n        \"\"\"\n        return encode_shift(s)\n\n    def decode(self, s: str) -> str:\n        \"\"\"\n        :param s: str\n        :return: str\n        \"\"\"\n        return decode_shift(s)\n\n\nif __name__ == '__main__':\n    print(encode_shift('abcdefghijklmnopqrstuvwxyz'))\n    print(encode_shift('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\n    print(encode_shift('1234567890'))\n    print(encode_shift('!@#$%^&*()'))\n    print(encode_shift('`~[]{};:\\'\",.<>?/'))\n    print(encode_shift(' '))\n\n    print(decode_shift('abcdefghijklmnopqrstuvwxyz'))\n    print(decode_shift('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\n    print(decode_shift('1234567890'))\n    print(decode_shift('!@#$%^&*()'))\n    print("], ["    pass\n\n\ndef remove_vowels2(text):\n    \"\"\"\n    remove_vowels2 is a function that takes string and returns string without vowels.\n    >>> remove_vowels2('')\n    ''\n    >>> remove_vowels2(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels2('abcdef')\n    'bcdf'\n    >>> remove_vowels2('aaaaa')\n    ''\n    >>> remove_vowels2('aaBAA')\n    'B'\n    >>> remove_vowels2('zbcd')\n    'zbcd'\n    \"\"\"\n    pass\n\n\ndef remove_vowels3(text):\n    \"\"\"\n    remove_vowels3 is a function that takes string and returns string without vowels.\n    >>> remove_vowels3('')\n    ''\n    >>> remove_vowels3(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels3('abcdef')\n    'bcdf'\n    >>> remove_vowels3('aaaaa')\n    ''\n    >>> remove_vowels3('aaBAA')\n    'B'\n    >>> remove_vowels3('zbcd')\n    'zbcd'\n    \"\"\"\n    pass\n\n\ndef remove_vowels4(text):\n    \"\"\"\n    remove_vowels4 is a function", "    # Your code here\n    new_string = \"\"\n    for char in text:\n        if char.lower() not in \"aeiou\":\n            new_string += char\n    return new_string\n\n\n# --- part two ---\n\n\ndef remove_vowels_and_y(text):\n    \"\"\"\n    remove_vowels_and_y is a function that takes string and returns string without vowels and y.\n    >>> remove_vowels_and_y('')\n    ''\n    >>> remove_vowels_and_y(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels_and_y('abcdef')\n    'bcdf'\n    >>> remove_vowels_and_y('aaaaa')\n    ''\n    >>> remove_vowels_and_y('aaBAA')\n    'B'\n    >>> remove_vowels_and_y('zbcd')\n    'zbcd'\n    \"\"\"\n    # Your code here\n    new_string = \"\"\n    for char in text:\n        if char.lower() not in \"aeiouy\":\n            new_string += char\n    return new_string\n\n\n# --- part three ---\n\n\ndef remove_vowels_and_y(text):\n    \"\"\"\n    remove_vowels_and_y is a function that takes string and returns string without vowels and y.\n    >>> remove_vowels_and_y('')", "    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join([c for c in text if c not in vowels])\n\n\ndef remove_vowels_with_regex(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    import re\n    return re.sub(r\"[aeiou]\", \"\", text)\n\n\ndef remove_vowels_with_re_sub(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n   ", "    return text.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '').replace('A', '').replace('E', '').replace('I', '').replace('O', '').replace('U', '')\n\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return text.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '').replace('A', '').replace('E', '').replace('I', '').replace('O', '').replace('U', '')\n\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjkl", "    # your code here\n\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return text.translate(str.maketrans('', '', 'aeiou'))\n\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return text.replace('a', '').replace('e', '').replace('i', '').replace('"], ["    return all(x < t for x in l)\n\n\ndef sum_numbers(l: list):\n    \"\"\"Return the sum of all numbers in the list l.\n    >>> sum_numbers([1, 2, 4, 10])\n    17\n    \"\"\"\n    return sum(l)\n\n\ndef average_numbers(l: list):\n    \"\"\"Return the average of all numbers in the list l.\n    >>> average_numbers([1, 2, 4, 10])\n    4.25\n    \"\"\"\n    return sum(l) / len(l)\n\n\ndef count_numbers(l: list):\n    \"\"\"Return the number of numbers in the list l.\n    >>> count_numbers([1, 2, 4, 10])\n    4\n    \"\"\"\n    return len(l)\n\n\ndef count_below_threshold(l: list, t: int):\n    \"\"\"Return the number of numbers below threshold t in the list l.\n    >>> count_below_threshold([1, 2, 4, 10], 100)\n    0\n    >>> count_below_threshold([1, 20, 4, 10], 5)\n    2\n    \"\"\"\n    return count_numbers(list(filter(lambda x: x < t, l)))\n\n\ndef count_above_threshold(l: list, t: int):\n    \"\"\"Return the number of numbers above threshold t in the list l.\n    >>> count_above_threshold([1, 2, 4, 10], 100)\n    4\n    >>> count_above_threshold([1, 20, 4, 10], 5)\n    1\n    \"\"\"\n    return count_numbers(list(filter", "    return all(x < t for x in l)\n\n\ndef count_cats(l: list):\n    \"\"\"Return the number of cats in the list l.\n    >>> count_cats([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    9\n    \"\"\"\n    return sum(1 for x in l if x == \"cat\")\n\n\ndef count_cats_2(l: list):\n    \"\"\"Return the number of cats in the list l.\n    >>> count_cats_2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    9\n    \"\"\"\n    return sum(x == \"cat\" for x in l)\n\n\ndef count_cats_3(l: list):\n    \"\"\"Return the number of cats in the list l.\n    >>> count_cats_3([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    9\n    \"\"\"\n    return sum(x == \"cat\" for x in l if x == \"cat\")\n\n\ndef count_cats_4(l: list):\n    \"\"\"Return the number of cats in the list l.\n    >>> count_cats_4([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    9\n    \"\"\"\n    return sum(x == \"cat\" for x in l if x == \"cat\") + sum(x == \"dog\" for x in l if x == \"dog\")\n\n\ndef count_cats_5(l: list):\n    \"\"\"Return the number", "    return all(x < t for x in l)\n\n\ndef below_threshold_2(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold_2([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold_2([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "    return all(x < t for x in l)\n\n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    False\n    >>> above_threshold([1, 20, 4, 10], 5)\n    True\n    \"\"\"\n    return all(x > t for x in l)\n\n\ndef at_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are at threshold t.\n    >>> at_threshold([1, 2, 4, 10], 100)\n    False\n    >>> at_threshold([1, 20, 4, 10], 5)\n    False\n    >>> at_threshold([1, 20, 4, 10], 10)\n    True\n    \"\"\"\n    return all(x == t for x in l)\n\n\ndef find_max_min(l: list):\n    \"\"\"Return the max and min numbers in the list l.\n    >>> find_max_min([1, 2, 4, 10])\n    (10, 1)\n    >>> find_max_min([1, 20, 4, 10])\n    (20, 1)\n    >>> find_max_min([1, 2, 4, 10, 10, 10, 10, 10, 10])\n    (10, 1)\n    >>> find_max_min([1, 20, 4, 10, 10, 10", "    return all([i <= t for i in l])\n\n\ndef below_threshold_2(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold_2([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold_2([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(i <= t for i in l)\n\n\ndef below_threshold_3(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold_3([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold_3([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(i <= t for i in l)\n\n\ndef below_threshold_4(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold_4([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold_4([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(i <= t for i in l)\n\n\ndef below_threshold_5(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold_5([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold"], ["    return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0.7142857142857143\n    \"\"\"\n    return x / y\n\n\ndef remainder(x: int, y: int):\n    \"\"\"Find the remainder of dividing two numbers x and y\n    >>> remainder(2, 3)\n    2\n    >>> remainder(5, 7)\n    2\n    \"\"\"\n    return x % y\n\n\ndef power(x: int, y: int):\n    \"\"\"Find the power of two numbers x and y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    15625\n    \"\"\"\n    return x ** y\n\n\ndef square_root(x: int):\n    \"\"\"Find the square root of a number x\n    >>> square_root(2)\n    1.4142135623730951\n    >>> square_root(5)\n    2.23606797749979\n    \"\"\"\n    return math.sqrt(x)\n\n\ndef factorial(x: int):\n    \"\"\"Find the factorial of a number x\n    >>> factorial(2)\n    2\n", "    return x + y\n\n\ndef add_with_assert(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_with_assert(2, 3)\n    5\n    >>> add_with_assert(5, 7)\n    12\n    \"\"\"\n    assert isinstance(x, int)\n    assert isinstance(y, int)\n    return x + y\n\n\ndef add_with_typing(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add_with_typing(2, 3)\n    5\n    >>> add_with_typing(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n\ndef add_with_typing_and_assert(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add_with_typing_and_assert(2, 3)\n    5\n    >>> add_with_typing_and_assert(5, 7)\n    12\n    \"\"\"\n    assert isinstance(x, int)\n    assert isinstance(y, int)\n    return x + y\n\n\ndef add_with_defaults(x: int = 0, y: int = 0) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add_with_defaults(2, 3)\n    5\n    >>> add_with_defaults(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n\ndef add_with_defaults_and_assert(x: int = 0, y: int = 0) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add_with_defaults_and_assert(2, 3)\n    5\n    >>> add_with_defaults_and_assert(5, 7)\n    12\n    \"\"\"\n    assert", "    return x + y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    2/3\n    >>> divide(5, 7)\n    5/7\n    \"\"\"\n    return x / y\n\n\ndef power(x: int, y: int):\n    \"\"\"Raise two numbers x and y\n    >>> power(2, 3)\n    2**3\n    >>> power(5, 7)\n    5**7\n    \"\"\"\n    return x ** y\n\n\ndef modulo(x: int, y: int):\n    \"\"\"Return the modulo of two numbers x and y\n    >>> modulo(2, 3)\n    2%3\n    >>> modulo(5, 7)\n    5%7\n    \"\"\"\n    return x % y\n\n\ndef is_even(x: int):\n    \"\"\"Return if a number x is even\n    >>> is_even(2)\n    True\n    >>> is_even(5)\n    False\n    \"\"\"\n    return x % 2 == 0\n\n\ndef is_odd(x: int):\n    \"\"\"Return if a number x is odd\n    >>> is_odd(2)\n    False\n    >>> is_odd(5)\n    True\n    \"\"\"\n    return x % 2 == 1\n\n\ndef is_prime(x: int):\n    \"\"\"", "    return x + y\n\n\n# Additional function from the book\n\n\ndef add_two_numbers(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_two_numbers(2, 3)\n    5\n    >>> add_two_numbers(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n\n# Additional function from the book\n\n\ndef add_two_numbers_repr(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_two_numbers_repr(2, 3)\n    5\n    >>> add_two_numbers_repr(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n\ndef test_add() -> None:\n    \"\"\"Test the add function.\"\"\"\n    assert add(2, 3) == 5\n    assert add(5, 7) == 12\n\n\ndef test_add_two_numbers() -> None:\n    \"\"\"Test the add_two_numbers function.\"\"\"\n    assert add_two_numbers(2, 3) == 5\n    assert add_two_numbers(5, 7) == 12\n\n\ndef test_add_two_numbers_repr() -> None:\n    \"\"\"Test the add_two_numbers_repr function.\"\"\"\n    assert add_two_numbers_repr(2, 3) == 5\n    assert add_two_numbers_repr(5, 7) == 12\n\n\nif __name__ == \"__main__\":\n    test_add()\n    test_add_two_numbers()\n    test_add_two_numbers_repr()\n\n\n\"\"\"\nOutput:\n\n\npython test_add.py\n\n\n======================================================================\nFAILED test_add_two_numbers_repr.py - test_add_two_numbers_repr\n", "    return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0.7142857142857143\n    \"\"\"\n    return x / y\n\n\ndef modulo(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> modulo(2, 3)\n    2\n    >>> modulo(5, 7)\n    5\n    \"\"\"\n    return x % y\n\n\ndef power(x: int, y: int):\n    \"\"\"Power two numbers x and y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    1948720\n    \"\"\"\n    return x ** y\n\n\ndef root(x: int, y: int):\n    \"\"\"Root two numbers x and y\n    >>> root(2, 3)\n    0.6666666666666666\n    >>> root(5, 7)\n    0.7142857142857143\n    \"\"\"\n    return x ** (1 / y)\n\n\ndef is_even(x: int):\n    \"\"\"Check if x is even\n    >>> is_even(2)\n   "], ["    pass\n\n\ndef same_length(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same length.\n    >>> same_length('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_length('abcd', 'dddddddabc')\n    True\n    >>> same_length('dddddddabc', 'abcd')\n    True\n    >>> same_length('eabcd', 'dddddddabc')\n    False\n    >>> same_length('abcd', 'dddddddabce')\n    False\n    >>> same_length('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    pass\n\n\ndef same_chars_and_length(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters and the same length.\n    >>> same_chars_and_length('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_and_length('abcd', 'dddddddabc')\n    True\n    >>> same_chars_and_length('dddddddabc', 'abcd')\n    True\n    >>> same_chars_and_length('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_and", "    return len(s0) == len(s1) and all(c0 == c1 for c0, c1 in zip(sorted(s0), sorted(s1)))\n\n\ndef is_palindrome(s: str):\n    \"\"\"\n    Check if a word is a palindrome.\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('abcd')\n    False\n    >>> is_palindrome('race')\n    False\n    \"\"\"\n    return s == s[::-1]\n\n\ndef has_two_unique_chars(s: str):\n    \"\"\"\n    Check if a word has two unique characters.\n    >>> has_two_unique_chars('racecar')\n    True\n    >>> has_two_unique_chars('abcd')\n    False\n    >>> has_two_unique_chars('race')\n    False\n    >>> has_two_unique_chars('ab')\n    True\n    >>> has_two_unique_chars('a')\n    True\n    >>> has_two_unique_chars('')\n    False\n    \"\"\"\n    return len(s) == len(set(s)) == 2\n\n\ndef has_three_unique_chars(s: str):\n    \"\"\"\n    Check if a word has three unique characters.\n    >>> has_three_unique_chars('racecar')\n    True\n    >>>", "    s0 = set(s0)\n    s1 = set(s1)\n    return s0 == s1\n\n\ndef main():\n    s0 = input()\n    s1 = input()\n    print(same_chars(s0, s1))\n\n\nif __name__ == \"__main__\":\n    main()\n", "    pass\n\n\ndef same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) == len(s1):\n        counter = 0\n        for i, j in zip(s0, s1):\n            if i == j:\n                counter += 1\n        if counter == len(s0):\n            return True\n        return False\n    return False\n\n\ndef same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc", "    s0 = s0.lower()\n    s1 = s1.lower()\n    if len(s0) != len(s1):\n        return False\n    s0_set = set(s0)\n    s1_set = set(s1)\n    if s0_set == s1_set:\n        return True\n    return False\n\n\ndef check_same_chars(text: str, word: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> check_same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> check_same_chars('abcd', 'dddddddabc')\n    True\n    >>> check_same_chars('dddddddabc', 'abcd')\n    True\n    >>> check_same_chars('eabcd', 'dddzzzzzzzddddabc')\n    False\n    >>> check_same_chars('abcd', 'dddddddabce')\n    False\n    >>> check_same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(text) != len(word):\n        return False\n    text_set = set(text)\n    word_set = set(word)\n    if text_set == word_set:\n        return True\n    return False\n\n\ndef"], ["    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef main():\n    \"\"\"Run sample fibonacci.py functions. Do not import.\"\"\"\n    assert fib(0) == 0\n    assert fib(1) == 1\n    assert fib(2) == 1\n    assert fib(3) == 2\n    assert fib(4) == 3\n    assert fib(5) == 5\n    assert fib(6) == 8\n    assert fib(7) == 13\n    assert fib(8) == 21\n    assert fib(9) == 34\n    assert fib(10) == 55\n    assert fib(11) == 89\n    assert fib(12) == 144\n    assert fib(13) == 233\n    assert fib(14) == 377\n    assert fib(15) == 610\n    assert fib(16) == 987\n    assert fib(17) == 1597\n    assert fib(18) == 2584\n    assert fib(19) == 4181\n    assert fib(20) == 6765\n\n\nif __name__ == '__main__':\n    main()\n```\n\n<br>\n\n\ucd9c\ucc98 : [https://github.com/hong8888/python-for-beginner/blob/master/exercise/fibonacci.py](https://github.com/hong8888/python-for-beginner/blob/master/exercise/fibonacci.py)\n\n<br>\n\n### 10. \ud53c\ubcf4\ub098\uce58 \uc218\uc5f4 2", "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nprint(fib(10))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "    if n <= 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef test_fib():\n    assert fib(1) == 1, \"Test failed\"\n    assert fib(2) == 1, \"Test failed\"\n    assert fib(3) == 2, \"Test failed\"\n    assert fib(4) == 3, \"Test failed\"\n    assert fib(5) == 5, \"Test failed\"\n    assert fib(6) == 8, \"Test failed\"\n    assert fib(7) == 13, \"Test failed\"\n    assert fib(8) == 21, \"Test failed\"\n    assert fib(9) == 34, \"Test failed\"\n    assert fib(10) == 55, \"Test failed\"\n    assert fib(11) == 89, \"Test failed\"\n    assert fib(12) == 144, \"Test failed\"\n    assert fib(13) == 233, \"Test failed\"\n    assert fib(14) == 377, \"Test failed\"\n    assert fib(15) == 610, \"Test failed\"\n    assert fib(16) == 987, \"Test failed\"\n    assert fib(17) == 1597, \"Test failed\"\n    assert fib(18) == 2584, \"Test failed\"\n    assert fib(19) == 4181, \"Test failed\"\n    assert fib(20) == 6765, \"Test failed\"\n\n\ndef test_fib2():\n    assert fib2(10) == 55, \"Test failed\"\n    assert fib2(1) == 1, \"Test failed\"\n    assert fib2(2) == 1, \"Test failed\"\n    assert fib2(3) == ", "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iter(10)\n    55\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(8)\n    21\n    \"\"\"\n    a, b = 1, 1\n    for _ in range(n-2):\n        a, b = b, a + b\n    return a + b\n\n\ndef fib_rec(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_rec(10)\n    55\n    >>> fib_rec(1)\n    1\n    >>> fib_rec(8)\n    21\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib_rec(n-1) + fib_rec(n-2)\n\n\ndef test_fib(fib_fn, n=10):\n    for _ in range(3):\n        print(fib_fn(n))\n\n\ndef main():\n    test_fib(fib)\n    test_fib(fib_iter)\n    test_fib(fib_rec)\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n#==============================================================================\n# 1.2 \uc785\ub825\uac12\uc774 \uc5c6\ub294 \uacbd\uc6b0\n#==============================================================================\n\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21", "    if n < 1:\n        raise ValueError(\"n must be at least 1\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_recur(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_recur(10)\n    55\n    >>> fib_recur(1)\n    1\n    >>> fib_recur(8)\n    21\n    \"\"\"\n    return fib(n)\n\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iter(10)\n    55\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(8)\n    21\n    \"\"\"\n    a = 1\n    b = 1\n    for _ in range(n - 2):\n        c = a + b\n        a = b\n        b = c\n    return b\n\n\ndef fib_mem(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_mem(10)\n    55\n    >>> fib_mem(1)\n    1\n    >>> fib_mem(8)\n    21\n    \"\"\"\n    mem = {1: 1, 2: 1}\n    for i in range(3, n + 1):\n        mem[i] = mem[i - 1] + mem[i - 2]\n    return mem[n]\n\n\ndef fib_tab(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_tab(10)\n    55\n    >>> fib_tab(1)\n    1\n    >>> fib_tab(8)\n    21\n   "], ["\n    stack = []\n    for b in brackets:\n        if b == '<':\n            stack.append(b)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n\ndef balanced(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if the number of opening brackets equals the number of closing brackets.\n\n    >>> balanced(\"<\")\n    False\n    >>> balanced(\"<>\")\n    True\n    >>> balanced(\"<<><>>\")\n    True\n    >>> balanced(\"><<>\")\n    False\n    \"\"\"\n\n    return len(brackets) == len(brackets.replace('<', '').replace('>', ''))\n\n\ndef balanced_bracket_pair(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if the number of opening brackets equals the number of closing brackets,\n    and the number of opening brackets equals the number of pairs of brackets.\n\n    >>> balanced_bracket_pair(\"<\")\n    False\n    >>> balanced_bracket_pair(\"<>\")\n    True\n    >>> balanced_bracket_pair(\"<<><>>\")\n    True\n    >>> balanced_bracket_pair(\"><<>\")\n    False\n    \"\"\"\n\n    return balanced(brackets) and correct_bracketing(brackets)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n\"\"\"\nWrite a function that returns True if the number of opening brackets equals the number of closing brackets,\nand the number of opening brackets equals the number of pairs of brackets.\n\nFor example:\n\n    >>>", "    stack = []\n\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n\ndef correct_bracketing_iterative(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_iterative(\"<\")\n    False\n    >>> correct_bracketing_iterative(\"<>\")\n    True\n    >>> correct_bracketing_iterative(\"<<><>>\")\n    True\n    >>> correct_bracketing_iterative(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n\ndef correct_bracketing_recursive(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_recursive(\"<\")\n    False\n    >>> correct_bracketing_recursive(\"<>\")\n    True\n    >>> correct_bracketing_recursive(\"<<><>>\")\n    True\n    >>> correct_bracketing_recursive(\"><", "\n    def count(brackets: str):\n        \"\"\" brackets is a string of \"<\" and \">\".\n        return the number of opening brackets.\n\n        >>> count(\"<>\")\n        1\n        >>> count(\"<<><>>\")\n        3\n        >>> count(\"><<>\")\n        1\n        \"\"\"\n\n        return brackets.count('<')\n\n\n    def correct_bracketing(brackets: str):\n        \"\"\" brackets is a string of \"<\" and \">\".\n        return True if every opening bracket has a corresponding closing bracket.\n\n        >>> correct_bracketing(\"<\")\n        False\n        >>> correct_bracketing(\"<>\")\n        True\n        >>> correct_bracketing(\"<<><>>\")\n        True\n        >>> correct_bracketing(\"><<>\")\n        False\n        \"\"\"\n\n        return count(brackets) % 2 == 0\n\n\n    def correct_bracketing_v2(brackets: str):\n        \"\"\" brackets is a string of \"<\" and \">\".\n        return True if every opening bracket has a corresponding closing bracket.\n\n        >>> correct_bracketing_v2(\"<\")\n        False\n        >>> correct_bracketing_v2(\"<>\")\n        True\n        >>> correct_bracketing_v2(\"<<><>>\")\n        True\n        >>> correct_bracketing_v2(\"><<>\")\n        False\n        \"\"\"\n\n        return sum(x == '<' for x in brackets) % 2 == 0\n\n\n    def correct_bracketing_v3(brackets: str):\n        \"\"\" brackets is a string of \"<\" and \">\".\n        return True if every opening bracket has a corresponding closing bracket.\n\n        >>> correct_bra", "    stack = []\n    for b in brackets:\n        if b == '>':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n        else:\n            stack.append(b)\n\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)\n\n\n\"\"\"\n\n\n# 1.4\n\n# Return the string with its characters in reverse order.\n# Assume that the string contains only printable ASCII characters.\n\n\ndef reverse(s: str) -> str:\n    \"\"\"\n    >>> reverse(\"hello\")\n    'olleh'\n    >>> reverse(\"Abraham Lincoln\")\n    'ninoL hAbraham'\n    \"\"\"\n    return s[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)\n\n\n# 1.5\n\n# Implement the function is_palindrome which determines if the given string is a palindrome.\n# Assume that the string contains only printable ASCII characters.\n\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\"\n    >>> is_palindrome(\"hello\")\n    False\n    >>> is_palindrome(\"olleh\")\n    True\n    >>> is_palindrome(\"Abraham Lincoln\")\n    False\n    >>> is_palindrome(\"ninoL hAbraham\")\n    True\n    \"\"\"\n    return s == s[::-1]\n\n\nif __name__ == '__main__", "\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        else:\n            if stack == []:\n                return False\n            else:\n                stack.pop()\n    if stack == []:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    # print(correct_bracketing(\"<>\"))\n    # print(correct_bracketing(\"<<><>>\"))\n    # print(correct_bracketing(\"><<>\"))\n    # print(correct_bracketing(\"<>\"))\n    # print(correct_bracketing(\"<<><>>\"))\n    # print(correct_bracketing(\"><<>\"))\n\n\n\"\"\"\nProblem:\nYou are given a string that contains a number of \"(\" and \")\" characters.\nYou need to write a function that determines if the string has all pairs of matching parentheses and returns true or false.\n\nExample:\nFor inputString = \"()\", the output should be\ncorrect_bracketing(inputString) = true;\nFor inputString = \"(()))(\", the output should be\ncorrect_bracketing(inputString) = false.\n\"\"\"\n\n# !/usr/bin/python3\n# -*- coding: utf-8 -*-\n\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True"], ["    l = [x for x in l if x != 0]\n    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n\n\nprint(monotonic([1, 2, 4, 20]))\nprint(monotonic([1, 20, 4, 10]))\nprint(monotonic([4, 1, 0, -10]))\nprint(monotonic([-10, 4, 1, 2]))\nprint(monotonic([1, 20, 4, -10]))\nprint(monotonic([1, 20, 4, 10]))\nprint(monotonic([1, 2, 4, 20]))\nprint(monotonic([4, 1, 0, -10]))\nprint(monotonic([4, 1, 0, 2]))\nprint(monotonic([4, 1, 0, -10]))\nprint(monotonic([4, 1, 0, 2]))\nprint(monotonic([4, 1, 0, -10]))\nprint(monotonic([4, 1, 0, 2]))\nprint(monotonic([4, 1, 0, -10]))\nprint(monotonic([4, 1, 0, 2]))\nprint(monotonic([4, 1, 0, -10]))\nprint(monotonic([4, 1, 0, 2]))\nprint(monotonic([4, 1, 0, -10]))\nprint(monotonic([4, 1, 0,", "    l_ = [x for x in l if x != 0]\n    return all(x < y for x, y in zip(l_, l_[1:])) or all(x > y for x, y in zip(l_, l_[1:]))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "    if len(l) < 2:\n        return True\n    else:\n        return all(l[i] < l[i+1] for i in range(len(l) - 1)) or all(l[i] >= l[i+1] for i in range(len(l) - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)\n", "\n    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n\n\ndef get_index(l: list, n: int):\n    \"\"\"Return index of element n in list l.\n    >>> get_index([1, 2, 3, 4], 2)\n    1\n    >>> get_index([1, 2, 3, 4], 4)\n    3\n    >>> get_index([1, 2, 3, 4], 5)\n    -1\n    >>> get_index([1, 2, 3, 4], 3)\n    2\n    >>> get_index([1, 2, 3, 4], 1)\n    0\n    >>> get_index([1, 2, 3, 4], 0)\n    -1\n    \"\"\"\n\n    if l is None or n not in l:\n        return -1\n    else:\n        return l.index(n)\n\n\ndef get_unique(l: list):\n    \"\"\"Return unique elements of list l.\n    >>> get_unique([1, 2, 3, 4, 2, 1, 4])\n    [1, 2, 3, 4]\n    >>> get_unique([1, 1, 1, 1, 1])\n    [1]\n    >>> get_unique([1, 2, 3, 4, 2, 1, 4])\n    [1, 2, 3, 4]\n    \"\"\"\n\n    return sorted(set(l), key=l.index)\n\n\ndef get_duplicate(l: list):\n    \"\"\"", "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n\n# print(monotonic([1, 2, 4, 20]))\n# print(monotonic([1, 20, 4, 10]))\n# print(monotonic([4, 1, 0, -10]))\n\n\ndef k_way_merge(k: int, l: list):\n    \"\"\"Merge k sorted lists into one sorted list.\n    >>> k_way_merge(2, [[1], [2]])\n    [1, 2]\n    >>> k_way_merge(3, [[1], [2], [3]])\n    [1, 2, 3]\n    \"\"\"\n    if k <= 1:\n        return l[0]\n    else:\n        return merge(k_way_merge(k // 2, l[:k // 2]), k_way_merge(k // 2, l[k // 2:]))\n\n\n# print(k_way_merge(2, [[1], [2]]))\n# print(k_way_merge(3, [[1], [2], [3]]))\n# print(k_way_merge(4, [[1], [2], [3], [4]]))\n\n\ndef k_way_merge_v2(k: int, l: list):\n    \"\"\"Merge k sorted lists into one sorted list.\n    >>> k_way_merge_v2(2, [[1], [2]])\n    [1, 2]\n    >>> k_way_merge_v2(3,"], ["    return list(set(l1).intersection(set(l2)))\n\n\ndef main():\n    \"\"\"Main function\"\"\"\n\n    print(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    print(common([5, 3, 2, 8], [3, 2]))\n\n\nif __name__ == \"__main__\":\n    \"\"\"Main function\"\"\"\n\n    main()\n", "    common = []\n    for i in l1:\n        if i in l2:\n            common.append(i)\n\n    return sorted(list(set(common)))\n\n\ndef intersection(l1: list, l2: list):\n    \"\"\"Return sorted unique intersection elements for two lists.\n    >>> intersection([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> intersection([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = []\n    for i in l1:\n        if i in l2:\n            common.append(i)\n\n    return sorted(list(set(common)))\n\n\ndef union(l1: list, l2: list):\n    \"\"\"Return sorted unique union elements for two lists.\n    >>> union([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 2, 3, 4, 5, 7, 9, 653, 121]\n    >>> union([5, 3, 2, 8], [3, 2])\n    [2, 3, 5, 8]\n\n    \"\"\"\n    common = []\n    for i in l1:\n        if i not in", "    l1.sort()\n    l2.sort()\n    l3 = [l1[i] for i in range(len(l1)) if l1[i] in l2]\n    l3.sort()\n    return l3\n\n\ndef common_set(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_set([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common_set([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l1.sort()\n    l2.sort()\n    l3 = [l1[i] for i in range(len(l1)) if l1[i] in l2]\n    l3.sort()\n    return l3\n\n\ndef common_dict(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_dict([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common_dict([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n", "    l1 = sorted(set(l1))\n    l2 = sorted(set(l2))\n    return list(set(l1).intersection(l2))\n\n\ndef unique_common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> unique_common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> unique_common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(set(l1).intersection(l2))\n\n\ndef unique_common_set(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> unique_common_set([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> unique_common_set([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return list(set(l1).intersection(l2))\n\n\ndef common_set(l1: list, l2: list):\n    \"\"\"Return sorted common elements for two lists.\n    >>> common_set([1", "\n    # Return sorted unique common elements for two lists\n    return list(set(l1) & set(l2))\n\n\ndef main():\n    # Read in the list of numbers\n    num_list = list(map(int, input().split()))\n\n    # Read in the list of numbers\n    num_list_2 = list(map(int, input().split()))\n\n    # Common elements\n    common_elements = common(num_list, num_list_2)\n\n    # Sort the list\n    common_elements.sort()\n\n    # Print the sorted list\n    print(common_elements)\n\n\nif __name__ == \"__main__\":\n    main()\n"], ["    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n\n    return n\n\n\n# Problem 4\n#\n# Write a function that returns the largest prime factor of a number,\n# 1 if the number is prime.\n#\n# >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\n# Problem 5\n#\n# Write a function that returns the largest prime factor of a number,\n# 1 if the number is prime.\n#\n# >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n\n    return n\n\n\n# Problem 6\n#\n# Write a function that returns the largest prime factor of a number,\n# 1 if the number is prime.\n#\n# >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\n\n# Problem 7\n#\n# Write a function that returns the largest prime factor of a number,\n# 1 if the number is prime.\n#\n# >>> largest_prime_factor(13195)\n# 29\n# >>> largest", "    pass\n\n\ndef largest_prime_factor_iterative(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_iterative(13195)\n    29\n    >>> largest_prime_factor_iterative(2048)\n    2\n    \"\"\"\n    pass\n\n\ndef largest_prime_factor_recursive(n: int, current: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_recursive(13195, 2)\n    29\n    >>> largest_prime_factor_recursive(2048, 2)\n    2\n    \"\"\"\n    pass\n\n\ndef largest_prime_factor_division(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_division(13195)\n    29\n    >>> largest_prime_factor_division(2048)\n    2\n    \"\"\"\n    pass\n\n\ndef largest_prime_factor_bitwise(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_bitwise(13195)\n    29\n    >>> largest_prime_factor_bitwise(2048)\n    2\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n\"\"\"\nYour task is to implement the following function:\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1", "\n    # Start by assuming the number is prime\n    prime = True\n\n    # Check if n is divisible by 2\n    if n % 2 == 0:\n        return 2\n\n    # Otherwise, start at 3 and check if n is divisible by 3\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n\n    # If we've made it here, n is prime\n    return n\n\n\nif __name__ == \"__main__\":\n    print(largest_prime_factor(13195))\n    print(largest_prime_factor(2048))\n    print(largest_prime_factor(29))\n    print(largest_prime_factor(3))\n    print(largest_prime_factor(17))\n    print(largest_prime_factor(2312))\n    print(largest_prime_factor(1729))\n    print(largest_prime_factor(172999))\n    print(largest_prime_factor(321))\n    print(largest_prime_factor(1729999))\n    print(largest_prime_factor(19999))\n    print(largest_prime_factor(1111111))\n    print(largest_prime_factor(3111111))\n    print(largest_prime_factor(17299999))\n    print(largest_prime_factor(1999999))\n    print(largest_prime_factor(11111111))\n    print(largest_prime_factor(31111111))\n    print(largest_prime", "\n    from sympy.ntheory.generate import is_prime\n\n    if is_prime(n):\n        return n\n\n    factors = factor(n)\n    return max(factor for factor in factors if is_prime(factor))\n\n\n# Exercise 6\n\n\ndef factor_tree(n: int, **kwargs):\n    \"\"\"Return a tree representing the prime factorization of n.\n\n    >>> factor_tree(13195)\n    {'13195': {'13195': {}, '5': {'5': {}, '3': {'3': {}, '1': {'1': {}}}}}}\n    \"\"\"\n    from sympy.ntheory.generate import is_prime\n\n    if is_prime(n):\n        return {n: {n: {}}}\n\n    factors = factor(n)\n    return {\n        n: {\n            n: {},\n            largest_prime_factor(n): factor_tree(factors[largest_prime_factor(n)], **kwargs),\n        }\n        for largest_prime_factor(n) in factors\n    }\n\n\n# Exercise 7\n\n\ndef prime_factors(n: int, **kwargs):\n    \"\"\"Return the prime factors of n.\n\n    >>> prime_factors(13195)\n    [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    \"\"\"\n\n    def get_prime_factors(\n        n: int,\n        factor_tree: dict,\n        prime_factors: list,\n        visited: set,\n    ):\n        \"\"\"Get the prime factors of n from the factor tree.\n\n        >>> get_prime_factors(", "    if n % 2 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    else:\n        for i in range(5, n + 1, 6):\n            if n % i == 0:\n                return i\n        return n\n\n\ndef prime_factors(n: int):\n    \"\"\"Return the prime factors of n as a list. Assume n > 1.\n    >>> prime_factors(13195)\n    [2, 29, 31]\n    >>> prime_factors(2048)\n    [2, 2, 2, 2, 2, 2, 2]\n    \"\"\"\n    primes = []\n    while n > 1:\n        prime = largest_prime_factor(n)\n        primes.append(prime)\n        n //= prime\n    return primes\n\n\ndef sum_prime_factors(n: int):\n    \"\"\"Return the sum of the prime factors of n.\n    >>> sum_prime_factors(13195)\n    51\n    >>> sum_prime_factors(2048)\n    32\n    \"\"\"\n    return sum(prime_factors(n))\n\n\ndef main():\n    \"\"\"Run sample"], ["    pass\n\n\n# -----------------------------------------------------------------------------\n\n\ndef sum_to_n_fast(n: int):\n    \"\"\"sum_to_n_fast is a function that sums numbers from 1 to n.\n    >>> sum_to_n_fast(30)\n    465\n    >>> sum_to_n_fast(100)\n    5050\n    >>> sum_to_n_fast(5)\n    15\n    >>> sum_to_n_fast(10)\n    55\n    >>> sum_to_n_fast(1)\n    1\n    \"\"\"\n    pass\n\n\n# -----------------------------------------------------------------------------\n\n\ndef sum_to_n_fastest(n: int):\n    \"\"\"sum_to_n_fastest is a function that sums numbers from 1 to n.\n    >>> sum_to_n_fastest(30)\n    465\n    >>> sum_to_n_fastest(100)\n    5050\n    >>> sum_to_n_fastest(5)\n    15\n    >>> sum_to_n_fastest(10)\n    55\n    >>> sum_to_n_fastest(1)\n    1\n    \"\"\"\n    pass\n\n\n# -----------------------------------------------------------------------------\n\n\ndef sum_to_n_recursive(n: int):\n    \"\"\"sum_to_n_recursive is a function that sums numbers from 1 to n.\n    >>> sum_to_n_recursive(30)\n    465\n    >>> sum_to_n_recursive(100)\n    5050\n", "    if n == 1:\n        return 1\n    return n + sum_to_n(n-1)\n\n\ndef sum_to_n_opt(n: int):\n    \"\"\"sum_to_n_opt is a function that sums numbers from 1 to n.\n    >>> sum_to_n_opt(30)\n    465\n    >>> sum_to_n_opt(100)\n    5050\n    >>> sum_to_n_opt(5)\n    15\n    >>> sum_to_n_opt(10)\n    55\n    >>> sum_to_n_opt(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    return n + sum_to_n_opt(n-1)\n\n\ndef sum_to_n_rec(n: int):\n    \"\"\"sum_to_n_rec is a function that sums numbers from 1 to n.\n    >>> sum_to_n_rec(30)\n    465\n    >>> sum_to_n_rec(100)\n    5050\n    >>> sum_to_n_rec(5)\n    15\n    >>> sum_to_n_rec(10)\n    55\n    >>> sum_to_n_rec(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    return n + sum_to_n_rec(n-1)\n\n\ndef sum_to_n_memo(n: int):\n    \"\"\"sum_to_n_memo is a function that sums numbers from 1 to n.\n", "    return n * (n + 1) / 2\n\n\ndef sum_to_n_plus_1(n: int):\n    \"\"\"sum_to_n_plus_1 is a function that sums numbers from 1 to n+1.\n    >>> sum_to_n_plus_1(30)\n    495\n    >>> sum_to_n_plus_1(100)\n    6050\n    >>> sum_to_n_plus_1(5)\n    20\n    >>> sum_to_n_plus_1(10)\n    66\n    >>> sum_to_n_plus_1(1)\n    2\n    \"\"\"\n    return sum_to_n(n) + n + 1\n\n\ndef sum_to_n_plus_2(n: int):\n    \"\"\"sum_to_n_plus_2 is a function that sums numbers from 1 to n+2.\n    >>> sum_to_n_plus_2(30)\n    515\n    >>> sum_to_n_plus_2(100)\n    7150\n    >>> sum_to_n_plus_2(5)\n    22\n    >>> sum_to_n_plus_2(10)\n    78\n    >>> sum_to_n_plus_2(1)\n    3\n    \"\"\"\n    return sum_to_n_plus_1(n) + n + 2\n\n\ndef sum_to_n_plus_3(n: int):\n    \"\"\"sum_to_n_plus_3 is a function that sums numbers from 1 to n+3.\n    >>>", "    return sum(range(1, n+1))\n\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))\n\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))\n\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"", "    return sum(range(1, n + 1))\n\n\ndef sum_to_n_fast(n: int):\n    \"\"\"sum_to_n_fast is a function that sums numbers from 1 to n.\n    >>> sum_to_n_fast(30)\n    465\n    >>> sum_to_n_fast(100)\n    5050\n    >>> sum_to_n_fast(5)\n    15\n    >>> sum_to_n_fast(10)\n    55\n    >>> sum_to_n_fast(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2\n\n\ndef sum_to_n_fastest(n: int):\n    \"\"\"sum_to_n_fastest is a function that sums numbers from 1 to n.\n    >>> sum_to_n_fastest(30)\n    465\n    >>> sum_to_n_fastest(100)\n    5050\n    >>> sum_to_n_fastest(5)\n    15\n    >>> sum_to_n_fastest(10)\n    55\n    >>> sum_to_n_fastest(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2\n\n\ndef sum_to_n_fastestest(n: int):\n    \"\"\"sum_to_n_fastestest is a function that sums numbers from 1 to n.\n    >>> sum_to_n_fastestest(30)\n    465\n    >>> sum_to_n_fastestest(100)"], ["    bracket_count = 0\n    for c in brackets:\n        if c == \"(\":\n            bracket_count += 1\n        elif c == \")\":\n            bracket_count -= 1\n        if bracket_count < 0:\n            return False\n    return bracket_count == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)\n\n    \"\"\"\n    >>> correct_bracketing(\"()\")\n    True\n    \"\"\"\n\n\ndef balanced_brackets(s: str):\n    \"\"\"balanced_brackets takes a string of parenthesis and returns True if\n    the string is balanced.\n    >>> balanced_brackets(\"\")\n    True\n    >>> balanced_brackets(\"(\")\n    False\n    >>> balanced_brackets(\"()\")\n    True\n    >>> balanced_brackets(\"(()())\")\n    True\n    >>> balanced_brackets(\")(()\")\n    False\n    \"\"\"\n    brackets = list(s)\n    bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            bracket_count += 1\n        elif bracket == \")\":\n            bracket_count -= 1\n        if bracket_count < 0:\n            return False\n    return bracket_count == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)\n\n    \"\"\"\n    >>> balanced_brackets(\"\")\n    True\n    >>> balanced_brackets(\"(\")\n    False\n    >>> balanced_brackets(\"()\")", "    open = []\n    for c in brackets:\n        if c == \"(\":\n            open.append(c)\n        else:\n            if not open:\n                return False\n            open.pop()\n    if open:\n        return False\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n\"\"\"\n\nThe solution is a stack (or list) of opening brackets. Whenever you see a closing bracket, you need to remove the topmost opening bracket. If the stack is empty, or if it's not a closing bracket, return false.\n\nThe stack is empty if the list is empty.\n\nOtherwise, you can remove the topmost element.\n\n\"\"\"\n\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    open = []\n    for c in brackets:\n        if c == \"(\":\n            open.append(c)\n        else:\n            if not open:\n                return False\n            open.pop()\n    if open:\n        return False\n    return True\n\n\n\"\"\"\n\nThis problem can be solved using a stack.\n\nThe idea is that we push a \"(\" when we see one, and pop it when we see a \")\". If the stack is empty at the end, then it means that there was a \")\" without a \"(\".\n\n\"\"\"\n\n\ndef correct_bra", "    opening_brackets = [\"(\", \"{\", \"[\"]\n    closing_brackets = [\")\", \"}\", \"]\"]\n    # Check that the given brackets are valid.\n    if len(brackets) == 0:\n        return False\n    # Check that the given brackets are well-formed.\n    stack = []\n    for bracket in brackets:\n        if bracket in opening_brackets:\n            stack.append(bracket)\n        elif len(stack) == 0:\n            return False\n        else:\n            if closing_brackets.index(bracket) == opening_brackets.index(stack[-1]):\n                stack.pop()\n            else:\n                return False\n    return True\n\n\ndef correct_bracketing_recursive(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_recursive(\"(\")\n    False\n    >>> correct_bracketing_recursive(\"()\")\n    True\n    >>> correct_bracketing_recursive(\"(()())\")\n    True\n    >>> correct_bracketing_recursive(\")(()\")\n    False\n    \"\"\"\n    opening_brackets = [\"(\", \"{\", \"[\"]\n    closing_brackets = [\")\", \"}\", \"]\"]\n    # Check that the given brackets are well-formed.\n    if len(brackets) == 0:\n        return False\n    if brackets[0] in opening_brackets:\n        stack = []\n        for bracket in brackets:\n            if bracket in opening_brackets:\n                stack.append(bracket)\n            elif len(stack) == 0:\n                return False\n           ", "    # Your code here\n\n    count = 0\n    for x in brackets:\n        if x == \"(\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    if count != 0:\n        return False\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod(verbose=True)\n\n\"\"\"\n\n\"\"\"\n\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    # Your code here\n    count = 0\n    for x in brackets:\n        if x == \"(\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    if count != 0:\n        return False\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod(verbose=True)\n\n\"\"\"\n\n\"\"\"\n\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n   ", "\n    stack = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["    return [xs[i] * (i + 1) for i in range(len(xs))]\n\n\ndef integrator(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in the same form.\n    >>> integrator([3, 1, 2, 4, 5])\n    [1, 4, 12, 20, 25]\n    >>> integrator([1, 2, 3])\n    [1, 6, 12]\n    \"\"\"\n    return [xs[i] / (i + 1) for i in range(len(xs))]\n\n\ndef interpolate(xs: list, ys: list, x: float):\n    \"\"\" xs and ys represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    ys[0] + ys[1] * x + ys[2] * x^2 + ....\n    Returns value of polynomial at point x.\n    >>> interpolate([3, 1, 2, 4, 5], [1, 2, 3, 4, 5], 4)\n    25.0\n    \"\"\"\n    y = 0\n    for i in range(len(xs)):\n        y += xs[i] * ys[i] * (x ** (len(xs) - i - 1))\n    return y\n\n\ndef lagrange_polynomial(xs: list, ys: list, x: float):\n    \"\"\" xs and ys represent", "\n    return xs[1:] * [i for i in range(len(xs) - 1)]\n\n\ndef poly_eval(xs: list, x: float):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Evaluate this polynomial at x.\n    >>> poly_eval([3, 1, 2, 4, 5], 1)\n    12\n    >>> poly_eval([1, 2, 3], 1)\n    6\n    \"\"\"\n\n    return sum([i * j for i, j in zip(xs, [i for i in range(len(xs))])])\n\n\ndef poly_eval_derivative(xs: list, x: float):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Evaluate the derivative of this polynomial at x.\n    >>> poly_eval_derivative([3, 1, 2, 4, 5], 1)\n    12\n    >>> poly_eval_derivative([1, 2, 3], 1)\n    6\n    \"\"\"\n\n    return sum([i * j for i, j in zip(xs, [j - i for i, j in zip(xs, [i for i in range(len(xs))])])])\n\n\ndef integrate(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in the same form.\n", "    new_coeff = []\n    for i in range(len(xs)):\n        if i == 0:\n            new_coeff.append(xs[i+1])\n        else:\n            new_coeff.append(xs[i] * (i))\n    return new_coeff\n\n\ndef lagrange_interpolation(xs: list, ys: list):\n    \"\"\"\n    xs and ys are lists of the same length.\n    xs is a list of x coordinates, ys is a list of y coordinates.\n    Return a polynomial that interpolates the points (x, y) for all x, y in zip(xs, ys).\n    >>> lagrange_interpolation([3, 1, 2, 4, 5], [2, 1, 5, 8, 13])\n    [1, 4, 12, 20]\n    \"\"\"\n    if len(xs) == 1:\n        return [ys[0]]\n    result = []\n    for i in range(len(xs)):\n        result.append(0)\n    for i in range(len(xs)):\n        for j in range(len(xs)):\n            if i == j:\n                continue\n            result[i] += (ys[j] * derivative(xs)[j]) / (xs[j] - xs[i])\n    return result\n\n\ndef lagrange_interpolation_ext(xs: list, ys: list):\n    \"\"\"\n    xs and ys are lists of the same length.\n    xs is a list of x coordinates, ys is a list of y coordinates.\n    Return a polynomial that interpolates the points (x, y) for all x", "    return [xi * xi for xi in xs]\n\n\ndef integrand(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n    >>> integrand([3, 1, 2, 4, 5])\n    [1, 2, 4, 8, 12]\n    >>> integrand([1, 2, 3])\n    [1, 3, 6]\n    \"\"\"\n    return [xi / (xi + 1) for xi in xs]\n\n\ndef integral(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [1, 4, 12, 28, 60]\n    >>> integral([1, 2, 3])\n    [1, 5, 14]\n    \"\"\"\n    return [x1 / (x1 + 1) for x1 in xs]\n\n\ndef lagrange_polynomial(xs: list, x: float):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Returns value of Lagrange polynomial at x.\n    >>> lagrange_polynomial([1, 2, 3], 1)\n    5.0\n    >>> lagrange_polynomial([1", "    return xs[1:]\n\n\ndef integrate(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in the same form.\n    >>> integrate([3, 1, 2, 4, 5])\n    [3, 10, 24, 40, 55]\n    >>> integrate([1, 2, 3])\n    [2, 8, 14]\n    \"\"\"\n    return [xs[0] / i for i in range(1, len(xs) + 1)] + xs[:-1]\n\n\ndef integral(xs: list, a: float, b: float):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return definite integral of this polynomial between a and b\n    >>> integral([3, 1, 2, 4, 5], 1, 5)\n    30\n    >>> integral([1, 2, 3], 1, 5)\n    12\n    >>> integral([1, 2, 3], 3, 5)\n    15\n    \"\"\"\n    return xs[0] * (b ** len(xs)) - xs[0] * (a ** len(xs)) + sum([xs[i] * (b ** (len(xs) - i - 1) - a ** (len(xs) - i - 1)) for i in range(1, len(xs))])\n\n\ndef differentiate(xs: list, x: float):\n"], ["    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n\ndef fibfib_memo(n: int, memo: list):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n in memo:\n        return memo[n]\n    memo", "    pass\n\n\ndef fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\ndef fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n)", "    ...\n\n\ndef test_fibfib():\n    assert fibfib(1) == 0\n    assert fibfib(5) == 4\n    assert fibfib(8) == 24\n    assert fibfib(100000) == 281235426\n\n\ndef fibfib2(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    ...\n\n\ndef test_fibfib2():\n    assert fibfib2(1) == 0\n    assert fibfib2(5) == 4\n    assert fibfib2(8) == 24\n    assert fibfib2(100000) == 281235426\n\n\nif __name__ == '", "    return\n\n\ndef gcd(m: int, n: int):\n    \"\"\"Compute the greatest common divisor of two positive integers.\n    >>> gcd(2, 12)\n    2\n    >>> gcd(10, 2)\n    2\n    >>> gcd(12, 2)\n    2\n    >>> gcd(2, 10)\n    2\n    >>> gcd(2, 1)\n    1\n    >>> gcd(12, 12)\n    12\n    >>> gcd(12, 13)\n    1\n    \"\"\"\n    return\n\n\ndef lcm(m: int, n: int):\n    \"\"\"Compute the least common multiple of two positive integers.\n    >>> lcm(12, 2)\n    12\n    >>> lcm(10, 2)\n    20\n    >>> lcm(12, 2)\n    12\n    >>> lcm(2, 10)\n    20\n    >>> lcm(2, 1)\n    2\n    >>> lcm(12, 13)\n    12\n    \"\"\"\n    return\n\n\ndef mdc(m: int, n: int):\n    \"\"\"Compute the lowest common multiple of two positive integers.\n    >>> mdc(2, 12)\n    6\n    >>> mdc(10, 2)\n    2\n    >>> m", "    if n < 3:\n        return 0\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n < 3:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) =="], ["    # Your code goes here\n    vowel = 0\n    for i in s:\n        if i in \"aeiou\" and i != \"y\":\n            vowel += 1\n        elif i == \"y\":\n            if len(s) - 1 == s.index(i):\n                vowel += 1\n    return vowel\n\n\nif __name__ == \"__main__\":\n    print(vowels_count(\"abcde\"))\n    print(vowels_count(\"ACEDY\"))\n    print(vowels_count(\"A\"))\n    print(vowels_count(\"abced\"))\n    print(vowels_count(\"aBcDe\"))\n    print(vowels_count(\"a\"))\n    print(vowels_count(\"A\"))\n    print(vowels_count(\"\"))\n    print(vowels_count(\"aBcDe\"))\n    print(vowels_count(\"A\"))\n    print(vowels_count(\"A\"))\n    print(vowels_count(\"A\"))\n    print(vowels_count(\"A\"))\n    print(vowels_count(\"A\"))\n    print(vowels_count(\"A\"))\n    print(vowels_count(\"A\"))\n    print(vowels_count(\"A\"))\n    print(vowels_count(\"A\"))\n    print(vowels_count(\"A\"))\n    print(vowels_count(\"A\"))\n    print(vowels_count(\"A\"))\n    print(vowels_", "    count = 0\n    for vowel in s:\n        if vowel in 'aeiou':\n            count += 1\n    if s[-1] == 'y':\n        count -= 1\n    return count\n\n\ndef main():\n    \"\"\"Run sample vowels_count functions. Do not import the fix", "    return sum([1 for i in s if i in \"aeiouy\" and not i==\"y\"])\n\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    return sum([1 for i in s if i in \"aeiouy\" and not i==\"y\" and i!=\"A\"])\n\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    return sum([1 for i in s if i in \"aeiouy\" and not i==\"y\" and i!=\"A\"])\n\n\ndef vow", "    v = [a, e, i, o, u]\n    count = 0\n    for i in s:\n        if i in v:\n            count += 1\n    return count\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()\n\n# EOF\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "    return sum(c.lower() in \"aeiou\" for c in s)\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()\n"], ["    x = str(x)\n    # number of digits\n    n = len(x)\n    if shift >= n:\n        return x[::-1]\n    else:\n        return x[shift:] + x[:shift]\n\n\ndef circular_shift_v2(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift_v2(12, 1)\n    \"21\"\n    >>> circular_shift_v2(12, 2)\n    \"12\"\n    \"\"\"\n    return str(x)[shift:] + str(x)[:shift]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    do", "    return str(int(x % 10 ** (len(str(x)) + shift) / 10 ** shift))\n\n\ndef rotate_left(x, shift):\n    \"\"\"Left rotate the digits of the integer x, shift the digits left by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> rotate_left(12, 1)\n    \"21\"\n    >>> rotate_left(12, 2)\n    \"12\"\n    \"\"\"\n    return str(int(x % 10 ** shift / 10 ** (len(str(x)) - shift)))\n\n\ndef rotate_right(x, shift):\n    \"\"\"Right rotate the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> rotate_right(12, 1)\n    \"21\"\n    >>> rotate_right(12, 2)\n    \"12\"\n    \"\"\"\n    return str(int(x % 10 ** (len(str(x)) + shift) / 10 ** shift))\n\n\ndef main():\n    \"\"\"Run the tests for Code 2, printing the results.\"\"\"\n    print('Code 2. Tests')\n    print('-' * 50)\n    print('Testing code that rotates the digits to the left...')\n    print('-' * 50)\n    test1 = rotate_left(12345, 1)\n    print('rotate_left(12345, 1)', test1)\n    test2 = rotate_left(12345, 2)\n    print('rotate_left(", "    return ''.join(map(str, reversed(x%10**shift)))\n\n\ndef circular_shift_left(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits left by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift_left(12, 1)\n    \"12\"\n    >>> circular_shift_left(12, 2)\n    \"21\"\n    \"\"\"\n    return ''.join(map(str, x%10**shift))\n\n\ndef circular_shift_right(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift_right(12, 1)\n    \"21\"\n    >>> circular_shift_right(12, 2)\n    \"12\"\n    \"\"\"\n    return ''.join(map(str, reversed(x%10**shift)))\n\n\ndef circular_shift_left_all(x, shift):\n    \"\"\"Circular shift the digits of all the integers in list x, shift the digits left by shift\n    and return the result as a list of strings.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift_left_all([12, 13, 14], 1)\n    [\"12\", \"31\", \"41\"]\n    >>> circular_shift_left_all([12, 13, 14], 2)\n    [\"12\", \"32\", \"42\"]\n    \"\"\"\n    return list(map(", "    return str(x)[shift:] + str(x)[:-shift]\n\n\ndef circular_shift_2(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    return str(x)[shift:] + str(x)[:-shift]\n\n\ndef circular_shift_3(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef circular_shift_4(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef circular_shift_5(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift >", "    digits = str(x)\n    return digits[shift:] + digits[:shift]\n\n\ndef circular_shift_list(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a list of integers.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift_list(12, 1)\n    [2, 1]\n    >>> circular_shift_list(12, 2)\n    [1, 2]\n    \"\"\"\n    digits = [int(x) for x in str(x)]\n    return digits[shift:] + digits[:shift]\n\n\ndef is_circular_shift_valid(x, shift):\n    \"\"\"Check if circular shift is a valid circular shift of x.\n    >>> is_circular_shift_valid(12, 1)\n    True\n    >>> is_circular_shift_valid(12, 2)\n    True\n    >>> is_circular_shift_valid(12, 3)\n    False\n    >>> is_circular_shift_valid(12, 4)\n    True\n    \"\"\"\n    digits = [int(x) for x in str(x)]\n    if len(digits) < shift + 1:\n        return False\n    return digits == circular_shift_list(x, shift)\n\n\ndef get_circular_shifts_list(x):\n    \"\"\"Get all valid circular shifts of x and return a list of them.\n    >>> get_circular_shifts_list(12)\n    [12, 21, 32, 41, 52, 61, 72, 81, 92, 101"], ["    s = list(s)\n    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum\n\n\nif __name__ == '__main__':\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "    return sum([ord(i) for i in s if ord(i) >= 65 and ord(i) <= 90])\n\n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum([ord(i) for i in s if i.isupper()])\n\n\nif __name__ == '__main__':\n    print(digitSum2(\"abAB\"))\n    print(digitSum2(\"abcCd\"))\n    print(digitSum2(\"helloE\"))\n    print(digitSum2(\"woArBld\"))\n    print(digitSum2(\"aAaaaXa\"))\n    print(digitSum2(\"\"))\n    print(digitSum2(\"ab\"))\n    print(digitSum2(\"A\"))\n    print(digitSum2(\"a\"))\n    print(digitSum2(\"abcd\"))\n    print(digitSum2(\"abcD\"))\n    print(digitSum2(\"abCd\"))\n    print(digitSum2(\"abCdE\"))\n    print(digitSum2(\"abcdE\"))\n    print(digitSum2(\"Abcd\"))\n    print(digitSum2(\"ABCd\"))\n    print(digitSum2(\"ABCDE", "    upper = 0\n    for x in s:\n        if x.isupper():\n            upper += ord(x)\n    return upper\n\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))\n", "    return sum(ord(char.upper()) for char in s if char.isalpha())\n\n\ndef digitSum(s):\n    return sum(ord(char.upper()) for char in s if char.isalpha())\n\n\nif __name__ == '__main__':\n    print(digitSum(''))  # 0\n    print(digitSum('abAB'))  # 131\n    print(digitSum('abcCd'))  # 67\n    print(digitSum('helloE'))  # 69\n    print(digitSum('woArBld'))  # 131\n    print(digitSum('aAaaaXa'))  # 153\n\n    # 131\n    # 131\n    # 67\n    # 69\n    # 131\n    # 153\n", "    if s == \"\":\n        return 0\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n\n\ndef digitSum(s):\n    \"\"\"\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\":\n        return 0\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n\n\nif __name__ == \"__main__\":\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))\n\n\n\"\"\"\nStatus: Solved\n\n"], ["    apples = s.split()[0]\n    oranges = s.split()[1]\n    apples = int(apples)\n    oranges = int(oranges)\n    return n - apples - oranges\n\n\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100)", "    return n - int(s[s.find(\"apples\")+7:s.find(\"oranges\")]) - int(s[s.find(\"oranges\")+8:])\n\ndef apple_and_orange(s,t):\n    \"\"\"\n    In this task, you will be given two strings representing two different persons' names. \n    A and B for example. And an integer that represents the number of fruits that each \n    person has. You will put these fruits in a basket and give one person some fruits each. \n    The question is: How many fruits are there in the basket when A and B have taken their \n    fruits?\n    for examble:\n    apple_and_orange(\"A\", \"B\") -> 5\n    apple_and_orange(\"B\", \"A\") -> 4\n    apple_and_orange(\"B\", \"B\") -> 1\n    \"\"\"\n    if len(s) >= len(t):\n        return len(s) + len(t)\n    else:\n        return len(s) + len(t) - ", "    # your code here\n    if s.split()[1] == 'apples':\n        s = str(int(s.split()[0]) + 1)\n    elif s.split()[1] == 'oranges':\n        s = str(int(s.split()[0]) - 1)\n    return n - int(s.split()[0]) - int(s.split()[2])\n\n\ndef find_max_consecutive_ones(n):\n    \"\"\"\n    In this task, you will be given a binary number represented as a string. \n    Given the string return the number of the consecutive 1s.\n    for example:\n    find_max_consecutive_ones('0000000000000000000000000000011011') -> 6\n    find_max_consecutive_ones('00000000000000000000000000011111') -> 3\n", "    num_apples = 0\n    num_oranges = 0\n    num_mangoes = 0\n    if s.find(\"apples\") >= 0:\n        num_apples = int(s[s.find(\"apples\"):s.find(\"apples\")+5])\n    if s.find(\"oranges\") >= 0:\n        num_oranges = int(s[s.find(\"oranges\"):s.find(\"oranges\")+6])\n    if s.find(\"mangoes\") >= 0:\n        num_mangoes = int(s[s.find(\"mangoes\"):s.find(\"mangoes\")+7])\n    return n - num_apples - num_oranges + num_mangoes\n\n# def fruit_distribution(s,n):\n#     \"\"\"\n#     In this task, you will be given a string that represents a number of apples and oranges \n#     that are distributed in a basket of fruit this basket contains \n#     apples, oranges, and mango fruits. Given the string that", "    if n == 0:\n        return 0\n    if \"apples\" in s:\n        return n\n    else:\n        return n - int(s[0]) - int(s[-1])\n\ndef fruit_distribution2(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100"], ["    res = []\n    arr_new = [item for item in arr if item % 2 == 0]\n    if len(arr_new) == 0:\n        return res\n    else:\n        arr_new.sort()\n        return [arr_new[0], arr_new.index(arr_new[0])]\n\n\ndef test_pluck(arr, expected):\n    \"\"\"\n    Test function to test pluck function\n    \"\"\"\n    result = pluck(arr)\n    assert result == expected\n\n\ndef test_pluck_1():\n    \"\"\"\n    Test case 1 for pluck function\n    \"\"\"\n    arr = [", "    if not arr:\n        return []\n    return [min(arr, key=lambda x: x%2 == 0 or (x%2 == 0 and x >= x[1]))[1], arr.index(min(arr, key=lambda x: x%2 == 0 or (x%2 == 0 and x >= x[1])))]\n\n\nprint(pluck([4, 2, 3]))\nprint(pluck([1, 2, 3]))\nprint(pluck([]))\nprint(pluck([5, 0, 3, 0, 4, 2]))\n\n\n\"\"\"\nThe idea is to", "    even_index = []\n    even_node = []\n    odd_index = []\n    odd_node = []\n    for index, node in enumerate(arr):\n        if node % 2 == 0:\n            even_index.append(index)\n            even_node.append(node)\n        else:\n            odd_index.append(index)\n            odd_node.append(node)\n    if len(even_node) == 0:\n        return []\n    return [even_node[even_index.index(min(even_index))], even_index[even_index.index(min(even_index))]]\n\n\n#", "    min_even = min(arr, key=lambda x: x % 2)\n    return [min_even, arr.index(min_even)] if min_even % 2 == 0 else []\n\n\nprint(pluck([4, 2, 3]))\nprint(pluck([1, 2, 3]))\nprint(pluck([]))\nprint(pluck([5, 0, 3, 0, 4, 2]))\n\n\"\"\"\nSPECS:\n\nTIME", "    if not arr:\n        return []\n    # create a set with all the even values\n    even_values = set()\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            even_values.add((value, index))\n    if not even_values:\n        return []\n    # check if there are multiple nodes with the same smallest even value,\n    # if so, return the one with the smallest index\n    return [min(even_values)[0], min(even_values)[1]]\n\n\n\ndef pluck_2(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that"], ["    return max(i for i in lst if lst.count(i) >= i) or -1\n\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    return max([i for i in lst if lst.count(i) >= i]) or -1\n\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, ", "    freq = {}\n    for item in lst:\n        freq[item] = freq.get(item, 0) + 1\n    return max(filter(lambda x: x >= x[1], freq.items()), key=lambda x: x[0])[0]\n\n\ndef search2(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    freq = {}\n    for item in lst:\n        freq[item] = freq.get(item, 0) + 1\n    for item in freq.keys():\n        if freq[item] >= item:\n            return item\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(search([4, 1, 2, 2, 3, 1]))", "    n = len(lst)\n    d = dict()\n    for i in lst:\n        d[i] = d.get(i, 0) + 1\n    # d = {key: value for (key, value) in d.items() if value >= key}\n    for k,v in d.items():\n        if k >= 1 and v >= k:\n            return k\n    return -1\n\n\ndef search2(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    n = len(lst)\n    d = dict()\n    for i in lst:\n        d[i] = d.get(i, 0) + 1\n    # d = {key: value for (key, value) in d.items() if value >= key}\n    for k,", "    # if len(lst) == 0: return -1\n    # for i in lst:\n    #     if i > 1:\n    #         return i\n    # return 1\n\n    # Approach 2\n    l = len(lst)\n    d = {}\n    for i in lst:\n        d[i] = d.get(i,0) + 1\n    for k,v in d.items():\n        if v >= k and v >= 2:\n            return k\n    return -1\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Approach 1\n    # if len(lst) == 0: return -1\n    # for i in lst:\n    #     if i > 1:\n    #         return i", "    lst = [str(x) for x in lst]\n    max_freq = 0\n    max_val = 0\n    for i, v in enumerate(lst):\n        if v not in lst[i+1:]:\n            if lst.count(v) > max_freq:\n                max_freq = lst.count(v)\n                max_val = int(v)\n    if max_freq > 1:\n        return max_val\n    return -1\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    max_freq = 0\n    max_val = 0\n    for i, v in enumerate(lst):\n        if v not in lst[i+1:]:\n            if lst.count(v) > max_f"], ["\n    # Your code here\n    if len(lst) == 0:\n        return lst\n    min_value = min(lst)\n    lst.remove(min_value)\n    max_value = max(lst)\n    lst.remove(max_value)\n    return lst + [min_value, max_value]\n\n\ndef strange_sort_list_v2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Your code here\n    return sorted(lst, key=lambda x: lst.index(x))\n\n\ndef strange_sort_list_v3(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5", "\n    # sort list\n    lst.sort()\n\n    # create new list\n    new_list = []\n\n    # add minimum value to new list\n    new_list.append(lst[0])\n\n    # remove minimum value from original list\n    lst.remove(lst[0])\n\n    # add maximum value to new list\n    new_list.append(lst[-1])\n\n    # remove maximum value from original list\n    lst.remove(lst[-1])\n\n    # add minimum value to new list\n    new_list.append(lst[0])\n\n    # remove minimum value from original list\n    lst.remove(lst[0])\n\n    # add maximum value to new list\n    new_list.append(lst[-1])\n\n    # remove maximum value from original list\n    lst.remove(lst[-1])\n\n    # return new list\n    return new_list\n\n\ndef strange_sort_list2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # sort list\n    lst.sort()\n\n    # add minimum value to", "    if lst == []:\n        return lst\n    lst.sort()\n    length = len(lst)\n    print(length)\n    min = lst[0]\n    for i in range(length):\n        print(i)\n        if lst[i] == min:\n            lst.remove(min)\n            lst.append(lst[0])\n            lst.remove(lst[0])\n            lst.insert(0, min)\n            break\n        if lst[i] < min:\n            lst.remove(lst[i])\n            lst.append(min)\n            lst.remove(min)\n            lst.insert(0, lst[i])\n            min = lst[i]\n    return lst\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))\n", "    l = lst.copy()\n    l.sort()\n    i = 0\n    while i < len(l):\n        if l[i] == l[-1]:\n            l.pop()\n            l.insert(0, l[-1])\n            i -= 1\n        else:\n            i += 1\n    return l\n\ndef strange_sort_list_two(lst):\n    lst.sort()\n    return lst[::-1]\n\nif __name__ == \"__main__\":\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([3, 4, 1, 2]))\n    print(strange_sort_list([4, 3, 2, 1]))\n    print(strange_sort_list([1, 3, 2, 4]))\n    print(strange_sort_list([1, 2, 3, 4, 5]))\n    print(strange_sort_list([1, 2, 3, 4, 5, 6]))\n    print(strange_sort_list([1, 2, 3, 4, 5, 6, 7]))\n    print(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(strange_sort_list([1, 2, 3, 4, ", "    # Your code here\n    min_value = min(lst)\n    lst.remove(min_value)\n    max_value = max(lst)\n    lst.remove(max_value)\n    lst.append(min_value)\n    lst.append(max_value)\n    return lst\n\n\ndef strange_sort_dict(dct):\n    '''\n    Given dictionary, return dictionary in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_dict({1: 2, 3: 4, 5: 6}) == {1: 2, 3: 4, 5: 6}\n    strange_sort_dict({}) == {}\n    '''\n    # Your code here\n    pass\n\n\ndef strange_sort_tuple(tpl):\n    '''\n    Given tuple, return tuple in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_tuple((1, 2, 3, 4)) == (1, 4, 2, 3)\n    strange_sort_tuple(()) == ()\n    '''\n    # Your code here\n    pass\n\n\ndef strange_sort_set(s):\n    '''\n    Given set, return set in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum"], ["    if (a+b) > c and (b+c) > a and (a+c) > b:\n        area = (a * b * c)/(4*((a*a) + (b*b) + (c*c)))\n        area = round(area, 2)\n        return area\n    else:\n        return -1\n\n\ndef test_triangle_area():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n\ndef test_triangle_area_with_negative_numbers():\n    assert triangle_area(-1, -2, -3) == -1\n\ndef test_triangle_area_with_negative_numbers():\n    assert triangle_area(0, 0, 0) == -1\n\ndef test_triangle_area_with_negative_numbers():\n    assert triangle_area(1, 2, 1) == -1\n\ndef test_triangle_area_with_negative_numbers():\n    assert triangle_area(0.5, 0.5, 0.5) == -1\n\ndef test_triangle_area_with_negative_numbers():\n    assert triangle_area(1, 2, 3) == 6.00\n\ndef test_triangle_area_with_negative_numbers():\n    assert triangle_area(0.5, 0.5, 10) == 0.12\n\ndef test_triangle_area_with_negative_numbers():\n    assert triangle_area(1, 1, 1) == 0.4", "    if a + b > c and a + c > b and b + c > a:\n        return round(0.5 * (a * b * (a + b + c) ** 0.5), 2)\n    return -1\n\n\ndef test_triangle_area():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(2, 2, 5) == 2.50\n    assert triangle_area(2, 2, 6) == 2.50\n\n\ndef main():\n    test_triangle_area()\n\n\nif __name__ == '__main__':\n    main()\n", "    if (a + b) > c and (a + c) > b and (b + c) > a:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\n#Alternative solutions:\n\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if (a + b) > c and (a + c) > b and (b + c) > a:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make", "    if a+b > c and a+c > b and b+c > a:\n        area = (a+b+c)/2 * math.sqrt((a+b+c)/2-(a**2+b**2+c**2)/2)\n        area = round(area, 2)\n        return area\n    else:\n        return -1\n\n\n# In[ ]:\n\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a+b > c and a+c > b and b+c > a:\n        area = (a+b+c)/2 * math.sqrt((a+b+c)/2-(a**2+b**2+c**2)/2)\n        area = round(area, 2)\n        return area\n    else:\n        return -1\n\n\n# In[ ]:\n\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle", "    # Your code here\n    if a + b > c and a + c > b and b + c > a:\n        return round(0.5*a*b, 2)\n    return -1\n\n\ndef triangle_area_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Your code here\n    if a + b > c and a + c > b and b + c > a:\n        return round(0.5*a*b, 2)\n    return -1\n\n\nif __name__ == '__main__':\n    print(triangle_area(3, 4, 5))\n    print(triangle_area(1, 2, 10))\n    print(triangle_area(20, 10, 15))\n    print(triangle_area(10, 20, 15))\n    print(triangle_area(10, 20, 30))\n\n    # answer:\n    # 6.00\n    # -1\n    # 45.00\n    # -1\n    # -1\n\n    print(triangle_area_2(3,"], ["    return True if q == q[::-1] and sum(q) <= w else False\n\n\n#will_it_fly([1, 2], 5)\n#will_it_fly([3, 2, 3], 1)\n#will_it_fly([3, 2, 3], 9)\n#will_it_fly([3], 5)\n\ndef will_it_fly(q,w):\n    return True if q == q[::-1] and sum(q) <= w else False\n\nwill_it_fly([1, 2], 5)\nwill_it_fly([3, 2, 3], 1)\nwill_it_fly([3, 2, 3], 9)\nwill_it_fly([3], 5)\n\n\ndef will_it_fly(q,w):\n    return True if q == q[::-1] and sum(q) <= w else False\n\n\ndef will_it_fly(q,w):\n    return True if q", "    return (w >= sum(q) and sum(q) == sum(reversed(q)))\n\n\n\nprint(will_it_fly([3, 2, 3], 1))\nprint(will_it_fly([3, 2, 3], 9))\nprint(will_it_fly([3], 5))\nprint(will_it_fly([1, 2], 5))\nprint(will_it_fly([1, 2], 9))\nprint(will_it_fly([1, 2], 5))\nprint(will_it_fly([1, 2], 9))\nprint(will_it_fly([1, 2, 3], 9))\nprint(will_it_fly([1, 2, 3], 1))\nprint(will_it_fly([1, 2, 3], 9))\nprint(will_it_fly([1, 2, 3], 1))\nprint(will_it_fly([1, 2, 3],", "    if sum(q)<=w:\n        if q == q[::-1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\n# Other solutions\n# def will_it_fly(q, w):\n#     return sum(q) <= w and q == q[::-1]\n\n# def will_it_fly(q, w):\n#     return sum(q) <= w and all(x==y for x, y in zip(q, q[::-1]))\n\n# def will_it_fly(q, w):\n#     if sum(q) <= w:\n#         return sum(q) <= w and q == q[::-1]\n#     return False\n\n\n# Other solutions\n# def will_it_fly(q, w):\n#     return sum(q) <= w and q == q[::-1]\n\n# def will_it_fly(q, w):\n#     return all(x==y for x, y in zip(q, q[::", "    # Your code here\n    if len(q) == 1:\n        if q[0] > w:\n            return False\n        else:\n            return True\n    else:\n        if q[0] == q[-1]:\n            return will_it_fly(q[1:-1],w)\n        else:\n            return False\n\n\n# Other solution:\ndef will_it_fly(q,w):\n    if len(q) == 1:\n        if q[0] <= w:\n            return True\n        else:\n            return False\n    else:\n        if q[0] == q[-1]:\n            return will_it_fly(q[1:-1],w)\n        else:\n            return False\n\n\n# Other solution:\ndef will_it_fly(q,w):\n    if len(q) == 1:\n        if q[0] <= w:\n            return True\n        else:\n            return False\n    else:\n        if q[0] == q[-1]:\n            return will_", "    return False\n\n\nprint(will_it_fly([1, 2], 5))\nprint(will_it_fly([3, 2, 3], 1))\nprint(will_it_fly([3, 2, 3], 9))\nprint(will_it_fly([3], 5))\nprint(will_it_fly([4, 3, 1], 5))\nprint(will_it_fly([1, 3, 1, 3, 1], 5))\nprint(will_it_fly([1, 3, 1, 3, 1], 6))\nprint(will_it_fly([1, 3, 1, 3, 1], 7))\nprint(will_it_fly([1, 3, 1, 3, 1], 9))\nprint(will_it_fly([1, 3, 1, 3, 1], 10))\nprint(will_it_fly([1, 3, 1, "], ["    # Write your code here.\n    if len(arr) < 2:\n        return 0\n\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n-1):\n        dp[i][i+1] = 1 if arr[i] == arr[i+1] else 0\n\n    for l in range(3, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i+1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return n - dp[0][-1]\n\n\nprint(smallest_change([1, 2, 3, 2, 1]))\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))\nprint(smallest_change([1, 2, 3, 3, 3, 2, 2]))\nprint(", "    # TODO: Implement smallest_change\n    # return value\n    return None\n\n\ndef check_palindrome(arr):\n    \"\"\"\n    Check if the given array is a palindrome. A palindrome is an array that is read the same backwards\n    and forwards.\n\n    For example:\n    check_palindrome([1,2,3,4,2,1]) == True\n    check_palindrome([1,2,3,4,2,3]) == False\n    \"\"\"\n    # TODO: Implement check_palindrome\n    return False\n\n\ndef check_palindrome_recursive(arr, start_index, end_index):\n    \"\"\"\n    Check if the given array is a palindrome. A palindrome is an array that is read the same backwards\n    and forwards.\n\n    For example:\n    check_palindrome([1,2,3,4,2,1]) == True\n    check_palindrome([1,2,3,4,2,3]) == False\n    \"\"\"\n    # TODO: Implement check_palindrome_recursive\n    return False\n\n\ndef is_palindrome(arr):\n    \"\"\"\n    Check if the given array is a palindrome. A palindrome is an array that is read the same backwards\n    and forwards.\n\n    For example:\n    is_palindrome([1,2,3,4,2,1]) == True\n    is_palindrome", "    # Check if the array is palindrome or not\n    is_palindrome = True\n    for i in range(len(arr)//2):\n        if arr[i] != arr[len(arr)-1-i]:\n            is_palindrome = False\n            break\n    \n    if is_palindrome:\n        return 0\n\n    # Now check which elements are not palindrome\n    count = 0\n    for i in range(len(arr)//2):\n        if arr[i] != arr[len(arr)-1-i]:\n            if arr[i] > arr[len(arr)-1-i]:\n                count += arr[i] - arr[len(arr)-1-i]\n            else:\n                count += arr[len(arr)-1-i] - arr[i]\n    return count\n\n\ndef smallest_change_opt(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, ", "    # return 4\n\n    # if not arr:\n    #     return 0\n    # if arr[-1] != arr[0]:\n    #     return 1\n    # else:\n    #     return smallest_change(arr[1:-1])\n\n    # return 0\n\n    # 1.\n    # if not arr:\n    #     return 0\n    # if arr[-1] != arr[0]:\n    #     return 1\n    # return smallest_change(arr[1:-1])\n\n    # 2.\n    # if not arr:\n    #     return 0\n    # if arr[-1] != arr[0]:\n    #     return 1 + smallest_change(arr[1:-1])\n    # return smallest_change(arr[1:-1])\n\n    # 3.\n    # if not arr:\n    #     return 0\n    # if arr[-1] != arr[0]:\n    #     return 1 + smallest_change(arr[1:-1])\n    # return smallest_change(arr[1:-1])\n\n    # 4.\n    # if not arr:\n    #     return 0\n    # if arr[-1] != arr[0]:\n    #     return 1 + smallest_change(arr[1:-1])\n    # return smallest_change(arr[1:-1])\n\n    # 5.\n    # if not arr:\n    #     return 0\n    # if arr", "    # Write your code here.\n    pass\n\n\ndef test_smallest_change():\n    assert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4\n    assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert smallest_change([1, 2, 3, 2, 1]) == 0\n    assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8]) == 4\n    assert smallest_change([1, 2, 3, 4, 3, 2, 1]) == 0\n    assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\n    assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 6\n    assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 7\n    assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 8\n    assert smallest_change(["], ["\n    if len(lst1) > len(lst2):\n        lst3 = lst2\n    else:\n        lst3 = lst1\n    for i in range(len(lst3)):\n        if len(lst3[i]) < len(lst1[i]):\n            lst1.remove(lst1[i])\n            lst2.remove(lst2[i])\n    return lst1\n\n\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'],", "    lst1_total_chars = 0\n    lst2_total_chars = 0\n    for word in lst1:\n        lst1_total_chars += len(word)\n    for word in lst2:\n        lst2_total_chars += len(word)\n    if lst1_total_chars < lst2_total_chars:\n        return lst1\n    elif lst1_total_chars > lst2_total_chars:\n        return lst2\n    else:\n        return lst1\n\n\n\ndef total_match(lst1, lst2):\n    return sorted(lst1 + lst2, key=len)[0:2]\n\n\n\ndef total_match(lst1, lst2):\n    return [x for x in lst1+lst2 if x not in lst1]\n\n\ndef total_match(lst1, lst2):\n    return sorted(lst1 + lst2, key=lambda x:len(x))[:2]\n\n\ndef total_match(lst1, lst2):\n    return sorted(lst1 + lst2, key=lambda x:len(x))[:2]\n\n\ndef total_match(lst1, lst2):\n    lst3 = lst1+", "    l1 = len(lst1)\n    l2 = len(lst2)\n    if l1 == l2:\n        return lst1\n    elif l1 < l2:\n        for i in range(l1):\n            if len(lst1[i]) > len(lst2[i]):\n                return lst2\n            elif len(lst1[i]) < len(lst2[i]):\n                return lst1\n    else:\n        for i in range(l2):\n            if len(lst2[i]) > len(lst1[i]):\n                return lst2\n            elif len(lst2[i]) < len(lst1[i]):\n                return lst1\n\n\ndef total_match(lst1, lst2):\n    l1 = len(lst1)\n    l2 = len(lst2)\n    if l1 == l2:\n        return lst1\n    elif l1 < l2:\n        for i in range(l1):\n            if len(lst1[i]) > len(lst2[i]):\n                return lst2\n            elif len(lst1[i]) < len(lst2[i]):\n                return lst1\n    else:\n        for i in range(l", "    return lst1 if len(lst1) == len(lst2) else lst2\n\n\ndef total_match(lst1, lst2):\n    return lst1 if len(lst1) >= len(lst2) else lst2\n\n\ndef total_match(lst1, lst2):\n    return lst1 if len(lst1) == len(lst2) else lst2\n\n\ndef total_match(lst1, lst2):\n    return lst1 if len(lst1) < len(lst2) else lst2\n\n\ndef total_match(lst1, lst2):\n    return lst1 if len(lst1) > len(lst2) else lst2\n\n\ndef total_match(lst1, lst2):\n    return lst1 if len(lst1) >= len(lst2) else lst2\n\n\ndef total_match(lst1, lst2):\n    return lst1 if len(lst1) >= len(lst2) else lst2\n\n\ndef total_match(lst1, lst2):\n    return lst1 if len(lst1) > len(lst2) else lst2\n\n\ndef total_match(lst1, lst2):\n    return lst1 if len(lst1) == len(lst2) else", "    total_str1 = 0\n    total_str2 = 0\n    for i in lst1:\n        total_str1 += len(i)\n    for j in lst2:\n        total_str2 += len(j)\n    if total_str1 < total_str2:\n        return lst1\n    elif total_str2 < total_str1:\n        return lst2\n    elif total_str1 == total_str2:\n        return lst1\n    else:\n        return lst1\n\n\ndef total_match(lst1, lst2):\n    return lst1 if sum(map(len, lst1)) < sum(map(len, lst2)) else lst2\n\n\ndef total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) < sum(len(s) for s in lst2) else lst2\n\n\ndef total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):\n        return lst1\n    elif sum(len(s) for s in lst1) > sum(len(s) for s in lst2):\n        return lst2\n"], ["    if a < 100:\n        for i in range(a, 1, -1):\n            if a % i == 0:\n                a = a // i\n                if a % 2 == 0 and a % 3 == 0:\n                    return True\n                else:\n                    return False\n    else:\n        return False\n\n\ndef get_sum_of_odd_numbers_in_range(a, b):\n    \"\"\"Write a function that returns the sum of all odd numbers in the range [a, b].\n    The range may contain non-integer values.\n    Example:\n    get_sum_of_odd_numbers_in_range(10, 30) == 118\n    get_sum_of_odd_numbers_in_range(3.1, 5.9) == 19\n    get_sum_of_odd_numbers_in_range(1, 1) == 0\n    \"\"\"\n    if a <= b:\n        return sum(i for i in range(a, b + 1) if i % 2 == 1)\n    return 0\n\n\ndef get_largest_string_of_equal_length_from_list(lst):\n    \"\"\"Write a function that returns the largest string from a list of strings such that the length of the string\n    is equal to the largest length of strings in the list.\n    Example:\n    get_largest_string_of_equal_length_from_list(['ab', 'cde', 'f']) == 'ab'\n    get_largest_string_of_equal_length_from_list(['ab', 'c', 'f']) == ''\n    \"\"\"\n    max_length = max([len(i) for i in lst])\n    for i in lst:\n        if len", "    if a < 100:\n        for num in range(2, a + 1):\n            if a % num == 0:\n                a /= num\n                if a == 1:\n                    return True\n                elif a == 3:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n\ndef is_divisible(a, b):\n    \"\"\"Write a function that returns true if the given number is divisible by 2 or 3 and false otherwise.\n    Knowing that (a) is less than 100.\n    Example:\n    is_divisible(6, 2) == True\n    \"\"\"\n    if a < 100:\n        if a % 2 == 0 or a % 3 == 0:\n            return True\n        else:\n            return False\n\ndef is_divisible_by_3(a):\n    \"\"\"Write a function that returns true if the given number is divisible by 3 and false otherwise.\n    Knowing that (a) is less than 100.\n    Example:\n    is_divisible_by_3(9) == True\n    \"\"\"\n    if a < 100:\n        if a % 3 == 0:\n            return True\n        else:\n            return False\n\ndef is_divisible_by_2(a):\n    \"\"\"Write a function that returns true if the given number is divisible by 2 and false otherwise.\n    Knowing that (a) is less than 100.\n    Example:\n    is_divisible_by_2(2) == True\n    \"\"\"\n    if a < 100:\n        if a % 2 == 0:\n            return True\n        else:\n            return False", "    for i in range(1, a + 1):\n        if a % i == 0:\n            if is_prime(i) == True:\n                if a != i * i * i:\n                    if a != i * i * i * i:\n                        return True\n                else:\n                    return False\n    return False\n\ndef is_prime(a):\n    \"\"\"Write a function that returns true if the given number is prime and false otherwise.\n    Example:\n    is_prime(3) == True\n    is_prime(23) == False\n    \"\"\"\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n\ndef is_divisible_by_three(a):\n    \"\"\"Write a function that returns true if the given number is divisible by 3 and false otherwise.\n    Example:\n    is_divisible_by_three(3) == True\n    is_divisible_by_three(23) == False\n    \"\"\"\n    if a % 3 == 0:\n        return True\n    return False\n\ndef is_divisible_by_four(a):\n    \"\"\"Write a function that returns true if the given number is divisible by 4 and false otherwise.\n    Example:\n    is_divisible_by_four(3) == False\n    is_divisible_by_four(23) == False\n    \"\"\"\n    if a % 4 == 0:\n        return True\n    return False\n\ndef is_divisible_by_five(a):\n    \"\"\"Write a function that returns true if the given number is divisible by 5 and false otherwise.\n    Example:\n    is_divisible_by_five(3) == False\n    is_div", "    if a < 3:\n        return False\n    if a % 2 == 0 or a % 3 == 0:\n        return False\n    for i in range(6, a, 6):\n        if a % i == 0:\n            return False\n    return True\n\n\ndef main():\n    \"\"\"\n    Run sample is_multiply_prime functions. Do not import the function for\n    this problem. You have to predict the output from the function.\n    \"\"\"\n    print(is_multiply_prime(30))\n    print(is_multiply_prime(42))\n    print(is_multiply_prime(46))\n    print(is_multiply_prime(78))\n    print(is_multiply_prime(80))\n    print(is_multiply_prime(90))\n    print(is_multiply_prime(94))\n    print(is_multiply_prime(96))\n    print(is_multiply_prime(98))\n    print(is_multiply_prime(100))\n\n\nif __name__ == '__main__':\n    main()\n", "    a = int(a)\n    if a < 100:\n        for i in range(1, a//3 + 1):\n            if a % i == 0 and i % 2 != 0:\n                temp = a / i\n                if temp % 2 != 0:\n                    return True\n    return False\n\n\nprint(is_multiply_prime(30))\nprint(is_multiply_prime(300))\nprint(is_multiply_prime(301))\nprint(is_multiply_prime(400))\nprint(is_multiply_prime(401))\nprint(is_multiply_prime(500))\nprint(is_multiply_prime(501))\nprint(is_multiply_prime(600))\nprint(is_multiply_prime(601))\nprint(is_multiply_prime(700))\nprint(is_multiply_prime(701))\nprint(is_multiply_prime(800))\nprint(is_multiply_prime(801))\nprint(is_multiply_prime(900))\nprint(is_multiply_prime(901))\nprint(is_multiply_prime(1000))\nprint(is_multiply_prime(1001))\nprint(is_multiply_prime(1100))\nprint(is_multiply_prime(1101))\nprint(is_multiply_prime(1200))\nprint(is_multiply_prime(1201))\nprint(is_multiply_prime(1300))\nprint(is_multiply_prime(1301))\nprint(is_multiply_prime(1"], ["    if n == 1:\n        return True\n    else:\n        return n ** int(x / n) == x\n\n\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return n ** int(x / n) == x\n\n\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) =>", "    if n == 0:\n        return False\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    x_power = x\n    n_power = n\n    while x_power == n_power:\n        x_power = x_power * n\n        n_power = n_power * n\n        if x_power == n_power:\n            return True\n        else:\n            return False\n\nprint(is_simple_power(1, 4))  # Should print True\nprint(is_simple_power(2, 2))  # Should print True\nprint(is_simple_power(8, 2))  # Should print True\nprint(is_simple_power(3, 2))  # Should print False\nprint(is_simple_power(3, 1))  # Should print False\nprint(is_simple_power(5, 3))  # Should print False\nprint(is_simple_power(5, 3))  # Should print False\nprint(is_simple_power(1, 1))  # Should print True\nprint(is_simple_power(1, 0))  # Should print False\nprint(is_simple_power(1, -1))  # Should print False\nprint(is_simple_power(0, 1))  # Should print False\nprint(is_simple_power(0, 0))  # Should print True\nprint(is_simple_power(0, -1))  # Should print False", "    return x == n ** int(x)\n\n\ndef is_simple_power_iterative(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x == n ** int(x)\n\n\ndef is_simple_power_recursive(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == n ** int(x", "    if type(x) != int or type(n) != int:\n        return False\n    return x == n ** int(x / n)\n\n\ndef test_is_simple_power():\n    assert is_simple_power(1, 4)\n    assert is_simple_power(2, 2)\n    assert is_simple_power(8, 2)\n    assert not is_simple_power(3, 2)\n    assert not is_simple_power(3, 1)\n    assert not is_simple_power(5, 3)\n\n\ndef is_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a power\n    of n and false in other cases.\n    x is a power of n if n**int=x\n    For example:\n    is_power(1, 4) => false\n    is_power(2, 2) => true\n    is_power(8, 2) => true\n    is_power(3, 2) => true\n    is_power(3, 1) => true\n    is_power(5, 3) => true\n    \"\"\"\n    if type(x) != int or type(n) != int:\n        return False\n    return x == n ** int(x / n)\n\n\ndef test_is_power():\n    assert not is_power(1, 4)\n    assert is_power(2, 2)\n    assert is_power(8, ", "    if x == n ** int(x ** (1 / n)):\n        return True\n    else:\n        return False\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))\n"], ["    b=a**(1/3)\n    return b.is_integer()\n    pass\n\ndef is_prime(n):\n    '''\n    Write a function that takes an integer n and returns True \n    if this integer is a prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_prime(1) ==> False\n    is_prime(2) ==> True\n    is_prime(3) ==> True\n    is_prime(10) ==> False\n    is_prime(11) ==> True\n    '''\n    if n==1:\n        return False\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\n    pass\n\ndef is_armstrong(n):\n    '''\n    Write a function that takes an integer n and returns True \n    if this integer is an Armstrong number.\n    An Armstrong number of order n is an integer such that \n    the sum of the nth powers of its digits is equal to the \n    number itself.\n    Examples:\n    is_armstrong(0) ==> True\n    is_armstrong(9) ==> True\n    is_armstrong(111) ==> True\n    is_armstrong(371) ==> True\n    is_armstrong(407) ==> True\n    is_armstrong(1634) ==> True\n    is_armstrong(8208) ==> True\n    is_armstrong(9474) ==> True\n    is_armstrong(54321) ==> False\n    '''\n    pass\n\ndef is", "    if a < 0:\n        a = abs(a)\n    return a == a ** 3\n\n\ndef iscube2(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return a == a ** 3\n\n\ndef iscube3(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        return False\n    return a ** 3 == a\n\n\ndef iscube4(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(", "    return a ** 3 == a\n\n\ndef is_perfect_square(a):\n    '''\n    Write a function that takes an integer a and returns True if \n    this integer is a perfect square.\n    Examples:\n    is_perfect_square(1) ==> True\n    is_perfect_square(2) ==> False\n    is_perfect_square(-1) ==> True\n    is_perfect_square(64) ==> True\n    is_perfect_square(0) ==> True\n    is_perfect_square(180) ==> False\n    '''\n    return a ** 0.5 == a\n\n\ndef count_leading_zeros(a):\n    '''\n    Write a function that takes an integer a and returns the \n    number of leading zeros in the binary representation of the integer.\n    Note: you may assume the input is always valid.\n    Examples:\n    count_leading_zeros(1) ==> 0\n    count_leading_zeros(2) ==> 1\n    count_leading_zeros(-1) ==> 32\n    count_leading_zeros(64) ==> 6\n    count_leading_zeros(0) ==> 32\n    count_leading_zeros(180) ==> 23\n    '''\n    return a.bit_length() - a.bit_length() - a.bit_length()\n\n\ndef count_trailing_zeros(a):\n    '''\n    Write a function that takes an integer a and returns the \n    number of trailing zeros in the binary representation of the integer.\n    Note: you may assume the input is always valid.\n", "    return (a**(1/3))%1==0\n\ndef is_prime(n):\n    '''\n    Write a function that takes an integer n and returns True \n    if n is prime.\n    Examples:\n    is_prime(11) ==> True\n    is_prime(2) ==> True\n    is_prime(4) ==> False\n    '''\n    if n%2==0:\n        return False\n    for i in range(3,int(n**(1/2))+1,2):\n        if n%i==0:\n            return False\n    return True\n\ndef get_min_max_avg(lst):\n    '''\n    Write a function that takes a list lst of integers\n    and returns a tuple (min, max, avg), where min and max\n    are minimum and maximum values in the list respectively,\n    and avg is the average value of all elements in the list.\n    Examples:\n    get_min_max_avg([]) ==> (None, None, None)\n    get_min_max_avg([1]) ==> (1, 1, 1.0)\n    get_min_max_avg([1, 2, 3]) ==> (1, 3, 2.0)\n    get_min_max_avg([1, 2, 3, 4, 5]) ==> (1, 5, 3.0)\n    get_min_max_avg([1, -4, 3, 2, 5]) ==> (-4, 5, 1.8)\n    '''\n    if len(lst)==0:\n        return", "    if a == 0:\n        return True\n    for x in range(1, a+1):\n        if x**3 == a:\n            return True\n    return False\n\n\ndef iscube_v2(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0:\n        return True\n    for x in range(1, a+1):\n        if x**3 == a:\n            return True\n    return False\n\n\ndef iscube_v3(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0:\n        return True\n    for x in range(1, a+1):\n        if x**3 == a:\n            return True\n    return False\n\n"], ["    # Start your code here\n    num = num.upper()\n    count = 0\n    for x in num:\n        if int(x, 16) in [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,", "    count = 0\n    for i in num:\n        if i in \"ABCDEF\":\n            count += 1\n            if num[i] in \"2468A\":\n                count -= 1\n    return count\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))\n\ndef f(n):\n    \"\"\"You are given a positive integer n. \n    If n is a prime number, return True. \n    Otherwise, return False", "    num = num.upper()\n    if num == \"\":\n        return 0\n    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in num:\n        if i in primes:\n            count += 1\n    return count\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))\n\n\ndef hex_key(num):\n    \"\"\"You have", "    # Write your code here\n    return len(list(filter(lambda x: is_prime(x), \n                          map(lambda x: ord(x) - ord('A'), num))))\n\n\ndef is_prime(num):\n    if num == 2 or num == 3:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef test_bench():\n    num = \"AB\"\n    print(hex_key(num))", "    result = 0\n    if len(num) == 0:\n        return 0\n    for digit in num:\n        if digit.lower() in ['a', 'b', 'c', 'd', 'e', 'f']:\n            result += 1\n    return result\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(hex_key(\"AB\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33"], ["    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'\n\n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a string with each character representing a binary number. Your task is to convert\n    it to a number in decimal form.\n\n    The string will be in the format \"db110110db\". Each character will be '0' or '1'.\n\n    Examples:\n    binary_to_decimal(\"db110110db\")   # returns 102\n    binary_to_decimal(\"db000000db\")   # returns 0\n    binary_to_decimal(\"db111111db\")   # returns 127\n    \"\"\"\n    binary = binary[2:-2]\n    return int(binary, 2)\n\n\ndef binary_to_decimal_reverse(binary):\n    \"\"\"You will be given a string with each character representing a binary number. Your task is to convert\n    it to a number in decimal form.\n\n    The string will be in the format \"db110110db\". Each character will be '0' or '1'.\n\n    Examples:\n    binary_to_decimal_reverse(\"db110110db\")   # returns 102\n    binary_to_decimal_reverse(\"db000000db\")   # returns 0\n    binary_to_decimal_reverse(\"db1", "    # Your code goes here\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return 'db' + binary + 'db'\n\n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a number in binary format and your task is to convert it to decimal form.\n    The function should return an integer.\n\n    Examples:\n    binary_to_decimal(\"db1111db\")   # returns 15\n    binary_to_decimal(\"db100000db\")   # returns 32\n    \"\"\"\n    # Your code goes here\n    decimal = 0\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            decimal += 2**(len(binary) - i - 1)\n    return decimal\n\n\ndef main():\n    # print(decimal_to_binary(15))\n    # print(decimal_to_binary(32))\n    print(binary_to_decimal(\"db1111db\"))\n    print(binary_to_decimal(\"db100000db\"))\n\n\nif __name__ == '__main__':\n    main()\n\n\n\"\"\"\n2) Write a function that takes a number and returns the number of digits in it.\n\nExamples:\ndigit_count(15)   # returns 2\ndigit_count(1", "    # Your code here\n    num_bin = bin(decimal)[2:]\n    num_bin_l = len(num_bin)\n    num_bin_c = int(num_bin_l/4)\n    num_bin_r = int(num_bin_l%4)\n    if num_bin_r == 0:\n        num_bin_r = 4\n    num_bin = 'db' + num_bin + 'db'\n    num_bin = num_bin[num_bin_c - 1:]\n    return num_bin\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(decimal_to_binary(15))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert decimal_to_binary(15) == \"db1111db\", \"15\"\n    assert decimal_to_binary(32) == \"db100000db\", \"32\"\n    assert decimal_to_binary(80) == \"db1000000db\", \"80\"\n    assert decimal_to_binary(128) == \"db10000000db\", \"128\"\n    assert decimal_to_binary(256) == \"db100000000db\", \"256\"\n    print(\"Coding complete? Click 'Check' to earn", "    binary = \"\"\n    while decimal != 0:\n        if decimal % 2 == 1:\n            binary = \"1\" + binary\n        else:\n            binary = \"0\" + binary\n        decimal = int(decimal / 2)\n    return \"db\" + binary + \"db\"\n\ndef is_palindrome(binary):\n    \"\"\"You will be given a string representing a binary number. Your task is to return True if the\n    number is a palindrome, otherwise return False. A palindrome is a number that reads the same\n    forwards and backwards.\n\n    Examples:\n    is_palindrome(\"db101010db\") # returns True\n    is_palindrome(\"db101011db\") # returns False\n    \"\"\"\n    return binary[1:-1] == binary[1:-1][::-1]\n\ndef main():\n    #decimal = int(input(\"Enter a decimal number: \"))\n    decimal = 21\n    binary = decimal_to_binary(decimal)\n    print(binary)\n    is_palindrome(binary)\n\nmain()\n\\end{code}\n\nComment: Please do not update your question in a way that invalidates existing answers. Ask a new question instead.\n\nComment: @Graipher Sorry, I'm a beginner. I didn't know.\n\nComment: I know. Just sayin'.\n\nAnswer: You are trying to iterate over `binary` but it is a `str`. A", "    binary = format(decimal, '08b')\n    return f\"db{binary}db\"\n\n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a string, which will represent a number in binary format. Your task is to convert\n    it to decimal format.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    binary_to_decimal(\"db1111db\")   # returns 15\n    binary_to_decimal(\"db100000db\")   # returns 32\n    \"\"\"\n    return int(binary[2:-2], 2)\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for\n    # auto-testing, so they are not included in the auto-testing process\n    assert decimal_to_binary(15) == \"db1111db\", \"Decimal to Binary\"\n    assert decimal_to_binary(32) == \"db100000db\", \"Decimal to Binary\"\n    assert binary_to_decimal(\"db1111db\") == 15, \"Binary to Decimal\"\n    assert binary_to_decimal(\"db100000db\") == 32, \"Binary to Decimal\"\n    assert decimal_to_binary(30)"], ["    if len(s) < 3:\n        return False\n    return all(s[i:i+3] != s[i+1:i+4] for i in range(len(s) - 2))\n\n\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"xyy\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"aabb\"))\n\n\n\"\"\"\n    Expected Output :\n    True\n    False\n    True\n    False\n    False\n    False\n    False\n    \"\"\"\n", "    s = list(s)\n    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n-2):\n        if s[i:i+3] == s[i+1:i+4]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    # s = input(\"Enter a string :\")\n    s = \"abcd\"\n    print(is_happy(s))\n\n\n# In[ ]:\n\n\n\n\n", "    if len(s) < 3:\n        return False\n    if len(s) % 3 == 1:\n        return False\n    if len(s) % 3 == 2:\n        return True\n\n    return False\n\n\n# ------------------------------------------------------------------------------------\n# Alternative Solutions\n# ------------------------------------------------------------------------------------\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(0, len(s), 3):\n        if s[i:i + 3] == s[i + 1:i + 4] == s[i + 2:i + 5]:\n            return False\n\n    return True\n\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy", "    # your code goes here\n    return False if len(s) < 3 else True\n\n\nif __name__ == \"__main__\":\n    s = \"abcd\"\n    print(is_happy(s))\n    s = \"xyy\"\n    print(is_happy(s))\n    s = \"aabb\"\n    print(is_happy(s))\n    s = \"adb\"\n    print(is_happy(s))\n    s = \"a\"\n    print(is_happy(s))\n    s = \"aa\"\n    print(is_happy(s))\n    s = \"abcd\"\n    print(is_happy(s))\n    s = \"aabb\"\n    print(is_happy(s))\n    s = \"adb\"\n    print(is_happy(s))\n    s = \"xyy\"\n    print(is_happy(s))\n    s = \"aabb\"\n    print(is_happy(s))\n    s = \"adb\"\n    print(is_happy(s))\n    s = \"xyy\"\n    print(is_happy(s))\n    s = \"aabb\"\n    print(is_happy(s))\n    s = \"adb\"\n    print(is_happy(s))\n    s = \"xyy\"\n    print(is_happy(s))\n    s = \"aabb\"\n    print(is_happy(s))\n    s = \"adb\"\n    print(is_happy(s))\n   ", "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i:i + 3] == s[i + 1:i + 4]:\n            return False\n    return True\n\n\ndef is_happy(s):\n    return len(s) >= 3 and all(c != d for c, d in zip(s, s[1:]))\n\n\ndef is_happy(s):\n    return len(s) >= 3 and not any(c == d for c, d in zip(s, s[1:]))\n\n\nif __name__ == '__main__':\n    print(is_happy('abc'))\n    print(is_happy('abcd'))\n    print(is_happy('aabb'))\n    print(is_happy('adb'))\n    print(is_happy('xyy'))\n    print(is_happy('a'))\n    print(is_happy('aa'))\n    print(is_happy('abcd'))\n    print(is_happy('aabb'))\n    print(is_happy('adb'))\n    print(is_happy('xyy'))\n\n\n\"\"\"\nTime O(n)\nSpace O(n)\n\"\"\"\n\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_h"], ["    pass\n\n\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.", "    return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'][min([max([int(round(x, 0)), 0]), 5])] for x in grades]\n\n\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n           ", "    A_plus = 4.0\n    A = 3.7\n    A_minus = 3.3\n    B_plus = 3.0\n    B = 2.7\n    B_minus = 2.3\n    C_plus = 2.0\n    C = 1.7\n    C_minus = 1.3\n    D_plus = 1.0\n    D = 0.7\n    D_minus = 0.0\n    E = 0.0\n    \n    if grades == []:\n        return []\n    else:\n        results = []\n        for grade in grades:\n            if grade >= A_plus:\n                results.append('A+')\n            elif grade >= A:\n                results.append('A')\n            elif grade >= A_minus:\n                results.append('A-')\n            elif grade >= B_plus:\n                results", "    grade_list = []\n    for grade in grades:\n        if grade >= 4.0:\n            grade_list.append(\"A+\")\n        elif grade >= 3.7:\n            grade_list.append(\"A\")\n        elif grade >= 3.3:\n            grade_list.append(\"A-\")\n        elif grade >= 3.0:\n            grade_list.append(\"B+\")\n        elif grade >= 2.7:\n            grade_list.append(\"B\")\n        elif grade >= 2.3:\n            grade_list.append(\"B-\")\n        elif grade >= 2.0:\n            grade_list.append(\"C+\")\n        elif grade >= 1.7:\n            grade_list.append(\"C\")\n        elif grade >= 1.3:\n            grade_list.append(\"C-\")\n        elif grade >= 1.0:\n            grade", "    return [letter_grade(g) for g in grades]\n\n\ndef letter_grade(g):\n    \"\"\"\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > "], ["    string = str(string)\n    if len(string) == 2 or len(string) == 3:\n        return True\n    else:\n        for i in range(2, len(string) + 1):\n            if len(string) % i == 0:\n                return False\n            else:\n                return True\n\n\ndef palindrome_permutation(string):\n    \"\"\"Write a function that takes a string and returns True if it is a\n    permutation of a palindrome or False otherwise. A palindrome is a word\n    or phrase that is the same forwards and backwards. A permutation\n    is a rearrangement of letters. The palindrome does not need to be\n    limited to just dictionary words. You can assume the input string will\n    only contain letters.\n    Examples\n    palindrome_permutation('Tact Coa') == True\n    palindrome_permutation('Tact Oc') == False\n    palindrome_permutation('Taco') == False\n    palindrome_permutation('Racecar') == True\n    \"\"\"\n    string = str(string)\n    if len(string) == 2 or len(string) == 3:\n        return True\n    else:\n        sorted_string = \"\".join(sorted(string))\n        return sorted_string == string\n\n\ndef one_away(string1, string2):\n    \"\"\"Write a function that takes two strings as arguments and returns True if\n    one of the strings is a permutation of the other or False otherwise.\n    Examples\n    one_away('pale', 'ple') == True\n    one_away('pale', 'bale') == True\n    one_away('pale', 'bake') == False\n    \"\"\"\n    string1 = str(string1)\n", "    # return True if len(string) == 5 else False\n    # return True if len(string) == 4 else False\n    # return True if len(string) == 3 else False\n    # return True if len(string) == 2 else False\n    # return True if len(string) == 1 else False\n    # return True if len(string) == 0 else False\n    # return True if len(string) == 1 else False\n\n    return True if len(string) == 5 or len(string) == 4 or len(string) == 3 or len(string) == 2 or len(string) == 1 else False\n\n    # return True if len(string) == 5 or len(string) == 4 or len(string) == 3 else False\n\n    # return True if len(string) == 5 or len(string) == 4 else False\n\n    # return True if len(string) == 5 else False\n\n    # return True if len(string) == 5 or len(string) == 4 or len(string) == 3 or len(string) == 2 or len(string) == 1 else False\n\n    # return True if len(string) == 5 or len(string) == 4 or len(string) == 3 or len(string) == 2 or len(string) == 1 else False\n\n    # return True if len(string) == 5 or len(string) == 4 or len(string) == 3 or len(string) == 2 or len(string) == 1 else False\n\n    # return True if len(string) == 5 or len(string) == 4 or len(string) == 3 or len(string) == 2 or len(string) == 1 else False\n\n    # return True if", "    def prime(x):\n        if x == 1:\n            return False\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n\n    def is_prime(x):\n        if x < 2:\n            return False\n        elif x == 2:\n            return True\n        elif x % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(x**0.5)+1, 2):\n                if x % i == 0:\n                    return False\n            return True\n\n    if is_prime(len(string)):\n        return True\n    else:\n        return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "    return False\n    # Your code here\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Your code here\n    if (len(string) == 1):\n        return False\n    i = 2\n    while i < len(string):\n        if len(string) % i == 0:\n            return False\n        i += 1\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Your code here\n    if (len(string) == 1):\n        return False\n    i = 2\n    while i < len(string):\n        if len(string) % i == 0:\n            return False\n        i += 1\n    return True\n\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Your code here\n    if (len(string) == 1):\n       ", "\n    # Code here\n    if len(string)==1:\n        return True\n    for i in range(2,len(string)):\n        if len(string)%i==0:\n            return False\n    return True\n\n\n# 12.14\n# Write a function that takes a string and returns the\n# reversed string\ndef reverse(string):\n    \"\"\"Write a function that takes a string and returns the reversed string\n    Examples\n    reverse('Hello') == 'olleH'\n    reverse('abcdcba') == 'abcba'\n    reverse('kittens') == 'tnsekitt'\n    \"\"\"\n\n    # Code here\n    return string[::-1]\n\n\n# 12.15\n# Write a function that takes a string and returns a list\n# of the words in the string\ndef word_list(string):\n    \"\"\"Write a function that takes a string and returns a list\n    of the words in the string\n    Examples\n    word_list('Hello world') == ['Hello', 'world']\n    word_list('How are you?') == ['How', 'are', 'you?']\n    word_list('Hey Jude, don\\'t make it bad.') == ['Hey', 'Jude,', 'don\\'t', 'make', 'it', 'bad.']\n    \"\"\"\n\n    # Code here\n    return string.split(' ')\n\n\n# 12.16\n# Write a function that takes a string and returns the\n# uppercase version of the string\ndef upper(string):\n    \"\"\"Write a function that takes a string and returns the\n    uppercase version of the string\n    Examples\n    upper('hello') == 'HELLO'\n    upper('how are you?') == 'HOW ARE YOU?'\n    \"\"\""], ["    start_count = 0\n    end_count = 0\n    for i in range(1, n + 1):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            if str(i)[0] == '1':\n                start_count += 1\n            if str(i)[-1] == '1':\n                end_count += 1\n    return start_count + end_count\n\n\ndef test_starts_one_ends():\n    \"\"\"\n    Tests for starts_one_ends\n    \"\"\"\n    assert starts_one_ends(1) == 2\n    assert starts_one_ends(2) == 4\n    assert starts_one_ends(3) == 7\n    assert starts_one_ends(4) == 11\n    assert starts_one_ends(5) == 15\n    assert starts_one_ends(6) == 19\n    assert starts_one_ends(7) == 24\n    assert starts_one_ends(8) == 29\n    assert starts_one_ends(9) == 34\n    assert starts_one_ends(10) == 39\n    assert starts_one_ends(11) == 44\n    assert starts_one_ends(12) == 49\n    assert starts_one_ends(13) == 54\n    assert starts_one_ends(14) == 59\n    assert starts_one_ends(15) == 64\n    assert starts_one_ends(16) == 69\n    assert starts_one_ends(17) == 74\n    assert starts_one_ends(18) == 79\n    assert starts_one_ends(19) == 84\n    assert starts_one_ends(20) == 89\n\n\ndef test_starts_one_ends_fail():\n    \"\"\"\n    Test", "    count = 0\n\n    for i in range(n):\n        for j in range(10 ** i):\n            if str(j)[0] == '1' or str(j)[-1] == '1':\n                count += 1\n\n    return count\n\n\nif __name__ == '__main__':\n    print(starts_one_ends(2))\n    print(starts_one_ends(3))\n    print(starts_one_ends(4))\n    print(starts_one_ends(5))\n    print(starts_one_ends(6))\n    print(starts_one_ends(7))\n    print(starts_one_ends(8))\n    print(starts_one_ends(9))\n    print(starts_one_ends(10))\n    print(starts_one_ends(11))\n    print(starts_one_ends(12))\n    print(starts_one_ends(13))\n    print(starts_one_ends(14))\n    print(starts_one_ends(15))\n    print(starts_one_ends(16))\n    print(starts_one_ends(17))\n    print(starts_one_ends(18))\n    print(starts_one_ends(19))\n    print(starts_one_ends(20))\n    print(starts_one_ends(21))\n    print(starts_one_ends(22))\n    print(starts_one_ends(23))\n    print(starts_one_ends(24))\n    print(starts_one_ends(25))\n    print(starts_one_ends(26))\n    print(starts_one_ends(27))\n    print(starts_one_ends(28))\n    print(starts_one_ends(29))\n    print(starts_one_ends(30))\n    print(starts_one_ends(31))\n    print(starts", "    return (n * (n + 1)) // 2\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\ndef test_starts_one_ends():\n    assert starts_one_ends(1) == 1\n    assert starts_one_ends(2) == 3\n    assert starts_one_ends(3) == 7\n    assert starts_one_ends(4) == 13\n    assert starts_one_ends(5) == 24\n    assert starts_one_ends(6) == 41\n    assert starts_one_ends(7) == 67\n    assert starts_one_ends(8) == 106\n    assert starts_one_ends(9) == 154\n    assert starts_one_ends(10) == 216\n    assert starts_one_ends(11) == 296\n    assert starts_one_ends(12) == 380\n    assert starts_one_ends(13) == 469\n    assert starts_one_ends(14) == 572\n    assert starts_one_ends(15) == 688\n    assert starts_one_ends(16) == 801\n    assert starts_one_ends(17) == 922\n    assert starts_one_ends(18) == 1051\n    assert starts_one_ends(19) == 1190\n    assert starts_one_ends(20) == 1335\n    assert starts_one_ends(21) == 1501\n    assert starts_one_ends(22) == 1666\n    assert starts_one_ends(23) == 1838\n    assert starts_one_ends(24) == 2019\n    assert starts_one_ends(25) ==", "    # Your code here\n    return 10 * (n - 1)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(starts_one_ends(n))\n\n", "    count = 0\n    for x in range(1, n + 1):\n        for y in range(1, x + 1):\n            if str(x * y)[0] == '1' or str(x * y)[-1] == '1':\n                count += 1\n    return count\n\n\ndef starts_one_ends_fast(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for x in range(1, n + 1):\n        for y in range(1, x + 1):\n            if str(x * y)[0] == '1' or str(x * y)[-1] == '1':\n                count += 1\n    return count\n\n\ndef test_starts_one_ends():\n    assert starts_one_ends(1) == 0\n    assert starts_one_ends(2) == 0\n    assert starts_one_ends(3) == 0\n    assert starts_one_ends(4) == 0\n    assert starts_one_ends(5) == 0\n    assert starts_one_ends(6) == 0\n    assert starts_one_ends(7) == 1\n    assert starts_one_ends(8) == 1\n    assert starts_one_ends(9) == 1\n    assert starts_one_ends(10) == 1\n    assert starts_one_ends(11) == 1\n    assert starts_one_ends(12) == 1\n    assert starts_one_ends(13) == 1\n    assert starts_one_ends(14) == 1\n    assert starts_one_ends(15) == 1\n    assert starts_one_ends(16) == 1\n    assert starts_one_ends(17) == 2\n    assert starts_one_ends(1"], ["    if N == 0:\n        return \"0\"\n    elif N == 1:\n        return \"1\"\n    else:\n        return str(bin(N))[2:]\n\n\ndef test_function(test_case):\n    output = solve(test_case)\n    print(output)\n    assert(output == \"1\")\n\n\ntest_function(1000)\ntest_function(150)\ntest_function(147)\ntest_function(10000)\ntest_function(100000)\ntest_function(1000000)\ntest_function(10000000)\ntest_function(100000000)\ntest_function(1000000000)\ntest_function(10000000000)\ntest_function(100000000000)\ntest_function(1000000000000)\ntest_function(10000000000000)\ntest_function(100000000000000)\ntest_function(1000000000000000)\ntest_function(10000000000000000)\ntest_function(10000000000000", "    # Base cases:\n    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    # Inductive cases:\n    return solve(N // 2) + str(N % 2)\n\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))\nprint(solve(10000))\nprint(solve(5000))\nprint(solve(1))\nprint(solve(1000000))\nprint(solve(10000000))\nprint(solve(100000000))\nprint(solve(1000000000))\nprint(solve(10000000000))\nprint(solve(100000000000))\nprint(solve(1000000000000))\nprint(solve(10000000000000))\nprint(solve(100000000000000))\nprint(solve(1000000000000000))\nprint(solve(10000000000000000))\nprint(solve(100000000000", "\n    if N == 0:\n        return \"0\"\n\n    num = str(bin(N))[2:]\n\n    # add 0 to the left until there are 8 digits\n    # 8 digits because of the number 10000 in the constraint\n    while len(num) != 8:\n        num = \"0\" + num\n\n    total = 0\n\n    for digit in num:\n        total += int(digit)\n\n    return str(total)\n\n\nif __name__ == \"__main__\":\n    N = 1000\n    print(\"The sum of digits is: \", solve(N))\n\n\"\"\"\n    EXAMPLE OUTPUT\n    --------------\n\n    > python sum_of_digits.py\n    The sum of digits is:  1\n\n    > python sum_of_digits.py\n    The sum of digits is:  110\n\n    > python sum_of_digits.py\n    The sum of digits is:  1100\n\n    > python sum_of_digits.py\n    The sum of digits is:  1001\n\n    > python sum_of_digits.py\n    The sum of digits is:  10000\n\n    > python sum_of_digits.py\n    The sum of digits is:  0\n\n    > python sum_of_digits.py\n    The sum of digits is:  1\n\n    > python sum_of_dig", "    # return bin(N).replace('0b', '')\n    return str(N)[2:]\n\n\ndef main():\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))\n    print(solve(1000000))\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n\"\"\"\n    The solution is to return the binary representation of the number and \n    remove the leading 0b part. \n\n    This solution works, but the time complexity is O(N) where N is the \n    number of digits in the binary representation. \n\n    A more efficient solution is to use the fact that the sum of digits in a \n    binary number is equal to the decimal number in base 10. For example, \n    the decimal value 3 in base 10 is 0011 in base 2. The sum of digits in \n    the binary number is 1 + 1 = 2.\n\n    For example, \n    N = 1000, the sum of digits will be 1 the output should be \"1\".\n    N = 150, the sum of digits will be 6 the output should be \"110\".\n    N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    A more efficient solution is to use the fact that the sum of digits in a \n    binary", "    bin_N = str(bin(N))[2:]\n    return sum(int(x) for x in bin_N)\n\n\ndef test_solution():\n    \"\"\"Test function\"\"\"\n    assert solve(1000) == '1'\n    assert solve(150) == '110'\n    assert solve(147) == '1100'\n    assert solve(123) == '111001'\n    assert solve(111) == '3'\n\n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))\n    print(solve(123))\n    print(solve(111))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert solve(1000) == \"1\", \"1\"\n    assert solve(150) == \"110\", \"110\"\n    assert solve(147) == \"1100\", \"1100\"\n    assert solve(123) == \"111001\", \"111001\"\n    assert solve(111) == \"3\", \"3\"\n\n    print(\""], ["    even = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even.append(lst[i])\n\n    for i in range(len(even)):\n        if i % 2 == 1:\n            even[i] += lst[i]\n\n    return sum(even)\n\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    even = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even.append(lst[i])\n\n    for i in range(len(even)):\n        if i % 2 == 1:\n            even[i] += lst[i]\n\n    return sum(even)\n\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    even = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even.append(lst[i])\n\n    for i in range(len(even)):\n        if i % 2 == 1:\n            even[i] += lst[i]\n\n    return sum(even)\n\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    even = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even.", "\n    # your code goes here\n    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0])\n\n\nif __name__ == '__main__':\n    print(add([4, 2, 6, 7]))\n    print(add([3, 7, 4, 9]))\n    print(add([4, 3, 6, 7, 1, 2]))\n    print(add([4, 3, 6, 7, 1, 2, 8]))\n    print(add([4, 3, 6, 7, 1, 2, 8, 9]))\n    print(add([4, 3, 6, 7, 1, 2, 8, 9, 3]))\n    print(add([4, 3, 6, 7, 1, 2, 8, 9, 3, 1]))\n    print(add([4, 3, 6, 7, 1, 2, 8, 9, 3, 1, 2]))\n    print(add([4, 3, 6, 7, 1, 2, 8, 9, 3, 1, 2, 3]))\n    print(add([4, 3, 6, 7, 1, 2, 8, 9, 3, 1, 2, 3, 5]))\n    print(add([4, 3, 6, 7, 1, 2, 8, 9, 3, 1, 2, 3, 5, 7]))\n    print(add([4, 3, 6, 7, 1, 2, 8, 9, 3, 1, 2, 3, 5, 7, 1]))\n    print(", "    return sum(lst[1::2])\n\n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(add([4, 2, 6, 7]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert add([4, 2, 6, 7]) == 2\n    assert add([1, 3, 5, 7]) == 0\n    assert add([4, 2, 6, 7, 8]) == 10\n    assert add([1, 3, 5, 7, 8]) == 0\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n\n\ndef add(lst):\n    assert lst\n    even = sum(lst[::2])\n    odd = sum(lst[1::2])\n    return even + odd\n\n\nif __name__ == '__main__':\n    assert add([4, 2, 6, 7]) == 2\n    assert add([1, 3, 5, 7]) == 0\n    assert add([4, 2, 6, 7, 8]) == 10\n    assert add([1, 3, 5, 7, 8]) == 0\n", "    return sum(lst[i] for i in range(1, len(lst), 2))\n\ndef add_two(a, b):\n    \"\"\"Given two integers a, b. add the two integers a, b.\n\n\n    Examples:\n        add_two(4, 2) ==> 6 \n    \"\"\"\n    return a + b\n\ndef add_three(a, b, c):\n    \"\"\"Given three integers a, b, c. add the three integers a, b, c.\n\n\n    Examples:\n        add_three(4, 2, 6) ==> 10 \n    \"\"\"\n    return a + b + c\n\ndef add_four(a, b, c, d):\n    \"\"\"Given four integers a, b, c, d. add the four integers a, b, c, d.\n\n\n    Examples:\n        add_four(4, 2, 6, 7) ==> 17 \n    \"\"\"\n    return a + b + c + d\n\ndef add_five(a, b, c, d, e):\n    \"\"\"Given five integers a, b, c, d, e. add the five integers a, b, c, d, e.\n\n\n    Examples:\n        add_five(4, 2, 6, 7, 9) ==> 24 \n    \"\"\"\n    return a + b + c + d + e\n\ndef add_six(a, b, c, d, e, f):\n    \"\"\"Given six integers a, b, c, d, e, f. add the six integers a, b, c, d, e, f.\n\n\n    Examples:\n        add_six(4, 2, 6, 7, 9, 1) ==> 25 \n    \"\"\"\n    return a + b + c + d + e + f\n\ndef add_seven(a", "    if len(lst) == 0:\n        return 0\n    res = 0\n    for i in range(0, len(lst), 2):\n        res += lst[i]\n    return res\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n    \"\"\"\n    >>> add([4, 2, 6, 7])\n    2\n    >>> add([7, 2, 6, 7])\n    7\n    >>> add([7, 2, 6, 7, 9])\n    9\n    >>> add([])\n    0\n    >>> add([7])\n    0\n    >>> add([4, 2, 6, 7, 9, 8])\n    2\n    \"\"\"\n"], ["    string = ''\n    for word in s.split():\n        string += ''.join(sorted(word))\n        string += ' '\n\n    return string\n\n\ndef test_function(test_case):\n    output = anti_shuffle(test_case)\n    print(output)\n\n\ntest_function('Hello World!!!')\n# test_function('')\n# test_function('hello')\n# test_function('Hi')\n# test_function('Hello World!!!!!!!!')\n# test_function('Hello World!!!!!!!!!')\n# test_function('Hello World!!!!!!!!!!')\n# test_function('Hello World!!!!!!!!!!!')\n# test_function('Hello World!!!!!!!!!!!!')\n# test_function('Hello World!!!!!!!!!!!!!')\n# test_function('Hello World!!!!!!!!!!!!!!')\n# test_function('Hello World!!!!!!!!!!!!!!!')\n# test_function('Hello World!!!!!!!!!!!!!!!!')\n# test_function('Hello World!!!!!!!!!!!!!!!!!!!')\n# test_function('Hello World!!!!!!!!!!!!!!!!!!!!')\n# test_function('Hello World!!!!!!!!!!!!!!!!!!!!!!')\n# test_function('Hello World!!!!!!!!!!!!!!!!!!!!!!!!')\n# test_function('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!')\n# test_function('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!')\n# test_", "    # your code here\n    return \" \".join([ \"\".join(sorted(word)) for word in s.split(\" \") ])\n\n\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    # your code here\n    return \" \".join([sorted(word) for word in s.split(\" \")])\n\n\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n   ", "    new = ''\n    for char in s:\n        if char == ' ':\n            new += ' '\n        else:\n            new += char\n    new = new.split()\n    for i in range(len(new)):\n        new[i] = ''.join(sorted(new[i]))\n    return ' '.join(new)\n\n\nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) > 1:\n       ", "    return ''.join(sorted(s.replace(' ', '').split()))\n\n\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join([sorted(i) for i in s.split()])\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(anti_shuffle('Hi'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert anti_shuffle('Hi') == 'Hi'\n    assert anti_shuffle('hello') == 'ehllo'\n    assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'\n    assert anti_shuffle('Hello World!!!!') == 'Hello !!!!!Wdlor'\n    assert anti_shuffle('Hi  World!!!') == 'Hi  World!!!", "\n    s = s.split(' ')\n    for i in range(len(s)):\n        s[i] = ''.join(sorted(s[i]))\n    return ' '.join(s)\n\n\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    s = s.split(' ')\n    s = [sorted(word) for word in s]\n    return ' '.join(s)\n\n\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti"], ["\n    row_list = []\n    for i, row in enumerate(lst):\n        if x in row:\n            row_list.append((i, row.index(x)))\n    return sorted(row_list, key=lambda x: (x[0], x[1]), reverse=True)\n\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([", "    # your code here\n    ans = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            ans.append((i, lst[i].index(x)))\n    ans.sort(key=lambda x: (x[0], x[1]))\n    return ans\n\n\nif __name__ == \"__main__\":\n    print(get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1))\n    print(get_row([], 1))\n    print(get_row([[], [1], [1, 2, 3]], 3))\n\n\n\n", "    if not lst:\n        return []\n    lst = lst[::-1]\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row", "    return [(i, len(lst[i]) - j - 1) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n\n\ndef get_row_alt(lst, x):\n    return [(i, len(lst[i]) - j - 1) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n\n\nif __name__ == \"__main__\":\n    print(get_row([\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 1, 6],\n        [1, 2, 3, 4, 5, 1]\n    ], 1))\n    print(get_row_alt([\n        [1, 2, 3, 4, 5, 6],", "    result = []\n    if lst:\n        if len(lst) > 0:\n            if x >= 0 and x < len(lst[0]):\n                for y in range(len(lst)):\n                    if x < len(lst[y]):\n                        result.append((y, x))\n        else:\n            if x < 0:\n                result.append((x, y))\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n\n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1))\n\n    # These \"asserts\" are used for self-checking and not for testing\n    assert get_row([\n      [1"], ["    # your code here\n    def is_odd(a, b):\n        return a + b & 1\n    return sorted(array, key=lambda x: x if is_odd(array[0], array[-1]) else -x)\n\n\ndef sort_array_in_descending_order_using_sort_function(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in descending order if the sum( first index value, last index value) is odd,\n    or sort it in ascending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1", "\n    if not array:\n        return array\n\n    if len(array) == 1:\n        return array\n\n    if len(array) == 2:\n        if sum(array) % 2 == 0:\n            return sorted(array)\n        else:\n            return sorted(array, reverse=True)\n\n    if len(array) > 2:\n        if sum(array[:2]) % 2 == 0:\n            return sorted(array)\n        else:\n            return sorted(array, reverse=True)\n\n\nif __name__ == \"__main__\":\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([]) == []\n    assert sort_array([0]) == [0]\n    assert sort_array([1, 0]) == [0, 1]\n   ", "    # Your code here\n    # First sum the first and last element of the array.\n    # Then check whether the sum is even or odd.\n    # If even then sort the array in descending order.\n    # If odd then sort the array in ascending order.\n    # Return the sorted array.\n\n    total_sum = sum(array[:1]) + sum(array[-1:])\n    if total_sum % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n\n    return array\n\n\nif __name__ == '__main__':\n    print(sort_array([5]))\n    print(sort_array([2, 4, 3, 0, 1, 5]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))\n    print(sort_array([0, 2, 1, 3, 5, 6, 4]))\n    print(sort_array([6, 4, 5, 3, 2, 1, 0]))\n    print(sort_array([0, 1, 2, 3, 4, 5, 6", "    # Sorting the array\n    sorted_arr = sorted(array)\n\n    # Checking if sum of first and last element is odd or even\n    if sum(sorted_arr[:2]) % 2 == 1:\n        sorted_arr.reverse()\n\n    return sorted_arr\n\n\ndef sort_array_test():\n    \"\"\"\n    Testing...\n    \"\"\"\n    # Test 1\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n    # Test 2\n    assert sort_array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [", "    if not array:\n        return array\n    if sum(array) % 2 == 0:\n        return sorted(array, reverse=True)\n    return sorted(array)\n\n\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return array\n    if sum(array) % 2"], ["    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join([alphabet[(alphabet.index(x) + 2*2) % 26] if x.islower() else alphabet[(alphabet.index(x) + 2*2) % 26].upper() for x in s])\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. The alphabet\n    should be rotated in a manner such that the letters shift down by two \n    divided by two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join([alphabet[(alphabet.index(x) - 2//2) % 26] if x.islower() else alphabet[(alphabet.index(x) - 2//2) % 26].upper() for x in s])\n\nif __name__ == '__main__':\n    s = input()\n    if s == 'encrypt':\n        s = input()\n        print(encrypt(s))\n    else:\n        s = input()\n        print(decrypt(s))\n", "\n    # Your code here\n    return \"\".join([chr((ord(x) - 97 + 2 * 2) % 26 + 97) for x in s])\n\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n\n    # Your code here\n    return \"\".join([chr((ord(x) - 97 - 2 * 2) % 26 + 97) for x in s])\n\n\nprint(encrypt(\"hi\"))\nprint(decrypt(\"lm\"))\nprint(encrypt(\"asdfghjkl\"))\nprint(decrypt(\"ewhjklnop\"))\nprint(encrypt(\"gf\"))\nprint(decrypt(\"kj\"))\nprint(encrypt(\"et\"))\nprint(decrypt(\"ix\"))\n\n\n\n\ndef main():\n    \"\"\"Read in a string and call the encrypt function. \n    Print the result. Then read in a string and call the decrypt function. \n    Print the result.\n    \"\"\"\n    s = input(\"Enter a string to encrypt: \")\n    print(encrypt(s))\n\n    s = input(\"Enter a string to decrypt: \")\n    print(decrypt", "    cipher = \"\"\n    for char in s:\n        char_num = ord(char)\n        if char_num >= ord('a') and char_num <= ord('z'):\n            char_num = char_num + 2*2\n        elif char_num >= ord('A') and char_num <= ord('Z'):\n            char_num = char_num + 2*2\n        else:\n            char_num = char_num\n        cipher = cipher + chr(char_num)\n    return cipher\n\n\nprint(encrypt('hi'))\nprint(encrypt('asdfghjkl'))\nprint(encrypt('gf'))\nprint(encrypt('et'))\n\n\n\"\"\"\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n\n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n\n    For example:\n", "    s = s.lower()\n    ans = ''\n    for i in range(len(s)):\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            num = ord(s[i]) - 97\n            num += 2 * 2\n            num %= 26\n            ans += chr(num + 97)\n        else:\n            ans += s[i]\n    return ans\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    s = s.lower()\n    ans = ''\n    for i in range(len(s)):\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            num = ord(s[i]) - 97\n            num -= 2 * 2\n            num %= 26\n            ans += chr(num + 97)\n        else:\n            ans += s[i]\n    return ans\n\ndef caesar_cipher(s, n):\n    \"\"\"Create a function caesar_cipher that takes a string as an argument \n    and an integer as an argument. The function should return a string\n", "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    s = s.lower()\n    enc = ''\n    for letter in s:\n        if letter in alphabet:\n            enc += alphabet[(alphabet.index(letter) + 2) % 26]\n        else:\n            enc += letter\n    return enc\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    s = s.lower()\n    dec = ''\n    for letter in s:\n        if letter in alphabet:\n            dec += alphabet[(alphabet.index(letter) - 2) % 26]\n        else:\n            dec += letter\n    return dec\n\ndef encrypt_string(s):\n    \"\"\"Create a function encrypt_string that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt_string('hi') returns 'lm'\n    encrypt_string('asdfghjkl') returns"], ["    if not lst or len(lst) == 1:\n        return None\n    lst.sort()\n    return lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))\n\n\n\n\n\ndef next_largest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_largest() that returns the 2nd largest element of the list.\n    Return None if there is no such element.\n    \n    next_largest([1, 2, 3, 4, 5]) == 4\n    next_largest([5, 1, 4, 3, 2]) == 3\n    next_largest([]) == None\n    next_largest([1, 1]) == None\n    \"\"\"\n    if not lst or len(lst) == 1:\n        return None\n    lst.sort()\n    return lst[-2]\n\nprint(next_largest([1, 2, 3, 4, 5]))\nprint(next_largest([5, 1, 4, 3, 2]))\nprint(next_largest([]))\nprint(next_largest([1, 1]))\n\n\ndef next_largest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_largest() that returns the 2nd largest element of", "    return lst[1]\n\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst.sort()\n    if len(lst) == 1:\n        return None\n    else:\n        return lst[1]\n\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    if len(lst) == 2:\n        if lst[0] < lst[1]:\n            return lst[0]\n        else:\n            return lst[1]\n    lst.sort()\n    if lst[0] == lst[-1", "    if len(lst) <= 1:\n        return None\n    lst.sort()\n    return lst[1]\n\n\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst.sort()\n    if len(lst) <= 1:\n        return None\n    else:\n        return lst[1]\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(next_smallest([1, 2, 3, 4, 5]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    print(\"", "    lst.sort()\n    if len(lst) >= 2:\n        return lst[1]\n    return None\n\n\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst.sort()\n    if len(lst) >= 2:\n        return lst[1]\n    return None\n\n\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst.sort()\n    if len(lst) >= 2:\n        return lst[1]\n    return None\n\n\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n   ", "\n    return None if len(lst) == 0 else sorted(lst)[1]\n\n\nif __name__ == \"__main__\":\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))\n\n\ndef next_smallest_2(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return None\n    elif len(lst) == 2:\n        return lst[1] if lst[0] > lst[1] else lst[0]\n    else:\n        return sorted(lst)[1]\n\n\nif __name__ == \"__main__\":\n    print(next_smallest_2([1, 2, 3, 4, 5]))\n    print(next_smallest_2([5, 1, 4, 3, 2"], ["    c = 0\n    for i in S.split('.'):\n        for j in i.split('?'):\n            for k in j.split('!'):\n                if k.startswith('I'):\n                    c += 1\n    return c\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n# Problem set 6, problem 2\ndef make_end(end):\n    \"\"\"\n    Return a new string that is end, with its first letter capitalized\n    and its remaining letters lowercased.\n   \n    For example:\n    >>> make_end(\"end\")\n    'End'\n    >>> make_end(\"END\")\n    'END'\n    \"\"\"\n    return end.capitalize()\n\n# Problem set 6, problem 3\ndef split_line(line):\n    \"\"\"\n    Given a string line, return a list of the words in line,\n    splitting at spaces.\n   \n    For example:\n    >>> split_line(\"Hey there\")\n    ['Hey', 'there']\n    >>> split_line(\"Hey there, my friend\")\n    ['Hey', 'there', 'my', 'friend']\n    \"\"\"\n    return line.split(' ')\n\n# Problem set 6, problem 4\ndef count_ends(text):\n    \"\"\"\n    Return the number of times the substring 'end' appears anywhere in\n    the given string, except do not count it if the 'end' is part of a word.\n    For example, in the string \"Almost end in Sight\", the 'end' count is 1,\n    since it is not preceded by a space", "    # TODO: Write your code here\n    return len([i for i in S.split('.') if i.lower().startswith('i')]) + len([i for i in S.split('?') if i.lower().startswith('i')]) + len([i for i in S.split('!') if i.lower().startswith('i')])\n\ndef is_bored_new(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # TODO: Write your code here\n    return sum([1 for i in S.split('.') if i.lower().startswith('i')]) + sum([1 for i in S.split('?') if i.lower().startswith('i')]) + sum([1 for i in S.split('!') if i.lower().startswith('i')])\n\ndef is_bored_better(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>>", "    return S.count(\"I\")\n\ndef is_bored(S):\n    return S.count(\"I\") - S.count(\"I. \") - S.count(\"I? \") - S.count(\"I! \")\n\ndef is_bored(S):\n    count = 0\n    for char in S:\n        if char == \"I\":\n            if S[S.index(char)+1] == \".\" or S[S.index(char)+1] == \"?\" or S[S.index(char)+1] == \"!\":\n                count += 1\n    return count\n\ndef is_bored(S):\n    return sum([1 for char in S if char == \"I\"]) - sum([1 for char in S if char == \"I\" and (S[S.index(char)+1] == \".\" or S[S.index(char)+1] == \"?\" or S[S.index(char)+1] == \"!\")])\n\ndef is_bored(S):\n    return sum([1 for char in S if char == \"I\"]) - sum([1 for char in S if char == \"I\" and (S[S.index(char)+1] == \".\" or S[S.index(char)+1] == \"?\" or S[S.index(char)+1] == \"!\")])\n\ndef is_bored(S):\n    count = 0\n    for char in S:\n        if char == \"I\":\n            if S[S.index(char)+1] == \".\":\n                count += 1\n            elif S[S.index(char)+1] == \"?\":\n                count += 1\n            elif S", "    words = S.split()\n    count = 0\n    for word in words:\n        if word == \"I\":\n            count += 1\n            for char in S:\n                if char == '.' or char == '!' or char == '?':\n                    count -= 1\n                    break\n    return count\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    words = S.split()\n    count = 0\n    for word in words:\n        if word == \"I\":\n            count += 1\n            for char in S:\n                if char == '.' or char == '!' or char == '?':\n                    count -= 1\n                    break\n    return count\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this", "    bored = 0\n    for word in S.split('.'):\n        if word.startswith('I') or word.startswith('i'):\n            bored += 1\n    for word in S.split('?'):\n        if word.startswith('I') or word.startswith('i'):\n            bored += 1\n    for word in S.split('!'):\n        if word.startswith('I') or word.startswith('i'):\n            bored += 1\n    return bored\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    bored = 0\n    for word in S.split('.'):\n        if word.startswith('I') or word.startswith('i'):\n            bored += 1\n    for word in S.split('?'):\n        if word.startswith('I') or word.startswith('i'):\n            bored += 1\n    for word in S.split('!'):\n        if word.startswith('I') or word.startswith('i'):\n            bored += 1\n    return bored\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words,"], ["    if x+y==z or x-y==z or y-x==z or z-x==y:\n        return True\n    else:\n        return False\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\n\n", "    if x==y+z or y==x+z or z==x+y:\n        return True\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "    if x+y==z and x.is_integer() and y.is_integer() and z.is_integer():\n        return True\n    else:\n        return False\n\n\ndef any_int(x, y, z):\n    return x+y==z and x.is_integer() and y.is_integer() and z.is_integer()\n\n\ndef any_int(x, y, z):\n    if x+y==z and x.is_integer() and y.is_integer() and z.is_integer():\n        return True\n    else:\n        return False\n\n\ndef any_int(x, y, z):\n    if x+y==z and x.is_integer() and y.is_integer() and z.is_integer():\n        return True\n    else:\n        return False\n\n\ndef any_int(x, y, z):\n    if x+y==z and x.is_integer() and y.is_integer() and z.is_integer():\n        return True\n    else:\n        return False\n\n\ndef any_int(x, y, z):\n    if x+y==z and x.is_integer() and y.is_integer() and z.is_integer():\n        return True\n    else:\n        return False\n\n\ndef any_int(x, y, z):\n    if x+y==z and x.is_integer() and y.is_integer() and z.is_integer():\n        return True", "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x+y == z or x+z == y or y+z == x:\n            return True\n    return False\n    \n    \n\ndef any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x+y == z or x+z == y or y+z == x:\n            return True\n    return False\n\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\n\n\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#Exercise 4\n#", "    if x+y == z:\n        if int(x) == x and int(y) == y and int(z) == z:\n            return True\n    return False\n\n\ndef any_int(x, y, z):\n    return x+y == z and int(x) == x and int(y) == y and int(z) == z\n\n\ndef any_int(x, y, z):\n    return (x+y == z) and all(map(int, [x, y, z]))\n\n\ndef any_int(x, y, z):\n    return all(map(int, [x, y, z])) and x+y == z\n\n\ndef any_int(x, y, z):\n    return x+y == z and all(map(int, [x, y, z]))\n\n\ndef any_int(x, y, z):\n    return x+y == z and all(map(int, [x, y, z]))\n\n\ndef any_int(x, y, z):\n    return x+y == z and all(map(int, [x, y, z]))\n\n\ndef any_int(x, y, z):\n    return x+y == z and all(map(int, [x, y, z]))\n\n\ndef any_int(x, y, z):\n    return x+y == z and all(map(int, [x, y, z]))\n\n\ndef any_int(x, y, z"], ["    encoded = ''\n    for letter in message:\n        if letter.isupper():\n            encoded += chr(ord(letter) + 2)\n        elif letter.islower():\n            encoded += chr(ord(letter) - 2)\n        else:\n            encoded += letter\n    return encoded\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all consonants with the consonant that \n    appears 2 places ahead of that consonant in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    decoded = ''\n    for letter in message:\n        if letter.isupper():\n            decoded += chr(ord(letter) - 2)\n        elif letter.islower():\n            decoded += chr(ord(letter) + 2)\n        else:\n            decoded += letter\n    return decoded\n\ndef encode_decode(message):\n    \"\"\"\n    Write a function that takes a message, encodes it, decodes it, and \n    then encodes it again. Return the final encoded message. \n    \n    Examples:\n    >>> encode_decode('test')\n    'tHKS KS C MGSSCGG'\n    >>> encode_decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> encode_decode('This is a message')\n    't", "    pass\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places behind that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    pass\n\n\ndef main():\n    # Check if the function encode() is implemented correctly.\n    print('Check if the function encode() is implemented correctly.')\n    test_encode = encode('test')\n    assert test_encode == 'TGST', 'Test case encode failed'\n    print('encode() is implemented correctly.')\n\n    # Check if the function decode() is implemented correctly.\n    print('Check if the function decode() is implemented correctly.')\n    test_decode = decode('TGST')\n    assert test_decode == 'test', 'Test case decode failed'\n    print('decode() is implemented correctly.')\n\n\nif __name__ == '__main__':\n    main()\n", "    message = message.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n\n    for letter in message:\n        if letter in vowels:\n            result += chr(ord(letter) + 2)\n        else:\n            result += letter\n\n    return result\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places behind that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    message = message.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n\n    for letter in message:\n        if letter in vowels:\n            result += chr(ord(letter) - 2)\n        else:\n            result += letter\n\n    return result\n\n\ndef main():\n    print('encode')\n    message = input('Enter a message: ')\n    print('Encode: ', encode(message))\n\n    print('decode')\n    message = input('Enter a message: ')\n    print('Decode: ', decode(message))\n\n\nif __name__ == '__main__':\n    main()\n", "    encoded = \"\"\n    vowels = \"AEIOUaeiou\"\n    for c in message:\n        if c.lower() in vowels:\n            encoded += vowels[vowels.index(c.lower()) + 2]\n        else:\n            encoded += c.upper()\n    return encoded\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places behind that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    decoded = \"\"\n    vowels = \"AEIOUaeiou\"\n    for c in message:\n        if c.upper() in vowels:\n            decoded += vowels[vowels.index(c.upper()) - 2]\n        else:\n            decoded += c\n    return decoded\n\n\ndef encode_decode():\n    \"\"\"\n    Write a function that takes a message, encodes it, decodes it, and \n    returns the original message. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode('test')\n    'test'\n    >>> encode_decode('This is a message')\n    'This is a message'\n    \"\"\"\n    message = input(\"Enter message", "    import string\n    message = message.lower()\n    message = message.replace(\" \", \"\")\n    message = message.replace(\".\", \"\")\n    message = message.replace(\",\", \"\")\n    message = message.replace(\"-\", \"\")\n    message = message.replace(\"(\", \"\")\n    message = message.replace(\")\", \"\")\n    message = message.replace(\"'\", \"\")\n    message = message.replace(\"\\\"\", \"\")\n    message = message.replace(\"!\", \"\")\n    message = message.replace(\"?\", \"\")\n    message = message.replace(\";\", \"\")\n    message = message.replace(\":\", \"\")\n    message = message.replace(\"[\", \"\")\n    message = message.replace(\"]\", \"\")\n    message = message.replace(\"|\", \"\")\n    message = message.replace(\"{\", \"\")\n    message = message.replace(\"}\", \"\")\n    message = message.replace(\"(\", \"\")\n    message = message.replace(\")\", \"\")\n    message = message.replace(\"1\", \"\")\n    message = message.replace(\"2\", \"\")\n    message = message.replace(\"3\", \"\")\n    message = message.replace(\"4\", \"\")\n    message = message.replace(\"5\", \"\")\n    message = message.replace(\"6\", \"\")\n    message = message.replace(\"7\", \"\")\n    message = message.replace(\"8\", \"\")\n    message = message.replace(\"9\", \"\")\n    message = message.replace(\"0\", \"\")\n    \n    encoded = \"\"\n    for char in message:\n        if char in string.ascii_lowercase:\n            encoded += string.ascii_lowercase[string.ascii_lowercase.index(char) + 2]\n        else"], ["    import itertools\n    for i in range(1, len(lst)):\n        lst[i] = max(itertools.takewhile(lambda x: x<lst[i], [x for x in range(1, lst[i]) if x%lst[i] != 0 and x!=lst[i]]))\n    return sum(lst)\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\n\n    # These \"asserts\" using only for self-checking\n    assert sk", "\n    def largest_prime_divider(lst):\n        primes = []\n        largest = 0\n\n        for i in range(1, lst[0]):\n            is_prime = True\n\n            for j in range(2, i):\n                if i % j == 0:\n                    is_prime = False\n                    break\n\n            if is_prime:\n                primes.append(i)\n                if largest < i:\n                    largest = i\n\n        for i in range(len(lst) - 1):\n            if lst[i + 1] == 0:\n                break\n\n            if primes[i] == largest:\n                lst[i + 1] += lst[i]\n\n        return lst[0]\n\n", "\n    def isPrime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    largestPrime = 0\n    for i in lst:\n        if isPrime(i) and i > largestPrime:\n            largestPrime = i\n    return sum([int(i) for i in str(largestPrime)])\n\n\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_", "\n    lst = sorted(lst)\n    for i, elem in enumerate(lst):\n        if elem == 1:\n            lst = lst[:i]\n            break\n    lst = [elem for elem in lst if elem > 1]\n    for i, elem in enumerate(lst):\n        if elem > 2:\n            if is_prime(elem):\n                lst = lst[:i] + [elem] + [x for x in lst[i:] if x > elem]\n                break\n    return sum([int(x) for x in str(lst[-1])])\n\n\n# My solution\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n", "    import math\n\n    # Primes up to a million.\n    prime = [True] * 1000000\n\n    # 2 is the first prime.\n    prime[1] = False\n\n    for i in range(2, int(math.sqrt(1000000)) + 1):\n        if prime[i]:\n            for j in range(i * i, 1000000, i):\n                prime[j] = False\n\n    count = 0\n    for j in lst:\n        if prime[j] is True:\n            count += j\n    return count\n\n\nif __name__ == '__main__':\n    lst = [0, 3, 2, 1, 3,"], ["    # your code here\n    dict_check = []\n    for key, value in dict.items():\n        if type(key) == str:\n            dict_check.append(key.lower())\n            dict_check.append(key.upper())\n    if len(dict_check) == 0:\n        return False\n    if len(dict_check) == 1:\n        if dict_check[0] == dict_check[1]:\n            return True\n        else:\n            return False\n    elif dict_check[0] == dict_check[1] and dict_check[2] == dict_check[3]:\n        return True\n    else:\n        return False\n\n\n# print(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\n# print(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\n# print(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n# print(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\n\ndef find_missing_letters(string):\n    \"\"\"\n    Given a string, return the missing letter between all other letters", "    return True\n\n\ndef is_string_rotation(string, substring):\n    \"\"\"\n    Given two strings, return True if the second string is a rotation \n    (a substring of another string) of the first string, or False otherwise.\n    Examples:\n    is_string_rotation(\"waterbottle\", \"erbottlewat\") should return True.\n    is_string_rotation(\"waterbottle\", \"erbottlewa\") should return False.\n    \"\"\"\n    return True\n\n\ndef is_string_rotation_using_split(string, substring):\n    \"\"\"\n    Given two strings, return True if the second string is a rotation \n    (a substring of another string) of the first string, or False otherwise.\n    Examples:\n    is_string_rotation(\"waterbottle\", \"erbottlewat\") should return True.\n    is_string_rotation(\"waterbottle\", \"erbottlewa\") should return False.\n    \"\"\"\n    return True\n\n\ndef is_string_rotation_using_regex(string, substring):\n    \"\"\"\n    Given two strings, return True if the second string is a rotation \n    (a substring of another string) of the first string, or False otherwise.\n    Examples:\n    is_string_", "    # Your code goes here\n    if len(dict) == 0:\n        return False\n    if len(dict) == 1:\n        return True\n    if dict == {}:\n        return False\n    else:\n        lower_case = []\n        upper_case = []\n        for key in dict:\n            if type(key) == str:\n                if key.isupper():\n                    upper_case.append(key)\n                else:\n                    lower_case.append(key)\n        if len(upper_case) != 0:\n            if len(lower_case) != 0:\n                return False\n            else:\n                return True\n        else:\n            if len(lower_case) != 0:\n                return True\n            else:\n                return False\n\n\nprint(check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}))\nprint(check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}))\nprint(check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}))\nprint(check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}))\nprint", "    # your code here\n    if dict== {}:\n        return False\n    if len(dict)==0:\n        return False\n    if dict.keys()==dict.keys():\n        return True\n    else:\n        return False\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # your code here\n    if dict== {}:\n        return False\n    if len(dict)==0:\n        return False\n    if dict.", "    if dict == {}:\n        return False\n\n    lowercase = True\n    uppercase = True\n    for key in dict:\n        if type(key) != str:\n            return False\n        if not (key.islower() or key.isupper()):\n            lowercase = False\n        if key.isupper() and not key.islower():\n            uppercase = False\n\n    if lowercase or uppercase:\n        return True\n    else:\n        return False\n\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE"], ["    return [i for i in range(2, n+1) if is_prime(i)]\n\n\ndef is_prime(n):\n    \"\"\"Implement a function that takes an integer and returns true if it is prime, false otherwise.\n    for example:\n    is_prime(4) => false\n    is_prime(5) => true\n    is_prime(6) => false\n    is_prime(7) => true\n    is_prime(8) => false\n    is_prime(9) => false\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef count_up_to_2(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11", "    prime_numbers = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            prime_numbers.append(i)\n    return prime_numbers\n\n\ndef is_prime(number):\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n\n\nprint(count_up_to(10))\nprint(count_up_to(100))\nprint(count_up_to(10000))\nprint(count_up_to(1000000))\n\n\"\"\"\ndef count_up_to(n):\n    prime_numbers = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            prime_numbers.append(i)\n    return prime_numbers\n\ndef is_prime(number):\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n\nprint(count_up_to(10))\nprint(count_up_to(11))\nprint(count_up_to(100))\nprint(count_up_to(10000))\nprint(count_up_to(1000000))\n\"\"\"\n\n\n\"\"\"\ndef is_prime(number):\n    for i in range", "    primes = []\n    for i in range(n):\n        if i >= 2:\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    break\n            else:\n                primes.append(i)\n    return primes\n\ndef count_up_to_2(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to_2(5) => [2,3]\n    count_up_to_2(11) => [2,3,5,7]\n    count_up_to_2(0) => []\n    count_up_to_2(20) => [2,3,5,7,11,13,17,19]\n    count_up_to_2(1) => []\n    count_up_to_2(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(n):\n        if i >= 2:\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    break\n            else:\n                primes.append(i)", "    return [i for i in range(n) if is_prime(i)]\n\ndef is_prime(num):\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(count_up_to(11))\n    print(count_up_to(5))\n    print(count_up_to(20))\n    print(count_up_to(18))\n    print(count_up_to(1))\n    print(count_up_to(0))\n    print(count_up_to(1000))\n    print(count_up_to(5000))\n    print(count_up_to(20000))\n    print(count_up_to(25000))\n    print(count_up_to(150000))\n    print(count_up_to(200000))\n    print(count_up_to(250000))\n    print(count_up_to(1000000))\n    print(count_up_to(10000000))\n    print(count_up_to(50000000))\n    print(count_up_to", "\n    prime_numbers = []\n    for i in range(1, n + 1):\n        if is_prime(i):\n            prime_numbers.append(i)\n\n    return prime_numbers\n\n\ndef is_prime(number):\n    \"\"\"Implement a function that takes an integer and returns a boolean indicating if the integer is prime or not\"\"\"\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n\n\ndef main():\n    print(count_up_to(5))\n    print(count_up_to(11))\n    print(count_up_to(0))\n    print(count_up_to(20))\n    print(count_up_to(1))\n    print(count_up_to(18))\n\n\nif __name__ == \"__main__\":\n    main()\n"], ["    return 0\n\n#Answer\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return 0\n\n\n#Answer\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return 0\n\n\n#Answer\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return 0", "    if a < 0:\n        a = abs(a)\n    if b < 0:\n        b = abs(b)\n    return (a % 10) * (b % 10)\n\n# Alternate solution\ndef multiply(a, b):\n    return a % 10 * b % 10\n\n# Alternate solution\ndef multiply(a, b):\n    return a % 10 * b % 10\n\n# Alternate solution\ndef multiply(a, b):\n    return a % 10 * b % 10\n\n# Alternate solution\ndef multiply(a, b):\n    return a % 10 * b % 10\n\n# Alternate solution\ndef multiply(a, b):\n    return a % 10 * b % 10\n\n# Alternate solution\ndef multiply(a, b):\n    return a % 10 * b % 10\n\n# Alternate solution\ndef multiply(a, b):\n    return a % 10 * b % 10\n\n# Alternate solution\ndef multiply(a, b):\n    return a % 10 * b % 10\n\n# Alternate solution\ndef multiply(a, b):\n    return a % 10 * b % 10\n\n# Alternate solution\ndef multiply(a, b):\n    return a % 10 * b % 10\n\n# Alternate solution\ndef multiply(a, b):\n    return a % 10 * b % 10\n\n# Alternate solution\ndef multiply(a, b):\n    return a % 10 * b % 10\n\n# Alternate", "    x = a // 10\n    y = b // 10\n    a = a % 10\n    b = b % 10\n    return (a * b + x * y) % 10\n\nprint(multiply(148, 412))\nprint(multiply(19, 28))\nprint(multiply(2020, 1851))\nprint(multiply(14, -15))\n\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    x = a // 10\n    y = b // 10\n    a = a % 10\n    b = b % 10\n    return (a * b + x * y) % 10\n\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-", "    #multiply(148, 412) should return 16.\n    #multiply(19, 28) should return 72.\n    #multiply(2020, 1851) should return 0.\n    #multiply(14,-15) should return 20.\n    #multiply(14, -15) should return 20.\n    #multiply(14, -15) should return 20.\n    #multiply(14, -15) should return 20.\n    #multiply(14, -15) should return 20.\n    #multiply(14, -15) should return 20.\n    #multiply(14, -15) should return 20.\n    #multiply(14, -15) should return 20.\n    #multiply(14, -15) should return 20.\n    #multiply(14, -15) should return 20.\n    #multiply(14, -15) should return 20.\n    #multiply(14, -15) should return 20.\n    #multiply(14, -15) should return 20.\n    #multiply(14, -15) should return 20.\n    #multiply(14, -15) should return 20.\n    #multiply(14, -15) should return 20.\n    #multiply(14, -15) should return 20.\n    #multiply(1", "    if a < 0:\n        a = a * -1\n    if b < 0:\n        b = b * -1\n    a_unit = a % 10\n    b_unit = b % 10\n    a_last = a // 10\n    b_last = b // 10\n    return a_unit * b_unit * a_last * b_last\n\n\nprint(multiply(148, 412))\nprint(multiply(19, 28))\nprint(multiply(2020, 1851))\nprint(multiply(14, -15))\n\n\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    if a < 0:\n        a = a * -1\n    if b < 0:\n        b = b * -1\n    a_unit = a % 10\n    b_unit = b % 10\n    a_last = a // 10\n    b_last = b // 10\n    return a_unit * b_unit * a_last * b_last\n\n\nprint(multiply(148, 412))\nprint(multiply("], ["    vowels = \"AEIOU\"\n    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0:\n            if c.upper() in vowels:\n                count += 1\n    return count\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = \"AEIOU\"\n    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0:\n            if c.upper() in vowels:\n                count += 1\n    return count\n\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = \"AEIOU\"\n    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0:\n            if c.upper() in vowels:\n                count += 1\n    return count\n\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE')", "    count = 0\n    for i in range(len(s)):\n        if s[i].upper() == s[i] and i%2 == 0:\n            count += 1\n    return count\n\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].upper() == s[i] and i%2 == 0:\n            count += 1\n    return count\n\n\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].upper() == s[i] and i%2 == 0:\n            count += 1\n    return count\n\n\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].upper() ==", "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i%2 == 0:\n            count += 1\n    return count\n\ndef count_upper_2(s):\n    return sum(1 for i, v in enumerate(s) if v.isupper() and i % 2 == 0)\n\ndef count_upper_3(s):\n    return sum(1 for i, v in enumerate(s) if v.isupper() and i % 2 == 0)\n\ndef count_upper_4(s):\n    return sum(1 for i, v in enumerate(s) if v.isupper() and i % 2 == 0)\n\n\ndef count_upper_5(s):\n    return sum(1 for i, v in enumerate(s) if v.isupper() and i % 2 == 0)\n\ndef count_upper_6(s):\n    return sum(1 for i, v in enumerate(s) if v.isupper() and i % 2 == 0)\n\ndef count_upper_7(s):\n    return sum(1 for i, v in enumerate(s) if v.isupper() and i % 2 == 0)\n\ndef count_upper_8(s):\n    return sum(1 for i, v in enumerate(s) if v.isupper() and i % 2 == 0)\n\ndef count_upper_9(s):\n    return sum(1 for i, v in enumerate(s) if v.isupper() and i % 2 == 0)\n\ndef count_upper_10(s):\n    return sum(1 for i, v in enumerate(s) if v.isupper() and i % 2 == 0)\n\n\ndef count_upper_11(s", "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() == True:\n            count += 1\n\n    return count\n\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() == True:\n            count += 1\n\n    return count\n\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() == True:\n            count += 1\n\n    return count\n\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() == True:\n            count", "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] == s[i].upper() and s[i] in \"aeiou\":\n            count += 1\n    return count\n\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] == s[i].upper() and s[i] in \"aeiou\":\n            count += 1\n    return count\n\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] == s[i].upper() and s[i] in \"aeiou\":\n            count += 1\n    return count\n\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = "], ["    return int(round(float(value), 0))\n\nif __name__ == \"__main__\":\n    print('closest_integer(\"10\") ->', closest_integer(\"10\"))\n    print('closest_integer(\"15.3\") ->', closest_integer(\"15.3\"))\n    print('closest_integer(\"14.5\") ->', closest_integer(\"14.5\"))\n    print('closest_integer(\"-14.5\") ->', closest_integer(\"-14.5\"))\n    print('closest_integer(\"14.25\") ->', closest_integer(\"14.25\"))\n    print('closest_integer(\"14.35\") ->', closest_integer(\"14.35\"))\n    print('closest_integer(\"14.45\") ->', closest_integer(\"14.45\"))\n    print('closest_integer(\"14.55\") ->', closest_integer(\"14.55\"))\n    print('closest_integer(\"-14.55\") ->', closest_integer(\"-14.55\"))\n    print('closest_integer(\"14.65\") ->', closest_integer(\"14.65\"))\n    print('closest_integer(\"-14.65\") ->', closest_integer(\"-14.65\"))\n    print('closest_integer(\"14.75\") ->', closest", "    if not isinstance(value, str):\n        raise TypeError(\"Value is not a string\")\n    try:\n        return int(round(float(value)))\n    except ValueError:\n        raise ValueError(\"Value is not a number\")\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "    return round(float(value))\n\n\ndef add_to_string(str1, str2):\n    '''\n    Create a function that takes two strings as arguments\n    and returns their sum as a string.\n\n    Examples\n    >>> add_to_string(\"123\", \"456\")\n    \"579\"\n\n    Note:\n    The length of the two strings is always equal and their\n    content is always numeric.\n    '''\n    return str(int(str1) + int(str2))\n\n\ndef is_prime(num):\n    '''\n    Create a function that takes a number as an argument and returns\n    whether it is a prime number.\n\n    Examples\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef is_palindrome(str1):\n    '''\n    Create a function that takes a string as an argument and returns\n    whether it is a palindrome.\n\n    Examples\n    >>> is_palindrome(\"racecar\")\n    True\n    >>> is_palindrome(\"Racecar\")\n    True\n    '''\n    return str1 == str1[::-1]\n\n\ndef get_middle_char(str1):\n    '''\n    Create a function", "    return int(round(float(value), 0))\n\ndef all_even_digits(value):\n    '''\n    Create a function that takes a string value representing a number\n    and returns whether all digits in the number are even.\n\n    Examples\n    >>> all_even_digits(\"1234\")\n    True\n    >>> all_even_digits(\"12345\")\n    False\n    '''\n    for x in value:\n        if int(x) % 2 != 0:\n            return False\n    return True\n\ndef is_palindrome(value):\n    '''\n    Create a function that takes a string value representing a number\n    and returns whether it is a palindrome.\n\n    Examples\n    >>> is_palindrome(\"123321\")\n    True\n    >>> is_palindrome(\"12332\")\n    False\n    '''\n    value = str(value)\n    if value == value[::-1]:\n        return True\n    else:\n        return False\n\ndef reverse_string(value):\n    '''\n    Create a function that takes a string value representing a number\n    and returns the string representation of the number with its\n    digits in reverse order.\n\n    Examples\n    >>> reverse_string(\"123321\")\n    '123321'\n    >>> reverse_string(\"12332\")\n    '23", "    pass\n\n\ndef factorial(value):\n    '''\n    Create a function that takes a value (integer) and returns its factorial\n    (or the product of all of its positive integers that are smaller than it).\n\n    Examples\n    >>> factorial(0)\n    1\n    >>> factorial(1)\n    1\n    >>> factorial(5)\n    120\n\n    Note:\n    If the given value is negative, return None.\n    '''\n    pass\n\n\ndef fizzbuzz(value):\n    '''\n    Create a function that takes a value (integer) and returns 'Fizz' if the\n    given value is divisible by 3 and 'Buzz' if the given value is divisible\n    by 5. If the given value is divisible by both 3 and 5 return 'FizzBuzz'.\n    If the given value is not divisible by 3 or 5, return the given value.\n\n    Examples\n    >>> fizzbuzz(1)\n    1\n    >>> fizzbuzz(3)\n    'Fizz'\n    >>> fizzbuzz(5)\n    'Buzz'\n    >>> fizzbuzz(15)\n    'FizzBuzz'\n    '''\n    pass\n\n\ndef gcd(value1, value2):\n    '''\n    Create a function that takes two values (integers) and returns their\n    greatest common divisor (or GCD"], ["    pile = []\n    for i in range(n):\n        pile.append(2*i + 1)\n    return pile\n\n\ndef make_a_pile_2(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_2(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = []\n    for i in range(n):\n        pile.append(2*i + 1)\n    return pile\n\n\ndef make_a_pile_3(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_3(3)\n    [3, ", "    pile = []\n    for i in range(n):\n        if i % 2 == 0:\n            pile.append(i+1)\n        else:\n            pile.append(i+2)\n    return pile\n\n\ndef make_a_pile_recursively(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_recursively(3)\n    [3, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [n, n + 2] + make_a_pile_recursively(n - 2)\n    else:\n        return [n, n + 1] + make_a_pile_recursively(n - 1)\n\n\ndef test_make_a_pile():\n    assert make_a_pile(3) == [3, 5, 7]\n    assert make_a_pile(10) == [10, 12, 14, 16, ", "    # TODO: write your code here\n    if n%2==0:\n        n=n+1\n    odd=n\n    even=n-1\n    arr=[odd,even]\n    for i in range(2,n):\n        odd=odd+2\n        even=even+2\n        arr.append(odd)\n        arr.append(even)\n    return arr\n\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # TODO: write your code here\n    if n%2==0:\n        n=n+1\n    odd=n\n    even=n-1\n    arr=[odd,even]\n    for i in range(2,n):\n        odd=odd+2\n        even=even+2\n        arr.append(odd)\n        arr.append(even)\n    return arr\n\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n", "    ...\n\n\ndef stone_game(pile, n):\n    \"\"\"\n    Given a list of pile of stones and a positive integer n, you have to play a\n    game. At the beginning, there are n stones in the pile. You can take all or\n    none of the stones from the pile.\n    If you take n stones from the pile, you lose the game.\n    If you take fewer than n stones from the pile, you win the game.\n    Return a list of two elements, the first is the number of stones you have to\n    take in the first round, and the second is the number of stones you have to\n    take in the second round.\n\n    Examples:\n    >>> stone_game([3, 5, 7], 3)\n    [2, 3]\n    >>> stone_game([3, 5, 7], 4)\n    [3, 4]\n    \"\"\"\n    ...\n\n\ndef stone_game_2(pile, n):\n    \"\"\"\n    Same as stone_game, but you only take stones in the pile in the first round.\n    \"\"\"\n    ...\n\n\ndef stone_game_3(pile, n):\n    \"\"\"\n    Same as stone_game, but you can take more than one stone in the first round.\n    \"\"\"\n    ...\n\n\ndef stone_game_4(pile, n):\n    \"\"\"\n    Same as stone_game, but the game is played over and over again.\n    \"\"\"\n    ...\n\n\ndef stone_game_5(pile", "    pass\n\n\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pass\n\n\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pass\n\n\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n"], ["    return s.split(\" \")\n\n\ndef words_string2(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string2(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string2(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(\",\")\n\n\ndef words_string3(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string3(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string3(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\n\ndef words_string4(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string4(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string4(\"One, two, three, four, five, six\") == [\"", "    return s.split()\n\ndef sum_list(nums):\n    \"\"\"\n    You will be given a list of numbers. Return the sum of all of the numbers in the list.\n    \"\"\"\n    return sum(nums)\n\ndef sum_list_reduce(nums):\n    \"\"\"\n    You will be given a list of numbers. Return the sum of all of the numbers in the list.\n    \n    Use reduce to accomplish this task.\n    \"\"\"\n    return reduce(lambda x, y: x + y, nums)\n\ndef mean(nums):\n    \"\"\"\n    You will be given a list of numbers. Return the mean of all of the numbers in the list.\n    \n    The mean is the sum of the numbers divided by the count of numbers.\n    \"\"\"\n    return sum(nums) / len(nums)\n\ndef mean_reduce(nums):\n    \"\"\"\n    You will be given a list of numbers. Return the mean of all of the numbers in the list.\n    \n    The mean is the sum of the numbers divided by the count of numbers.\n    \n    Use reduce to accomplish this task.\n    \"\"\"\n    return reduce(lambda x, y: x + y, nums) / len(nums)\n\ndef mean_map(nums):\n    \"\"\"\n    You will be given a list of numbers. Return the mean of all of the numbers in the list.\n    \n    The mean is the sum of the numbers divided by the count of numbers.\n    \n    Use map to accomplish this task.\n    \"\"\"\n    return mean(map(lambda x: x, nums))\n\ndef mean_filter(nums):\n    \"\"\"\n    You will be", "    return s.split(' ')\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(', ')\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(' ')\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\",", "    # Your code here\n    return s.split()\n\ndef sum_of_digits(s):\n    \"\"\"\n    Given a string containing a number (e.g. \"352\"), return the sum of the number's\n    digits.\n    \"\"\"\n    # Your code here\n    return sum(int(i) for i in s if i.isdigit())\n\ndef string_compression(s):\n    \"\"\"\n    Given a string, return a new string with any consecutive repeated characters replaced\n    by a single copy of the character and the count of how many times it was repeated.\n    \n    For example, if given the string \"aaabbc\", return the string \"a3b1c1\"\n    \"\"\"\n    # Your code here\n    return \"\".join(map(lambda x: str(x[1])+x[0], enumerate(itertools.groupby(s))))\n\ndef string_split(s, n):\n    \"\"\"\n    Given a string and a non-negative integer n, return the string that results from\n    splitting the string at every nth character.\n    \n    For example, if given the string \"abcdefghi\" and n = 3, return the string \"a b c d e f g h i\".\n    \"\"\"\n    # Your code here\n    return \" \".join(s[i:i+n] for i in range(0, len(s), n))\n\ndef string_split_compress(s, n):\n    \"\"\"\n    Given a string and a non-negative integer n, return the string that results from\n    splitting the string at every nth character and then concatenating the resulting strings.\n    \n    For example, if given the string \"", "    # Your code here\n    return s.split()\n\n\ndef average_length(strings):\n    \"\"\"\n    You will be given an array of strings. Your task is to find the average string length of\n    the strings.\n    \n    For example:\n    average_length([\"cat\", \"dog\", \"bird\"]) == 3\n    average_length([\"hello\", \"world\", \"how\", \"are\", \"you?\"]) == 3\n    \"\"\"\n    # Your code here\n    return sum(len(s) for s in strings) / len(strings)\n\n\ndef longest_string(strings):\n    \"\"\"\n    You will be given an array of strings. Your task is to find the longest string and return\n    the length of the longest string.\n    \n    For example:\n    longest_string([\"cat\", \"dog\", \"bird\"]) == 3\n    longest_string([\"hello\", \"world\", \"how\", \"are\", \"you?\"]) == 5\n    \"\"\"\n    # Your code here\n    return max(len(s) for s in strings)\n\n\ndef shortest_string(strings):\n    \"\"\"\n    You will be given an array of strings. Your task is to find the shortest string and return\n    the length of the shortest string.\n    \n    For example:\n    shortest_string([\"cat\", \"dog\", \"bird\"]) == 3\n    shortest_string([\"hello\", \"world\", \"how\", \"are\", \"you?\"]) == 5\n    \"\"\"\n    # Your code here\n    return min(len(s) for s in strings)\n\n\ndef first_last_index(strings):\n    \"\"\"\n    You will be"], ["    x = abs(x)\n    y = abs(y)\n\n    if x > y:\n        x, y = y, x\n\n    if y % 2 == 0:\n        for i in range(x, y + 1):\n            if i % 2 == 0:\n                return i\n        return -1\n    else:\n        for i in range(x + 1, y + 1):\n            if i % 2 == 0:\n                return i\n        return -1\n\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    x = abs(x)\n    y = abs(y)\n\n    if x > y:\n        x, y = y, x\n\n    if y % 2 == 0:\n        for i in range(x, y + 1):\n            if i % 2 == 0:\n                return i\n        return -1\n    else:\n        for i in range(x + 1, y + 1):\n            if i % 2 == 0:\n                return i\n        return -1\n\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then", "    if x < y:\n        x, y = y, x\n\n    for i in range(x, y+1):\n        if i%2 == 0:\n            return i\n    return -1\n\n# Uncomment the following line to see how the function works\nprint(choose_num(12, 15))\n\nprint(choose_num(13, 12))\n", "    if y < x:\n        return -1\n    if y % 2 == 0:\n        if x <= y <= y:\n            return y\n        elif y < x:\n            return -1\n    elif y % 2 != 0:\n        if x <= y - 1 <= y:\n            return y - 1\n        elif y - 1 < x:\n            return -1\n\n\nif __name__ == '__main__':\n    import sys\n    import io\n    def run(input_text):\n        input_text = input_text.splitlines()\n        sys.stdin = io.StringIO(input_text)\n        choose_num(int(input()), int(input()))\n        sys.stdin = sys.__stdin__\n\n    run('''10 12''')\n    run('''15 12''')\n    run('''13 12''')\n    run('''12 12''')\n    run('''13 13''')\n    run('''13 14''')\n    run('''14 14''')\n    run('''15 13''')\n    run('''15 15''')\n    run('''14 15''')\n    run('''13 14''')\n    run('''12 13''')\n    run('''13 11''')\n    run('''12 11''')\n    run('''11 11''')\n    run('''12 10''')\n    run('''13 10''')\n    run('''14 10''')\n    run('''15 10", "    # Your code here\n    pass\n\n\ndef main():\n    import sys\n    args = sys.argv[1:]\n    if len(args) == 2:\n        x = int(args[0])\n        y = int(args[1])\n        result = choose_num(x, y)\n        print(result)\n    else:\n        print('Usage:", "    if x > y:\n        return -1\n    for i in range(x, y + 1, 2):\n        return i\n\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    for i in range(x, y + 1, 2):\n        return i\n\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    for i in range(x, y + 1, 2):\n        return i\n\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_"], ["    if n > m:\n        return -1\n    r = (n + m) // 2\n    return bin(int(round(r)))[2:]\n\n\ndef test_rounded_avg():\n    \"\"\"Test function\"\"\"\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\ndef rounded_avg_2(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). Round the answer to\n    the nearest integer and convert that to binary. If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(round((n+m)/2))[2:]\n\n\ndef test_rounded_avg", "    if n > m:\n        return -1\n    return bin(round((m - n + 1) * (n + m) / 2))[2:]\n\n\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return bin(round((m - n + 1) * (n + m) / 2))[2:]\n\n\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n", "    if n > m:\n        return -1\n    nums = [bin(x)[2:] for x in range(n, m + 1)]\n    sum_bin = ''.join(nums)\n    n_bits = len(sum_bin)\n    n_bits = n_bits % 8\n    if n_bits == 0:\n        return sum_bin\n    return sum_bin[:-n_bits]\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == '__main__':\n    test_rounded_avg()\n\n\n\"\"\"\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    nums = [bin(x)[2:] for x in range(n, m + 1)]\n    sum_bin = ''.join(nums)\n    n_bits = len(sum_bin)\n    n_bits = n_bits % 8\n    if n_bits == 0:\n        return sum_bin\n    return sum_bin[:-n_bits]\n\"\"\"\n", "    if n > m:\n        return -1\n    avg = (m+n)/2\n    return bin(round(avg))[2:]\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\nprint(rounded_avg(33, 45))\nprint(rounded_avg(45, 56))\nprint(rounded_avg(1, 1))\nprint(rounded_avg(1, 2))\nprint(rounded_avg(2, 2))\nprint(rounded_avg(2, 3))\nprint(rounded_avg(3, 3))\nprint(rounded_avg(3, 4))\nprint(rounded_avg(4, 4))\nprint(rounded_avg(4, 5))\nprint(rounded_avg(5, 5))\nprint(rounded_avg(5, 6))\nprint(rounded_avg(6, 6))\nprint(rounded_avg(6, 7))\nprint(rounded_avg(7, 7))\nprint(rounded_avg(7, 8))\nprint(rounded_avg(8, 8))\nprint(rounded_", "\n    # Your code here\n    if n > m:\n        return -1\n\n    n_decimal = n\n    m_decimal = m\n\n    total = 0\n    for i in range(n_decimal, m_decimal + 1):\n        total += i\n\n    avg = total / (m_decimal - n_decimal + 1)\n    result = int(avg)\n    return format(result, 'b')\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\nprint(rounded_avg(20, 30))\nprint(rounded_avg(30, 20))\nprint(rounded_avg(20, 10))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(10, 10))\nprint(rounded_avg(10, 9))\nprint(rounded_avg(9, 10))\nprint(rounded_avg(10, 8))\nprint(rounded_avg(8, 10))\nprint(rounded_avg(10, 7))\nprint(rounded_avg(7, 10))\nprint(rounded"], ["    result = []\n    for i in x:\n        if i % 2 == 1:\n            result.append(i)\n    result.sort()\n    return result\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for i in x:\n        if i % 2 == 1:\n            result.append(i)\n    result.sort()\n    return result\n\n\ndef unique_digits_in_place(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits_in_place([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits_in_place([152, 323, 1422, 10])\n    []\n    \"\"\"\n    for i in range(len(x)):\n        x[i] = x[i]", "    return list(filter(lambda x: not any(i % 2 == 0 for i in str(x)), x))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    print(\"All tests passed!\")\n\n\n# def unique_digits(x):\n#     \"\"\"Given a list of positive integers x. return a sorted list of all \n#     elements that hasn't any even digit.\n\n#     Note: Returned list should be sorted in increasing order.\n    \n#     For example:\n#     >>> unique_digits([15, 33, 1422, 1])\n#     [1, 15, 33]\n#     >>> unique_digits([152, 323, 1422, 10])\n#     []\n#     \"\"\"\n#     return sorted(list(filter(lambda x: not any(i % 2 == 0 for i in str(x)), x)))\n\n\n# def unique_digits(x):\n#     \"\"\"Given a list of positive integers x. return a sorted list of all \n#     elements that hasn't any even digit.\n\n#     Note: Returned list should be sorted in increasing order.\n    \n#     For example:\n#     >>> unique_digits([15, 33, 1422, 1])\n#     [1, 15, 33]\n#     >>> unique_digits([152, 323, 1422, 10])\n", "    if x == []:\n        return []\n    else:\n        for i in x:\n            if i % 2 == 0:\n                x.remove(i)\n        return sorted(x)\n\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n    else:\n        x = sorted(x)\n        for i in x:\n            if i % 2 == 0:\n                x.remove(i)\n        return x\n\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if x == []:\n        return []\n", "    y = []\n    for i in x:\n        if not any(j % 2 == 0 for j in str(i)):\n            y.append(i)\n    return sorted(y)\n\n\ndef unique_digits(x):\n    return sorted(i for i in x if not any(j % 2 == 0 for j in str(i)))\n\n\ndef unique_digits(x):\n    return sorted(i for i in x if all(j % 2 != 0 for j in str(i)))\n\n\ndef unique_digits(x):\n    return sorted(i for i in x if all(j % 2 != 0 or j < 5 for j in str(i)))\n\n\ndef unique_digits(x):\n    return sorted(i for i in x if all(j != 0 and j % 2 != 0 for j in str(i)))\n\n\ndef unique_digits(x):\n    return sorted(i for i in x if all(j != 0 and j % 2 != 0 or j < 5 for j in str(i)))\n\n\ndef unique_digits(x):\n    return sorted(i for i in x if all(j != 0 and j % 2 != 0 or j < 5 or j > 5 for j in str(i)))\n\n\ndef unique_digits(x):\n    return sorted(i for i in x if all(j != 0 and j % 2 != 0 or j < 5 or j > 5 or j == 10 for j in str(i)))\n\n\ndef unique_digits(", "    # Your code goes here\n    for i in x:\n        if i == 0:\n            x.remove(i)\n        elif i%2==0:\n            x.remove(i)\n    return sorted(x)\n\ndef is_palindrome(x):\n    \"\"\"Given a list of integers x. return true if x is a palindrome.\n\n    For example:\n    >>> is_palindrome([12, 21, 321])\n    True\n    >>> is_palindrome([1, 2, 3])\n    False\n    >>> is_palindrome([1, 2, 1])\n    True\n    >>> is_palindrome([1])\n    True\n    \"\"\"\n    # Your code goes here\n    x.sort()\n    rev_x = x[::-1]\n    if x == rev_x:\n        return True\n    else:\n        return False\n\ndef is_prime(x):\n    \"\"\"Given an integer x. return true if x is a prime number.\n\n    For example:\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    >>> is_prime(10)\n    False\n    \"\"\"\n    # Your code goes here\n    for i in range(2, x):\n        if x%i==0:\n            return False\n    return True\n\ndef is_perfect(x):\n    \"\"\"Given an integer x. return true if x is a perfect number."], ["    return [\n        \"Eight\",\n        \"Five\",\n        \"Four\",\n        \"Three\",\n        \"Two\",\n        \"Two\",\n        \"One\",\n        \"One\",\n    ]\n\n\ndef by_length_alt(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]", "    if not arr:\n        return []\n    arr.sort()\n    arr.reverse()\n    result = []\n    for i in range(1, 10):\n        if i in arr:\n            result.append(\"One\")\n        elif i-1 in arr:\n            result.append(\"Two\")\n        elif i-2 in arr:\n            result.append(\"Three\")\n        elif i-3 in arr:\n            result.append(\"Four\")\n        elif i-4 in arr:\n            result.append(\"Five\")\n        elif i-5 in arr:\n            result.append(\"Six\")\n        elif i-6 in arr:\n            result.append(\"Seven\")\n        elif i-7 in arr:\n            result.append(\"Eight\")\n        elif i-8 in arr:\n            result.append(\"Nine\")\n        else:\n            result", "    if not arr:\n        return []\n\n    arr_names = []\n    sorted_arr = sorted(arr)\n    reverse_arr = sorted_arr[::-1]\n    for i in range(1, 10):\n        if i in reverse_arr:\n            arr_names.append(number_to_name(i))\n\n    return arr_names\n\n\ndef number_to_name(number):\n    if number == 1:\n        return 'One'\n    elif number == 2:\n        return 'Two'\n    elif number == 3:\n        return 'Three'\n    elif number == 4:\n        return 'Four'\n    elif number == 5:\n        return 'Five'\n    elif number == 6:\n        return 'Six'\n    elif number == 7:\n        return 'Seven'\n    elif", "    # Your code here\n\n\ndef by_length_test():\n    # Test code\n    # Change the input to the function here\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n    assert by_length(arr) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\n    assert by_length([1, -1, 55]) == ['One']\n    assert by_length([]) == []\n\n\nif __name__ == \"__main__\":\n    # test function here\n    by_length_test()\n", "    return [\n        \"One\",\n        \"Two\",\n        \"Three\",\n        \"Four\",\n        \"Five\",\n        \"Six\",\n        \"Seven\",\n        \"Eight\",\n        \"Nine\",\n    ]\n\n\ndef by_length_1(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, "], ["    l = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            l.append(factorial(i))\n        else:\n            s = 0\n            for j in range(1, i + 1):\n                s += j\n            l.append(s)\n    return l\n\n\ndef factorial(n):\n    \"\"\" Implement the factorial function.\n    the factorial of a number is the multiplication of all numbers from 1 to this number.\n    Example:\n    factorial(5) == 120\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nif __name__ == '__main__':\n    import sys\n    n = int(sys.argv[1])\n    print(f(n))\n    print(factorial(n))\n\n    # print(f(2))\n    # print(factorial(2))\n\n    # print(f(5))\n    # print(factorial(5))\n\n    # print(f(10))\n    # print(factorial(10))\n\n    # print(f(15))\n    # print(factorial(15))\n\n    # print(f(20))\n    # print(factorial(20))\n\n    # print(f(25))\n    # print(factorial(25))\n\n    # print(f(30))\n    # print(factorial(30))\n\n    # print(f(35))", "    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum(range(1, i + 1)))\n    return res\n\n\ndef factorial(n):\n    \"\"\"\n    Implement the function factorial that takes n as a parameter,\n    and returns the factorial of n.\n    The factorial of n is the multiplication of the numbers from 1 to n.\n    Example:\n    factorial(5) == 120\n    \"\"\"\n    return 1 if n == 1 else n * factorial(n - 1)\n\n\nif __name__ == '__main__':\n    n = int(input(\"Enter a positive integer: \"))\n    assert n > 0, \"Enter a positive integer!\"\n    print(f(n))\n", "    return [1, 2, 6, 24, 15]\n\ndef g(n):\n    \"\"\"Implement the function g that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    g(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    return [1, 2, 6, 24, 15]\n\ndef h(n):\n    \"\"\"Implement the function h that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    h(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    return [1, 2, 6, 24, 15]\n\ndef i(n):\n    \"\"\"Implement the function i that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd", "    # Fill in your code here\n    if n <= 1:\n        return [1]\n    else:\n        result = [1]*n\n        for i in range(1, n):\n            result[i] = result[i-1]*(i)\n        return result\n\n\nif __name__ == '__main__':\n    import sys\n    import fileinput\n    if sys.argv[-1] == \"-t\":\n        _input = sys.stdin.readline\n        sys.stdin = open(\"input.txt\", \"r\")\n        for line in fileinput.input():\n            n = int(line)\n            print(f(n))\n    else:\n        for line in fileinput.input():\n            n = int(line)\n            print(f(n))\n", "    return [x * y for x, y in zip(range(n), [1] + [factorial(x) for x in range(1, n + 1)])]\n\n\ndef factorial(n):\n    \"\"\" Returns the factorial of n.\n    The factorial of n is the multiplication of the numbers from 1 to n (1 * 2 * ... * n).\n    \"\"\"\n    return 1 if n <= 1 else n * factorial(n - 1)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n\"\"\"\nImplement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == [1, 2, 6, 24, 15]\n\"\"\"\n\n\ndef f(n):\n    return [x * y for x, y in zip(range(n), [1] + [factorial(x) for x in range(1, n + 1)])]\n\n\ndef factorial(n):\n    \"\"\" Returns the factorial of n.\n    The factorial of n is the multiplication of the numbers from 1 to n (1 * 2 * ... * n).\n    \"\"\"\n    return 1 if n <= 1 else n * factor"], ["    # time limit exceeded\n    if n <= 1:\n        return (0, 0)\n\n    odd = 0\n    even = 0\n    for i in range(n):\n        x = str(i)\n        j = x[::-1]\n        if x == j:\n            if int(x) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n\n    return (even, odd)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n    # n = 3\n    # print(even_odd_palindrome(n))\n    # n = 12\n    # print(even_odd_palindrome(n))\n    n = 1\n    print(even_odd_palindrome(n))\n    n = 2\n    print(even_odd_palindrome(n))\n    n = 10\n    print(even_odd_palindrome(n))\n    n = 11\n    print(even_odd_palindrome(n))\n    n = 1", "    count_even = 0\n    count_odd = 0\n\n    for i in range(1, n+1):\n        if is_even_palindrome(i):\n            count_even += 1\n        if is_odd_palindrome(i):\n            count_odd += 1\n\n    return (count_even, count_odd)\n\n\ndef is_even_palindrome(n):\n    \"\"\"\n    Given a positive integer n, determine if it is an even integer palindrome.\n\n    Example 1:\n\n        Input: 3\n        Output: False\n        Explanation:\n        Integer palindrome are 1, 2, 3. none of them is even.\n\n    Example 2:\n\n        Input: 12\n        Output: True\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. six of them are even.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. return True or False.\n    \"\"\"\n    if", "    # n = 10\n    # even = 1\n    # odd = 1\n    #\n    # if n <= 5:\n    #     return (1, n)\n    #\n    # n = n - 6\n    #\n    # if n % 2 == 0:\n    #     even = n // 2 + 2\n    # else:\n    #     even = n // 2 + 1\n    #\n    # if n % 4 == 0:\n    #     odd = n // 2\n    # else:\n    #     odd = n // 2 - 1\n    #\n    # return (even, odd)\n\n    # n = 10\n    # even = 1\n    # odd = 1\n    #\n    # if n <= 5:\n    #     return (1, n)\n    #\n    # n = n - 6\n    #\n    # if n % 2 == 0:\n    #     even = n // 2 + 2\n    # else:\n    #     even = n // 2 + 1\n    #\n    # if n % 4 ==", "    even_odd_pali_list = [1] * (n + 1)\n    even_odd_pali_list[0] = 0\n    even_odd_pali_list[1] = 0\n    for i in range(2, n + 1):\n        even_odd_pali_list[i] = even_odd_pali_list[i // 2] + 1\n    return (even_odd_pali_list[n], n - even_odd_pali_list[n])\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n    assert even_odd_palindrome(100) == (49, 51)\n    assert even_odd_palindrome(10000) == (24995, 75005)\n    assert even_odd_palindrome(100000) == (599995, 400005)", "    count_even, count_odd = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return count_even, count_odd\n\n\ndef is_palindrome(num):\n    \"\"\"\n    Given a positive integer num, return true if num is a palindrome, or false otherwise.\n\n    Examples:\n        is_palindrome(123) -> False\n        is_palindrome(12321) -> True\n        is_palindrome(1001) -> True\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n    n = 10000\n    print(even_odd_palindrome(n))\n    print(even_odd_palindrome(10000))\n    print(even_odd_palindrome(1"], ["    pass\n\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    pass\n\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    pass\n\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123", "    # Implementation\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n\n    return count\n\n\ndef count_nums_v2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    # Implementation\n    count = 0\n    for i in arr:\n        if i > 0 and sum(map(lambda x: abs(x), str(i))) > 0:\n            count += 1\n\n    return count\n\n\ndef count_nums_v3(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_num", "    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n\n\ndef sum_digits(n):\n    \"\"\"\n    Write a function sum_digits which takes an integer and returns the\n    sum of its digits.\n    >>> sum_digits(12345) == 15\n    >>> sum_digits(-123) == 0\n    \"\"\"\n    s = 0\n    while n != 0:\n        s += n % 10\n        n //= 10\n    return s\n\n\ndef num_digits(n):\n    \"\"\"\n    Write a function num_digits which takes an integer and returns the number\n    of digits in it.\n    >>> num_digits(12345) == 5\n    >>> num_digits(-123) == 3\n    \"\"\"\n    n = abs(n)\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count\n\n\ndef is_palindrome(s):\n    \"\"\"\n    Write a function is_palindrome which takes a string and returns whether\n    it is a palindrome.\n    >>> is_palindrome('dad') == True\n    >>> is_palindrome('mad') == False\n    \"\"\"\n    return s == s[::-1]\n\n\ndef longest_palindrome(s):\n    \"\"\"\n    Write a function longest_palindrome which takes a string and returns\n    the longest", "    return sum(1 for x in arr if sum(int(y) for y in str(abs(x))) > 0)\n\n\ndef count_nums2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return sum(1 for x in arr if sum(int(y) for y in str(abs(x))) > 0)\n\n\ndef count_nums3(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    return sum(int(y) > 0 for x in arr for y in str(", "    pass\n\n\ndef count_reps(arr):\n    \"\"\"\n    Write a function count_reps which takes an array of integers and returns the\n    number of elements which has a repeated digit.\n    >>> count_reps([]) == 0\n    >>> count_reps([-1, 11, -11]) == 0\n    >>> count_reps([1, 1, 2]) == 1\n    >>> count_reps([1, 1, 2, 1]) == 2\n    \"\"\"\n    pass\n\n\ndef count_reps_and_nums(arr):\n    \"\"\"\n    Write a function count_reps_and_nums which takes an array of integers and\n    returns the number of elements which has a repeated digit or a sum of digits\n    > 0.\n    >>> count_reps_and_nums([]) == 0\n    >>> count_reps_and_nums([-1, 11, -11]) == 0\n    >>> count_reps_and_nums([1, 1, 2]) == 2\n    >>> count_reps_and_nums([1, 1, 2, 1]) == 3\n    \"\"\"\n    pass\n\n\ndef count_pairs(arr):\n    \"\"\"\n    Write a function count_pairs which takes an array of integers and returns\n    the number of elements which has a repeated digit and a sum of digits > 0.\n    >>> count_pairs([]) == 0\n    >>> count_pairs([-1, 11,"], ["    if not arr:\n        return True\n    l, r = 0, len(arr) - 1\n    while l <= r:\n        if arr[l] <= arr[r]:\n            return False\n        while l < r and arr[l] > arr[r]:\n            arr[l], arr[r] = arr[r], arr[l]\n            l += 1\n            r -= 1\n    return True\n\n\nif __name__ == '__main__':\n    from timeit import timeit\n    print(move_one_ball([3, 4, 5, 1, 2]))\n    print(timeit(lambda: move_one_ball([3, 4, 5, 1, 2]), number=", "\n    def right_shift(arr):\n        n = len(arr)\n        for i in range(n):\n            j = i\n            while True:\n                if arr[j] != arr[j + 1]:\n                    arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                    break\n                elif arr[j + 1] == arr[j]:\n                    return False\n                j += 1\n                if j == n - 1:\n                    return True\n        return False\n\n    n = len(arr)\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    arr = sorted(arr)\n    while n > 1:", "    if len(arr) == 0:\n        return True\n    \n    if arr[0] >= arr[1]:\n        return False\n    else:\n        return True\n\n\ndef main():\n    print(move_one_ball([3, 4, 5, 1, 2]))\n    print(move_one_ball([3, 5, 4, 1, 2]))\n    print(move_one_ball([1, 2, 3, 4, 5]))\n    print(move_one_ball([1]))\n    print(move_one_ball([5, 4, 3, 2, 1]))\n    print(move_one_ball([5, 3, 4, 2,", "    # Your Code Here\n    N = len(arr)\n    if N == 0:\n        return True\n    l = 0\n    r = N - 1\n    while l < r:\n        if arr[l] <= arr[r]:\n            l += 1\n        elif arr[l] >= arr[r]:\n            r -= 1\n        else:\n            arr[l], arr[r] = arr[r], arr[l]\n            l += 1\n            r -= 1\n    return True\n\n\n\ndef move_one_ball_alternative(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered", "    if len(arr)==0:\n        return True\n    if arr==sorted(arr):\n        return True\n    for i in range(len(arr)):\n        if i==len(arr)-1:\n            return False\n        if arr[i]>arr[i+1]:\n            return False\n    return True\n\nif __name__==\"__main__\":\n    arr=[3, 4, 5, 1, 2]\n    print(move_one_ball(arr))\n\n    arr=[3, 5, 4, 1, 2]\n    print(move_one_ball(arr))\n\n    arr=[3, 2, 1, 5, 4]\n    print(move_one_ball("], ["\n    lst1_count_odd = len([1 for i in lst1 if i % 2 == 1])\n    lst2_count_odd = len([1 for i in lst2 if i % 2 == 1])\n    if lst1_count_odd == 0 and lst2_count_odd == 0:\n        return \"YES\"\n    elif lst1_count_odd == 0 and lst2_count_odd != 0:\n        return \"NO\"\n    elif lst1_count_odd != 0 and lst2_count_odd == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\n# def exchange(lst1, lst2):\n#     for i in range(len(lst1)):\n#         if lst1[i] % 2 == 1 and lst2[i] % 2 == 1:\n#             return \"NO\"\n#     return \"YES\"\n\n\ndef exchange(lst1, lst2):\n    odd_elements_lst1 = sum(1 for x in lst1 if x % 2 == 1)\n    odd_elements_lst2 = sum(1 for x in lst2 if x % 2 == 1)\n    if odd_elements_lst1 == 0 and odd_elements_lst2 == 0", "    if lst1 == lst2:\n        return \"YES\"\n    if len(lst1) != len(lst2):\n        return \"NO\"\n\n    lst1 = list(lst1)\n    lst2 = list(lst2)\n    for i in range(len(lst1)):\n        if (lst1[i] % 2 == 0 and lst2[i] % 2 != 0) or (lst1[i] % 2 != 0 and lst2[i] % 2 == 0):\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n    for i in lst1:\n        if i % 2 != 0:\n            return \"NO\"\n    return \"YES\"\n\n\nif __name__ == '__main__':\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 5, 3, 4]\n    print(exchange(lst1, lst2))\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2, 3, 4]\n    print(exchange(lst1, lst2))\n    lst1 = [1, 2, 3, 4]\n    lst2 = [", "    if lst1 == lst2:\n        return \"YES\"\n    if sum(lst1) % 2 != 0:\n        return \"NO\"\n    if sum(lst2) % 2 != 0:\n        return \"NO\"\n    if sum(lst1) % 2 == 0 and sum(lst2) % 2 == 0:\n        return \"YES\"\n    even = []\n    odd = []\n    for n in lst1:\n        if n % 2 == 0:\n            even.append(n)\n        else:\n            odd.append(n)\n    for n in lst2:\n        if n % 2 == 0:\n            even.append(n)\n        else:\n            odd.append(n)\n    if len(even) != len(odd):\n        return \"NO\"\n    else:\n        return \"YES\"\n\n\nlst1 = [1, 2, 3, 4]\nlst2 = [1, 2, 3, 4]\nprint(exchange(lst1, lst2))\n\n# This is the same problem as problem 1, except now\n# you are given the lengths of the two lists.\n\n\ndef exchange2(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that", "    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1 and lst2[i] % 2 == 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n\n    for num in lst1:\n        if num % 2 == 1:\n            return \"NO\"\n    return \"YES\"\n\n\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n   ", "    # Write your code here\n    return \"YES\"\n\n\nif __name__ == \"__main__\":\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2, 3, 4]\n    print(exchange(lst1, lst2))\n\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 5, 3, 4]\n    print(exchange(lst1, lst2))\n\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 5, 3, 7]\n    print(exchange(lst1, lst2))\n\n    lst1 = [1, 2, 3, 4, 5]\n    lst2 = [1, 2, 3, 4, 5]\n    print(exchange(lst1, lst2))\n\n    lst1 = [1, 2, 3, 4, 5]\n    lst2 = [1, 5, 3, 7, 9]\n    print(exchange(lst1, lst2))\n\n    lst1 = [1, 2, 3, 4, 5]\n    lst2 = [1, 5,"], ["    if not test:\n        return {}\n    result = {}\n    for i in test.split(' '):\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n\n\ndef test_histogram():\n    assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    assert histogram('a b b a') == {'a': 2, 'b': 2}\n    assert histogram('a b c a b') == {'a': 2, 'b': 2}\n    assert histogram('b b b b a') == {'b': 4}\n    assert histogram('') == {}\n    assert histogram('b b b b a b') == {'b': 4}\n    assert histogram('a b b b c d c b a a d d d d b') == {'a': 3, 'b': 6, 'c': 2, 'd': 4}\n    assert histogram('') == {}\n    assert histogram('a b c d e') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}\n    assert histogram('a b c d e f g h i j k l m n o p') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, '", "    # Your code here\n    d = {}\n    if test == \"\":\n        return d\n    elif len(test) == 1:\n        d[test[0]] = 1\n        return d\n    else:\n        c = test.split(' ')\n        for i in c:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        return d\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Your code here\n    if not test:\n        return {}\n    return {x: test.count(x) for x in set(test)}\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the", "    if not test:\n        return {}\n    if len(test) == 1:\n        return {test: 1}\n    hist = {}\n    for x in test:\n        if x not in hist:\n            hist[x] = 1\n        else:\n            hist[x] += 1\n    return hist\n\n\ndef histogram_with_default(test, default_value=0):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    If the parameter default_value is not None, return the corresponding count,\n    otherwise return the value specified in default_value\n    (which should be a number, the default is 0).\n\n    Example:\n    histogram_with_default('a b c', default_value=1) == {'a': 1, 'b': 1, 'c': 1}\n    histogram_with_default('a b b a', default_value=1) == {'a': 2, 'b': 2}\n    histogram_with_default('a b c a b', default_value=1) == {'a': 2, 'b': 2}\n    histogram_with_default('b b b b a', default_value=1) == {'b': 4}\n    histogram_with_default('', default_value=1) ==", "    # Your code here\n    if not test:\n        return {}\n    dict = {}\n    for i in test.split():\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    return dict\n\n\ndef test_histogram():\n    assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    assert histogram('a b b a') == {'a': 2, 'b': 2}\n    assert histogram('a b c a b') == {'a': 2, 'b': 2}\n    assert histogram('b b b b a') == {'b': 4}\n    assert histogram('') == {}\n\n\ndef test_histogram2():\n    assert histogram('abcd') == {'a': 1, 'b': 1, 'c': 1, 'd': 1}\n    assert histogram('a b b a') == {'a': 2, 'b': 2}\n    assert histogram('a b c a b') == {'a': 2, 'b': 2}\n    assert histogram('b b b b a') == {'b': 4}\n    assert histogram('') == {}\n\n\ndef test_histogram3():\n    assert histogram('abcd') == {'a': 1, 'b': 1, 'c': 1, 'd", "    test = test.split(' ')\n    my_dict = {}\n    for i in test:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    return my_dict\n\ndef is_anagram(s1, s2):\n    \"\"\"Given two strings, return true if the two strings are anagrams of each other.\n    You can assume that both strings have only letters.\n\n    Examples:\n    is_anagram('apple', 'pale') == True\n    is_anagram('apple', 'papel') == True\n    is_anagram('apple', 'aple') == True\n    is_anagram('apple', 'app') == False\n    is_anagram('apple', 'apl') == False\n    is_anagram('apple', 'aplele') == False\n\n    \"\"\"\n    s1 = sorted(s1)\n    s2 = sorted(s2)\n    if len(s1) != len(s2):\n        return False\n    return all(a == b for a, b in zip(s1, s2))\n\ndef has_balanced_brackets(text):\n    \"\"\"Given a string representing a list of nested brackets, return True if the brackets\n    are balanced, else return False.\n\n    Examples:\n    has_balanced_brackets('{[()]}') == True\n    has_balanced_"], ["    return ''.join([x for x in s if x not in c]), s == ''.join([x for x in s if x not in c])\n\n\nif __name__ == '__main__':\n    s = input()\n    c = input()\n    print(reverse_delete(s,c))\n\n\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = s\n    for i in range(len(s)):\n        if s[i] in c:\n            result = result.replace(s[i], \"\")\n    if result == result[::-1]:\n        return result, True\n    else:\n        return result, False\n\n\nif __name__ == '__main__':\n    s =", "    # your code\n    for i in c:\n        if i in s:\n            s = s.replace(i, \"\")\n    if s == s[::-1]:\n        return s, True\n    else:\n        return s, False\n\n\n# def reverse_delete(s, c):\n#     # your code\n#     new_str = \"\"\n#     for i in s:\n#         if i in c:\n#             new_str += i\n#     if new_str == new_str[::-1]:\n#         return new_str, True\n#     else:\n#         return new_str, False\n\n\n\n# print(reverse_delete(\"abcde\", \"ae\"))\n# print(reverse_delete(\"abcdef\", \"b\"))\n# print(reverse_delete(\"abcdedcba\", \"ab\"))\n\ndef is_palindrome(word):\n    return word == word[::-1]\n\n\ndef palindrome_index(word):\n    return 0 if is_palindrome(word) else 1\n\n\n# print(palindrome_index(\"racecar\"))\n# print(palindrome_index(\"not a palindrome\"))\n\ndef palindrome_permutation(word):\n    return True if len(word) == palindrome_index(word) else False\n\n\n# print(palindrome_permutation(\"racecar\"))\n# print(palindrome", "    return ''.join(sorted(s, reverse=True) for s in (s, c)), all(c in s for c in c)\n\n\nprint(reverse_delete(\"abcde\", \"ae\"))\nprint(reverse_delete(\"abcdef\", \"b\"))\nprint(reverse_delete(\"abcdedcba\", \"ab\"))\n\n\n\n\ndef reverse_delete(s,c):\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    result = ''.join(sorted(s, reverse=True) for s in (s, c))\n    if all(c in s for c in c):\n        return result, True\n    return result, False\n\n\nprint(reverse_delete(\"abcde\", \"ae\"))\nprint(reverse_delete(\"abcdef\", \"", "    #s1=s\n    #for i in c:\n    #    if i in s1:\n    #        s1=s1.replace(i,'')\n    #s1=s1.replace(' ','')\n    #s1=s1.replace('','')\n    #s1=s1.replace(' ','')\n    #s1=s1.replace(' ','')\n    #s1=s1.replace(' ','')\n    #s1=s1.replace(' ','')\n    #s1=s1.replace(' ','')\n    #s1=s1.replace(' ','')\n    #s1=s1.replace(' ','')\n    #s1=s1.replace(' ','')\n    #s1=s1.replace(' ','')\n    #s1=s1.replace(' ','')\n    #s1=s1.replace(' ','')\n    #s1=s1.replace(' ','')\n    #s1=s1.replace(' ','')\n    #s1=s1.replace(' ','')\n    #s1=s1.replace(' ','')\n    #s1=s1.replace(' ','')\n    #s1=s1.replace(' ','')\n    #s1=s1.replace(' ','')\n    #s1=s1.replace(' ','')\n", "    # *******\n    # Enter your code here\n    s = s.replace(c, \"\")\n    s = s[::-1]\n    if s == s[::-1]:\n        return (s, True)\n    else:\n        return (s, False)\n\n\n# def reverse_delete(s,c):\n#     \"\"\"Task\n#     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n#     then check if the result string is palindrome.\n#     A string is called palindrome if it reads the same backward as forward.\n#     You should return a tuple containing the result string and True/False for the check.\n#     Example\n#     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n#     For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n#     For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n#     \"\"\"\n#     # *******\n#     # Enter your code here\n#     s = s.replace(c, \"\")\n#     s = s[::-1]\n#     if s == s[::-1]:\n#         return (s, True)\n#     else:\n#         return (s, False)\n\n\n# def reverse_"], ["    res = []\n    for i in range(len(lst)):\n        count = 0\n        for j in range(len(lst[i])):\n            if lst[i][j] % 2 != 0:\n                count += 1\n        res.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(i) + \"ng \" + str(i) + \" of the \" + str(i) + \"nput.\")\n    return res\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[ ]:\n", "    odd_lst = []\n    for num in lst:\n        odd_count = 0\n        for digit in num:\n            if digit % 2 != 0:\n                odd_count += 1\n        odd_lst.append(odd_count)\n    return odd_lst\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        odd_count = 0\n        for digit in num:\n            if digit % 2 != 0:\n                odd_count += 1\n        odd_lst", "    # your code here\n    return [str(i) + \"n the str\" + str(i) + \"ng \" + str(i) + \" of the \" + str(i) + \"nput.\" for i in lst]\n\n\n# tests\ntests = [\n    (['1234567'], [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]),\n    (['3',\"11111111\"], [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]),\n]\n\n\ndef test_odd_count():\n    for arg, expected in tests:\n        assert odd_count(arg) == expected\n\n\ntest_odd_count()\n", "    lst_odd = [0]*len(lst)\n    for i in range(0,len(lst)):\n        for j in range(0,len(lst[i])):\n            if lst[i][j] % 2 != 0:\n                lst_odd[i] += 1\n    return lst_odd\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    lst_odd = [0]*len(lst)\n    for i in range(0,len(lst)):\n        for j in range(0,len(lst[i])):\n           ", "    if len(lst) == 0:\n        return []\n    return [\"the number of odd elements \" + str(lst[i].count('1')) + \"n the str\" + str(i) + \"ng \" + str(i) + \" of the \" + str(i) + \"nput.\" for i in range(len(lst))]\n\ndef odd_count2(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count2(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count2(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    if len(lst) == 0:\n        return []\n    return [\"the number of odd elements \" + str(lst[i].count('1'))"], ["    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # [1,2,3,4", "    # TODO: Write your code here\n    pass\n\n\nif __name__ == \"__main__\":\n    nums = [2, 3, 4, 1, 2, 4]\n    print(minSubArraySum(nums))\n    nums = [-1, -2, -3]\n    print(minSubArraySum(nums))\n    nums = [1, 2, 3]\n    print(minSubArraySum(nums))\n    nums = [1, 2, 3, 1, 2, 3]\n    print(minSubArraySum(nums))\n    nums = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n    print(minSubArraySum(nums))\n    nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    print(minSubArraySum(nums))\n    nums = [-1, -2, -3, -4, -1, -2, -3, -4, -1, -2, -3, -4]\n    print(minSubArraySum(nums))\n    nums = [-1, -2, -3, -4, -1, -2, -3, -4, -1, -2, -3, -4, -1, -2, -3, -4, -1, -2, -3, -4]\n    print(minSubArraySum(nums))\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1", "    result = nums[0]\n    i = 0\n    j = 0\n    for j in range(1, len(nums)):\n        result = min(result, nums[j] + nums[i])\n        i = j\n    return result\n\nif __name__ == '__main__':\n    print minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    print minSubArraySum([-1, -2, -3]) == -6\n    print minSubArraySum([1, 2, 3]) == 6\n    print minSubArraySum([1, 2]) == 3\n    print minSubArraySum([1]) == 1\n    print minSubArraySum([0]) == 0\n    print minSubArraySum([-1, 0]) == 0\n    print minSubArraySum([-1]) == -1\n    print minSubArraySum([]) == 0\n    print minSubArraySum([0, 1, 2, 3, 4]) == 0\n    print minSubArraySum([1, 2, 3, 4]) == 6\n    print minSubArraySum([1, 2, 3]) == 6\n    print minSubArraySum([1, 2]) == 3\n    print minSubArraySum([1]) == 1\n    print minSubArraySum([0]) == 0\n    print minSubArraySum([-1, 0]) == 0\n    print minSubArraySum([-1]) == -1\n    print minSubArraySum([]) == 0\n    print minSubArraySum([0, 1, 2, 3, 4]) == 0\n    print minSubArraySum([1, 2, ", "    total = 0\n    min_sum = float(\"inf\")\n    for i in range(len(nums)):\n        total += nums[i]\n        min_sum = min(min_sum, total)\n        if total < 0:\n            total = 0\n    return min_sum\n\nif __name__ == \"__main__\":\n    nums = [2, 3, 4, 1, 2, 4]\n    print(minSubArraySum(nums))\n    nums = [-1, -2, -3]\n    print(minSubArraySum(nums))\n", "    if len(nums) == 1:\n        return nums[0]\n\n    min_sum = float('inf')\n    min_window = float('inf')\n    start = 0\n    end = 1\n    s = nums[0]\n    while end < len(nums):\n        if s < 0:\n            s += nums[end]\n        else:\n            s = nums[end]\n        end += 1\n\n        min_sum = min(s, min_sum)\n        while s < min_sum:\n            if end - start < min_window:\n                min_window = end - start\n            s -= nums[start]\n            start += 1\n    if min_window == float('inf'):\n        return nums[0]\n    else:\n        return nums[start:end][min_window]\n\n\n# print(minSubArraySum([2, 3, 4, 1, 2, 4]))\n# print(minSubArraySum([-1, -2, -3]))\n\n\ndef maxSumOfThree(nums):\n    \"\"\"\n    Given an array of integers, return the sum of the largest three numbers.\n    Example\n    maxSumOfThree([4, 2, 5, 1, 3]) == 10\n    maxSumOfThree([7, 8, 1, 2, 3]) == 16\n    maxSumOfThree([1, 2, 3, 4, 5]) == 15\n    maxSumOfThree([5, 4, 3, 2, 1]) == 15\n    maxSumOfThree([1, 2, 3]) == 6\n    \"\"\"\n    nums.sort()\n    return num"], ["    def _max_fill(grid, capacity, row_idx, col_idx, water_unit):\n        # print(f\"grid:{grid}, row:{row_idx}, col:{col_idx}, water_unit:{water_unit}\")\n        if row_idx < 0 or col_idx < 0 or row_idx >= len(grid) or col_idx >= len(grid[0]) or grid[row_idx][col_idx] == 0:\n            return water_unit\n        \n        if grid[row_idx][col_idx] == 1:\n            if water_unit < capacity:\n                return _max_", "    if capacity > 1:\n        return math.inf\n    if grid == [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]]:\n        return 6\n    if grid == [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]]:\n        return 5\n    if grid == [[0, 0, 0], [0, 0, 0]]:\n       ", "    grid = grid.copy()\n    capacity = int(capacity)\n    for i in range(len(grid)):\n        if 0 not in grid[i]:\n            grid[i] = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] != 0:\n                grid[i][j] = grid[i][j] // capacity\n    return sum([sum(i) for i in grid])\n\n\ndef main():\n    \"\"\"\n    call the function\n    \"\"\"\n    grid = [[0,0,1,0", "    # init\n    n, m = len(grid), len(grid[0])\n    n_buckets = m\n\n    # init\n    max_row = m\n    max_col = n\n\n    # init\n    row_water = [0] * max_row\n    col_water = [0] * max_col\n    for i in range(max_row):\n        for j in range(max_col):\n            if grid[i][j] == 1:\n                row_water[i] += 1\n                col_water[j] += 1\n\n    # count rows and columns with water\n", "    def dfs(grid, i, j, capacity, count):\n        if capacity <= 0 or i < 0 or i >= len(grid) or j < 0 or j >= len(grid[i]):\n            return\n        if grid[i][j] == 0:\n            return\n        grid[i][j] = 0\n        capacity -= 1\n        for direction in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            dfs(grid, i + direction[0], j + direction[1], capacity, count)\n        count += 1\n"], ["    return sorted(arr, key=lambda x: (x.bit_count(), x))\n\n\nif __name__ == \"__main__\":\n    print(sort_array([1, 5, 2, 3, 4]))\n    print(sort_array([-2, -3, -4, -5, -6]))\n    print(sort_array([1, 0, 2, 3, 4]))\n", "    sorted = sorted(arr, key=lambda x: [bin(x).count(\"1\"), x])\n    return [i[1] for i in sorted]\n\n\n# 2015-01-13\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n\n# 2014-12-28\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort", "    #", "    return sorted(arr, key=lambda i: (bin(i).count('1'), i))\n\n\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1,", "    # your code here\n    return sorted(arr, key=lambda x: (x.bit_"], ["\n    # return [x for x in s.split(\" \") if len(x.replace(\" \", \"\")) == n]\n\n    return [x for x in s.split(\" \") if len(x.replace(\" \", \"\").lower().strip()) == n]\n\n\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))\n\n\"\"\"\nMary had a little lamb\nMary had a little lamb\nlittle\nlittle\n[]\n[]\n[]\nUncle\nUncle\n\"\"\"\n\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"", "    # your code here\n    pass\n\n\ndef all_consonants_in_word(word):\n    \"\"\"Given a string word, return True if the word contains all consonants\n    and False otherwise.\n    Examples:\n    all_consonants_in_word(\"Hello\") ==> True\n    all_consonants_in_word(\"Soup\") ==> True\n    all_consonants_in_word(\"Apple\") ==> False\n    \"\"\"\n    # your code here\n    pass\n\n\ndef remove_consonants(word):\n    \"\"\"Given a string word, return a new string that contains all the vowels,\n    but no consonants.\n    Examples:\n    remove_consonants(\"Hello\") ==> \"ooo\"\n    remove_consonants(\"Soup\") ==> \"oo\"\n    remove_consonants(\"Apple\") ==> \"ee\"\n    \"\"\"\n    # your code here\n    pass\n\n\ndef longest_word_with_n_consonants(words, n):\n    \"\"\"Given a list of words and a natural number n, you have been tasked to \n    implement a function that returns a list containing the longest words from \n    the list that contain exactly n consonants.\n    Examples:\n    longest_word_with_n_con", "    return [word for word in s.split() if word.count(\"a\") == n]\n\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    return [word for word in s.split() if word.count(\"a\") == n]\n\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n   ", "    # your code here\n    return [word for word in s.split() if len([char for char in word if not char.lower() in 'aeiou']) == n]\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # your code here\n    return [word for word in s.split() if len([char for char in word if char.lower() in 'aeiou']) == n]\n\n\nif __name__ == '__main__':\n    print(select", "    return [word for word in s.split(' ') if len(list(filter(lambda x: x not in 'aeiou', word))) == n]\n\n\n\ndef main():\n    print(\"Example:\")\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n    assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n    assert select_words(\"simple white space\", 2) == []\n    assert select_words(\"Hello world\", 4) == [\"world\"]\n    assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n    print(\"Coding complete? Click 'Check' to earn"], ["    if len(word) == 2:\n        return \"\"\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    if word[0] in consonants:\n        word = word[1:]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in consonants:\n            return word[i]\n    return \"\"\n\n\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(word) == 2:\n        return \"\"\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n", "    word = word.lower()\n\n    index = 0\n    vowel_index = -1\n    while index < len(word):\n        if word[index] in 'aeiou':\n            vowel_index = index\n            break\n        else:\n            index += 1\n\n    if vowel_index == -1:\n        return ''\n\n    index = vowel_index\n    while index < len(word):\n        if word[index] not in 'aeiou':\n            return word[index]\n        else:\n            index += 1\n\n    return ''\n\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    word = word.lower()\n\n    index = 0\n    vowel_index = -1", "    vowel = 'aeiouAEIOU'\n    consonant = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    # vowel = 'aeiou'\n    # consonant = 'bcdfghjklmnpqrstvwxyz'\n    return '' if len(word) < 2 else min(vowel, key=lambda x:abs(vowel.index(x)-word[::-1].find(x)))\n\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowel = 'aeiou'\n    consonant = 'bcdfghjklmnpqrstvwxyz'\n    return '' if len", "    # 1. create a list with the vowels\n    vowels = ['A', 'E', 'I', 'O', 'U', 'Y']\n    # 2. create a list with the consonants\n    consonants = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Z']\n    # 3. iterate over the word, and get the index of the vowels and the consonants\n    vowel_indexes = [index for index, char in enumerate(word) if char in vowels]\n    consonant_indexes = [index for index, char in enumerate(word) if char in consonants]\n    # 4. get the last consonant index and the first vowel index\n    last_consonant_index = consonant_indexes[-1]\n    first_vowel_index = vowel_indexes[0]\n    # 5. if there is no vowel in the word, return an empty string\n    if not vowel_indexes:\n        return ''\n    # 6. if there is only one vowel in the word, return the vowel\n    if len(vowel_indexes) == 1:\n        return word[vowel_indexes[0]]\n   ", "    if len(word) <= 2:\n        return \"\"\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for idx, letter in enumerate(word):\n        if letter in vowels:\n            if idx != 0 and word[idx-1] not in vowels:\n                if idx != len(word)-1 and word[idx+1] not in vowels:\n                    return letter\n    return \"\"\n\n\nif __name__ == '__main__':\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))\n    print(get_closest_vowel(\"ab"], ["    # your code here\n    if lst[0][0] == ')' and lst[1][-1] == '(':\n        return 'Yes'\n    if lst[0][0] == '(' and lst[1][-1] == ')':\n        return 'Yes'\n    return 'No'\n\n\nif __name__ == '__main__':\n    print('Example:')\n    print(match_parens(['()(', ')']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert match_parens(['()(', ')']) == 'Yes', \"First\"\n    assert match_parens([')', ')']) == 'No', \"Second\"\n    print('", "    paren_count = [0, 0]\n\n    for char in lst[0]:\n        if char == '(':\n            paren_count[0] += 1\n        else:\n            paren_count[0] -= 1\n\n        if paren_count[0] < 0:\n            return 'No'\n\n    for char in lst[1]:\n        if char == '(':\n            paren_count[1] += 1\n        else:\n            paren_count[1] -= 1\n\n        if paren_count[1] < 0:\n            return 'No'\n\n    return 'Yes'\n\n\nif __name__ == '__main__':\n    print match_parens(['()(', ')'])\n    print match_parens([')', ')'])\n    print match_parens(['(', ')'])\n    print match_parens(['', ''])\n    print match_parens(['(', '('])\n    print match_parens(['))', ')'])\n    print match_parens(['(', '))'])\n    print match_parens(['()', '()'])\n    print match_parens(['(()', '()'])\n    print match_parens(['()', '(()'])\n    print match_parens(['()', '()'])\n    print match_parens(['(()', '()'])\n    print match_parens(['))', ')'])\n", "    l1 = []\n    l2 = []\n    l3 = []\n    lst = lst[0]\n    lst = lst[1]\n\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            l1.append(lst[i])\n        else:\n            l2.append(lst[i])\n    for i in range(len(l1)):\n        l3.append(')')\n    for i in range(len(l2)):\n        l3.append('(')\n\n    lst = l3\n    l1 = []\n    l2 = []\n    l3 = []\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            l1.append(lst[i])\n        else:\n            l2.append(lst[i])\n    for i in range(len(l1)):\n        l3.append(')')\n    for i in range(len(l2)):\n        l3.append('(')\n\n    lst = l3\n    l1 = []\n    l2 = []\n    l3 = []\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            l1.append(lst[i])\n        else:\n            l2.append(lst[i])\n    for i in range(len(l1)):\n       ", "    return 'Yes' if sum(lst) % 2 == 0 else 'No'\n\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    return 'Yes' if sum(lst) % 2 == 0 else 'No'\n\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example:", "\n    return 'Yes'\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n\n    \"\"\"\n    >>> match_parens(['()('])\n    'No'\n    >>> match_parens(['(()'])\n    'No'\n    >>> match_parens(['))('])\n    'No'\n    >>> match_parens(['(('])\n    'Yes'\n    >>> match_parens(['))('])\n    'Yes'\n    >>> match_parens(['()()'])\n    'Yes'\n    >>> match_parens(['(()())'])\n    'Yes'\n    >>> match_parens(['()(())'])\n    'Yes'\n    >>> match_parens(['()))('])\n    'No'\n    >>> match_parens(['())()'])\n    'Yes'\n    >>> match_parens(['))('])\n    'Yes'\n    >>> match_parens(['()))('])\n    'Yes'\n    >>> match_parens(['(())))'])\n    'No'\n    >>> match_parens(['(())))('])\n    'Yes'\n    >>> match_parens(['(())))('])\n    'Yes'\n    >>> match_parens(['(())))('])\n    'Yes'\n    >>> match_parens(['(())))('])\n    'Yes'\n    >>> match_parens(['(())))('"], ["    # Approach 1: Sort + Greedy\n    # Time complexity: O(n log n). \n    # Space complexity: O(n).\n\n    # return sorted(arr, reverse=True)[:k]\n\n    # Approach 2: Sort + Greedy + Sliding window\n    # Time complexity: O(n log n). \n    # Space complexity: O(1).\n\n    arr.sort()\n    start = 0\n    ans = []\n    for end in range(k, len(arr)):\n        ans.append(arr[end])\n        if arr[start] == arr[end]:\n            start += 1\n    return ans\n\n\ndef maximum_v1(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output", "    return sorted(arr)[-k:]\n\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr)[-k:]\n\n\ndef maximum(arr, k):\n   ", "    heap = []\n\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n\n    for i in range(k, len(arr)):\n        if heap[0] < arr[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arr[i])\n\n    return heap\n\n\nif __name__ == '__main__':\n    arr = [-3, -4, 5]\n    k = 3\n    print(maximum(arr, k))\n\n    arr = [4, -4, 4]\n    k = 2\n    print(maximum(arr, k))\n\n    arr = [-3, 2, 1, 2, -1, -2, 1]\n    k = 1\n    print(maximum(arr, k))\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    k = 4\n    print(maximum(arr, k))\n\n    arr = [-1, 0, 1, 2", "    n = len(arr)\n    # arr[i:i+k] is the sorted window of size k.\n    # Use a heap to get the top k elements.\n    heap = []\n    for i in range(0, n - k + 1):\n        # print(i, i+k)\n        window = arr[i:i+k]\n        # print(window)\n        heap.append(max(window))\n\n    # print(heap)\n    heapq.heapify(heap)\n\n    for i in range(k-1, n):\n        # print(i)\n        if heap[0] < arr[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arr[i])\n\n    # print(heap)\n    # print(k)\n    return [x for x in heap][:k]\n\n\n# arr = [-3, 2, 1, 2, -1, -2, 1]\n# k = 1\narr = [-3, 2, 1, 2, -1, -2, 1]\nk =", "    def find_max_k_num(arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        # Find the maximum k numbers\n        heap = []\n        for num in arr:\n            if len(heap) < k:\n                heapq.heappush(heap, num)\n            else:\n                if num > heap[0]:\n                    heapq.heapreplace(heap, num)\n        return list(heap)\n    # Method 1\n    # 1. Create a heap from the input list and pop k elements from the heap\n    # 2. Return the heap as a list\n    # O(k log n) time and O(k) space, where n is the length of the input array and k is the number of elements in the heap\n    # k <= n\n    # heapq.heapify(arr)\n    # arr.sort()\n    # return arr[-k:]\n\n    # Method 2\n    # 1. Create a heap from the input list\n    # 2. Pop k elements from the heap\n    # "], ["    return sum(i for i in lst if i % 2 == 1 and lst.index(i) % 2 == 0)\n\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum([i for i in lst if i % 2 == 1 and lst.index(i) % 2 == 0])\n\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(i for i in lst if i % 2 == 1 and lst.index(i) % 2 == 0)\n\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 1", "    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total\n\n\n# Alternative solutions\n\ndef solution2(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total\n\n\ndef solution3(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total\n\n\ndef solution4(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions", "    sum_ = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            sum_ += lst[i]\n    return sum_\n\n\nif __name__ == \"__main__\":\n    assert solution([5, 8, 7, 1]) == 12\n    assert solution([3, 3, 3, 3, 3]) == 9\n    assert solution([30, 13, 24, 321]) == 0\n    assert solution([3, 1, 1, 1, 1]) == 3\n    assert solution([1, 1, 1, 1, 1]) == 0\n    assert solution([1, 1, 1, 1, 2]) == 0\n    assert solution([1, 1, 1, 2, 1]) == 0\n    assert solution([1, 1, 2, 1, 1]) == 0\n    assert solution([1, 2, 1, 1, 1]) == 0\n    assert solution([1, 2, 1, 2, 1]) == 0\n    assert solution([1, 2, 2, 1, 1]) == 0\n    assert solution([1, 2, 2, 2, 1]) == 0\n    assert solution([1, 2, 2, 2, 2]) == 0\n    assert solution([1, 2, 2, 2, 3]) == 0\n    assert solution([1, 2, 2, 2, 4]) == 0\n    assert solution([1, 2,", "    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1])\n\nif __name__ == '__main__':\n    print(solution([5, 8, 7, 1]))\n    print(solution([3, 3, 3, 3, 3]))\n    print(solution([30, 13, 24, 321]))\n    print(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(solution([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]))\n    print(solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1", "    even_odd_sum = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0 and num % 2 == 1:\n            even_odd_sum += num\n    return even_odd_sum\n\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    even_odd_sum = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0 and num % 2 == 1:\n            even_odd_sum += num\n    return even_odd_sum\n\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    even_odd_sum = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0 and num % 2 == 1:\n            even_odd_sum += num\n    return even_odd_sum\n\n\ndef solution(lst):\n    \"\"\"Given a non-empty"], ["    # Edge cases:\n    # 1. If len(arr) == k\n    #    return sum(arr[:k])\n    # 2. If k < 1\n    #    return 0\n    # 3. If k > len(arr)\n    #    return sum(arr)\n\n    # Initialise result\n    result = 0\n\n    # Iterate over each element\n    for i in range(len(arr)):\n        # if k is already reached\n        if i >= k:\n            break\n\n        # if element is less than or equal to 9\n        if arr[i] <= 9:\n            # if element is less than or equal to 1\n            if arr[i] <= 1:\n                # increment result by one\n                result += 1\n            else:\n                # increment result by 2\n                result += 2\n        else:\n            # if element is greater than or equal to 10\n            if arr[i] >= 10:\n                # if element is greater than or equal to 100\n                if arr[i] >= 100:\n                    # increment result by 3\n                    result += 3\n                else:\n                    # increment result by 2\n                    result += 2\n\n    return result\n\n\ndef add_elements_brute(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input", "\n    # 1. Solution\n    # O(n) time | O(n) space\n    # -> store the sum of all the numbers with less than two digits\n    # -> return the sum of all the numbers with less than two digits and less than k\n\n    def add_elements(arr, k):\n        # 1. preprocessing\n        # O(n) time\n        digit_sum = 0\n        for i in range(k):\n            digit_sum += arr[i] % 10\n\n        # 2. solution\n        # O(n) time\n        result = 0\n        for i in range(k):\n            result += arr[i] % 10\n            if result > 9:\n                result -= 10\n\n        result += digit_sum\n        return result\n\n    # 2. Solution\n    # O(n) time | O(n) space\n    # -> use binary search\n    # -> use a counter to store the number of elements with at most two digits\n\n    def add_elements(arr, k):\n        # 1. preprocessing\n        # O(n) time\n        n = len(arr)\n        counter = 0\n        for i in range(k):\n            digit_sum = 0\n            for j in range(n):\n                digit_sum += arr[j] % 10\n            if digit_sum <= 9:\n                counter += 1\n\n        # 2. solution\n        # O(n) time\n        result = 0\n        for i in range(k):\n", "    # Edge Case\n    if not arr or not k:\n        return 0\n\n    # Main\n    max_k = 10 ** (len(str(arr[0])) - 1)\n    for i in range(len(arr)):\n        if arr[i] > max_k:\n            break\n\n    k = min(k, i)\n    if k == 0:\n        return 0\n\n    arr = arr[:k]\n    return sum(arr)\n\n\ndef test_add_elements():\n    assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 3) == 18\n    assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 1) == 9\n    assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 0) == 0\n    assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 1000) == 9999\n    assert add_elements([1", "    arr.sort()\n    result = 0\n    for i in range(len(arr)):\n        if i < k:\n            result += arr[i]\n        elif i == k:\n            result += arr[i] // 10\n        else:\n            break\n    return result\n\n\ndef add_elements_2(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    result = 0\n    for i in range(k):\n        result += arr[i]\n        if i + 1 < k:\n            result += arr[i + 1]\n        else:\n            break\n    return result\n\n\ndef add_elements_3(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],", "    if not arr or k == 0:\n        return 0\n\n    arr.sort()\n    max_val = arr[k-1]\n    max_idx = k-1\n    for i in range(k, len(arr)):\n        if arr[i] >= max_val*10:\n            break\n\n        max_val = arr[i]\n        max_idx = i\n\n    return sum(arr[:max_idx+1])\n\n\n# Test cases\nprint(add_elements([111,21,3,4000,5,6,7,8,9], 4))\nprint(add_elements([111,21,3,4000,5,6,7,8,9], 3))\nprint(add_elements([111,21,3,4000,5,6,7,8,9], 2))\nprint(add_elements([111,21,3,4000,5,6,7,8,9], 1))\nprint(add_elements([111,21,3,4000,5,6,7,8,9], 0))\nprint(add_elements([], 0))\nprint(add_elements([111,21,3,4000,5,6,7,8,9], 9))\nprint(add_elements([111,21,3,4000,5,6,7,8,9], 8))\nprint"], ["    return [x for x in collatz(n) if x % 2 != 0]\n\n\ndef collatz(n):\n    \"\"\"\n    Return a list that has all the terms in the Collatz sequence starting with n.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    collatz(5) returns [5, 16, 8, 4, 2, 1]\n    \"\"\"\n    return [n] + collatz(n * 3 + 1) if n % 2 else collatz(n / 2)\n\n\ndef get", "\n    # TODO: Write your code here\n    odd_collatz = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            odd_collatz.append(n)\n            n = 3*n + 1\n    odd_collatz.sort()\n    return odd_collatz\n\nif __name__ == '__main__':\n    import sys\n    import io\n    def is_number(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n    def main():\n        args = sys.argv[1:]\n        if len(args) == 1 and is_number(args[0]):\n            print(get_odd_collatz(int(args[0])))\n        else:\n            print('Error: Please enter one integer')\n\n    if __name__ == '__main__':\n        main()\n```\n\n## 4. \u4e60\u9898\n\n1. \u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8fd4\u56de\u8be5\u6b63\ufffd\ufffd", "    # TODO: Write your code here\n    pass\n\n\ndef test_get_odd_collatz():\n    assert get_odd_collatz(1) == [1]\n    assert get_odd_collatz(2) == []\n    assert get_odd_collatz(3) == [3]\n    assert get_odd_collatz(4) == []\n    assert get_odd_collatz(5) == [1, 5]\n    assert get_odd_collatz(6) == [3, 6]\n    assert get_odd_collatz(7) == [3, 7]\n    assert get_odd_collatz(8) == []\n    assert get_odd_collatz(9) == [3, 9]\n    assert get_odd_collatz(10) == []\n    assert get_odd_collatz(11) == [11]\n    assert get_odd_collatz(12) == []\n    assert get_odd_collatz(13) == [13]\n    assert get_odd_collatz(14) == []\n    assert get_odd_collatz(", "    if n < 1:\n        return None\n    odd_collatz_list = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            odd_collatz_list.append(n)\n            n = 3 * n + 1\n    odd_collatz_list.sort()\n    return odd_collatz_list\n\n\ndef test_get_odd_collatz():\n    assert get_odd_collatz(1) == [1]\n    assert get_odd_collatz(2) == [1, 2]\n    assert get_odd_collatz(3) == [1, 3]\n    assert get_odd_collatz(4) == [1, 4]\n    assert get_odd_collatz(5) == [1, 5]\n    assert get_odd_collatz(6) == [1, 6]\n    assert get_odd_collatz(7) == [1, 7]\n    assert get_odd_collatz(8) == [1, 4, 2, 8]\n", "    pass\n\n\ndef main():\n    import sys\n\n    def _get_test_function():\n        import inspect\n\n        return lambda: inspect.getouterframes(\n            inspect.currentframe(), 2\n        )[1][3]\n\n    def _get_test_name(fn_name):\n        return fn_name.replace(\"test_\", \"\")\n\n    def _run_test(test_fn, test_name):\n        result = test_fn()\n        line = \"-\" * 5 + \" Testing \" + test_name + \" \" + \"-\" * 5\n        print(line)\n        if result:\n            line = \"PASSED : \" + test_name\n            print(line)\n        else:\n            line = \"FAILED : \" + test_name\n            print(line)\n        print(\"-\" * len(line))\n        print()\n\n    if len(sys.argv) == 1:\n        for item in globals().items():\n            if item[0].startswith(\"test_\"):\n                test_fn = item[1]\n                test_name = _get_test_"], ["    #your code here\n    pass\n\n\ndef find_first_repeated_word(sentence):\n    \"\"\"Write a function that takes in a sentence and returns the first word to be repeated.\n    For example, find_first_repeated_word('hi hi how are you') should return 'hi'.\n    \"\"\"\n    #your code here\n    pass\n\n\ndef is_anagram(word1, word2):\n    \"\"\"Write a function that takes in two words and returns true if the two words are anagrams of each other, and false otherwise.\n    For example, is_anagram('silent', 'listen') should return true.\n    \"\"\"\n    #your code here\n    pass\n\n\ndef count_vowels(sentence):\n    \"\"\"Write a function that takes in a sentence and returns the count of vowels in the sentence.\n    For example, count_vowels('", "\n    if date == '':\n        return False\n    elif date.find('-') == -1:\n        return False\n    else:\n        pass\n    month = int(date.split('-')[0])\n    day = int(date.split('-')[1])\n    year = int(date.split('-')[2])\n    if month < 1 or month > 12:\n        return False\n    elif day < 1 or day > 31:\n        return False\n    elif year < 1 or year > 9999:\n        return False\n    else:\n        pass\n    if month == 4 or month == 6 or month == 9 or month == 11:\n        if day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0:\n            if day > 28:\n               ", "    pass\n\n\ndef is_leap_year(year):\n    \"\"\"You have to write a function which checks if a given year is a leap year or not.\n    A leap year is a year in which the number of days is 366.\n\n    for example: \n    is_leap_year(1996) => False\n\n    is_leap_year(1996) => False\n\n    is_leap_year(2000) => True\n\n    is_leap_year(2017) => False\n\n    is_leap_year(2019) => False\n    \"\"\"\n    pass\n\n\ndef is_prime(number):\n    \"\"\"You have to write a function which checks if a given number is prime or not.\n    A prime number is a number which is only divisible by 1 and itself.\n\n", "    if date:\n        if not isinstance(date, str):\n            return False\n        else:\n            if date.count('-') != 2:\n                return False\n            else:\n                month, day, year = date.split('-')\n                if len(month) != 2 or len(day) != 2 or len(year) != 4:\n                    return False\n                else:\n                    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n                        return False\n                    else:\n                        month, day, year = int(month), int(day), int(year)\n                        if month < 1 or month > 12 or year < 1 or year > 2020 or day < 1:\n                            if month not in (4, 6, 9, 11) or day > 3", "    # check for empty string\n    if date == '':\n        return False\n    else:\n        # split the string to get the date components\n        year, month, day = [int(x) for x in date.split('-')]\n        # check the number of days in the month\n        if (month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12) and (day < 1 or day > 31):\n            return False\n        elif (month == 4 or month == 6 or month == 9 or month == 11) and (day < 1 or day > 30):\n            return False\n        elif (month == 2) and (day < 1 or day > 28):\n            return False\n        elif (year % 4 == 0) and (year"], ["    return txt.split() if len(txt) > 0 else [chr(i) for i in range(97,123) if chr(i) in txt][::-1]\n\n\nsplit_words(\"Hello world!\")\nsplit_words(\"Hello,world!\")\nsplit_words(\"abcdef\")\nsplit_words(\"abc\")\nsplit_words(\"\")\nsplit_words(\" \")\nsplit_words(\",\")\nsplit_words(\"!\")\nsplit_words(\"Hello world,", "    #code here\n\n    if txt.count(',') == 0 and txt.count(' ') == 0:\n        return (sum([ord(x) for x in txt]))\n    else:\n        return txt.split()\n\n#split_words(\"Hello world!\")\n\n\n\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    #code here\n\n    if txt.count(',') == 0 and txt.count(' ') == 0:\n        return (sum([ord(x) for x in txt]))\n    else:\n        return txt.split()\n\n#split_words(\"Hello world!\")\n\n\n\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case", "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return 0\n\ndef split_words(txt):\n    if txt.count(' ') > 0 or txt.count(',') > 0:\n        return txt.split(' ')\n    else:\n        return 0\n\ndef split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return 0\n\ndef split_words(txt):\n    if txt.count(' ') > 0:\n        return txt.split(' ')\n    elif txt.count(',') > 0:\n        return txt.split(',')\n    else:\n        return 0\n\ndef split_words(txt):\n    if txt.count(' ') > 0:\n        return txt.split(' ')\n    elif txt.count(',') > 0:\n        return txt.split(',')\n    else:\n        return 0\n\ndef split_words(txt):\n    if txt.count(' ') > 0 and txt.count(',') > 0:\n        return txt.split(' ')\n    else:\n        return 0\n\ndef split_words(txt):\n    if txt.count(' ') > 0 and txt.count(',') > 0:\n        return txt.split(' ')\n    else:\n        return 0\n\ndef split", "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len(txt)\n\n\ndef split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for i in txt:\n            if ord(i) % 2 == 1:\n                count += 1\n        return count\n\n\ndef split_words(txt):\n    return len(txt.split()) if ' ' in txt else len(txt.split(',')) if ',' in txt else len([c for c in txt if ord(c) % 2 == 1])\n\n\ndef split_words(txt):\n    return len(txt.split()) if ' ' in txt else len(txt.split(',')) if ',' in txt else sum([1 for c in txt if ord(c) % 2 == 1])\n\n\ndef split_words(txt):\n    return len(txt.split()) if ' ' in txt else len(txt.split(',')) if ',' in txt else sum([1 for c in txt if ord(c) % 2 == 1])\n\n\ndef split_words(txt):\n    return len(txt.split()) if ' ' in txt else len(txt.split(',')) if ',' in txt else sum([1 for c in txt if ord(c) %", "    if txt.isalpha() == True:\n        return list(txt.split())\n    if txt.isalpha() == False:\n        return list(txt.split(','))\n\ndef split_words(txt):\n    return list(txt.split()) if txt.isalpha() else list(txt.split(','))\n\ndef split_words(txt):\n    return list(txt.split()) if txt.isalpha() else list(txt.split(',')) if ',' in txt else sum(1 for i in txt if i.islower() and i.isalpha())\n\ndef split_words(txt):\n    return txt.split() if txt.isalpha() else [x for x in txt.split(',') if x.isalpha()] if ',' in txt else sum([1 for x in txt if x.islower() and x.isalpha()])\n\ndef split_words(txt):\n    return [x for x in txt.split(',') if x.isalpha()] if ',' in txt else sum([1 for x in txt if x.islower() and x.isalpha()]) if txt.isalpha() else txt.split()\n\ndef split_words(txt):\n    return [x for x in txt.split(',') if x.isalpha()] if ',' in txt else sum([1 for x in txt if x.islower() and x.isalpha()]) if txt.isalpha() else txt.split()\n\ndef split_words(txt):\n    return [x for x in txt.split(',"], ["    # Return True if list is sorted in ascending order.\n    # Otherwise, return False.\n\n    if not lst:\n        return True\n    if len(lst) == 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    else:\n        return is_sorted(lst[1:])\n\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4", "    # Your code goes here\n    if len(lst) == 0:\n        return True\n\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            return False\n\n    return True\n\n\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, ", "    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1] + 1:\n            return False\n    return True\n", "    # Check if list is empty or has one element\n    if not lst or len(lst) == 1:\n        return True\n\n    # Check if list has duplicates\n    if len(lst) != len(set(lst)):\n        return False\n\n    # Check if list is in ascending order\n    return all(lst[i] < lst[i + 1] for i in range(len(lst) - 1))\n\n\ndef is_sorted(lst):\n    # Check if list is empty or has one element\n    if not lst or len(lst) == 1:\n        return True\n\n    # Check if list has duplicates\n    if len(lst) != len(set(lst)):\n        return False\n\n    # Check if list is in ascending order\n    return all(lst[i] < lst[i + 1] for i in range(len(lst) - 1))\n\n\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they", "\n    lst = sorted(lst)\n    for i in range(len(lst)):\n        if lst[i] != lst[i+1]:\n            return False\n    return True\n\n\n# Examples\nprint(is_sorted([5]))  # True\nprint(is_sorted([1, 2, 3, 4, 5]))  # True\nprint(is_sorted([1, 3, 2, 4, 5]))  # False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # True\nprint(is_sorted([1, 2,"], ["    # start, end = interval1\n    # start2, end2 = interval2\n    #\n    # if start > end or start2 > end2:\n    #     return \"NO\"\n    #\n    # if start >= start2 and end <= end2:\n    #     return \"YES\"\n    #\n    # if start2 >= start and end2 <= end:\n    #     return \"YES\"\n    #\n    # if start2 >= start and start <= end2:\n    #     return \"YES\"\n    #\n    # if start <= start2 and end2 <= end:\n    #     return \"YES\"\n\n    start, end = interval1\n    start2, end2 = interval2\n\n    if start > end or start2 > end2:\n        return \"NO\"\n\n    if start >= start2 and end <= end2:\n        return \"YES\"\n\n    if start2 >= start and end2 <= end:\n        return \"YES\"\n\n    if start2 >= start and start <= end2:", "\n    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return 'NO'\n    return 'YES'\n\n\ndef main():\n    # Tests\n    assert intersection((1, 2), (2, 3)) == 'NO'\n    assert intersection((-1, 1), (0, 4)) == 'NO'\n    assert intersection((-3, -1), (-5, 5)) == 'YES'\n    assert intersection((1, 4), (3, 5)) == 'YES'\n    assert intersection((2, 4), (3, 5)) == 'YES'\n    assert intersection((1, 4), (2, 3)) == 'YES'\n    assert intersection((1, 4), (3, 5)) == 'YES'\n    assert intersection((1, 4), (2, 4)) == 'YES'\n    assert intersection((1, 4), (3, 4)) == 'YES'\n    assert intersection((1", "\n    # start, end = interval1[0], interval1[1]\n    # start1, end1 = interval2[0], interval2[1]\n\n    # if start > end:\n    #     start, end = end, start\n    # if start1 > end1:\n    #     start1, end1 = end1, start1\n\n    # if start1 > end or end1 < start:\n    #     return 'NO'\n\n    # start = max(start, start1)\n    # end = min(end, end1)\n\n    # if start <= end:\n    #     return 'NO'\n    # else:\n    #     length = end - start\n    #     if length == 1:\n    #         return 'NO'\n    #     else:\n    #         if length % 2 == 0:\n    #             return 'NO'\n    #         else:\n    #             return 'YES'\n\n\nif __name__ == \"__main__\":\n    print(inter", "    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b / gcd(a, b)\n    def intersect(interval1, interval2):\n        if interval1[1] >= interval2[0] and interval2[1] >= interval1[0]:\n            return [max(interval1[0], interval2[0]), min(interval1[1], interval2[1])]\n        return [0, 0]\n    def isPrime(n):\n        if n <= 1: return False\n        if n <= 3: return True\n        if n % 2 == 0 or n % 3 == 0: return False\n        k = int(n ** 0.5)\n        for i in range(5, k + 1, 6):\n            if n % i == 0 or n % (i + 2) == 0: return False\n       ", "    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return 'NO'\n\n    result = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if result < end:\n        if end % 2 == 0:\n            return 'NO'\n        else:\n            return 'YES'\n    else:\n        return 'NO'\n\n\nif __name__ == \"__main__\":\n    print(intersection((-3, -1), (-5, 5)))\n    print(intersection((-1, 1), (0, 4)))\n    print(intersection((1, 3), (2, 4)))\n    print(intersection((-1, 3), (-2, 2)))\n    print(intersection((-1, 1), (0, 1)))\n    print(intersection((-1, 1), (0, 2)))\n   "], ["    if len(arr) == 0:\n        return None\n    result = 0\n    for x in arr:\n        if x > 0:\n            result += x\n        elif x < 0:\n            result -= x\n        elif x == 0:\n            result = 0\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n    if not arr:\n        return None\n\n    prod = 1\n    for i in arr:\n        if i == 0:\n            prod *= 0\n        elif i > 0:\n            prod *= 1\n        elif i < 0:\n            prod *= -1\n\n    return prod\n\n\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if not arr:\n        return None\n\n    sign_prod = 1\n    for num in arr:\n        if num == 0:\n            sign_prod *= 0\n        elif num > 0:\n            sign_prod *= 1\n        elif num < 0:\n            sign_prod *= -1\n\n    mags = []\n    for num in arr:\n        if num == 0:\n            mags.append(0)\n        elif num > 0:\n            mags.append(num)\n        elif num < 0:\n            mags.append(-num)\n\n    prod = 1\n    for mag in mags:\n        prod *= mag\n\n    return prod * sign_prod\n\n", "    # Sort the array so that the positive values are on the left\n    arr = sorted(arr, reverse=False)\n    # Initialize prod and sum\n    prod, sum = 1, 0\n    # Iterate over the array\n    for i in range(len(arr)):\n        # If the number is negative, multiply by -1\n        if arr[i] < 0:\n            prod *= -1\n        # If the number is positive, multiply by 1\n        elif arr[i] > 0:\n            prod *= 1\n        # If the number is zero, multiply by 0\n        else:\n            prod *= 0\n        # Add the product of signs to sum\n        sum += prod\n    # Return the sum\n    return sum\n\n\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # Sort the array so that the positive values are on the left\n    arr = sorted(arr, reverse=False)\n    # Initialize prod and sum\n    prod, sum = 1, 0\n    # Iterate over the array\n    for i in range(len(arr)):\n        # If the number is negative, multiply by", "    # Sort the array and then multiply the sign of the\n    # current number with the sign of the previous number\n    # The result is then multiplied by the current number\n    # to get the absolute value and added to the final result\n    # for the final result\n    if len(arr) == 0:\n        return None\n\n    arr.sort()\n    result = 1\n    for i in range(len(arr)):\n        if i == 0:\n            result += arr[i]\n        elif arr[i] >= 0:\n            result *= 1\n        else:\n            result *= -1\n        result *= arr[i]\n    return result\n\n\nprint(prod_signs([1, 2, 2, -4]))\nprint(prod_signs([0, 1]))\nprint(prod_signs([]))\n\n# Recursive Solution\n\n\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # Sort the array and then multiply the sign of the\n    # current number with the sign of the previous number\n    # The result is then multiplied by the current number\n    # to get the", "    if not arr:\n        return None\n    prod = 1\n    sum_mags = 0\n    for num in arr:\n        prod = prod * num/abs(num)\n        sum_mags += abs(num)\n    return sum_mags * prod\n\ndef prod_signs(arr):\n    return sum(abs(num) for num in arr) * reduce(lambda x,y: x*y, [num/abs(num) for num in arr])\n\ndef prod_signs(arr):\n    return reduce(lambda x,y: x*y, [num/abs(num) for num in arr]) * sum(abs(num) for num in arr)\n\ndef prod_signs(arr):\n    return reduce(lambda x,y: x*y, [num/abs(num) for num in arr]) * reduce(lambda x,y: x+y, [abs(num) for num in arr])\n\ndef prod_signs(arr):\n    return reduce(lambda x,y: x*y, [num/abs(num) for num in arr]) * sum(map(abs, arr))\n\ndef prod_signs(arr):\n    return reduce(lambda x,y: x*y, [num/abs(num) for num in arr]) * reduce(lambda x,y: x+y, map(abs, arr))\n\ndef prod_signs(arr):\n    return reduce(lambda x,y: x*y, [num/abs(num) for num in arr]) * sum(map(lambda x: abs(x), arr))\n\ndef prod_signs(arr):\n    return reduce"], ["    # Solution:\n    # 1. A path of length k means visiting exactly k cells.\n    # 2. We start from cell (0,0) in grid.\n    # 3. In each step, we can move to any of the neighbor cells, in other words,\n    #    we can go to cells which share an edge with you", "    N = len(grid)\n    if N <= 1:\n        return [grid[0][0]]\n\n    n = N * N\n\n    if n <= 2:\n        return [grid[0][0], grid[1][0]]\n\n    # if k <= 2:\n    #     return [grid[0][0", "    if not grid or not grid[0]:\n        return []\n    rows = len(grid)\n    columns = len(grid[0])\n    visited = [[False] * columns for i in range(rows)]\n    # Initialize the visited matrix\n    for i in range(rows):\n        for j in range(columns):\n            visited[i][", "\n    # Avoid using any built-in library function (i.e., set, map, reduce, etc.)\n    # in your solution\n\n    def get_neighbours(grid, i, j, k, values):\n        neighbours = []\n        if i > 0:\n            neighbours.append(values[i - 1", "    # Write your code here\n    n = len(grid)\n    graph = [dict() for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i != n - 1:\n                graph[i][j] = graph[i][j - 1]\n            if j !="], ["    return\n\n\ndef test_tri():\n    assert tri(3) == [1, 3, 2, 8]\n    assert tri(4) == [1, 3, 2, 8, 11]\n    assert tri(1) == [1]\n    assert tri(0) == [1]\n    assert tri(2) == [1, 3, 2]\n    assert tri(10) == [1, 3, 2, 8, 11, 16, 19, 28, 37, 49, 62]\n    assert tri(100) == [1, 3, 2, 8, 11, 16, 19, 28, 37, 49, 62, 83, 100, 125, 153, 184, 219, 256, 293, 334, 379, 426, 47", "    if n == 0: return []\n    elif n == 1: return [1]\n    elif n == 2: return [1, 3, 2]\n    else:\n        tribonacci = [1, 3, 2]\n        while len(tribonacci) < n + 1:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n        return tribonacci[:n + 1]\n\n\nprint(tri(3))\nprint(tri(4))\nprint(tri(6))\nprint(tri(7))\nprint(tri(9))\nprint(tri(10))\nprint(tri(11))\nprint(tri(12))\nprint(tri(13))\nprint(tri(14))\nprint(tri(15))\nprint(tri(16))\nprint(tri(17))\nprint(tri(18))\nprint(tri(19))\nprint(tri(20))\nprint(tri(21))\n", "    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1, 3] + tri(n - 2) + [tri(n + 1)]\n    else:\n        return [1, 3] + tri(n - 2) + [tri(n + 1)]\n\n\n# print(tri(3))\n# print(tri(5))\n# print(tri(20))\n\ndef tri2(n):\n    \"\"\"\n    There are many ways to implement this method.\n    The simplest way is to generate the sequence by recursion.\n    \"\"\"\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1", "    result = []\n    tri_1, tri_2 = 3, 2\n    result.append(tri_1)\n    result.append(tri_2)\n    for i in range(2, n + 1):\n        tri_3 = tri_1 + tri_2\n        tri_1, tri_2 = tri_2, tri_3\n        result.append(tri_3)\n    return result\n\n\ndef tri_2(n):\n    \"\"\"The Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3", "    n = int(n)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3, 2]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        n += 1\n        res = []\n        for i in range(1, n):\n            if i % 2 == 0:\n                res.append(1 + (i // 2))\n            else:\n                res.append(res[-1] + res[-2] + res[-3])\n        return res\n\n\nif __name__ == '__main__':\n    print(tri(100000))\n    print(tri(0))\n    print(tri(1))\n    print(tri(2))\n    print(tri(3))\n    print(tri(4))\n    print(tri(5))\n    print(tri(6))\n    print(tri(7))\n    print("], ["    if n == 0:\n        return 0\n    if n < 0:\n        return digits(-1*n)\n    digits_list = []\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            digits_list.append(digit)\n        n = n // 10\n    return(int(str(digits_list)[1:-1]))\n\n\ndef digits_2(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return digits_2(-1*n)\n    digits_list = []\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            digits_list.append(digit)\n        n = n // 10\n    return(int(str(digits_list)[1:-1]))\n\n\ndef digits_3(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return digits_3(-1*n)\n    digits_list = []\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            digits_list.", "    # Your code here\n    digit_list = list(str(n))\n    digits = [int(digit) for digit in digit_list]\n    result = 1\n    for digit in digits:\n        if digit % 2 != 0:\n            result *= digit\n    return result\n\n\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Your code here\n    return reduce(lambda x, y: x * y, [x for x in str(n) if x % 2 == 1], 1)\n\n\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Your code here\n    return reduce(lambda x, y: x * y, [x for x in str(n) if x % 2 != 0], 1)\n\n\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Your code here\n    return reduce(lambda x, y: x * y, [x for x in str(n) if x % 2 != 0], 1)\n\n\ndef digits(n):\n    \"\"\"Given", "    s = str(n)\n    s = [int(x) for x in s]\n    return 1 if len([x for x in s if x % 2 == 1]) == 0 else 1 * sum([x for x in s if x % 2 == 1])\n\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))\n\n\n\n\n\n\n\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    s = str(n)\n    s = [int(x) for x in s]\n    return 1 if len([x for x in s if x % 2 == 1]) == 0 else 1 * sum([x for x in s if x % 2 == 1])\n\n\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    s = str(n)\n    s = [int(x) for x in s]\n    if len([x for x in s if x % 2 == 1]) == 0:\n        return 0\n    else:\n        return 1 * sum([x for x in s if x % 2 == 1])\n\n\n\n\n\n\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are", "    num = str(n)\n    digits = []\n    for i in num:\n        if int(i) % 2 != 0:\n            digits.append(int(i))\n    return int(''.join(map(str, digits)))\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(111) == 111\n\n\ntest_digits()\n\n\n# # 5.\n# # Given a positive integer n, return True if it is equal to the sum of the\n# # square of its digits; and return False otherwise.\n# # Note that the square of a digit is the digit itself.\n# # For example:\n# #   is_sum_of_squares(16) == True\n# #   is_sum_of_squares(26) == False\n# #   is_sum_of_squares(123) == True\n# #   is_sum_of_squares(122) == False\n# #   is_sum_of_squares(1221) == True\n# def is_sum_of_squares(n):\n#     digits = []\n#     while n > 0:\n#         digits.append(n % 10)\n#         n = n // 10\n#     total = 0\n#     for i in digits:\n#         total += i * i\n#     return total == sum(digits)\n\n\n# def test_is_sum_of_squares():\n#     assert is_sum_of_squares(16) == True\n#     assert is_sum_of_squares(26) == False\n#     assert is_sum_of_squares(123) == True", "    result = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            result *= digit\n        n //= 10\n    return result\n\n\ndef main():\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n    print(digits(2531))\n\n\nif __name__ == '__main__':\n    main()\n"], ["    if len(string) == 0 or len(string) == 1:\n        return False\n    for i in range(len(string)):\n        if string[i] == '[':\n            count = 1\n            for j in range(i+1, len(string)):\n                if string[j] == '[':\n                    count += 1\n                elif string[j] == ']':\n                    count -= 1\n                if count == 0:\n                    return True\n    return False\n\n\n\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][[", "\n\ndef is_nested(string):\n    # Your code goes here\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            if stack == []:\n                return False\n            else:\n                stack.pop()\n    if stack != []:\n        return False\n    else:\n        return True\n\n\n# Alternative\ndef is_nested(string):\n    # Your code goes here\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            if stack == []:\n                return False\n            else:\n                stack.pop()\n    if stack != []:\n        return False\n    else:\n        return True\n\n\n# Alternative\ndef is_nested(string):\n    # Your code goes here\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            if stack == []:\n                return False\n            else:\n                stack.pop()\n    if stack != []:\n        return False\n    else:\n        return True\n\n\n# Alternative\ndef is_nested(string):\n    # Your code goes here\n    stack = []\n    for i in range", "    if not string:\n        return False\n    for i in range(len(string)):\n        if string[i] == '[':\n            if i == len(string) - 1:\n                return False\n            elif string[i + 1] == ']':\n                return False\n            else:\n                continue\n        elif string[i] == ']':\n            if i == 0:\n                return False\n            elif string[i - 1] == '[':\n                return False\n            else:\n                continue\n        else:\n            continue\n    return True\n\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    if not string:\n        return False\n    for i in range(len(string)):\n        if string[i] == '[':\n            if i == len(string) - 1:\n                return False\n            elif string", "    # Write your code here\n    if not string:\n        return False\n    string = string.replace(']', '').replace('[', '')\n    if not string:\n        return False\n    if string == ']' or string == '[':\n        return False\n    if string == '][][]':\n        return True\n    if string.count(']') == string.count('['):\n        return False\n    return True\n\n\n# is_nested('[[]]') \u279e True\n# is_nested('[]]]]]]][[[[[]') \u279e False\n# is_nested('[][]') \u279e False\n# is_nested('[]') \u279e False\n# is_nested('[[][]]') \u279e True\n# is_nested('[[]][[') \u279e True\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n\n# is_nested('[[]]') \u279e True\n# is_nested('[]]]]]]][[[[[]') \u279e False\n# is_nested('[][]') \u279e False\n# is_nested('[]') \u279e False\n# is_nested('[[][]]') \ufffd\ufffd", "    if len(string) % 2 == 0:\n        return False\n    stack = []\n    for x in string:\n        if x == '[':\n            stack.append(x)\n        elif x == ']':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["    a=[]\n    for i in lst:\n        a.append(int(round(i)))\n    return sum(i**2 for i in a)\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    lst2=[]\n    for i in lst:\n        lst2.append(int(round(i)))\n    return sum(i**2 for i in lst2)\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9]", "    return sum(map(lambda x: x*x, map(lambda x: int(x)+1, lst)))\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(sum_squares([1, 2, 3]))\n\n    # These \"asserts\" using only for self-checking and not necessary for auto", "    for i in range(len(lst)):\n        lst[i] = math.ceil(lst[i]) ** 2\n    return sum(lst)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    lst = []\n\n    for _ in range(n):\n       ", "\n    #solution\n    for i, number in enumerate(lst):\n        lst[i] = math.ceil(number)\n\n    return sum([i*i for i in lst])\n\nif __name__ == '__main__':\n    print(sum_squares([1,2,3]))\n    print(sum_squares([1,4,9]))\n    print(sum_squares([1,3,5,7]))\n    print(sum_squares([1.4,4.2,0]))\n    print(sum_squares([-2.4,1,1]))\n    print(sum_squares([1,2,3,4,5,6,7,8,9]))\n    print(sum_squares([1,2,3,4,5,6,7,8,9,10]))\n    print(sum_squares([1.4,4.2,0,5]))\n    print(sum_squares([1,4.2,0,5]))\n    print(sum_squares([1.4,4.2,0,5.7]))\n    print(sum_squares([1,4.2,0,5.7]))\n    print(sum_squares([1.4,4.2,0,5,8]))\n    print(sum_squares([1,4.2,0,5,8]))\n    print(sum_squares([1.4,4.", "    # if lst[0] < 0:\n    #     lst[0] = lst[0] - 1\n    # elif lst[0] >= 0:\n    #     lst[0] = lst[0] + 1\n    # lst[0] = lst[0] ** 2\n    # lst[0] = int(lst[0])\n    # for i in range(1,len(lst)):\n    #     if lst[i] < 0:\n    #         lst[i] = lst[i] - 1\n    #     elif lst[i] >= 0:\n    #         lst[i] = lst[i] + 1\n    #     lst[i] = lst[i] ** 2\n    #     lst[i] = int(lst[i])\n    # return sum(lst)\n    lst_new = []\n    for num in lst:\n        if num < 0:\n            num = num - 1\n        elif num >= 0:\n            num = num + 1\n        num = num ** 2\n        num = int(num)\n        lst_new.append(num)\n    return sum(lst_new)\n\n\nprint(sum_squares([-2.4, 1, 1]))\n\n# sum_squares([1,2,3])\n# sum_squares([1,4,9])\n# sum_squares([1,3,5,7])"], ["    return txt[-1] in 'abcdefghijklmnopqrstuvwxyz' and not txt.endswith(' ')\n\n\ncheck_if_last_char_is_a_letter(\"apple pie\")\ncheck_if_last_char_is_a_letter(\"apple pi e\")\ncheck_if_last_char_is_a_letter(\"apple pi e \")\ncheck_if_last_char_is_a_letter(\"\")\n\n#check_if_last_char_is_a_letter(\"apple pie\")\n#check_if_last_char_is_a_letter(\"apple pi e\")\n#check_if_last_char_is_a_letter(\"apple pi e \")\n#check_if_last_char_is_a_letter(\"\")\n#check_if_last_char_is_a_letter(\"apple pie\")\n#check_if_last_char_is_a_letter(\"apple pi e\")\n#check_if_last_char_is_a_letter(\"apple pi e \")\n#check_if_last_char_is_a_letter(\"\")\n#check_if_last_char_is_a_letter(\"apple pie\")\n#check_if_last_char_is_a_letter(\"apple pi e\")\n#check_if_last_char_is_a_letter(\"apple pi e \")\n#check_if_last_char_is_", "\n    if len(txt) == 0:\n        return False\n\n    if txt[-1] not in \"abcdefghijklmnopqrstuvwxyz\":\n        return False\n\n    if txt[-1] in \"abcdefghijklmnopqrstuvwxyz\" and txt[-2] == \" \":\n        return False\n\n    return True\n\ncheck_if_last_char_is_a_letter(\"apple pie\")\ncheck_if_last_char_is_a_letter(\"apple pi e\")\ncheck_if_last_char_is_a_letter(\"apple pi e \")\ncheck_if_last_char_is_a_letter(\"\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "    if txt[-1].isalpha():\n        if txt[-1].isalnum():\n            return False\n        else:\n            return True\n\n    else:\n        return False\n\n\ncheck_if_last_char_is_a_letter(\"apple pie\")\ncheck_if_last_char_is_a_letter(\"apple pi e\")\ncheck_if_last_char_is_a_letter(\"apple pi e \")\ncheck_if_last_char_is_a_letter(\"\")\n\n\ndef check_if_last_char_is_a_letter(txt):\n    return not txt[-1].isalnum()\n\n\ncheck_if_last_char_is_a_letter(\"apple pie\")\ncheck_if_last_char_is_a_letter(\"apple pi e\")\ncheck_if_last_char_is_a_letter(\"apple pi e \")\ncheck_if_last_char_is_a_letter(\"\")\n\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and not txt[-1].isalnum()\n\n\ncheck_if_last_char_is_a_letter(\"apple pie\")\ncheck_if_last_char_is_a_letter(\"apple pi e\")\ncheck_if_last_char_is_a_letter(\"apple pi e \")\ncheck_if_last_char_", "    return True if txt[-1] not in 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz' and not txt[-1] in ' ' else False\n\n\ndef check_if_last_char_is_a_letter(txt):\n    return True if txt[-1] not in 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz' and not txt[-1] in ' ' else False\n\n\ndef check_if_last_char_is_a_letter(txt):\n    return True if txt[-1] not in 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz' and not txt[-1] in ' ' else False\n\n\ndef check_if_last_char_is_a_letter(txt):\n    return True if txt[-1] not in 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnO", "    # Your code here\n    if not txt:\n        return False\n    \n    return txt[-1] not in '0123456789' and txt[-1] not in ' ,.!?;:-' and txt[-1] not in ' \\t\\n\\r\\f\\v'\n\ncheck_if_last_char_is_a_letter(\"apple pie\") \u279e False\ncheck_if_last_char_is_a_letter(\"apple pi e\") \u279e True\ncheck_if_last_char_is_a_letter(\"apple pi e \") \u279e False\ncheck_if_last_char_is_a_letter(\"\") \u279e False \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["    # TODO: Write your code here\n    arr = arr[::-1]\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\n\nprint(can_arrange([1, 2, 4, 3, 5]))\nprint(can_arrange([1, 2, 3]))\nprint(can_arrange([1, 2, 4, 3, 5, 7, 6]))\nprint(can_arrange([1, 2, 4, 3, 5, 7, 6, 8]))\nprint(can_arrange([1, 2, 4, 3, 5, 7, 6, 8, 9]))\nprint(can_arrange([1, 2, 4, 3, 5, 7, 6, 8, 9, 10]))\nprint(can_arrange([1, 2, 4, 3, 5, 7, 6, 8, 9, 10, 11]))\nprint(can_arrange([1, 2, 4, 3, 5, 7, 6, 8, 9, 10, 11, 12]))\nprint(can_arrange([1, 2, 4, 3, 5, 7, 6, 8, 9, 10, 11, 12, 14]))\nprint(can_arrange([1, 2, 4, 3, 5, 7, 6, 8, 9, 10, 11", "\n    # Implement your code here\n    # return can_arrange_naive(arr)\n    return can_arrange_fast(arr)\n\ndef can_arrange_naive(arr):\n    \"\"\"Naive implementation\"\"\"\n\n    if len(arr) <= 1:\n        return -1\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] >= arr[j]:\n                return -1\n    return max(arr)\n\ndef can_arrange_fast(arr):\n    \"\"\"Fast implementation\"\"\"\n\n    if len(arr) <= 1:\n        return -1\n\n    # Start with the highest number in the array, and find the first number\n    # smaller than the current number. If none is found, then this number\n    # will not be placed correctly in the array, and we can return -1.\n    # Otherwise, we replace the number with the smallest number larger than\n    # the number we found.\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] >= arr[j]:\n                return -1\n            arr[i] = arr[j]\n            break\n    return max(arr)\n\n# Test cases\nprint(can_arrange([1, 2, 3]))\nprint(can_arrange([1, 2, 4, 3, 5]))\nprint(can_arrange([1, 2, 3, 4, 5]))\nprint(can_arrange([1, 2, 4, 3, 6, 5]))\nprint(can_arrange([1, ", "    if arr == []:\n        return -1\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            return i\n    return -1\n\n\nprint(can_arrange([1,2,4,3,5]))\nprint(can_arrange([1,2,3]))\n\ndef get_duplicates(arr):\n    \"\"\"Create a function which returns a list of all duplicate elements in a\n    given list of numbers.\n\n    Examples:\n    get_duplicates([1,2,3,4,5,2,1,3,5]) = [2,1,3,5]\n    get_duplicates([1,2,3]) = []\n    \"\"\"\n    new_list = []\n    for i in range(len(arr)):\n        if arr[i] in new_list:\n            new_list.append(arr[i])\n    return new_list\n\n\nprint(get_duplicates([1,2,3,4,5,2,1,3,5]))\nprint(get_duplicates([1,2,3]))\n\ndef get_missing_numbers(arr):\n    \"\"\"Create a function which returns a list of all missing numbers from a\n    given list of numbers.\n\n    Examples:\n    get_missing_numbers([1,2,3,4,5,6,7,8,9,10]) = [0,11,12,13,14,15,16,17,18,19,20]\n    get_missing_numbers([1,2,3]) = []\n    \"\"\"\n    missing_list = []\n    for i in range(len(arr)):\n", "    # implement this\n    raise NotImplementedError\n\n\ndef main():\n    test_cases = [\n        (1, [1, 2, 4, 3, 5], 3),\n        (2, [1, 2, 3], -1),\n        (3, [1, 2, 3, 4, 5], 4),\n        (4, [1, 2, 3, 4], -1),\n        (5, [1, 2, 3, 4, 6, 7], 5),\n        (6, [1, 2, 3, 4, 5, 6, 7, 8], 7),\n        (7, [1, 2, 3, 4, 5, 6, 7, 8, 9], 8),\n    ]\n    for index, input_val, expected_val in test_cases:\n        val = can_arrange(input_val)\n        if val == expected_val:\n            print(f\"Test #{index} Passed\")\n        else:\n            print(f\"Test #{index} Error\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] >= arr[j]:\n                return -1\n    return len(arr)-1\n\n\nif __name__ == '__main__':\n    import sys\n    arr = [int("], ["    # code here\n    n = 0\n    for i in lst:\n        if i > 0:\n            n = i\n            break\n    else:\n        n = None\n    m = 0\n    for i in lst:\n        if i < 0:\n            m = i\n            break\n    else:\n        m = None\n\n    return (m, n)\n\n\n# ----------------------------------------------------------------------\n\n\n# ----------------------------------------------------------------------\n#                                                                   LAB\n# ----------------------------------------------------------------------\n\n\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # code here\n    l = []\n    for i in lst:\n        if i > 0:\n            l.append(i)\n    if l == []:\n        return (None, None)\n    return (min(l), max(l))\n\n\n# ----------------------------------------------------------------------\n#                                                  module", "    # TODO: Your code goes here\n    #return (max(lst[lst > 0]), min(lst[lst < 0]))\n    lst = [x for x in lst if x < 0] + [x for x in lst if x > 0]\n    if lst == []:\n        return (None, None)\n    else:\n        return (max(lst[lst > 0]), min(lst[lst < 0]))\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\nprint(largest_smallest_integers([]))\nprint(largest_smallest_integers([0]))\n\n# ------------------------------------------------------------------------------------------------\n# QUESTION 2\n# Write a function that returns the first non-repeated character in a string.\n# If there is no non-repeated character, return None.\n# If there are multiple non-repeated characters, return the first one.\n# Examples:\n# first_non_repeated('abab') == 'c'\n# first_non_repeated('') == None\n# first_non_repeated('abc') == None\n# first_non_repeated('abracadabra') == 'c'\n# first_non_repeated('abracadabra!') == 'c'\n# first_non_repeated('abracadabra!!') == 'c'\n# first_non_repeated('abcdefghijkl", "    # create variables to hold the values\n    largest = None\n    smallest = None\n\n    # loop through the list\n    for num in lst:\n        # if num is smaller than smallest or larger than largest,\n        # assign smallest and largest to it\n        if num < smallest or num > largest:\n            smallest = num\n            largest = num\n\n        # if num is larger than largest\n        # set largest to it and continue\n        elif num > largest:\n            largest = num\n            continue\n\n        # if num is smaller than smallest\n        # set smallest to it and continue\n        elif num < smallest:\n            smallest = num\n            continue\n\n    # return the largest and smallest integers\n    return largest, smallest\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\nprint(largest_smallest_integers([]))\nprint(largest_smallest_integers([0]))\n\n'''\ndef largest_smallest_integers(lst):\n    largest = None\n    smallest = None\n    for num in lst:\n        if num < smallest or num > largest:\n            largest = num\n            smallest = num\n        elif num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest, smallest\n'''\n\n'''\ndef largest_smallest_integers(lst):\n    largest = None\n    smallest = None\n    for num in lst:\n        if num < smallest or num > largest:\n            largest = num\n            smallest = num", "    # Your code here\n    lst = [x for x in lst if x >= 0]\n    if not lst:\n        return (None, None)\n    else:\n        return (max(lst), min(lst))\n\n\n\ndef largest_smallest_integers2(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers2([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers2([]) == (None, None)\n    largest_smallest_integers2([0]) == (None, None)\n    '''\n    # Your code here\n    lst = [x for x in lst if x >= 0]\n    if not lst:\n        return (None, None)\n    else:\n        return (max(lst), min(lst))\n\n\n\ndef largest_smallest_integers3(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers3([", "    # your code here\n    lst = lst\n    for x in lst:\n        if x < 0:\n            lst.remove(x)\n    lst = sorted(lst)\n    if lst == []:\n        return (None, None)\n    else:\n        return (lst[-1], lst[0])\n\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\nprint(largest_smallest_integers([]))\nprint(largest_smallest_integers([0]))\n"], ["    if a is None or b is None:\n        return None\n    if type(a) == type(b):\n        return max(a, b)\n    elif type(a) == type('') or type(a) == type(''):\n        if a.count('.') > 0 and b.count('.') > 0:\n            return max(a, b)\n        elif a.count(',') > 0 and b.count(',') > 0:\n            return max(a, b)\n        else:\n            return None\n    else:\n        return max(a, b)\n\n\nprint(compare_one(1, 2.5))\nprint(compare_one(1, \"2,3\"))\nprint(compare_one(\"5,1\", \"6\"))\nprint(compare_one(\"1\", 1))\n\n\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None", "    if a == b:\n        return None\n    elif a > b:\n        if type(a) == str:\n            return a\n        else:\n            return b\n    elif a < b:\n        if type(b) == str:\n            return b\n        else:\n            return a\n\n\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if a == b:\n        return None\n    elif a > b:\n        if type(a) == str:\n            return a\n        else:\n            return b\n    elif a < b:\n        if type(b) == str:\n            return b\n        else:\n            return a\n\n\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the", "    if a == b:\n        return None\n    if type(a) == type(b):\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        if type(a) == int:\n            return a\n        elif type(a) == float:\n            return a\n        elif type(a) == str:\n            return a\n\n# print(compare_one(1, 2.5))\n# print(compare_one(1, \"2,3\"))\n# print(compare_one(\"5,1\", \"6\"))\n# print(compare_one(\"1\", 1))\n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_two(1, 2.5) \u279e 2.5\n    compare_two(1, \"2,3\") \u279e \"2,3\"\n    compare_two(\"5,1\", \"6\") \u279e \"6\"\n    compare_two(\"1\", 1) \u279e None\n    \"\"\"\n    if a == b:\n        return None\n    if type(a) == type(b):\n        if a > b:\n            return a\n        else:\n            return b\n   ", "    if a == b:\n        return None\n    elif isinstance(a, int) and isinstance(b, float):\n        return b\n    elif isinstance(a, float) and isinstance(b, int):\n        return a\n    elif isinstance(a, str) and isinstance(b, str):\n        if len(a.split(',')) > len(b.split(',')):\n            return a\n        else:\n            return b\n    else:\n        return a if a > b else b\n\n\n# compare_one(1, 2.5)\n# compare_one(1, \"2,3\")\n# compare_one(\"5,1\", \"6\")\n# compare_one(\"1\", 1)\n# compare_one(1.0, 2)\n# compare_one(1, 2)\n# compare_one(\"1.0\", \"2.0\")\n# compare_one(\"2,0\", \"2.0\")\n# compare_one(\"2,0\", \"2\")\n\n\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\")", "    if isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        if \".\" in a:\n            a = float(a)\n        else:\n            a = int(a)\n        if \".\" in b:\n            b = float(b)\n        else:\n            b = int(b)\n        return max(a, b)\n    else:\n        return None\n\n\ndef compare_one(a, b):\n    if isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        if \".\" in a:\n            a = float(a)\n        else:\n            a = int(a)\n        if \".\" in b:\n            b = float(b)\n        else:\n            b = int(b)\n        return max(a, b)\n    else:\n        return None\n\n\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return"], ["    return n == sum([2, 4, 6, 8])\n\n\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    is_equal_to_sum_odd(5) == False\n    is_equal_to_sum_odd(7) == False\n    is_equal_to_sum_odd(9) == True\n    \"\"\"\n    return n == sum([1, 3, 5, 7])\n\n\ndef is_equal_to_sum_even_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers and 4 positive even numbers\n    Example\n    is_equal_to_sum_even_odd(10) == False\n    is_equal_to_sum_even_odd(12) == False\n    is_equal_to_sum_even_odd(14) == True\n    \"\"\"\n    return n == sum([1, 3, 5, 7, 2, 4, 6, 8])\n\n\ndef is_equal_to_sum_even_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers and 4 positive even numbers\n    Example\n    is_equal_to_sum_even_even(12) == True\n    is_equal_to_sum_even_even(16) == False\n    \"\"\"\n    return n == sum([2, 4, 6, 8, 2, 4, 6, 8])\n\n\ndef is_equal_to_sum_even_odd_odd(n):\n    \"\"\"Evalu", "    if n < 6:\n        return False\n    else:\n        if n%2 == 0:\n            return False\n        else:\n            return True\n\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    is_equal_to_sum_odd(5) == False\n    is_equal_to_sum_odd(7) == False\n    is_equal_to_sum_odd(9) == True\n    \"\"\"\n    if n < 6:\n        return False\n    else:\n        if n%2 == 1:\n            return False\n        else:\n            return True\n\ndef is_equal_to_sum_three_even_numbers(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 3 positive even numbers\n    Example\n    is_equal_to_sum_three_even_numbers(4) == False\n    is_equal_to_sum_three_even_numbers(6) == True\n    is_equal_to_sum_three_even_numbers(8) == False\n    \"\"\"\n    if n < 4:\n        return False\n    else:\n        if n%2 == 0:\n            return False\n        else:\n            return True\n\ndef is_equal_to_sum_three_odd_numbers(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 3 positive odd numbers\n    Example\n    is_equal_to_sum_three_odd_numbers(5) == False\n    is_equal_to_sum_three_odd_numbers(7) == True\n    is_equal_to_sum_three_odd_numbers(", "    sum = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum += i\n    if n == sum:\n        return True\n    else:\n        return False\n\n\ndef is_equal_to_sum_even_2(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even_2(4) == False\n    is_equal_to_sum_even_2(6) == False\n    is_equal_to_sum_even_2(8) == True\n    \"\"\"\n    return n % 2 == 0 and n == sum(range(2, n+1, 2))\n\n\ndef is_equal_to_sum_even_3(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even_3(4) == False\n    is_equal_to_sum_even_3(6) == False\n    is_equal_to_sum_even_3(8) == True\n    \"\"\"\n    return n % 2 == 0 and n == sum(range(1, n, 2))\n\n\ndef main():\n    print(is_equal_to_sum_even(4))\n    print(is_equal_to_sum_even(6))\n    print(is_equal_to_sum_even(8))\n    print(is_equal_to_sum_even_2(4))\n    print(is_equal_to_sum_even_2(6))\n    print(is_equal_to_sum_even_2(8))\n    print", "    even_nums = []\n    while n > 0:\n        if n % 2 == 0:\n            even_nums.append(n)\n            n -= 2\n        else:\n            n -= 1\n    return len(even_nums) == 4\n\n\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    is_equal_to_sum_odd(4) == False\n    is_equal_to_sum_odd(5) == True\n    is_equal_to_sum_odd(6) == False\n    \"\"\"\n    odd_nums = []\n    while n > 0:\n        if n % 2 == 1:\n            odd_nums.append(n)\n            n -= 2\n        else:\n            n -= 1\n    return len(odd_nums) == 4\n\n\ndef is_equal_to_sum_different(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive different numbers\n    Example\n    is_equal_to_sum_different(14) == False\n    is_equal_to_sum_different(15) == True\n    is_equal_to_sum_different(16) == False\n    \"\"\"\n    different_nums = []\n    while n > 0:\n        if n % 2 == 1:\n            different_nums.append(n)\n            n -= 2\n        else:\n            n -= 1\n    return len(different_nums) == 4\n\n\ndef is_equal_to_sum_positive(n):\n    \"\"\"E", "    return n == sum(range(2, n+1, 2))\n\ndef sum_of_odd_numbers_below_n(n):\n    \"\"\"Return the sum of all odd numbers below the given number n\n    Example\n    sum_of_odd_numbers_below_n(5) == 6\n    sum_of_odd_numbers_below_n(10) == 30\n    sum_of_odd_numbers_below_n(15) == 45\n    \"\"\"\n    return sum(range(1, n, 2))\n\ndef count_of_odd_numbers_below_n(n):\n    \"\"\"Return the count of all odd numbers below the given number n\n    Example\n    count_of_odd_numbers_below_n(5) == 2\n    count_of_odd_numbers_below_n(10) == 4\n    count_of_odd_numbers_below_n(15) == 6\n    \"\"\"\n    return len(range(1, n, 2))\n\ndef count_of_odd_numbers_below_n_using_lambda(n):\n    \"\"\"Return the count of all odd numbers below the given number n\n    Example\n    count_of_odd_numbers_below_n(5) == 2\n    count_of_odd_numbers_below_n(10) == 4\n    count_of_odd_numbers_below_n(15) == 6\n    \"\"\"\n    return len([i for i in range(1, n, 2)])\n\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    is_equal_to_sum_odd(4)"], ["    # We define the variable to return the value\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n        result = result // special_factorial(i-1)\n    return result\n\n\ndef main():\n    \"\"\"The main function.\"\"\"\n    # The factorial of 5 is 120\n    assert special_factorial(5) == 120\n    # The factorial of 6 is 720\n    assert special_factorial(6) == 720\n    # The factorial of 7 is 5040\n    assert special_factorial(7) == 5040\n    # The factorial of 8 is 40320\n    assert special_factorial(8) == 40320\n    # The factorial of 9 is 362880\n    assert special_factorial(9) == 362880\n    # The factorial of 10 is 3628800\n    assert special_factorial(10) == 3628800\n\n\nif __name__ == \"__main__\":\n    main()\n", "    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n\n\ndef test_special_factorial():\n    \"\"\"The tests for special_factorial.\"\"\"\n    assert special_factorial(4) == 288\n    assert special_factorial(2) == 2\n    assert special_factorial(1) == 1\n    assert special_factorial(0) == 1\n    assert special_factorial(-4) == None\n    assert special_factorial(-2) == None\n    assert special_factorial(-1) == None\n\n\ndef test_special_factorial_2():\n    \"\"\"Another test for special_factorial.\"\"\"\n    assert special_factorial(5) == 120\n    assert special_factorial(6) == 720\n\n\ndef test_special_factorial_3():\n    \"\"\"Another test for special_factorial.\"\"\"\n    assert special_factorial(3) == 6\n    assert special_factorial(2) == 2\n    assert special_factorial(1) == 1\n    assert special_factorial(0) == 1\n\n\ndef test_special_factorial_4():\n    \"\"\"Another test for special_factorial.\"\"\"\n    assert special_factorial(7) == 5040\n    assert special_factorial(8) == 40320\n    assert special_factorial(9) == 362880\n\n\ndef test_special_factorial_5():\n    \"\"\"Another test for special_factorial.\"\"\"\n    assert special_factorial(", "\n    return reduce(lambda x, y: x*y, [i for i in range(1, n+1)])\n\n\ndef special_factorial_iter(n):\n    \"\"\"\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial_iter(n - 1)\n\n\ndef factorial(n):\n    \"\"\"\n    The factorial is defined as:\n    factorial(n) = n! = n * (n-1)!\n    where n >= 0\n\n    For example:\n    >>> factorial(5)\n    120\n\n    The function will receive an integer as input and should return the factorial\n    of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\ndef factorial_iter(n):\n    \"\"\"\n    The factorial is defined as:\n    factorial(n) = n! = n * (n-1)!\n    where n >= 0\n\n    For example:\n    >>> factorial(5)\n    120\n\n    The function will receive an integer as input and should return the factorial\n    of this integer.\n    \"\"\"\n    if n == 0:\n        return", "    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\ndef test_special_factorial():\n    assert special_factorial(0) == 1\n    assert special_factorial(1) == 1\n    assert special_factorial(2) == 2\n    assert special_factorial(3) == 6\n    assert special_factorial(4) == 288\n    assert special_factorial(5) == 120\n    assert special_factorial(6) == 720\n    assert special_factorial(7) == 5040\n    assert special_factorial(8) == 40320\n    assert special_factorial(9) == 362880\n    assert special_factorial(10) == 3628800\n\n    try:\n        special_factorial(1.2)\n    except TypeError:\n        print('Test for special_factorial(1.2) passed!')\n    else:\n        print('Test for special_factorial(1.2) failed!')\n\n    try:\n        special_factorial('2')\n    except TypeError:\n        print('Test for special_factorial(\"2\") passed!')\n    else:\n        print('Test for special_factorial(\"2\") failed!')\n\n    try:\n        special_factorial([1, 2, 3])\n    except TypeError:\n        print('Test for special_factorial([1, 2, 3]) passed!')\n    else:\n        print('Test for special_factorial([1, 2, 3]) failed!')\n\nif __name", "\n    # Your code here\n    return 1 if n == 1 else n * special_factorial(n - 1)\n\n\ndef main():\n    import sys\n\n    if len(sys.argv) == 2:\n        n = int(sys.argv[1])\n        result = special_factorial(n)\n        print(result)\n    else:\n        print(\"Usage: python special_factorial.py <integer>\")\n"], ["    return text.replace(' ','_').replace('  ','-')\n    \ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace(' ', '_')\n    text = text.replace('  ', '-')\n    return text\n    \ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    spaces = text.count(' ')\n    if spaces <= 1:\n        return text\n    else:\n        return text.replace(' ', '_').replace('  ', '-')\n    \ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces", "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    return text\n\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    return text\n\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1", "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\n\nprint(fix_spaces(\"Example\"))\nprint(fix_spaces(\"Example 1\"))\nprint(fix_spaces(\" Example 2\"))\nprint(fix_spaces(\" Example   3\"))\n\n\n\ndef fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\n\nprint(fix_spaces(\"Example\"))\nprint(fix_spaces(\"Example 1\"))\nprint(fix_spaces(\" Example 2\"))\nprint(fix_spaces(\" Example   3\"))\n\n\n\ndef fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\n\nprint(fix_spaces(\"Example\"))\nprint(fix_spaces(\"Example 1\"))\nprint(fix_spaces(\" Example 2\"))\nprint(fix_spaces(\" Example   3\"))\n\n\n\ndef fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\n\nprint(fix_spaces(\"Example\"))\nprint(fix_spaces(\"Example 1\"))\nprint(fix_spaces(\" Example 2\"))\nprint(fix_spaces(\" Example   3\"))\n\n\n\ndef fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\n\nprint(fix_spaces(\"Example\"))\nprint(fix_spaces(\"Example 1\"))\nprint(fix_spaces(\" Example 2\"))\nprint(fix_spaces(\" Example   3\"))\n\n\n\ndef fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\n\nprint(fix_spaces(\"Example\"))\nprint(fix_spaces(\"Example ", "    return text.replace(\" \",\"_\").replace(\"  \",\"-\")\n\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \",\"_\").replace(\"  \",\"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\" \",\"_\").replace(\"  \",\"-\")\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n", "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n\n\ndef remove_spaces(text):\n    \"\"\"\n    Given a string text, replace all underscores in it with spaces, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    remove_spaces(\"Example\") == \"Example\"\n    remove_spaces(\"Example_1\") == \"Example 1\"\n    remove_spaces(\"_Example_2\") == \" Example 2\"\n    remove_spaces(\"_Example-3\") == \"  Example   3\"\n    \"\"\"\n    return text.replace(\"_\", \" \").replace(\"-\", \"  \")\n\n\ndef remove_spaces_2(text):\n    \"\"\"\n    Given a string text, replace all underscores in it with spaces, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    remove_spaces(\"Example\") == \"Example\"\n    remove_spaces(\"Example_1\") == \"Example 1\"\n    remove_spaces(\"_Example_2\") == \" Example 2\"\n    remove_spaces(\"_Example-3\") == \"  Example   3\"\n    \"\"\"\n    return text.replace(\"_\", \" \").replace(\"-\", \"  \")\n\n\ndef remove_spaces_3(text):\n    \"\"\"\n    Given a string text, replace all underscores in it with spaces, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    remove_spaces(\"Example\") == \"Example\"\n    remove_spaces(\"Example_1\") == \"Example 1"], ["    pass\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n    # print(file_name_check(\"example.txt\")) # => 'Yes'\n    # print(file_name_check(\"1example.dll\")) # => 'No' (the name should start with a latin alphapet letter)\n    # print(file_name_check(\"example.dll\")) # => 'Yes'\n    # print(file_name_check(\"1example.exe\")) # => 'Yes'\n    # print(file_name_check(\"example.exe\")) # => 'Yes'\n    # print(file_name_check(\"example.dll\")) # => 'Yes'\n    # print(file_name_check(\"1example.txt\")) # => 'No' (should be less than three digits)\n    # print(file_name_check(\"example.exe\")) # => 'Yes'\n    # print(file_name_check(\"example.dll\")) # => 'Yes'\n    # print(file_name_check(\"1example.exe\")) # => 'Yes'\n    # print(file_name_check(\"example.", "    if len(file_name) <= 4:\n        if file_name.count('.') == 1:\n            if file_name[0] != '.' and file_name[0] != '..' and file_name[0].isalpha():\n                if file_name[file_name.index('.') + 1] in ['txt', 'exe', 'dll']:\n                    return 'Yes'\n                return 'No'\n            return 'No'\n        return 'No'\n    return 'No'\n\n\ndef test_file_name_check():\n    assert file_name_check(\"example.txt\") == 'Yes'\n    assert file_name_check(\"1example.dll\") == 'No'\n    assert file_name_check(\"..example.txt\") == 'No'\n    assert file_name_check(\"example\") == 'No'\n    assert file_name_check(\"example.txt.exe\") == 'No'\n    assert file_name_check(\"example.exe\") == 'No'\n    assert file_name_check(\"example.dll\") == 'Yes'\n    assert file_name_check(\"example.txt\") == 'Yes'\n", "    # TODO: Put your code here\n    pass\n\n# ==========================================\nprint(file_name_check(\"example.txt\"))\nprint(file_name_check(\"example.exe\"))\nprint(file_name_check(\"example.dll\"))\nprint(file_name_check(\"1example.dll\"))\nprint(file_name_check(\"example.dll1\"))\nprint(file_name_check(\"example.exe1\"))\nprint(file_name_check(\"example.1dll\"))\nprint(file_name_check(\"example.1exe\"))\nprint(file_name_check(\"example.exe1\"))\nprint(file_name_check(\"example.exe\"))\nprint(file_name_check(\"example.dll\"))\nprint(file_name_check(\"example.1dll\"))\nprint(file_name_check(\"example.1exe\"))\nprint(file_name_check(\"example.exe1\"))\nprint(file_name_check(\"example.exe\"))\nprint(file_name_check(\"example.dll\"))\nprint(file_name_check(\"example.1dll\"))\nprint(file_name_check(\"example.1exe\"))\nprint(file_name_", "    pass\n\n\ndef main():\n    print(file_name_check(\"example.txt\"))\n    print(file_name_check(\"example.exe\"))\n    print(file_name_check(\"example.dll\"))\n    print(file_name_check(\"example.dll.exe\"))\n    print(file_name_check(\"example.exe.dll\"))\n    print(file_name_check(\"example.dll1\"))\n    print(file_name_check(\"example.dll1.exe\"))\n    print(file_name_check(\"example.exe1.dll\"))\n    print(file_name_check(\"example.exe.dll1\"))\n    print(file_name_check(\"example.exe.dll1.exe\"))\n    print(file_name_check(\"example.exe1.dll1\"))\n    print(file_name_check(\"example.exe1.dll1.exe\"))\n    print(file_name_check(\"example.txt.exe\"))\n    print(file_name_check(\"example.exe.txt\"))\n    print(file_name_check(\"example.exe.dll.exe\"))\n    print(file_name_check(\"example.exe.dll", "    if len(file_name) > 3:\n        return \"No\"\n    if len(file_name) < 2:\n        return \"No\"\n    if file_name[0].isdigit():\n        return \"No\"\n    if file_name.count(\".\") != 1:\n        return \"No\"\n    if file_name.split(\".\")[0].isdigit():\n        return \"No\"\n    if file_name.split(\".\")[0][0].isdigit():\n        return \"No\"\n    if not file_name.split(\".\")[0][0].isalpha():\n        return \"No\"\n    if file_name.split(\".\")[1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return \"Yes\"\n\n\ndef file_name_check_v2(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    -"], ["\n    sum_ = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum_ += lst[i]**2\n        elif i % 4 == 0:\n            sum_ += lst[i]**3\n    return sum_\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares([]))\nprint(sum_squares([-1,-5,2,-1,-5]))\n\n\n\n\"\"\"\n1. Create a function that takes a list of integers and returns the sum of all entries in the list, except the entry with the index equal to a multiple of 4.\n2. Create a function that takes a list of integers and returns the sum of all entries in the list, except the entry with the index equal to a multiple of 3.\n3. Create a function that takes a list of integers and returns the sum of all entries in the list, except the entry with the index equal to a multiple of both 3 and 4.\n\"\"\"\n\n\n\ndef sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of", "    total = 0\n    for i in range(len(lst)):\n        if i%4 == 0:\n            total += lst[i]**3\n        elif i%3 == 0:\n            total += lst[i]**2\n        else:\n            total += lst[i]\n    return total\n\n\nif __name__ == '__main__':\n    lst = [1,2,3]\n    print(\"lst = {}\".format(lst))\n    print(\"sum_squares(lst) = {}\".format(sum_squares(lst)))\n    print()\n    \n    lst = []\n    print(\"lst = {}\".format(lst))\n    print(\"sum_squares(lst) = {}\".format(sum_squares(lst)))\n    print()\n    \n    lst = [-1,-5,2,-1,-5]\n    print(\"lst = {}\".format(lst))\n    print(\"sum_squares(lst) = {}\".format(sum_squ", "    result = 0\n    for i, val in enumerate(lst):\n        if (i % 3 == 0 and i % 4 != 0) or (i % 4 == 0 and i % 3 != 0):\n            result += val ** 2\n        elif i % 4 == 0 and i % 3 == 0:\n            result += val ** 3\n    return result\n\n\nprint(sum_squares([1, 2, 3]))\nprint(sum_squares([]))\nprint(sum_squares([-1, -5, 2, -1, -5]))\n\n\"\"\"\n#   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #", "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 == 0:\n            result += lst[i] ** 3\n        elif i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n\n    return result\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(sum_squares([1, 2, 3]))\n\n    # These \"asserts\" using only for self-checking and not for auto-testing\n    assert sum_squares([1, 2, 3]) == 6\n    assert sum_squares([]) == 0\n    assert sum_squares([-1, -5, 2, -1, -5]) == -126\n    print(\"Coding complete!\")\n", "    # return 0\n    lst_sum = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0 and index % 4 == 0:\n            lst_sum += value * value * value\n        elif index % 3 == 0 and index % 4 != 0:\n            lst_sum += value * value\n        elif index % 3 != 0 and index % 4 == 0:\n            lst_sum += value * value * value\n    return lst_sum\n\n\nif __name__ == '__main__':\n    lst = [-1, -5, 2, -1, -5]\n    print(f'sum_squares: {sum_squares(lst)}')\n\n\n    # def sum_squares(lst):\n    #     \"\"\"\"\n    #     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    #     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    #     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    #     Examples:\n    #     For lst = [1,2,3] the output should be 6\n    #     For lst = []"], ["    words = sentence.split(' ')\n    return ' '.join(word for word in words if len(word) == 3 or len(word) == 5 or len(word) == 7)\n\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    words = sentence.split(' ')\n    return ' '.join(word for word in words if len(word) == 3 or len(word) == 5 or len(word) == 7)\n\n\nif __name__ == \"__main__\":\n    sentence = \"This is a test\"\n    print(words_in_sentence(sentence))\n\n    sentence = \"lets go for swimming\"\n    print(words_in_sentence(sentence))\n\n    sentence = \"this is not a test", "    return ' '.join([word for word in sentence.split() if is_prime(len(word))])\n\n\ndef is_prime(n):\n    if n == 1:\n        return False\n\n    if n == 2 or n == 3:\n        return True\n\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\nif __name__ == '__main__':\n    print(words_in_sentence('This is a test'))\n    print(words_in_sentence('lets go for swimming'))\n\n    print(is_prime(1))\n    print(is_prime(2))\n    print(is_prime(3))\n    print(is_prime(4))\n    print(is_prime(5))\n    print(is_prime(6))\n    print(is_prime(7))\n    print(is_prime(8))\n    print(is_prime(9))\n    print(is_prime(10))\n    print(is_prime(11))\n    print(is_prime(12))\n    print(is_prime(13))\n    print(is_prime(14))\n    print(is_", "    words = sentence.split()\n    words_prime = []\n    for word in words:\n        if is_prime(len(word)):\n            words_prime.append(word)\n    return ' '.join(words_prime)\n\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(words_in_sentence(\"This is a test\"))\n    print(words_in_sentence(\"lets go for swimming\"))\n    print(words_in_sentence(\"a\"))\n    print(words_in_sentence(\"b\"))\n    print(words_in_sentence(\"c\"))\n    print(words_in_sentence(\"d\"))\n    print(words_in_sentence(\"e\"))\n    print(words_in_sentence(\"f\"))\n    print(words_in_sentence(\"g\"))\n    print(words_in_sentence(\"h\"))\n    print(words_in_sentence(\"i\"))\n    print(words_in_sentence(\"j\"))\n    print(words_in_sentence(\"k\"))\n    print(words_in_sentence(\"l\"))\n    print(words_in_sentence(\"m\"))\n    print(words_in_", "    words = sentence.split()\n    return ' '.join([word for word in words if len(word) == 2 or len(word) == 3 or len(word) == 5])\n\n\nif __name__ == '__main__':\n    print(words_in_sentence(\"This is a test\"))\n    print(words_in_sentence(\"lets go for swimming\"))\n    print(words_in_sentence(\"The quick brown fox jumps over the lazy dog\"))\n    print(words_in_sentence(\"\"))\n    print(words_in_sentence(\" \"))\n    print(words_in_sentence(\"Hello World\"))\n    print(words_in_sentence(\"Hello World. This is a test\"))\n    print(words_in_sentence(\"Hello World. This is a test. This is a test\"))\n    print(words_in_sentence(\"Hello World. This is a test. This is a test. This is a test\"))\n    print(words_in_sentence(\"Hello World. This is a test. This is a test. This is a test. This is a test\"))\n    print(words_in_sentence(\"Hello World. This is a test. This is a test. This is a test. This is a test. This is a test\"))\n    print(words_in_sentence(\"Hello World. This is a test. This is a test. This is a test. This is a test. This is a test. This is", "    # TC: O(n)\n    # SC: O(n)\n    # Solution 1: Using List Comprehension\n    return ' '.join([word for word in sentence.split() if is_prime(len(word))])\n\n\ndef is_prime(number):\n    \"\"\"\n    Checks whether a given number is prime or not\n    \"\"\"\n    # TC: O(n)\n    # SC: O(1)\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(words_in_sentence(\"This is a test\"))\n    print(words_in_sentence(\"lets go for swimming\"))\n    print(words_in_sentence(\"This is another test\"))\n    print(words_in_sentence(\""], ["    a, b = x.split('/')\n    c, d = n.split('/')\n\n    if int(a) * int(d) == int(b) * int(c):\n        return True\n    else:\n        return False\n\n\ndef test_simplify():\n    assert simplify(\"1/5\", \"5/1\") is True\n    assert simplify(\"1/6\", \"2/1\") is False\n    assert simplify(\"7/10\", \"10/2\") is False\n\n\nif __name__ == '__main__':\n    test_simplify()\n    # import cProfile\n    # cProfile.run('test_simplify()')\n    # cProfile.run('simplify(\"1/6\", \"2/1\")')\n    # cProfile.run('simplify(\"1/1\", \"1/1\")')\n    # cProfile.run('simplify(\"1/1\", \"2/2\")')\n    # cProfile.run('simplify(\"1/1\", \"1/2\")')\n    # cProfile.run('simplify(\"1/1\", \"1/3\")')\n    # cProfile.run('simplify(\"1/1\", \"1/4\")')\n    # cProfile.run('simplify(\"1/1\", \"1/5\")')\n    # cProfile.run('simplify(\"1/1\", \"1/6\")')\n    # cProfile.run('sim", "    x_n = x.split('/')\n    n_n = n.split('/')\n    if int(x_n[0]) * int(n_n[1]) == int(x_n[1]) * int(n_n[0]):\n        return True\n    else:\n        return False\n\n\nprint(simplify(\"1/5\", \"5/1\"))\nprint(simplify(\"1/6\", \"2/1\"))\nprint(simplify(\"7/10\", \"10/2\"))\n\n\n\n# def simplify(x, y):\n#     x_n, x_d = x.split('/')\n#     y_n, y_d = y.split('/')\n#     x_n, x_d = int(x_n), int(x_d)\n#     y_n, y_d = int(y_n), int(y_d)\n#     if x_d * y_d == x_n * y_n:\n#         return True\n#     else:\n#         return False\n\n\n# print(simplify(\"1/5\", \"5/1\"))\n# print(simplify(\"1/6\", \"2/1\"))\n# print(simplify(\"7/10\", \"10/2\"))\n\n\n# def simplify(x, y):\n#     x_n, x_d = x.split('/')\n#     y_n, y_d = y", "    # x = int(x[:-1])/int(x[-2:])\n    # n = int(n[:-1])/int(n[-2:])\n    # if (x*n).is_integer():\n    #     return True\n    # else:\n    #     return False\n    x1, x2 = x.split('/')\n    n1, n2 = n.split('/')\n    x = int(x1) / int(x2)\n    n = int(n1) / int(n2)\n    return x*n == int(x*n)\n\n\nif __name__ == '__main__':\n    print(simplify(\"1/5\", \"5/1\"))\n    print(simplify(\"1/6\", \"2/1\"))\n    print(simplify(\"7/10\", \"10/2\"))\n\n\"\"\"\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"", "    a, b = map(int, x.split('/'))\n    c, d = map(int, n.split('/'))\n    if (a * d) % b == 0 and (b * c) % d == 0:\n        return True\n    return False\n\n\nprint(simplify('1/2', '2/1'))\nprint(simplify('1/2', '1/2'))\nprint(simplify('3/4', '2/1'))\nprint(simplify('3/4', '1/2'))\nprint(simplify('3/4', '4/3'))\nprint(simplify('1/2', '4/2'))\nprint(simplify('3/4', '4/3'))\nprint(simplify('1/2', '2/3'))\nprint(simplify('1/2', '3/4'))\nprint(simplify('1/3', '1/2'))\nprint(simplify('1/3', '2/3'))\nprint(simplify('2/3', '1/2'))\nprint(simplify('3/4', '1/2'))\nprint(simplify('3/4', '2/3'))\nprint(simplify('1/2', '1/3'))\nprint(simplify('3/4', '2/3'))\nprint(simplify('1/2', '3/4'))\nprint(simplify('", "    x = float(x)\n    n = float(n)\n    if x*n == int(x*n):\n        return True\n    else:\n        return False\n\n\ndef test_simplify():\n    assert simplify(\"1/5\", \"5/1\") == True\n    assert simplify(\"1/6\", \"2/1\") == False\n    assert simplify(\"7/10\", \"10/2\") == False\n    assert simplify(\"1/3\", \"3/1\") == True\n    assert simplify(\"1/5\", \"5/2\") == True\n    assert simplify(\"1/5\", \"5/5\") == True\n    assert simplify(\"1/5\", \"10/5\") == False\n    assert simplify(\"1/2\", \"2/1\") == True\n    assert simplify(\"1/3\", \"4/3\") == False\n    assert simplify(\"1/2\", \"5/2\") == False\n    assert simplify(\"1/3\", \"2/3\") == False\n    assert simplify(\"1/3\", \"3/2\") == False\n    assert simplify(\"1/3\", \"2/5\") == False\n    assert simplify(\"1/3\", \"5/3\") == False\n    assert simplify(\"1/3\", \"10/3\") == False\n    assert simplify(\"1/3\", \"3/10\") == False\n    assert simplify(\"1/3\", \"3/5\") == False\n    assert simplify(\"1/3\", \"2/6\") == False"], ["    return sorted(nums, key = lambda x: get_sum_digits(x), reverse = False)\n\n\ndef get_sum_digits(num):\n    \"\"\"\n    Write a function which returns the sum of the digits\n    of a given integer.\n\n    For example:\n    >>> get_sum_digits(123) == 6\n    >>> get_sum_digits(1001) == 4\n    \"\"\"\n    return sum([int(i) for i in str(num)])\n\n\ndef order_by_length(words):\n    \"\"\"\n    Write a function which sorts the given list of words\n    in ascending order according to the number of letters in each word.\n\n    For example:\n    >>> order_by_length(['hi', 'hello', 'hey']) == ['hi', 'hey', 'hello']\n    >>> order_by_length([]) == []\n    \"\"\"\n    return sorted(words, key = lambda x: len(x), reverse = False)\n\n\ndef order_by_occurrence(words):\n    \"\"\"\n    Write a function which sorts the given list of words\n    in ascending order according to the number of letters in each word\n    that occurs the most times in the list.\n\n    For example:\n    >>> order_by_occurrence(['hi', 'hello', 'hey', 'hi', 'hello']) == ['hi', 'hello', 'hey']\n    >>> order_by_occurrence(['hi', 'hello']) == ['hi', 'hello']\n    >>> order_by_occurrence([]) == []\n    \"\"\"\n    count = {}\n   ", "    if len(nums) == 0:\n        return nums\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits(x))\n    return sorted_nums\n\n\ndef sum_of_digits(num):\n    \"\"\"\n    Write a function which computes the sum of digits of a given integer.\n    Note: you don't need to handle negative numbers.\n\n    For example:\n    >>> sum_of_digits(123) == 6\n    >>> sum_of_digits(1234) == 10\n    >>> sum_of_digits(12345) == 15\n    \"\"\"\n    sum = 0\n    while num != 0:\n        sum += num % 10\n        num = num // 10\n    return sum\n\n\ndef main():\n    import doctest\n    doctest.testmod(verbose=True)\n\n\nif __name__ == '__main__':\n    main()\n", "    l = len(nums)\n    if l == 0:\n        return []\n    nums.sort(key=lambda x: get_sum_of_digits(x))\n    for i in range(1, l):\n        if nums[i] == nums[i-1]:\n            nums[i] = nums[i-1] + 1\n    return nums\n\n\ndef get_sum_of_digits(num):\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num //= 10\n    return sum\n\n\nprint(order_by_points([1, 11, -1, -11, -12]))\nprint(order_by_points([]))\nprint(order_by_points([10, 11, 1, 111, -10, 101, -1, -11, -12]))\nprint(order_by_points([10, 11, 1, 111, 110, 101, -1, -11, -12, 110]))\nprint(order_by_points([10, 11, 1, 111, 110, 101, -1, -11, -12, 110, 101]))\nprint(order_by_points([10, 11, 1, 111, 110, 101, -1, -11, -12", "    return sorted(nums, key=lambda x: sum(map(int, str(abs(x)))))\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: sorted(map(int, str(abs(x)))))\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(map(int, str(abs(x)))))\n\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list", "    # Your code here\n    nums.sort(key=lambda x: get_points(x))\n    return nums\n\n\ndef get_points(x):\n    \"\"\"\n    Given an integer x, return its sum of digits.\n    \"\"\"\n    # Your code here\n    return sum(int(d) for d in str(x))\n\n\n# Easy peasy lemon squeezy.\n# "], ["    return len([x for x in nums if x > 10 and x%10 > 5 and x%10 < 15])\n\nprint specialFilter([15, -73, 14, -15])\nprint specialFilter([33, -2, -3, 45, 21, 109])\n\n\ndef specialFilter2(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    return len([x for x in nums if x > 10 and x%10 > 5 and x%10 < 15])\n\nprint specialFilter2([15, -73, 14, -15])\nprint specialFilter2([33, -2, -3, 45, 21, 109])\n\n\ndef specialFilter3(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n   ", "    # ------------------------------------------------------------------\n    # Your code here...\n    count = 0\n    for num in nums:\n        if num > 10 and (num / 10 % 2 == 1 and num % 10 % 2 == 1):\n            count += 1\n    return count\n    # ------------------------------------------------------------------\n\n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(specialFilter([15, -73, 14, -15]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert specialFilter([15, -73, 14, -15]) == 1\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2\n    assert specialFilter([1, 2, 3, 4, 5]) == 0\n    assert specialFilter([1, 1, 1, 1, 1]) == 0\n    assert specialFilter([1, 1, 1, 1, 1, 1]) == 0\n    assert specialFilter([]) == 0\n    assert specialFilter([1]) == 0\n    assert specialFilter([1, 2]) == 0\n    assert specialFilter([1, 2, 3]) == 0\n    assert specialFilter([1, 2, 3, 4]) == 0\n    assert specialFilter([1, 2, 3, 4, 5]) == 0\n    assert specialFilter([1,", "    count = 0\n    for num in nums:\n        if num > 10 and num % 100 >= 11 and num % 100 <= 99:\n            if num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9:\n                count += 1\n    return count\n\ndef specialFilter(nums):\n    return len([x for x in nums if x > 10 and (x % 100 >= 11 and x % 100 <= 99) and (x % 10 == 1 or x % 10 == 3 or x % 10 == 5 or x % 10 == 7 or x % 10 == 9)])\n\ndef specialFilter(nums):\n    return sum(x > 10 and (x % 100 >= 11 and x % 100 <= 99) and (x % 10 == 1 or x % 10 == 3 or x % 10 == 5 or x % 10 == 7 or x % 10 == 9) for x in nums)\n\ndef specialFilter(nums):\n    return sum(1 for x in nums if x > 10 and (x % 100 >= 11 and x % 100 <= 99) and (x % 10 == 1 or x % 10 == 3 or x % 10 == 5 or x %", "    # First filter out the numbers bigger than 10\n    nums = list(filter(lambda x: x > 10, nums))\n    # Then filter out the numbers with first and last digit as odd\n    nums = list(filter(lambda x: x % 100 >= 11, nums))\n    return len(nums)\n\ndef specialFilter2(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    # First filter out the numbers bigger than 10\n    nums = list(filter(lambda x: x > 10, nums))\n    # Then filter out the numbers with first and last digit as odd\n    nums = list(filter(lambda x: x % 100 >= 11, nums))\n    return len(nums)\n\ndef specialFilter3(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n", "    count = 0\n    for num in nums:\n        if (num > 10) and (str(num)[0] == str(num)[-1]):\n            if int(str(num)[0]) in [1, 3, 5, 7, 9] and int(str(num)[-1]) in [1, 3, 5, 7, 9]:\n                count += 1\n    return count\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if (num > 10) and (str(num)[0] == str(num)[-1]):\n            if int(str(num)[0]) in [1, 3, 5, 7, 9] and int(str(num)[-1]) in [1, 3, 5, 7, 9]:\n                count += 1\n    return count\n\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that"], ["    i = 1\n    count = 0\n    while i <= n:\n        if i % 3 == 0:\n            j = i + 1\n            while j <= n:\n                if j % 3 == 0:\n                    k = j + 1\n                    while k <= n:\n                        if k % 3 == 0:\n                            if a[i] + a[j] + a[k] % 3 == 0:\n                                count += 1\n                                break\n                        k += 1\n                    if count:\n                        break\n                j += 1\n            if count:\n                break\n        i += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(get_max_triples(n))\n", "    return sum(a * b * c for a, b, c in zip(range(1, n + 1), range(n - 1, 0, -1), range(n - 2, 0, -1)) if a * b * c % 3 == 0)\n\n\nif __name__ == '__main__':\n    n = 5\n    print(get_max_triples(n))\n    # 1\n\n    n = 10\n    print(get_max_triples(n))\n    # 3\n\n    n = 15\n    print(get_max_triples(n))\n    # 13\n\n    n = 20\n    print(get_max_triples(n))\n    # 36\n\n    n = 30\n    print(get_max_triples(n))\n    # 100\n\n    n = 50\n    print(get_max_triples(n))\n    # 200\n\n    n = 100\n    print(get_max_triples(n))\n    # 560\n\n    n = 500\n    print(get_max_triples(n))\n    # 2000\n\n    n = 1000\n    print(get_max_triples(n", "    pass\n\n\ndef get_max_triples_v2(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Time: O(n)\n    # Space: O(n)\n    # 48ms\n    # def get_max_triples_v2(n):\n    #     n += 1\n    #     a = [i * i - i + 1 for i in range(1, n)]\n    #     ans = 0\n    #     for i in range(n - 2):\n    #         for j in range(i + 1, n - 1):\n    #             for k in range(j", "    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if ((a[i] + a[j] + a[k]) % 3 == 0):\n                    count += 1\n    return count\n\n\nn = 5\nprint(get_max_triples(n))\n\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [1 for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j", "    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if i*i - i + 1 + j*j - j + 1 + k*k - k + 1 % 3 == 0:\n                    count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print(get_max_triples(5))\n    print(get_max_triples(4))\n    print(get_max_triples(3))\n    print(get_max_triples(2))\n    print(get_max_triples(1))\n    print(get_max_triples(0))\n    print(get_max_triples(-1))\n    print(get_max_triples(-2))\n    print(get_max_triples(-3))\n    print(get_max_triples(-4))\n    print(get_max_triples(-5))\n\n\"\"\"\nSOLUTION :\n\ndef get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1"], ["    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    if planet1 in ('mercury', 'venus', 'earth', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune'):\n        if planet2 in ('mercury', 'venus', 'earth', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune'):\n            planets = ['mercury', 'venus', 'earth', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune']\n            planets.remove(planet1)\n            planets.remove(planet2)\n            planets.sort()\n            return tuple(planets)\n        else:\n            return tuple()\n    else:\n        return tuple()\n\nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) == 3:\n        planet1, planet2 = sys.argv[1:3]\n        print(bf(planet1, planet2))\n    else:\n", "\n    if planet1 == \"Mercury\":\n        if planet2 == \"Venus\":\n            return (\"Venus\")\n        elif planet2 == \"Earth\":\n            return (\"Venus\", \"Earth\")\n        elif planet2 == \"Mars\":\n            return (\"Venus\", \"Earth\", \"Mars\")\n        elif planet2 == \"Jupiter\":\n            return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\")\n        elif planet2 == \"Saturn\":\n            return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n        elif planet2 == \"Uranus\":\n            return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")\n        elif planet2 == \"Neptune\":\n            return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    elif planet1 == \"Venus\":\n        if planet2 == \"Earth\":\n            return (\"E", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 in planets and planet2 in planets:\n        return tuple(planets[(planets.index(planet1) + 1):planets.index(planet2)])\n    else:\n        return ()\n\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Saturn\", \"Neptune\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Saturn\", \"Neptune\"))\nprint(bf(\"Uranus\", \"Neptune\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Saturn\", \"Venus\"))\nprint(", "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    print(planets[planet1_index:planet2_index+1])\n\n\ndef bf2(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n   ", "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    planet1 = planets.index(planet1)\n    planet2 = planets.index(planet2)\n    if 0 <= planet1 < 8 and 0 <= planet2 < 8:\n        return tuple(planets[planet1+1:planet2])\n    else:\n        return ()\n\n#print(bf(\"Jupiter\", \"Neptune\"))\n#print(bf(\"Earth\", \"Mercury\"))\n#print(bf(\"Mercury\", \"Uranus\"))\n\ndef bf2(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all"], ["    return sorted(lst, key=len)\n\n\n# print(sorted_list_sum([\"aa\", \"a\", \"aaa\"]))\n\n\ndef get_middle_index(lst):\n    \"\"\"Write a function that accepts a list as a parameter,\n    and returns the index of the middle element of the list.\n    The list is always a list of numbers and never an array of strings,\n    and it may contain duplicates.\n    For example:\n    assert get_middle_index([1, 2, 3, 4, 5]) => 2\n    assert get_middle_index([1, 2, 3, 4]) => 2\n    assert get_middle_index([1, 2, 3]) => 1\n    \"\"\"\n    middle_index = (len(lst) - 1) // 2\n    return middle_index\n\n\n# print(get_middle_index([1, 2, 3, 4, 5]))\n\n\ndef max_and_min(lst):\n    \"\"\"Write a function that accepts a list of numbers as a parameter,\n    and returns a tuple containing the maximum and minimum values\n    of the list.\n    The list is always a list of numbers and never an array of strings,\n    and it may contain duplicates.\n    For example:\n   ", "    pass\n\n\ndef list_sort(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    pass\n\n\ndef add_to_dict(dictionary, key, value):\n    \"\"\"Write a function that accepts a dictionary and two parameters,\n    adds the value to the dictionary under the key.\n    If the key already exists in the dictionary, you should add the value\n    to the existing value.\n    For example:\n    assert add_to_dict({'a': 1, 'b': 2}, '", "    # Your code here\n    pass\n\n\ndef test_sorted_list_sum():\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\", \"a\"]) == [\"ab\", \"cd\"]\n    assert sorted_list_sum([\"a\", \"ab\", \"aaa\", \"cd\", \"a\"]) == [\"ab\", \"a\", \"cd\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"bbb\", \"aaa\"]) == [\"ab\", \"cd\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"bbb\", \"aaa\", \"cc\"]) == [\"ab\", \"cd\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"bbb\", \"aaa\", \"cc\", \"dd\", \"eee\"]) == [\"ab\", \"cd\"]\n\n\nif __name__ == \"__main__\":\n    test_sorted_list_sum()\n\n\n\"\"\"\nSOL", "    # code goes here\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(list_sort([\"aa\", \"a\", \"aaa\"]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\n    assert list_sort([\"a\", \"a\", \"aa\", \"aaa\", \"aa\", \"a\"]) == [\"a\", \"a\", \"aa\", \"aa\", \"aa\", \"a\"]\n    assert list_sort([\"abc\", \"a\", \"aaa\", \"cd\"]) == [\"abc\", \"cd\"]\n    assert list_sort([\"a\", \"a\", \"aa\", \"aaa\", \"aa\", \"a\"]) == [\"a\", \"a\", \"aa\", \"aa\", \"aa\", \"a\"]\n    assert list_sort([\"abc\", \"a\", \"aaa\", \"cd\"]) == [\"abc\", \"cd\"]\n    assert list_sort([\"abc\", \"a\", \"aaa\", \"cd\"]) == [\"abc\", \"cd\"]\n    assert list_sort([\"abc\", \"a\", \"aaa\",", "    # your code here\n    lst_filtered = list(filter(lambda x: len(x) % 2 == 0, lst))\n    lst_sorted = sorted(lst_filtered, key=lambda x: (len(x), x))\n    return lst_sorted\n\n\ndef merge_sort(lst):\n    \"\"\"Write a function that accepts a list of numbers as a parameter,\n    and returns the resulted list sorted by ascending order.\n    The list is always a list of numbers and never an array of strings,\n    and it may contain duplicates.\n    The order of the list should be ascending by value of each number,\n    and you should return the list sorted by that rule.\n    For example:\n    assert merge_sort([5, 3, 2, 1]) => [1, 2, 3, 5]\n    assert merge_sort([2, 1, 3, 5]) => [1, 2, 3, 5]\n    \"\"\"\n    # your code here\n    if len(lst) <= 1:\n        return lst\n    middle = len(lst) // 2\n    left = merge_sort(lst[:middle])\n    right = merge_sort(lst[middle:])\n    return merge(left, right)\n\n\ndef merge(left, right):"], ["    pass\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n % 2 == 0:\n        return x\n    else:\n        return y\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n % 2 == 0:\n        return x\n    else:\n        return y\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if n % 2 == 0:\n        return x\n    else:\n        return y\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is", "    if (n%2==0 and n%3==0):\n        return y\n    else:\n        return x\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if (n%2==0 and n%3==0):\n        return y\n    else:\n        return x\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if (n%2==0 and n%3==0):\n        return y\n    else:\n        return x\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if (n%2==0 and n%3==0):\n        return y", "\n    # your code goes here\n\n    if n % 2 == 0:\n        return x\n    else:\n        return y\n\n\ndef main():\n    import sys\n    args = sys.argv[1:]\n    if len(args) == 3:\n        n = int(args[0])\n        x = int(args[1])\n        y = int(args[2])\n        result = x_or_y(n, x, y)\n        print(result)\n    else:\n        print('Usage: {} n x y'.format(sys.argv[0]))\n\n\nif __name__ == '__main__':\n    main()\n\n\"\"\"\n\nimport sys\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    # your code goes here\n    if n % 2 == 0:\n        return x\n    else:\n        return y\n\n\ndef main():\n    args = sys.argv[1:]\n    if len(args) == 3:\n        n = int(args[0])\n        x = int(args[1])\n        y = int(args[2])\n        result = x_or_y(n, x, y)\n        print(result)\n    else:\n        print('Usage: {} n x y'.format(sys.argv[0]))\n\n\nif __name__ == '__main__':", "    if n % 2 == 0:\n        return x\n    else:\n        return y\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \"\"\"\n    if n % 2 == 0:\n        return x\n    else:\n        return y\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \"\"\"\n    if n % 2 == 0:\n        return x\n    else:\n        return y\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \"\"\"\n    if n % 2 == 0:\n        return x\n    else:\n        return y\n\n\ndef x_or_y(n, x, y):\n    \"\"\"", "    if n % 2 == 0:\n        return x\n    else:\n        return y\n\n\ndef main():\n    print(x_or_y(15, 8, 5))\n    print(x_or_y(7, 34, 12))\n\n\nif __name__ == \"__main__\":\n    main()\n"], ["    # Your code here\n    a = []\n    for i in range(len(lst)):\n        if lst[i] < 0 or not lst[i].isdigit():\n            continue\n        a.append(lst[i])\n    a = sorted(a)\n    c = 0\n    for i in range(len(a)):\n        if a[i] % 2 == 1:\n            c += (a[i] ** 2)\n    return c\n    \n    \nif __name__ == '__main__':\n    import sys\n    import io\n    def run_tests(tests_file):\n        tests_file.seek(0)\n        test_cases = [i.strip() for i in tests_file.readlines()]\n        for test in test_cases:\n            test_input, test_expected = test.split(' -> ')\n            test_input, test_expected = test_input.strip(), test_expected.strip()\n            test_input_values = [value.strip() for value in test_input.split(',')]\n            test_expected_values = [value.strip() for value in test_expected.split(',')]\n            test_input_values = list(map(int, test_input_values))\n            test_expected_values = list(map(int, test_expected_values))\n            actual = double_the_difference(test_input_values)\n            assert actual == test_expected_values, (actual, test_expected_values)\n           ", "    # Your code here\n    return sum([i*i for i in lst if type(i)==int and i%2!=0 and i>=0])\n\n\nprint(double_the_difference([1, 3, 2, 0])) #10\nprint(double_the_difference([-1, -2, 0])) #0\nprint(double_the_difference([9, -2])) #81\nprint(double_the_difference([])) #0\n\n\ndef is_prime(n):\n    '''\n    Returns True if the number n is prime, False if not.\n    '''\n    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for x in range(3, int(n**0.5)+1, 2):\n        if n % x == 0:\n            return False\n    return True\n\ndef find_primes(lst):\n    '''\n    Given a list of numbers, return a list of the primes that are in the list.\n    '''\n    return [i for i in lst if is_prime(i)]\n\nprint(find_primes([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])) # [2, 3, 5, 7]\nprint(find_primes([1, 2, 3, 4, ", "    return sum([i**2 for i in lst if i%2!=0 and i>=0 and type(i)==int])\n    \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([]))\nprint(double_the_difference([0]))\n\nprint('----------------------------------------')\n\n# Write a function, double_the_difference_v2, that has the same behavior as double_the_difference, \n# but does not use any for loops. \n\ndef double_the_difference_v2(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum([i**2 for i in lst if i%2!=0 and i>=0 and type(i)", "    # Your code goes here\n    if not lst:\n        return 0\n    total = 0\n    for i in lst:\n        if i > 0 and i % 2 != 0:\n            total += (i**2)\n    return total\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([]))\nprint(double_the_difference([0]))\n\n\n\n# SOLUTION\n# def double_the_difference(lst):\n#     '''\n#     Given a list of numbers, return the sum of squares of the numbers\n#     in the list that are odd. Ignore numbers that are negative or not integers.\n    \n#     double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n#     double_the_difference([-1, -2, 0]) == 0\n#     double_the_difference([9, -2]) == 81\n#     double_the_difference([0]) == 0  \n   \n#     If the input list is empty, return 0.\n#     '''\n#     # Your code goes here\n#     return sum(num**2 for num in lst if num > 0 and num % 2 !=", "    \n    #TODO: Write your code here\n\n\ndef main():\n    print(\"Example:\")\n    print(double_the_difference([1, 3, 2, 0]))\n\n    #These \"asserts\" are used for self-checking and not for an automated grading\n    assert double_the_difference([1, 3, 2, 0]) == 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0\n\n    print(\"Coding complete? Click 'Check' to earn"], ["    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result\n\n#compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n\n#compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n\n#compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n\n#compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n\n#compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n\n#compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n\n#compare([1,2,3,4,5,1],[1,2,3,4,2,-2", "\n    #your code here\n    return [abs(game[i]-guess[i]) for i in range(len(game))]\n\ndef compare_2(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2])", "\n    return [abs(a-b) for a,b in zip(game,guess)]\n\n\n#compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n#compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n#compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n#compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n", "    return_list = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            return_list.append(0)\n        else:\n            return_list.append(abs(guess[i]-game[i]))\n    return return_list\n\n\n# def compare(game, guess):\n#     \"\"\"compare takes in two lists: one of scores for the game and the other of guesses. \n#     It then returns an array of the same length as the guesses list. \n#     If the guess is correct it returns 0, otherwise it returns the difference between the guess and the score.\n#     \"\"\"\n#     return_list = []\n#     for i in range(len(guess)):\n#         if guess[i] == game[i]:\n#             return_list.append(0)\n#         else:\n#             return_list.append(abs(guess[i] - game[i]))\n#     return return_list\n\n# def compare(game, guess):\n#     \"\"\"compare takes in two lists: one of scores for the game and the other of guesses.", "    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\ndef compare2(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\ndef compare3(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\ndef compare4(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\ndef compare5(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\ndef compare6(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\ndef compare7(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\ndef compare8(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\n"], ["    # TODO: Your code here!\n    max_strength = 0\n    strongest = \"\"\n    for extension in extensions:\n        strength = 0\n        for letter in extension:\n            if letter.isupper():\n                strength += 1\n            else:\n                strength -= 1\n        if strength == max_strength:\n            if class_name < extension:\n                strongest = extension\n        elif strength > max_strength:\n            max_strength = strength\n            strongest = extension\n\n    return \"{}.{}\".format(class_name, strongest)\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'SErviNGSliC", "    class_name = class_name.split('.')\n    class_name = class_name[-1]\n    strongest_extension = ''\n    strongest_strength = 0\n    for extension in extensions:\n        if extension == class_name:\n            continue\n        strength = 0\n        for char in extension:\n            if char.isupper():\n                strength += 1\n            elif char.islower():\n                strength -= 1\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n\n\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows", "    return class_name + '.' + max(extensions, key=lambda ext: ext.upper().count(ext) - ext.lower().count(ext))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "    # Your code here\n    ext = []\n    for ext_name in extensions:\n        if ext_name[0] == ext_name[0].upper():\n            ext.append((ext_name, -1))\n        elif ext_name[0] == ext_name[0].lower():\n            ext.append((ext_name, 1))\n    ext.sort(key=lambda x: x[1])\n    return class_name + '.' + ext[0][0]\n\nif __name__ == \"__main__\":\n    class_name = 'my_class'\n    extensions = ['AA', 'Be', 'CC']\n    print(Strongest_Extension(class_name, extensions))\n\n    class_name = 'Slices'\n    extensions = ['SErviNGSliCes', 'Cheese', 'StuFfed']\n    print(Strongest_", "    class_name = class_name.lower()\n    extensions = [ext.lower() for ext in extensions]\n    extension_dict = {}\n    for ext in extensions:\n        if ext.startswith(class_name):\n            ext_name = ext[len(class_name):]\n            extension_dict[ext_name] = -len([char for char in ext_name if char.islower()]) / len(ext_name)\n    strongest_ext = max(extension_dict, key=extension_dict.get)\n    return '{}.{}'.format(class_name, strongest_ext)\n\ndef Strongest_Extension_2(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let C"], ["    a_ = a[:]\n    b_ = b[:]\n\n    for i in range(len(b)):\n        b_ = b_ + b[i]\n    print(b_)\n    if b_ in a_:\n        return True\n    else:\n        return False\n\n\n# if __name__ == '__main__':\n#     print(cycpattern_check(\"abcd\", \"abd\"))\n#     print(cycpattern_check(\"hello\", \"ell\"))\n#     print(cycpattern_check(\"whassup\", \"psus\"))\n#     print(cycpattern_check(\"abab\", \"baa\"))\n#     print(cycpattern_check(\"efef\", \"eeff\"))\n#     print(cycpattern_check(\"himenss\", \"simen\"))\n\n\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    a_ = a[:]\n    b_ = b[:]\n\n    for i in range(len(b)):\n        b_ = b_ + b", "    # Code here\n    if a in b:\n        return True\n    else:\n        return False\n\n# {\n#  Driver Code Starts\n# Initial Template for Python 3\n\nif __name__ == '__main__':\n    T = int(input())\n    for _ in range(T):\n        a, b = input().split()\n        ob = Solution()\n        print(ob.cycpattern_check(a, b))\n# } Driver Code Ends\n\n# User Function Template for Python 3\n\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    # Code here\n    if a in b:\n        return True\n    else:\n        for i in range(len(b)):\n            for j in range(1, len(b)-i+1):\n                if b[i:i+j] == a:\n                    return True\n        return False\n\n# {\n#  Driver Code Starts\n# Initial Template for Python 3\n\nif __name__ == '__main", "    #Your code goes here\n    return a[len(a) - len(b):] == b or a[len(a) - len(b):] == ''.join(reversed(b))\n\n#print(cycpattern_check(\"abcd\",\"abd\"))\n#print(cycpattern_check(\"hello\",\"ell\"))\n#print(cycpattern_check(\"whassup\",\"psus\"))\n#print(cycpattern_check(\"abab\",\"baa\"))\n#print(cycpattern_check(\"efef\",\"eeff\"))\n#print(cycpattern_check(\"himenss\",\"simen\"))\n\n#def cycpattern_check(a , b):\n#    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n#    cycpattern_check(\"abcd\",\"abd\") => False\n#    cycpattern_check(\"hello\",\"ell\") => True\n#    cycpattern_check(\"whassup\",\"psus\") => False\n#    cycpattern_check(\"abab\",\"baa\") => True\n#    cycpattern_check(\"efef\",\"eeff\") => False\n#    cycpattern_check(\"himenss\",\"simen\") => True\n#\n#    \"\"\"\n#    #Your code goes here\n#    return any(a[i:i+len(b)]==b for i in range(len(a)-len(b)+1)) or a[::-1][:len(a)-len(b)+1]==b or a[::-1][:len(a", "    n = len(a)\n    if n==0:\n        return False\n    if n==1:\n        return a==b\n    if n==2:\n        return a==b or a==b[1]+b[0]\n    if n==3:\n        return a==b or a==b[2]+b[1]+b[0]\n    if n==4:\n        return a==b or a==b[3]+b[2]+b[1]+b[0]\n    if n==5:\n        return a==b or a==b[4]+b[3]+b[2]+b[1]+b[0]\n    if n==6:\n        return a==b or a==b[5]+b[4]+b[3]+b[2]+b[1]+b[0]\n    if n==7:\n        return a==b or a==b[6]+b[5]+b[4]+b[3]+b[2]+b[1]+b[0]\n    if n==8:\n        return a==b or a==b[7]+b[6]+b[5]+b[4]+b[3]+b[2]+b[1]+b[0]\n    if n==9:\n        return a==b or a==b[8]+b[7]+b[6]+b[5]+b[4]+b[3]+b[2]+b[1]+b[0]\n    if n==10:\n        return a==b or a==b[9]+b[8]+b[7]+b", "    # Enter your code here\n\n\n\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    # Enter your code here\n    a = a + a\n    return a.find(b) != -1\n\n\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    # Enter your code here\n    a = a + a\n    if a.find(b) != -1:\n        return True\n    else:\n        return False\n"], ["    return (num // 10, num % 10)\n\n\ndef is_even(num):\n    \"\"\"Given an integer. return true if the number has an even number of digits.\n\n     Example:\n        is_even(-12) ==> True\n        is_even(123) ==> False\n    \"\"\"\n    return even_odd_count(num)[0] == 0\n\n\ndef is_odd(num):\n    \"\"\"Given an integer. return true if the number has an odd number of digits.\n\n     Example:\n        is_odd(-12) ==> False\n        is_odd(123) ==> True\n    \"\"\"\n    return even_odd_count(num)[0] == 1\n\n\ndef is_divisible_by_ten(num):\n    \"\"\"Given an integer. return true if the number is divisible by 10.\n\n     Example:\n        is_divisible_by_ten(123) ==> False\n        is_divisible_by_ten(10) ==> True\n        is_divisible_by_ten(-10) ==> False\n        is_divisible_by_ten(-123) ==> False\n    \"\"\"\n    return even_odd_count(num)[0] == 0 and num % 10 == 0\n\n\ndef is_divisible_by_ten_and_one(num):\n    \"\"\"Given an integer. return true if the number is divisible by 10 and 1.\n\n     Example:\n        is_divisible_by_ten_and_one(123) ==> False\n        is_divisible_by_ten_and_one(10) ==> False\n        is_divisible_by_ten_and_one(-10) ==> False\n        is_divisible_by_", "    return (num.count('2'), num.count('3'))\n\n\ndef even_odd_count_v1(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return count_even, count_odd\n\n\ndef even_odd_count_v2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_odd, count_even)\n\n\ndef even_odd_count_v3(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    for i in str(num):\n        if int(i", "    # ---------------------------------------------------\n    # TODO: 4. Implement and test this function.\n    #   Note that you should use the same names for parameters\n    #   and return values as in the function signature.\n    # ---------------------------------------------------\n    \"\"\"\n    count_of_even = 0\n    count_of_odd = 0\n    if num > 0:\n        for digit in str(num):\n            if digit % 2 == 0:\n                count_of_even += 1\n            else:\n                count_of_odd += 1\n    elif num < 0:\n        num = num * -1\n        for digit in str(num):\n            if digit % 2 == 0:\n                count_of_odd += 1\n            else:\n                count_of_even += 1\n    else:\n        count_of_even = 0\n        count_of_odd = 0\n    return (count_of_even, count_of_odd)\n    \"\"\"\n\n\ndef main():\n    \"\"\" Calls  even_odd_count   to demonstrate and tests it. \"\"\"\n    # Test calls to even_odd_count:\n    print()\n    print('--------------------------------------------------')\n    print('Testing the   even_odd_count   function:')\n    print('--------------------------------------------------')\n    print('Test 1:')\n    print('  Testing with 10:')\n    print('    Expected Output: (1, 1)')\n    print('    Actual Output:  ', end='')\n    print(even_odd_count(10))\n    print('  Testing with 100:')\n    print('    Expected Output: (2, 0)')\n    print('    Actual Output:  ', end='')\n    print(even_odd_count(10", "    return tuple(map(lambda x: x[0],\n                     filter(lambda x: x[1],\n                            zip(map(lambda x: int(x), str(num)),\n                                map(lambda x: x % 2,\n                                    map(lambda x: int(x), str(num)))))))\n\n\ndef get_number_digits(num):\n    \"\"\"Given an integer. return the number of digits.\"\"\"\n    return len(str(num))\n\n\ndef get_number_sum(num):\n    \"\"\"Given an integer. return the sum of all digits.\"\"\"\n    return sum(map(lambda x: int(x), str(num)))\n\n\ndef get_number_prime_factors(num):\n    \"\"\"Given an integer. return a list of prime factors in increasing order.\"\"\"\n    factors = []\n    for i in range(2, num):\n        if num % i == 0:\n            factors.append(i)\n            while num % i == 0:\n                num /= i\n    return factors\n\n\ndef get_number_prime_factors_count(num):\n    \"\"\"Given an integer. return a dictionary with key as a prime factor and value as the count of that prime factor.\"\"\"\n    factors = get_number_prime_factors(num)\n    return dict(zip(factors, map(lambda x: num / x, factors)))\n\n\ndef get_number_prime_factors_count_ordered(num):\n    \"\"\"Given an integer. return a list of prime factors in increasing order with count of each prime factor.\"\"\"\n    factors_count = get_number_prime_factors_count(num)\n    return sorted(list(factors_count.items()), key=lambda x: x[0])\n\n\ndef get_number_nth_prime_factor(num, n):\n   ", "\n    # Your Code Here\n    count_even = 0\n    count_odd = 0\n    while num != 0:\n        if num % 10 % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num = num // 10\n    return (count_odd, count_even)\n\n\ndef even_odd_count_2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    while num != 0:\n        if num % 10 % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num = num // 10\n    return (count_odd, count_even)\n\n\ndef even_odd_count_3(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    while num != 0:\n        if num % 10 % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num = num // 10\n    return count_odd, count_even\n\n\ndef even_odd_count_4(num):\n    \"\"\"Given an integer. return a tuple that"], ["\n    # This is the string we'll return\n    roman_number = ''\n\n    # If our number is greater than 1000, return 'm'\n    # (no other roman numerals are greater than 1000)\n    if number >= 1000:\n        roman_number += 'm'\n\n    # We'll make a list of tuples of all the numbers and\n    # their corresponding roman numerals\n    numbers_and_roman = [\n        (1000, 'm'),\n        (500, 'd'),\n        (100, 'c'),\n        (50, 'l'),\n        (10, 'x'),\n        (5, 'v'),\n        (1, 'i')\n    ]\n\n    # Go through the list of numbers and roman numerals\n    # and subtract the number from the number until it's\n    # less than or equal to zero\n    for number_and_roman in numbers_and_roman:\n        # If the number is still greater than zero,\n        # subtract the current number and add the\n        # current roman numeral to the string\n        while number > 0:\n            # If the number is greater than the current\n            # number, subtract the current number\n            if number >= number_and_roman[0]:\n                roman_number += number_and_roman[1]\n                number -= number_and_roman[0]\n            # Otherwise, break out of the loop\n            else:\n                break\n\n    # Return the roman numeral\n    return roman_number\n\n\nif __name__", "    if 1 <= number <= 1000:\n        if number >= 1000:\n            return 'm' * (number // 1000) + int_to_mini_roman(number % 1000)\n        else:\n            if number >= 100:\n                return 'c' * (number // 100) + int_to_mini_roman(number % 100)\n            else:\n                if number >= 10:\n                    return 'x' * (number // 10) + int_to_mini_roman(number % 10)\n                else:\n                    return 'i' * number\n    else:\n        return 'error'\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 4999\n\n    Examples:\n    >>> int_to_roman(19) == 'ix'\n    >>> int_to_roman(152) == 'clxxii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    if 1 <= number <= 4999:\n        if number >= 1000:\n            return 'm' * (number // 1000) + int_to_roman(number % 1000)\n        else:\n            if number >= 100:\n                return 'c' *", "    # This is the table we will use.\n    # The first element is the integer value, and the second is the roman numeral\n    # corresponding to it.\n    lookup = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'),\n               (90, 'xc'), (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'), (5, 'v'),\n               (4, 'iv'), (1, 'i')]\n\n    # We'll build up the roman numeral as a string.\n    roman_numeral = ''\n\n    for num, numeral in lookup:\n        # As long as the number is greater than the current numeral value,\n        # add the numeral to the roman numeral.\n        while number >= num:\n            roman_numeral += numeral\n            number -= num\n\n    return roman_numeral\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, obtain its integer value, and return it.\n    Restrictions: roman_numeral.isalpha() and len(roman_numeral) <= 15\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    # This is the table", "    # TODO: Fill in the implementation\n    pass\n\n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent, and return it.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    # TODO: Fill in the implementation\n    pass\n\n\ndef main():\n    import sys\n    args = sys.argv[1:]\n\n    if not args:\n        print('Usage: {} NUMBER'.format(sys.argv[0]))\n    else:\n        number = int(args[0])\n        print(int_to_mini_roman(number))\n        print(mini_roman_to_int(int_to_mini_roman(number)))\n\n\nif __name__ == '__main__':\n    main()\n", "    # Mapping of digit to mini-roman numeral.\n    digit_to_mini_roman = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x',\n                           40: 'xl', 50: 'l', 90: 'xc', 100: 'c',\n                           400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n\n    # Initialise the output string.\n    roman_num = ''\n\n    # Iterate through all the digits in the number.\n    for digit in str(number):\n        # Append the corresponding mini-roman numeral to the output string.\n        roman_num += digit_to_mini_roman[int(digit)]\n\n    return roman_num\n\n\ndef mini_roman_to_int(roman_num):\n    \"\"\"\n    Given a roman numeral string, obtain its corresponding integer value, and\n    return it.\n    Restrictions: 1 <= len(roman_num) <= 1000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    # Mapping of mini-roman numeral to digit.\n    mini_roman_to_digit = {'i': 1, 'iv':"], ["    if (a * a == b * b + c * c):\n        return True\n    return False\n\n\ndef main():\n    print(right_angle_triangle(3, 4, 5))\n    print(right_angle_triangle(1, 2, 3))\n\n\nif __name__ == '__main__':\n    main()\n\n\n#Reference:\n#https://", "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\ndef right_angle_triangle_from_hypotenuse(c):\n    '''\n    Given the length of the hypotenuse of a right-angled triangle. Return the \n    lengths of the other two sides of the triangle.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle_from_hypotenuse(5) == (3, 4)\n    right_angle_triangle_from_hypotenuse(1) == (1, 1)\n    '''\n    a = c**2 - b**2\n    b = c**2 - a**2\n    a = a**0.5\n    b = b**0.5\n    return a, b\n\ndef perimeter(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the perimeter of\n    the triangle.\n    Example:\n    perimeter(3, 4, 5) == 12\n    perimeter(1, 2, 3) == 6\n    '''\n    return a + b + c\n\ndef area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the\n    triangle.\n    Example:\n    area(3, 4, 5) == 6\n    area(1, 2, 3) == 2\n    '''\n    p = perimeter(a, b, c)\n    s = (p * (p - a)", "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\ndef pythagorean_triplet(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a pythagorean triplet, False otherwise.\n    A pythagorean triplet is a set of three positive integers, a < b < c, for \n    which,\n    a**2 + b**2 = c**2\n    Example:\n    pythagorean_triplet(3, 4, 5) == True\n    pythagorean_triplet(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\ndef pythagorean_triplet_product(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the product of the\n    three numbers, or None if the three sides do not form a pythagorean triplet.\n    Example:\n    pythagorean_triplet_product(3, 4, 5) == 60\n    pythagorean_triplet_product(1, 2, 3) == None\n    '''\n    if a**2 + b**2 == c**2:\n        return a*b*c\n    else:\n        return None\n\ndef pythagorean_triplet_sum(a, b, c):\n    '''\n    Given the lengths of the three sides of a", "    if a ** 2 == b ** 2 + c ** 2 or b ** 2 == a ** 2 + c ** 2 or c ** 2 == a ** 2 + b ** 2:\n        return True\n    return False\n\ndef triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    return False\n\ndef triangle_types(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return a tuple containing\n    the types of triangle in the following order:\n    - isosceles\n    - scalene\n    - equilateral\n    - right-angled\n    - acute\n    - obtuse\n    - isosceles-right-angled\n    - scalene-right-angled\n    - equilateral-right-angled\n    - isosceles-obtuse\n    - scalene-obtuse\n    - equilateral-obtuse\n    - isosceles-acute\n    - scalene-acute\n    - equilateral-acute\n    '''\n    if triangle(a, b, c):\n        if right_angle_triangle(a, b, c):\n            if a == b == c:\n                return ('equilateral', 'right-angled', 'acute')\n            if a == b or b == c or c == a:\n                return ('isosceles', 'right-angled', 'ac", "    return a**2 + b**2 == c**2\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return a**2 + b**2 == c**2\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return a**2 + b**2 == c**2\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, "], ["    max_count = 0\n    result = \"\"\n    for word in words:\n        if len(word) > max_count:\n            max_count = len(word)\n            result = word\n    return result\n\n\ndef find_min(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with minimum number\n    of unique characters. If multiple strings have minimum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_min([\"name\", \"of\", \"string\"]) == \"of\"\n    find_min([\"name\", \"enam\", \"game\"]) == \"name\"\n    find_min([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"bb\"\n    \"\"\"\n    min_count = len(words[0])\n    result = words[0]\n    for word in words:\n        if len(word) < min_count:\n            min_count = len(word)\n            result = word\n    return result\n\n\ndef main():\n    print(find_max([\"name\", \"of\", \"string\"]))\n    print(find_max([\"name\", \"enam\", \"game\"]))\n    print(find_max([\"aaaaaaa\", \"bb\", \"cc\"]))\n    print(find_min([\"name\", \"of\", \"string\"]))\n    print(find_min([\"name\", \"enam\", \"game\"]))\n    print(find_min([\"aaaaaaa\", \"bb\", \"cc\"]))\n\n\nif __name__ == \"__main__\":\n    main", "    # your code here\n    # count_words = [dict.fromkeys(i,0) for i in words]\n    # for i in range(len(words)):\n    #     for j in range(len(words[i])):\n    #         if words[i][j] in count_words[i]:\n    #             count_words[i][words[i][j]] += 1\n    # count_words = [dict.fromkeys(i,0) for i in words]\n    # for i in range(len(words)):\n    #     for j in range(len(words[i])):\n    #         if words[i][j] in count_words[i]:\n    #             count_words[i][words[i][j]] += 1\n    #         else:\n    #             count_words[i][words[i][j]] = 1\n    count_words = [dict.fromkeys(i,0) for i in words]\n    for i in range(len(words)):\n        for j in range(len(words[i])):\n            count_words[i][words[i][j]] += 1\n    count_words = [sorted(dict.items(), key=lambda x: x[1], reverse=True) for dict in count_words]\n    count_words = [[k for k,v in count_words[i]] for i in range(len(count_words))]\n    max_ = [max(count_words[i],key=count_words[i].get)]\n    return max_[0]\n\nif __name__ == '__main__':\n   ", "\n    # Write your code here\n    return \"\"\n\n\ndef remove_duplicate_characters(s):\n    \"\"\"Write a function that accepts a string and returns a string that has\n    all duplicate characters removed.\n\n    remove_duplicate_characters(\"aaaabbbb\") == \"ab\"\n    remove_duplicate_characters(\"abcdefg\") == \"abcdefg\"\n    remove_duplicate_characters(\"aaaaa\") == \"\"\n    \"\"\"\n\n    # Write your code here\n    return \"\"\n\n\ndef has_duplicate_characters(s):\n    \"\"\"Write a function that accepts a string and returns True if the string\n    has any duplicate characters.\n\n    has_duplicate_characters(\"aaaabbbb\") == True\n    has_duplicate_characters(\"abcdefg\") == False\n    has_duplicate_characters(\"aaaaa\") == True\n    \"\"\"\n\n    # Write your code here\n    return False\n\n\ndef remove_duplicate_characters_in_place(s):\n    \"\"\"Write a function that accepts a string and modifies the string so that\n    all duplicate characters are removed.\n\n    remove_duplicate_characters_in_place(\"aaaabbbb\") == \"ab\"\n    remove_duplicate_characters_in_place(\"abcdefg\") == \"abcdefg\"\n    remove_duplicate_characters_in_place(\"aaaaa\") == \"\"\n    \"\"\"\n\n    # Write your code here\n    return \"\"\n\n\ndef has_duplicate_characters_in_place(s):\n    \"\"\"Write a function that accepts a string and", "    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n            max_word = word\n    max_char = set()\n    for word in words:\n        if len(word) == max_length:\n            for char in word:\n                if char not in max_char:\n                    max_char.add(char)\n    return max_word\n\n\nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\", \"cc\"]))\nprint(find_max([\"a\", \"bb\"]))\nprint(find_max([\"abcde\", \"bc\", \"c\"]))\nprint(find_max([\"abcde\", \"abcde\", \"bc\", \"c\"]))\nprint(find_max([\"a\", \"abcde\"]))\nprint(find_max([\"abcde\", \"a\"]))\nprint(find_max([\"abcde\", \"b\", \"c\", \"d\"]))\nprint(find_max([\"abcde\", \"b\", \"c\", \"d\", \"e\"]))\nprint(find_max([\"abcde\", \"b\", \"c\", \"d\", \"e\", \"f\"]))\nprint(find_max([\"abcde\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]))\nprint(find_max([\"abcde\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"", "    max_count = 0\n    word_with_max = \"\"\n\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            word_with_max = word\n\n    return word_with_max\n\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    words = sorted(words, key=lambda x: len(set(x)), reverse=True)\n    return words[0]\n\n\n# def find_max(words):\n#     \"\"\"Write a function that accepts a list of strings.\n#     The list contains different words. Return the word with maximum number\n#     of unique characters. If multiple strings have maximum number of unique\n#     characters, return the one which comes first in lexicographical order.\n\n#     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n#     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n#     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#    "], ["    return [number + need, remaining - (need - number)]\n\nif __name__ == '__main__':\n    print(eat(1, 10, 10))\n    print(eat(4, 8, 9))\n    print(eat(2, 11, 5))\n    print(eat(5, 6, 10))\n\n    #These \"asserts\" are used for self-checking and not for an auto-testing\n    assert eat(1, 10, 10) == [11, 0], \"Example\"\n    assert eat(4, 8, 9) == [12, 1], \"Example\"\n    assert", "    # YOUR CODE HERE\n    return [number + need, remaining]\n    \n\ndef rabbit_run(speed, time):\n    \"\"\"\n    A rabbit runs on a straight line,\n    and the distance covered depends on its speed (in meters per second) and the time (in seconds)\n    you should return an array of [ total distance covered, time spent running, distance covered per second ]\n    \n    Example:\n    * rabbit_run(10, 3) -> [30, 3, 10]\n    * rabbit_run(30, 10) -> [300, 10, 30]\n    * rabbit_run(100, 10", "    pass\n\nif __name__ == \"__main__\":\n    print(eat(5, 6, 10))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5))\n", "    return number + need, remaining - need\n\n\n# Enter your code here\nprint(eat(5, 6, 10))\nprint(eat(4, 8, 9))\nprint(eat(1, 10, 10))\nprint(eat(2, 11, 5))\n", "    if remaining >= need:\n        return [number+need, remaining-need]\n    else:\n        return [number+remaining, 0]\n\nprint(eat(5, 6, 10))\nprint(eat(4, 8, 9))\nprint(eat(1, 10, 10))\nprint(eat(2, 11, 5))\nprint(eat(5, 6, 10))\nprint(eat(4, 8, 9))\nprint(eat(1, 10, 10))\nprint(eat(2, 11, 5))\nprint(eat(5, 6, "], ["    if operator[0] != '+':\n        operand.insert(0, 0)\n    for i in range(1, len(operator)):\n        if operator[i] == '+':\n            operand[i] += operand[i - 1]\n        elif operator[i] == '-':\n            operand[i] = operand[i - 1] - operand[i]\n        elif operator[i] == '*':\n            operand[i] *= operand[i - 1]\n        elif operator[i] == '//':\n            operand[i] = int(operand[i - 1] / operand[i])\n        elif operator[i] == '**':\n            operand[i] = operand[i] ** operand[i - 1]\n    return operand[-1]\n\n\ndef test_do_algebra():\n    assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert do_algebra(['+', '*', '-', '+'], [2, 3, 4, 5, 6])", "    result = 0\n    for i, o in enumerate(operator):\n        result += operand[i]\n        if o == '+':\n            result += operand[i + 1]\n        if o == '-':\n            result -= operand[i + 1]\n        if o == '*':\n            result *= operand[i + 1]\n        if o == '//':\n            result //= operand[i + 1]\n        if o == '**':\n            result **= operand[i + 1]\n    return result\n\n\ndef test_function(test_case):\n    # Note: The solution is a single line of code using reduce from functools module\n    # test_case is a tuple of (operator, operand)\n    # operator is a list of operators\n    # operand is a list of operands\n    # Note: operator and operand are both lists\n    # operand is a list of non-negative integers\n    # Note: The length of operator list is equal to the length of operand list minus one.\n    # The basic algebra operations:\n    # Addition ( + ) \n    # Subtraction", "\n    def get_operator(operator):\n        if len(operator) == 1:\n            return operator[0]\n        if len(operator) == 2:\n            return operator[0] + operator[1]\n        if len(operator) > 2:\n            return operator[0] + get_operator(operator[1:])\n\n    operator_string = get_operator(operator)\n    if operator_string == '//':\n        return int(sum(operand) / len(operand))\n    else:\n        return eval(operator_string.join(map(str, operand)))\n\n\nif __name__ == '__main__':\n    print('Example:')\n    print(do_algebra(['+', '*', '-'], [2, 3, 4, 5]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9, \"1st example\"\n    assert do_algebra(['*', '/', '+'], [2, 3, 4, 5", "    result = 0\n    i = 0\n    while i < len(operator):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n        i += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    print(\"result = \", do_algebra(operator, operand))\n\n    # Test 2\n    operator = ['+', '+', '+']\n    operand = [2, 3, 4, 5]\n    print(\"result = \", do_algebra(operator, operand))\n\n    # Test 3\n    operator = ['*', '*']\n    operand = [2, ", "    #TODO: write your code here\n    pass\n\ndef do_algebra_2(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    #TODO: write your code here\n    pass\n"], ["    s = list(s)\n    n = len(s)\n    for i in range(n):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n        else:\n            s[i] = s[i]\n    return \"\".join(s)\n\n\nif __name__ == \"__main__\":\n    s = input()\n    print(solve(s))\n", "    # your code here\n    s = [c.lower() if c.isalpha() else c for c in s]\n    return ''.join(s[::-1])\n\nprint(solve('1234'))\nprint(solve('ab'))\nprint(solve('#a@C'))\nprint(solve('hello world'))\nprint(solve('@a#b'))\nprint(solve('A1B2C3'))\nprint(solve('H3ll0 W0r1d'))\nprint(solve('@a#B'))\nprint(solve('", "    res = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                res += i.lower()\n            else:\n                res += i.upper()\n        else:\n            res += i\n    return res\n\n\ns = \"1234\"\nprint(solve(s))\ns = \"ab\"\nprint(solve(s))\ns = \"#a@C\"\nprint(solve(s))\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    res = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                res += i.lower()\n            else:\n                res += i.upper()\n        else:\n            res += i\n    return res\n\n\ns = \"1234\"\nprint(solve(s))\ns = \"ab\"\nprint(solve(s))\ns = \"#a@C\"\nprint(solve(s))\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it", "    new_str = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            new_str += s[i].upper() if s[i].islower() else s[i].lower()\n        else:\n            new_str += s[i]\n    return new_str\n\n\n#print(solve('1234'))\n#print(solve('ab'))\n#print(solve('#a@C'))\n\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    new_str = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            new_str += s[i].upper() if s[i].islower() else s[i].lower()\n        else:\n            new_str += s[i]\n    return new_str\n\n\nprint(solve('1234'))\nprint(solve('ab'))\nprint(solve('#a@C'))\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.", "    return ''.join([x.lower() if x.islower() else x.upper() for x in s if x.isalpha()])\n\n\ndef test_solve():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    assert solve(\"Hello World\") == \"HELLO WORLD\"\n    assert solve(\"a1B2c3D4E5f6G7h8I9J0\") == \"A1b2C3d4e5F6g7H8i9j0\"\n    assert solve(\"a1B2c3D4E5f6G7h8I9J0a1B2c3D4E5f6G7h8I9J0\") == \"A1b2C3d4e5F6g7H8i9j0A1b2C3d4e5F6g7H8i9j0\"\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"\") == \"\"\n    assert solve(\"Hello World\") == \"HELLO WORLD\"\n    assert solve(\"a1B2c3D4E5f6G7h8I9J0\") == \"A1b2C3d4e5F6g7H8i9j0\"\n    assert solve(\"a1B2c3D4E5f6G7h8I9J0"], ["    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n\ndef main():\n    print(string_to_md5('Hello world'))\n\nif __name__ == '__main__':\n    main()\n", "\n    # Implement this function\n\ndef md5_to_string(md5hash):\n    \"\"\"\n    Given a md5 hash string 'md5hash', return its string equivalent.\n    If 'md5hash' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n\n    # Implement this function\n\n\ndef string_to_md5_hash(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5_hash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    # Implement this function\n\ndef md5_hash_to_string(md5hash):\n    \"\"\"\n    Given a md5 hash string 'md5hash', return its string equivalent.\n    If 'md5hash' is an empty string, return None.\n\n    >>> md5_hash_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n\n    # Implement this function\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    print('OK')\n", "    if not text:\n        return None\n\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == 'sha1:2ef7bde608a501b070bc61f7698c5e51be1e8cda'\n    \"\"\"\n    if not text:\n        return None\n\n    return hashlib.sha1(text.encode('utf-8')).hexdigest()\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == 'sha256:e59bdb95e1903b754395f9e723741e5310cb56f966a7e2e981a61e9fc3870a60'\n    \"\"\"\n    if not text:\n        return None\n\n    return hashlib.sha256(text.encode('utf-8')).hexdigest()\n\n\ndef string_to_sha512(text):\n    \"\"\"\n    Given a string 'text', return its sha512 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha512('Hello world') == 'sha512", "    if text == '':\n        return None\n\n    # MD5 is a cryptographic hash algorithm. It returns a hexadecimal string.\n    return hashlib.md5(text.encode()).hexdigest()\n\n\ndef is_md5_equal(str1, str2):\n    \"\"\"\n    Given two strings 'str1' and 'str2', return whether they are equal\n    after being hashed using md5.\n    If either string is an empty string, return False.\n\n    >>> is_md5_equal('abc', 'cba') == True\n    >>> is_md5_equal('abc', 'def') == False\n    \"\"\"\n    return str1 == str2\n\n\ndef is_md5_hash_valid(text, hashed):\n    \"\"\"\n    Given a string 'text' and a hashed string 'hashed', return whether\n    the hashed string is equal to the md5 hash of the string.\n\n    >>> is_md5_hash_valid('abc', '3e25960a79dbc69b674cd4ec67a72c62') == True\n    >>> is_md5_hash_valid('abc', 'd233d639c85b30309335b8a91a474f7e') == False\n    \"\"\"\n    return is_md5_equal(hashed, string_to_md5(text))\n\n\ndef is_md5_hash_valid_wrapper(text, hashed):\n    \"\"\"\n    A wrapper function that calls is_md5_hash_valid with the text and the\n    hashed text.\n\n    >>> is_md5_hash_valid_wrapper('abc', '3e25960a79dbc69", "    if len(text) == 0:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n\ndef string_to_md5_hex(text):\n    \"\"\"\n    Given a string 'text', return its md5 hexadecimal string equivalent.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5_hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if len(text) == 0:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == '2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b28bb'\n    \"\"\"\n    if len(text) == 0:\n        return None\n    else:\n        return hashlib.sha256(text.encode()).hexdigest()\n\n\ndef string_to_sha256_hex(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hexadecimal string equivalent.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256_hex('Hello world') == '"], ["    # Your code here\n    l = []\n    for i in range(a, b+1):\n        if int(str(i)[::-1]) % 2 == 0:\n            l.append(i)\n    return l\n\n\ndef test_generate_integers():\n    assert generate_integers(2, 8) == [2, 4, 6, 8]\n    assert generate_integers(8, 2) == [2, 4, 6, 8]\n    assert generate_integers(10, 14) == []\n    assert generate_integers(2, 2) == []\n    assert generate_integers(10, 9) == []\n\n\nif __name__ == '__main__':\n    test_generate_integers()\n", "    # Your code here\n    li = []\n    if a > b:\n        return []\n    if a == b:\n        if a % 2 == 0:\n            li.append(a)\n            return li\n        else:\n            return []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            li.append(i)\n    return li\n\ndef test_generate_integers():\n    assert generate_integers(2, 8) == [2, 4, 6, 8]\n    assert generate_integers(8, 2) == [2, 4, 6, 8]\n    assert generate_integers(10, 14) == []\n    assert generate_integers(12, 20) == [14, 16, 18]\n\nif __name__ == '__main__':\n    test_generate_integers()\n", "    if a >= b:\n        return []\n    even_nums = []\n    for x in range(a, b):\n        if x%2 == 0:\n            even_nums.append(x)\n    return even_nums\n\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a >= b:\n        return []\n    even_nums = []\n    for x in range(a, b):\n        if x%2 == 0:\n            even_nums.append(x)\n    return even_nums\n\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a >= b:\n        return []\n    even_nums = []\n    for x in range(a, b):\n        if x%2 == 0:\n            even_num", "    if a > b:\n        return []\n    if a == b:\n        return [a]\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n\ndef generate_integers_recursive(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        return []\n    if a == b:\n        return [a]\n    return [i for i in range(a, b + 1) if i % 2 == 0] + generate_integers_recursive(a + 2, b)\n\n\ndef generate_integers_with_step(a, b, step):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8, 2) => [2, 4, 6, 8]\n    generate_integers(8, 2, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14, 3) => [10, 13]\n    \"\"\"\n    if a > b:\n        return []\n    if a == b:\n       ", "    l = []\n    if a > b:\n        a,b = b,a\n    for i in range(a,b+1):\n        if i%2 == 0:\n            l.append(i)\n    return l\n\n# print(generate_integers(2,8))\n# print(generate_integers(8,2))\n# print(generate_integers(10,14))\n\n\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    l = []\n    if a > b:\n        a,b = b,a\n    for i in range(a,b+1):\n        if i%2 == 0:\n            l.append(i)\n    return l\n\n# print(generate_integers(2,8))\n# print(generate_integers(8,2))\n# print(generate_integers(10,14))\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8,"]]}