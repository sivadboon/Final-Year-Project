{"references": ["\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n", "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n", "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n", "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n", "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n", "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n", "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n", "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n", "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n", "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n", "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"], "predictions": [["", "", "", "", ""], ["", "", "", "", ""], ["\ndef get_decimal_part(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> get_decimal_part(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\ndef get_decimal_part(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> get_decimal_part(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\ndef get_decimal_part(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> get_decimal_part(3.5)\n    0.5\n    \"\"\"\n\ndef truncate_number(number: float) -> float:", "\ndef get_number_of_decimals(number: float) -> int:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the number of decimals for the given number.\n    >>> get_number_of_decimals(3.5)\n    1\n    \"\"\"\n\ndef round_number(number: float, decimals: int) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the rounded number using the given number of decimals.\n    >>> round_number(3.5, 0)\n    4\n    \"\"\"\n\ndef get_number_of_digits(number: float) -> int:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the number of digits of the given number.\n    >>> get_number_of_digits(3.5)\n    2\n    \"\"\"\n\ndef round_number_to_digits(number: float, digits: int) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the rounded number using the given number of digits.\n    >>> round_number_to_digits(3.5, 0)\n    4\n    \"\"\"\n\ndef get_first_digit_from_number(number: float) -> int:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the first digit", "\ndef get_fraction_as_string(number: float) -> str:\n    \"\"\" Given a floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the fraction as string with two decimal places.\n    >>> get_fraction_as_string(0.2)\n    '20.00'\n    \"\"\"\n\ndef is_int(x: object) -> bool:\n    \"\"\" Checks if x is an integer\n    >>> is_int(0)\n    True\n    >>> is_int(0.0)\n    True\n    >>> is_int(1)\n    True\n    >>> is_int(-1)\n    True\n    >>> is_int(0.0)\n    True\n    >>> is_int(1.0)\n    True\n    >>> is_int(-1.0)\n    True\n    >>> is_int(1.00)\n    False\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Checks if a number n is a prime number\n    >>> is_prime(0)\n    False\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    \"\"\"\n\ndef is_armstrong(n: int) -> bool:\n    \"\"\" Checks if a number n is an Armstrong number\n    >>> is_armstrong(0)\n    False\n    >>> is_armstrong(1)\n    False\n    >>> is_armstrong(2)\n    True\n    >>> is_armstrong(3)\n    False\n    >>> is_armstrong(153)\n    True\n    >>> is_armstrong(370)\n    True\n    >>> is_armstrong(371)\n    False\n    \"\"\"\n\ndef is_palindrome(s: str) ->", "\ndef factorial(number: int) -> int:\n    \"\"\" Calculate the factorial of a given positive integer.\n\n    >>> factorial(2)\n    2\n    >>> factorial(3)\n    6\n    \"\"\"\n\ndef fibonacci(n: int) -> int:\n    \"\"\" Calculate the nth number in the Fibonacci sequence.\n    The Fibonacci sequence is defined by the following relation:\n    Fn = Fn-1 + Fn-2\n\n    For example, the first few numbers are: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...\n\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    \"\"\"\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Calculate the Greatest Common Divisor of two positive integers.\n\n    >>> greatest_common_divisor(5, 10)\n    5\n    >>> greatest_common_divisor(5, 4)\n    1\n    \"\"\"\n\ndef greatest_common_divisor_euclidian(a: int, b: int) -> int:\n    \"\"\" Calculate the Greatest Common Divisor of two positive integers using\n    the Euclidian Algorithm.\n\n    >>> greatest_common_divisor_euclidian(5, 10)\n    5\n    >>> greatest_common_divisor_euclidian(5, 4)\n    1\n    \"\"\"\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Calculate the Least Common Multiple of two positive integers.\n\n    >>> least_common_multiple(5, 10)\n    10\n    >>> least_common_multiple(5, 4)\n    40\n    \"\"\"\n\ndef least_common_multiple_euclidian(a: int, b", "\ndef get_decimal_part(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> get_decimal_part(3.5)\n    0.5\n    \"\"\"\n    return number - math.floor(number)\n\ndef get_integer_part(number: float) -> int:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the integer part of the number.\n    >>> get_integer_part(3.5)\n    3\n    \"\"\"\n    return math.floor(number)\n\ndef add(a: int, b: int) -> int:\n    \"\"\" Given two integers, return their sum.\n\n    >>> add(1, 2)\n    3\n    \"\"\"\n    return a + b\n\ndef subtract(a: int, b: int) -> int:\n    \"\"\" Given two integers, return their difference.\n\n    >>> subtract(2, 1)\n    1\n    \"\"\"\n    return a - b\n\ndef multiply(a: int, b: int) -> int:\n    \"\"\" Given two integers, return their product.\n\n    >>> multiply(2, 3)\n    6\n    \"\"\"\n    return a * b\n\ndef divide(a: int, b: int) -> int:\n    \"\"\" Given two integers, return their quotient.\n\n    >>> divide(4, 2)\n    2\n    \"\"\"\n    return a // b\n\ndef power(a: int, b: int) -> int:\n    \"\"\" Given two integers, return their power.\n\n    >>> power(2, 3)\n    8\n    \"\"\"\n    return a ** b\n\ndef sum_of_squares(a: int, b: int) -> int:\n    \"\"\" Given two"], ["\n# Write your code here.\n", "", "", "", ""], ["\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\n# Your code goes below.\n\n# Your code goes above.\n\ndef test_mean_absolute_deviation():\n    assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n\n\nif __name__ == \"__main__\":\n    test_mean_absolute_deviation()\n", "", "", ""], ["\n# Your code here\n", "", "", "", ""], ["", "", "", "", ""], ["\ndef filter_by_regex(strings: List[str], pattern: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that match given pattern\n    >>> filter_by_regex([], 'a')\n    []\n    >>> filter_by_regex(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n\ndef filter_by_lambda(strings: List[str], condition: Callable[[str], bool]) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that match given condition\n    >>> filter_by_lambda([], 'a')\n    []\n    >>> filter_by_lambda(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n", "", "", "", ""], ["", "", "\n# Write your code below.\n\n\n# Tests\nassert sum_product([1, 2, 3, 4]) == (10, 24)\nassert sum_product([]) == (0, 1)\n", "", "\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n"], ["", "", "", "", ""], ["", "\ndef longest_palindromic_substring(string: str) -> str:\n    \"\"\" Return the longest palindromic substring in a given string\n    >>> longest_palindromic_substring('a')\n    'a'\n    >>> longest_palindromic_substring('ab')\n    'ab'\n    >>> longest_palindromic_substring('abc')\n    'abc'\n    >>> longest_palindromic_substring('abac')\n    'aba'\n    >>> longest_palindromic_substring('aabc')\n    'aba'\n    >>> longest_palindromic_substring('abcc')\n    'abcc'\n    \"\"\"\n    pass\n\n\ndef longest_palindromic_substring_dynamic(string: str) -> str:\n    \"\"\" Return the longest palindromic substring in a given string\n    >>> longest_palindromic_substring_dynamic('a')\n    'a'\n    >>> longest_palindromic_substring_dynamic('ab')\n    'ab'\n    >>> longest_palindromic_substring_dynamic('abc')\n    'abc'\n    >>> longest_palindromic_substring_dynamic('abac')\n    'aba'\n    >>> longest_palindromic_substring_dynamic('aabc')\n    'aba'\n    >>> longest_palindromic_substring_dynamic('abcc')\n    'abcc'\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "#    return string[1:]+string[1:-1][::-1]\n    return string[1:-1][::-1]+string[1:]\n\n\ndef make_palindrome_old(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    length = len(string)\n    if length == 0:\n        return ''\n    palindrome_size = 0\n    palindrome_start = 0\n    for i in range(length // 2):\n        if string[i] != string[length - i - 1]:\n            break\n        palindrome_size = i + 1\n        palindrome_start = i\n    if palindrome_size == length // 2:\n        return string + string[palindrome_start:-palindrome_size][::-1]\n    return string + string[palindrome_start:-palindrome_size][::-1] + string[length - palindrome_size:]\n\n\ndef test_palindromes():\n    for test in [\n        ('', True),\n        ('cata', True),\n        ('c', False),\n        ('cat', False),\n        ('cata', True),\n        ('tacocat', True),\n        ('tacocat', True),\n        ('tacocat', True),\n        ('tacocat',", "\n#    def reverse(string: str) -> str:\n#        return string[::-1]\n    # First we need to find the longest palindrome suffix\n#    suffix = string\n#    while len(suffix) > 1:\n#        if is_palindrome(suffix):\n#            suffix = suffix[1:]\n#        else:\n#            break\n#    # Next we need to find the longest prefix that is a palindrome and then reverse that\n#    prefix = string[:len(string) - len(suffix)]\n#    # Then we can append a reversed prefix to the end of the suffix and return the result\n#    return prefix + reverse(suffix)\n\n\ndef make_palindrome_v2(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome_v2('')\n    ''\n    >>> make_palindrome_v2('cat')\n    'catac'\n    >>> make_palindrome_v2('cata')\n    'catac'\n    \"\"\"\n    def reverse(string: str) -> str:\n        return string[::-1]\n\n    suffix = string\n    while len(suffix) > 1:\n        if is_palindrome(suffix):\n            suffix = suffix[1:]\n        else:\n            break\n    prefix = string[:len(string) - len(suffix)]\n    return prefix + reverse(suffix)\n\n\ndef make_palindrome_v3(string", "\nif __name__ == \"__main__\":\n    print(is_palindrome(''))\n    print(is_palindrome('cat'))\n    print(is_palindrome('cata'))\n    print(make_palindrome(''))\n    print(make_palindrome('cat'))\n    print(make_palindrome('cata'))"], ["", "\ndef xor_cipher(s: str) -> str:\n    \"\"\" Input is a string consisting of 1s and 0s.\n    Perform binary XOR on every pair of adjacent characters in this string\n    and return the result as a string.\n    >>> xor_cipher('1001000111011110')\n    '1011111000000001'\n    \"\"\"\n\ndef xor_key_gen(string: str, key: int) -> List[int]:\n    \"\"\"Input is a string consisting of 1s and 0s and an integer.\n    For each character in the input string, XOR this character with the key\n    and return a list of all the XOR results.\n    >>> xor_key_gen('1001000111011110', 10)\n    [9, 11, 8, 13, 15, 10, 13, 5, 10, 7]\n    \"\"\"\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "", "\ndef encode_message(message: str, key: str) -> str:\n    \"\"\" Encrypts a message using a key.\n    >>> encode_message('A message to encrypt', 'SECRET')\n    '1010101010010011100100000010100101010111000011010101000100000100000000100101000111110101000001000101110000101001010011011001111101100110001110111001100100101111001101010001110100010101011100111001010100100111010010011110010101010011000001101011010111001010111010101011100110101010001101111010000011110001101101010001101000011101100001101110011101100111010101010101000111001110111000111011", ""], ["", "\nif __name__ == '__main__':\n    print(longest(['a', 'bb', 'ccc']))\n", "", "", "\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)\n"], ["\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    60\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return true if integer n is prime, otherwise return false\n    >>> is_prime(15)\n    True\n    >>> is_prime(17)\n    False\n    \"\"\"\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Return true if integer n is palindrome, otherwise return false\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    \"\"\"\n\ndef is_armstrong_number(n: int) -> bool:\n    \"\"\" Return true if integer n is armstrong number, otherwise return false\n    >>> is_armstrong_number(153)\n    True\n    >>> is_armstrong_number(154)\n    False\n    \"\"\"\n\ndef is_fibonacci_number(n: int) -> bool:\n    \"\"\" Return true if integer n is fibonacci number, otherwise return false\n    >>> is_fibonacci_number(153)\n    True\n    >>> is_fibonacci_number(154)\n    False\n    \"\"\"\n\ndef is_palindromic_number(n: int) -> bool:\n    \"\"\" Return true if integer n is palindromic number, otherwise return false\n    >>> is_palindromic_number(153)\n    True\n    >>> is_palindromic_number(154)\n    False\n    \"\"\"\n\ndef is_palindromic_prime(n: int) -> bool:\n    \"\"\" Return true if integer n is palindromic prime, otherwise return false\n    >>> is_palindromic_prime(153)\n    True\n    >>> is_palindromic_prime(1", "\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    6\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Return True if the string s is palindrome, otherwise return False\n    >>> is_palindrome('abc')\n    True\n    >>> is_palindrome('abcd')\n    False\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if the number n is prime, otherwise return False\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    \"\"\"\n\ndef next_prime(n: int) -> int:\n    \"\"\" Return the next prime number after n\n    >>> next_prime(1)\n    2\n    >>> next_prime(2)\n    3\n    \"\"\"\n\ndef factorial(n: int) -> int:\n    \"\"\" Return the factorial of n\n    >>> factorial(0)\n    1\n    >>> factorial(1)\n    1\n    >>> factorial(2)\n    2\n    >>> factorial(3)\n    6\n    \"\"\"\n\ndef fibonacci(n: int) -> int:\n    \"\"\" Return the nth Fibonacci number\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(6)\n    8\n    \"\"\"\n\ndef is_armstrong(n: int) -> bool:\n    \"\"\" Return True if the number n is armstrong, otherwise return False\n    >>> is_armstrong(153)\n    True\n    >>> is_armstrong(123)\n    False\n    \"\"\"\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return the greatest", "#    ...\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(17)\n    False\n    \"\"\"\n#    ...\n\ndef factorial(n: int) -> int:\n    \"\"\" Return the factorial of a number\n    >>> factorial(0)\n    1\n    >>> factorial(1)\n    1\n    >>> factorial(2)\n    2\n    >>> factorial(3)\n    6\n    \"\"\"\n#    ...\n\ndef digits(n: int) -> list:\n    \"\"\" Return a list of digits of a number\n    >>> digits(123)\n    [1, 2, 3]\n    >>> digits(1234)\n    [1, 2, 3, 4]\n    \"\"\"\n#    ...\n\ndef sum_digits(n: int) -> int:\n    \"\"\" Return the sum of digits of a number\n    >>> sum_digits(123)\n    6\n    >>> sum_digits(1234)\n    10\n    \"\"\"\n#    ...\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Return True if a number is palindrome\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    >>> is_palindrome(1234)\n    False\n    \"\"\"\n#    ...\n\ndef is_square(n: int) -> bool:\n    \"\"\" Return True if a number is square\n    >>> is_square(1)\n    True\n    >>> is_square(2)\n    True\n    >>> is_square(3)\n    False\n    >>> is_square(4)\n    False\n    >>> is_square(5)\n    True\n    >>> is_square(6)\n    False\n    \"\"\"\n#    ...\n\ndef is_pentagonal(n: int) -> bool:\n    \"\"\" Return True if a number is pentagonal\n    >>> is_", "#    return 1\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    300\n    \"\"\"\n#    return 1\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(7)\n    False\n    \"\"\"\n#    return True\n\ndef prime_factors(n: int) -> list:\n    \"\"\" Return a list of prime factors of n\n    >>> prime_factors(2)\n    [2]\n    >>> prime_factors(3)\n    [3]\n    >>> prime_factors(4)\n    [2, 2]\n    >>> prime_factors(8)\n    [2, 2, 2]\n    >>> prime_factors(100)\n    [2, 5, 5]\n    \"\"\"\n#    return [2]\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Return True if n is palindrome\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    >>> is_palindrome(1234)\n    False\n    >>> is_palindrome(12321)\n    True\n    \"\"\"\n#    return True\n\ndef is_armstrong(n: int) -> bool:\n    \"\"\" Return True if n is an Armstrong number\n    >>> is_armstrong(5)\n    True\n    >>> is_armstrong(153)\n    False\n    \"\"\"\n#    return True\n\ndef next_fibonacci(n: int) -> int:\n    \"\"\" Return next Fibonacci number after n\n    >>> next_fibonacci(3)\n    5\n    >>> next_fibonacci(20)\n    6", "\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    125\n    \"\"\"\n\ndef fibonacci(n: int) -> int:\n    \"\"\" Return n-th Fibonacci number\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(6)\n    8\n    >>> fibonacci(7)\n    13\n    >>> fibonacci(8)\n    21\n    \"\"\"\n\ndef gcd_list(lst: list[int]) -> int:\n    \"\"\" Return greatest common divisor of the list of integers\n    >>> gcd_list([1, 2, 3, 4, 5])\n    1\n    >>> gcd_list([6, 12, 24, 48])\n    12\n    >>> gcd_list([12, 24, 12, 48])\n    12\n    >>> gcd_list([2, 4, 12, 48, 24])\n    6\n    \"\"\"\n\ndef lcm_list(lst: list[int]) -> int:\n    \"\"\" Return least common multiple of the list of integers\n    >>> lcm_list([1, 2, 3, 4, 5])\n    60\n    >>> lcm_list([6, 12, 24, 48])\n    2160\n    >>> lcm_list([12, 24, 12, 48])\n    1080\n    >>> lcm_list([2, 4, 12, 48, 24])\n    1440\n    \"\"\"\n\ndef fibonacci"], ["", "", "", "", "\n# 1. Write a function that takes a string as an argument and returns the longest common prefix of the string\n# 2. Write a function that takes a string as an argument and returns the longest common suffix of the string\n# 3. Write a function that takes a list of strings as an argument and returns the longest common prefix of all the strings\n# 4. Write a function that takes a list of strings as an argument and returns the longest common suffix of all the strings\n# 5. Write a function that takes a list of strings as an argument and returns the longest common prefix of all the strings in the list\n# 6. Write a function that takes a list of strings as an argument and returns the longest common suffix of all the strings in the list\n"], ["#    return ' '.join(str(x) for x in range(n))\n    return ' '.join([str(x) for x in range(n)])\n\n\ndef string_sequence_to_list(s: str) -> List[int]:\n    \"\"\" Return a list of integers created from the input string.\n    >>> string_sequence_to_list('0 1 2 3 4 5')\n    [0, 1, 2, 3, 4, 5]\n    >>> string_sequence_to_list('1 2 3 4 5')\n    [1, 2, 3, 4, 5]\n    \"\"\"\n#    return [int(x) for x in s.split(' ')]\n    return [int(x) for x in s.split()]\n\n\ndef add_lists(a: List[int], b: List[int]) -> List[int]:\n    \"\"\" Return a new list that is the sum of the two input lists.\n    >>> add_lists([1,2,3],[4,5,6])\n    [5, 7, 9]\n    \"\"\"\n    return [x+y for x, y in zip(a,b)]\n\n\ndef multiply_lists(a: List[int], b: List[int]) -> List[int]:\n    \"\"\" Return a new list that is the product of the two input lists.\n    >>> multiply_lists([1,2,3],[4,5,6])\n    [4, 10, 18]\n    \"\"\"\n    return [x*y for x, y in zip(a,b)]\n\n\ndef string_to_integer_list(s: str) -> List[int]:\n    \"\"\" Return a list of integers created from the input string.\n    >>> string_to_integer_list('1 2 3 4 5')\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return [int(x) for x in s.split(' '", "\ndef get_word_size() -> int:\n    \"\"\"Return the word size in bytes.\n    >>> get_word_size()\n    8\n    \"\"\"\n\ndef bytes_to_int(bytes: bytes, offset: int) -> int:\n    \"\"\"Return an integer representation of the bytes at the given offset.\n    >>> bytes_to_int(b'\\x01\\x02\\x03\\x04\\x05', 2)\n    0x03020100\n    \"\"\"\n\ndef int_to_bytes(num: int, offset: int, length: int) -> bytes:\n    \"\"\"Return a byte string representation of the integer at the given offset and length.\n    >>> int_to_bytes(0x03020100, 2, 4)\n    b'\\x01\\x02\\x03\\x04'\n    \"\"\"\n\ndef bytes_to_float(bytes: bytes, offset: int) -> float:\n    \"\"\"Return a float representation of the bytes at the given offset.\n    >>> bytes_to_float(b'\\x01\\x02\\x03\\x04', 2)\n    2.0515027517851562e-44\n    \"\"\"\n\ndef float_to_bytes(num: float, offset: int, length: int) -> bytes:\n    \"\"\"Return a byte string representation of the float at the given offset and length.\n    >>> float_to_bytes(0x03020100, 2, 4)\n    b'\\x01\\x02\\x03\\x04'\n    \"\"\"\n\ndef bytes_to_complex(bytes: bytes, offset: int) -> complex:\n    \"\"\"Return a complex representation of the bytes at the given offset.\n    >>> bytes_to_complex(b'\\x01\\x02\\x03\\x04\\x05', 2)", "\ndef string_to_int(s: str) -> int:\n    \"\"\"Return an int from a string.\"\"\"\n\ndef int_to_string(i: int) -> str:\n    \"\"\"Return a string from an int.\"\"\"\n\ndef string_to_bool(s: str) -> bool:\n    \"\"\"Return a bool from a string.\"\"\"\n\ndef bool_to_string(b: bool) -> str:\n    \"\"\"Return a string from a bool.\"\"\"\n\ndef string_to_list(s: str) -> list:\n    \"\"\"Return a list from a string.\"\"\"\n\ndef list_to_string(l: list) -> str:\n    \"\"\"Return a string from a list.\"\"\"\n\ndef string_to_float(s: str) -> float:\n    \"\"\"Return a float from a string.\"\"\"\n\ndef float_to_string(f: float) -> str:\n    \"\"\"Return a string from a float.\"\"\"\n\ndef list_to_int(l: list) -> int:\n    \"\"\"Return an int from a list.\"\"\"\n\ndef int_to_list(i: int) -> list:\n    \"\"\"Return a list from an int.\"\"\"\n\ndef list_to_bool(l: list) -> bool:\n    \"\"\"Return a bool from a list.\"\"\"\n\ndef bool_to_list(b: bool) -> list:\n    \"\"\"Return a list from a bool.\"\"\"\n\ndef list_to_float(l: list) -> float:\n    \"\"\"Return a float from a list.\"\"\"\n\ndef float_to_list(f: float) -> list:\n    \"\"\"Return a list from a float.\"\"\"\n\ndef list_to_string_sequence(l: list) -> str:\n    \"\"\"Return a string sequence from a list.\"\"\"\n\ndef string_sequence_to_list(s: str) -> list:\n    \"\"\"Return a list from a string sequence.\"\"\"\n\ndef string_to_string_sequence(s: str) -> str:\n    \"\"\"Return a string sequence from a string.\"\"\"\n\ndef string_sequence_to", "\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Return True if the given string is a palindrome, otherwise return False.\n    >>> is_palindrome('a')\n    True\n    >>> is_palindrome('abcba')\n    True\n    >>> is_palindrome('abcba1')\n    False\n    \"\"\"\n\ndef fibonacci(n: int) -> int:\n    \"\"\" Return the fibonacci number for the given index.\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(5)\n    5\n    \"\"\"\n\ndef sum_of_digits(n: int) -> int:\n    \"\"\" Return the sum of all the digits of the given number.\n    >>> sum_of_digits(1234)\n    10\n    >>> sum_of_digits(1000)\n    3\n    >>> sum_of_digits(0)\n    0\n    \"\"\"\n\ndef is_even_permutation(n: int) -> bool:\n    \"\"\" Return True if the given number is a permutation of 2n+1, otherwise return False.\n    >>> is_even_permutation(4)\n    False\n    >>> is_even_permutation(14)\n    True\n    >>> is_even_permutation(0)\n    False\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if the given number is prime, otherwise return False.\n    >>> is_prime(4)\n    False\n    >>> is_prime(14)\n    True\n    >>> is_prime(0)\n    False\n    >>> is_prime(1)\n    True\n    \"\"\"\n\ndef fibonacci_sequence(n: int) -> list:\n    \"\"\" Return the fibonacci sequence up to n inclusive.\n    >>> fibonacci_sequence(5)\n    [0, 1, 1, 2, 3]\n    >>> fibonacci_sequence(0)\n    [0]\n    >>>", "\ndef string_length(s: str) -> int:\n    \"\"\" Return the length of the given string.\n    >>> string_length('abc')\n    3\n    >>> string_length('abcd')\n    4\n    \"\"\"\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Return True if the given string is a palindrome.\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('not a palindrome')\n    False\n    \"\"\"\n\ndef is_palindrome_reverse(s: str) -> bool:\n    \"\"\" Return True if the given string is a palindrome.\n    >>> is_palindrome_reverse('racecar')\n    True\n    >>> is_palindrome_reverse('not a palindrome')\n    False\n    \"\"\"\n\ndef count_vowels(s: str) -> int:\n    \"\"\" Return the number of vowels in the given string.\n    >>> count_vowels('abc')\n    2\n    >>> count_vowels('abcd')\n    3\n    \"\"\"\n\ndef count_vowels_reverse(s: str) -> int:\n    \"\"\" Return the number of vowels in the given string.\n    >>> count_vowels_reverse('abc')\n    2\n    >>> count_vowels_reverse('abcd')\n    3\n    \"\"\"\n\ndef count_consonants(s: str) -> int:\n    \"\"\" Return the number of consonants in the given string.\n    >>> count_consonants('abc')\n    1\n    >>> count_consonants('abcd')\n    2\n    \"\"\"\n\ndef count_consonants_reverse(s: str) -> int:\n    \"\"\" Return the number of consonants in the given string.\n    >>> count_consonants_reverse('abc')\n    1\n    >>> count_consonants_reverse('abcd')\n    2\n    \"\"\"\n\ndef count_numbers(s: str) -> int:\n    \"\"\" Return the number of numbers in the given string.\n    >>> count_numbers('abc')\n    0\n    >>> count_numbers('"], ["\ndef reverse_string(string: str) -> str:\n    \"\"\" Given a string, return the string reversed\n    >>> reverse_string('xyzXYZ')\n    'XYZxyz'\n    >>> reverse_string('Jerry')\n    'yrraJ'\n    \"\"\"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Given a string, determine if it is a palindrome\n    >>> is_palindrome('xyzXYZ')\n    True\n    >>> is_palindrome('Jerry')\n    True\n    >>> is_palindrome('abc')\n    False\n    \"\"\"\n\ndef count_vowels(string: str) -> int:\n    \"\"\" Given a string, return the number of vowels in the string\n    >>> count_vowels('xyzXYZ')\n    3\n    >>> count_vowels('Jerry')\n    4\n    >>> count_vowels('abc')\n    0\n    \"\"\"\n\ndef is_palindrome_v2(string: str) -> bool:\n    \"\"\" Given a string, determine if it is a palindrome\n    >>> is_palindrome_v2('xyzXYZ')\n    True\n    >>> is_palindrome_v2('Jerry')\n    True\n    >>> is_palindrome_v2('abc')\n    False\n    \"\"\"\n\ndef is_palindrome_v3(string: str) -> bool:\n    \"\"\" Given a string, determine if it is a palindrome\n    >>> is_palindrome_v3('xyzXYZ')\n    True\n    >>> is_palindrome_v3('Jerry')\n    True\n    >>> is_palindrome_v3('abc')\n    False\n    \"\"\"\n\ndef is_palindrome_v4(string: str) -> bool:\n    \"\"\" Given a string, determine if it is a palindrome\n    >>> is_palindrome_v4('xyzXYZ')\n    True\n    >>> is_palindrome_v4('Jerry')\n    True\n    >>> is_palindrome_v4('abc')\n    False\n    \"\"\"\n\ndef is_palindrome_v5(string: str) -> bool:\n    \"\"\" Given", "\ndef count_occurences_of_characters(string: str) -> dict:\n    \"\"\" Given a string, find out how many times each character occurs\n    >>> count_occurences_of_characters('xyzXYZ')\n    {'x': 2, 'y': 2, 'Z': 1, 'z': 1}\n    \"\"\"\n\ndef count_occurences_of_characters_in_sorted_string(string: str) -> dict:\n    \"\"\" Given a string, find out how many times each character occurs in a sorted version of the string\n    >>> count_occurences_of_characters_in_sorted_string('xyzXYZ')\n    {'x': 2, 'y': 2, 'Z': 1, 'z': 1}\n    \"\"\"\n\ndef count_occurences_of_characters_with_counter(string: str) -> Counter:\n    \"\"\" Given a string, find out how many times each character occurs\n    >>> count_occurences_of_characters_with_counter('xyzXYZ')\n    Counter({'x': 2, 'y': 2, 'Z': 1, 'z': 1})\n    \"\"\"\n\ndef find_first_repeating_character(string: str) -> str:\n    \"\"\" Given a string, find the first character which repeats at least twice in the string\n    >>> find_first_repeating_character('xyzXYZ')\n    'Y'\n    >>> find_first_repeating_character('Jerry')\n    'y'\n    \"\"\"\n\ndef find_last_repeating_character(string: str) -> str:\n    \"\"\" Given a string, find the last character which repeats at least twice in the string\n    >>> find_last_repeating_character('xyzXYZ')\n    'z'\n    >>> find_last_repeating_character('Jerry')\n    'r'\n    \"\"\"\n\ndef find_longest_substrings_of_characters(string: str) -> list:\n    \"\"\" Given a string, find all the substrings of length k which contain", "#     TODO\n    return len(set(string))\n\ndef count_occurences_of_letters(string: str, letter: str) -> int:\n    \"\"\" Given a string, return the number of times the letter appears\n    >>> count_occurences_of_letters('abcxyz', 'a')\n    1\n    >>> count_occurences_of_letters('abcxyz', 'z')\n    1\n    >>> count_occurences_of_letters('abcxyz', 'c')\n    2\n    >>> count_occurences_of_letters('abcxyz', 'x')\n    0\n    \"\"\"\n#     TODO\n    return string.count(letter)\n\ndef count_consecutive_letters(string: str, letter: str) -> int:\n    \"\"\" Given a string, return the number of consecutive letters that are the same as the letter parameter\n    >>> count_consecutive_letters('abcxyz', 'a')\n    1\n    >>> count_consecutive_letters('abcxyz', 'z')\n    1\n    >>> count_consecutive_letters('abcxyz', 'c')\n    2\n    >>> count_consecutive_letters('abcxyz', 'x')\n    0\n    \"\"\"\n#     TODO\n    count = 0\n    for char in string:\n        if char == letter:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            break\n    return count\n\ndef count_substring_occurences(string: str, substring: str) -> int:\n    \"\"\" Given a string and a substring, return the number of times the substring occurs in the string\n    >>> count_substring_occurences('abcxyz', 'ab')\n    2\n    >>> count_substring_occurences('abcxyz', 'xyz')\n    1\n    >>> count_substring_occurences('abcxyz', 'abc')\n    1\n    >>> count_substring_occurences('abcxyz', 'abcxyz')\n    1\n    \"\"\"\n#     TODO\n    return string.count(substring)\n\ndef longest_substring_occurrence(string: str) ->", "\ndef count_vowels(string: str) -> int:\n    \"\"\" Given a string, count the number of vowels it contains\n    >>> count_vowels('xyzXYZ')\n    3\n    >>> count_vowels('Jerry')\n    3\n    \"\"\"\n\ndef count_consonants(string: str) -> int:\n    \"\"\" Given a string, count the number of consonants it contains\n    >>> count_consonants('xyzXYZ')\n    3\n    >>> count_consonants('Jerry')\n    1\n    \"\"\"\n\ndef longest_word(string: str) -> str:\n    \"\"\" Given a string, find the longest word in it\n    >>> longest_word('xyzXYZ')\n    'xyzXYZ'\n    >>> longest_word('Jerry')\n    'Jerry'\n    \"\"\"\n\ndef longest_palindrome(string: str) -> str:\n    \"\"\" Given a string, find the longest palindrome in it\n    >>> longest_palindrome('xyzXYZ')\n    'xyzXYZ'\n    >>> longest_palindrome('Jerry')\n    'Jerry'\n    \"\"\"\n\ndef reverse_string(string: str) -> str:\n    \"\"\" Given a string, reverse it\n    >>> reverse_string('xyzXYZ')\n    'XYZxyz'\n    >>> reverse_string('Jerry')\n    'yrrerJ'\n    \"\"\"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Given a string, check if it is a palindrome\n    >>> is_palindrome('xyzXYZ')\n    True\n    >>> is_palindrome('Jerry')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abccba')\n    False\n    \"\"\"\n\ndef check_palindrome(string: str) -> None:\n    \"\"\" Given a string, check if it is a palindrome and print 'Palindrome' or 'Not Palindrome'\n    >>> check_palindrome('xyzXYZ')\n    'Palindrome'\n    >>> check_palindrome('Jerry')\n    'Palindrome'\n    >>> check_palindrome('ab", "\ndef find_all_words(string: str) -> List[str]:\n    \"\"\" Given a string, find all the words that are separated by a space\n    >>> find_all_words('The quick brown fox jumps over the lazy dog')\n    ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n    \"\"\"\n\ndef find_longest_substring(string: str) -> int:\n    \"\"\" Given a string, find the length of the longest substring that consists of only digits\n    >>> find_longest_substring('1234567890')\n    9\n    >>> find_longest_substring('abcdefghijklmnopqrstuvwxyz')\n    0\n    >>> find_longest_substring('00000')\n    4\n    \"\"\"\n\ndef find_longest_substring_repetition(string: str) -> int:\n    \"\"\" Given a string, find the length of the longest substring that consists of only digits\n    >>> find_longest_substring_repetition('1234567890')\n    9\n    >>> find_longest_substring_repetition('12345678901234567890')\n    19\n    >>> find_longest_substring_repetition('abcdefghijklmnopqrstuvwxyz')\n    0\n    >>> find_longest_substring_repetition('00000')\n    4\n    \"\"\"\n\ndef find_longest_substring_repetition_2(string: str) -> int:\n    \"\"\" Given a string, find the length of the longest substring that consists of only digits\n    >>> find_longest_substring_repetition_2('1234567890')\n    9\n    >>> find_longest_substring_repetition_2('12345678901234567890')\n    19\n    >>> find_longest_substring_repetition_2('abcdefghijklmnopqrstuvwxyz')\n    0\n    >>> find_longest_substring_repetition_2('"], ["", "", "", "", ""], ["\ndef count_characters(string: str) -> int:\n    \"\"\" Counts the number of letters in the given string.\n    >>> count_characters('')\n    0\n    >>> count_characters('a')\n    1\n    >>> count_characters('aaa')\n    3\n    \"\"\"\n\ndef count_words(string: str) -> int:\n    \"\"\" Counts the number of words in the given string.\n    >>> count_words('')\n    0\n    >>> count_words('a')\n    1\n    >>> count_words('aaa')\n    1\n    >>> count_words('aaa aaa')\n    2\n    \"\"\"\n\ndef count_lines(string: str) -> int:\n    \"\"\" Counts the number of lines in the given string.\n    >>> count_lines('')\n    0\n    >>> count_lines('\\n')\n    1\n    >>> count_lines('a\\n')\n    1\n    >>> count_lines('a\\nb\\n')\n    2\n    \"\"\"\n\ndef reverse_words(string: str) -> str:\n    \"\"\" Reverses the words in the string.\n    >>> reverse_words('a')\n    'a'\n    >>> reverse_words('aaa')\n    'aaa'\n    >>> reverse_words('aaa aaa')\n    'aaa aaa'\n    >>> reverse_words('aaa aaa\\n')\n    'aaa aaa\\n'\n    \"\"\"\n\ndef remove_punctuation(string: str) -> str:\n    \"\"\" Removes the punctuation in the string.\n    >>> remove_punctuation('a')\n    'a'\n    >>> remove_punctuation('aaa')\n    'aaa'\n    >>> remove_punctuation('aaa aaa')\n    'aaa aaa'\n    >>> remove_punctuation('aaa, aaa')\n    'aaa aaa'\n    >>> remove_punctuation('aaa. aaa')\n    'aaa aaa'\n    >>> remove_punctuation('aaa- aaa')\n    'aaa aaa'\n    >>> remove_punctuation('aaa! aaa')\n    'aaa aaa'", "\ndef is_palindrome(string: str) -> bool:\n    \"\"\"\n    >>> is_palindrome('aaa')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('aba')\n    False\n    >>> is_palindrome('abb')\n    True\n    >>> is_palindrome('abcd')\n    True\n    >>> is_palindrome('abcdcba')\n    True\n    >>> is_palindrome('1234321')\n    True\n    >>> is_palindrome('1234322')\n    False\n    \"\"\"\n\ndef reverse_string(string: str) -> str:\n    \"\"\" Reverse the given string.\n    >>> reverse_string('abcd')\n    'dcba'\n    >>> reverse_string('abcdcba')\n    'dcbaabcd'\n    \"\"\"\n\ndef is_substring(string: str, substring: str) -> bool:\n    \"\"\"\n    >>> is_substring('aaa', 'aa')\n    True\n    >>> is_substring('aaa', 'a')\n    False\n    >>> is_substring('aaa', 'aaabb')\n    False\n    \"\"\"\n\ndef is_prefix(string: str, substring: str) -> bool:\n    \"\"\"\n    >>> is_prefix('aaa', 'aa')\n    True\n    >>> is_prefix('aaa', 'a')\n    False\n    >>> is_prefix('aaa', 'aaabb')\n    True\n    \"\"\"\n\ndef is_suffix(string: str, substring: str) -> bool:\n    \"\"\"\n    >>> is_suffix('aaa', 'aa')\n    True\n    >>> is_suffix('aaa', 'a')\n    False\n    >>> is_suffix('aaa', 'aaabb')\n    True\n    \"\"\"\n\ndef get_longest_common_substring(string_1: str, string_2: str) -> str:\n    \"\"\"\n    >>> get_longest_common_substring('aaa', 'aaabb')\n    'aa'\n    >>> get_longest_common_substring('aaa', 'bbb')\n    ''\n    >>>", "\ndef find_index(string: str, substring: str) -> int:\n    \"\"\" Find the index of the first occurrence of a given substring in the original string.\n    >>> find_index('aaa', 'aa')\n    1\n    >>> find_index('aaa', 'b')\n    -1\n    \"\"\"\n\ndef find_all_indexes(string: str, substring: str) -> List[int]:\n    \"\"\" Find all indexes of all occurrences of a given substring in the original string.\n    >>> find_all_indexes('aaa', 'aa')\n    [1, 2]\n    >>> find_all_indexes('aaa', 'b')\n    []\n    \"\"\"\n\ndef string_rotation(string: str, rotation: int) -> bool:\n    \"\"\"Check if string can be rotated by a given number of characters.\n    >>> string_rotation('abcde', 3)\n    True\n    >>> string_rotation('abcde', 1)\n    False\n    \"\"\"\n\ndef make_sentence(items: List[str], sep: str = \" \") -> str:\n    \"\"\"Create a sentence by adding the items to a string separated by a given separator.\n    >>> make_sentence(['a', 'b', 'c'])\n    'a b c'\n    >>> make_sentence(['a', 'b', 'c'], sep=\" - \")\n    'a - b - c'\n    \"\"\"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('abcd')\n    False\n    \"\"\"\n\ndef is_palindrome_v2(string: str) -> bool:\n    \"\"\"Check if the given string is a palindrome.\n    >>> is_palindrome_v2('aba')\n    True\n    >>> is_palindrome_v2('abcd')\n    False\n    \"\"\"\n\ndef reverse_string(string: str) -> str:\n    \"\"\"Reverse the given string.\n   ", "\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Find if the given string is a palindrome.\n    >>> is_palindrome('a')\n    False\n    >>> is_palindrome('aaa')\n    True\n    >>> is_palindrome('abc')\n    False\n    >>> is_palindrome('abccba')\n    True\n    >>> is_palindrome('abcba')\n    True\n    >>> is_palindrome('abccba')\n    True\n    \"\"\"\n\ndef how_many_vowels(string: str) -> int:\n    \"\"\" Find how many vowels are present in the given string.\n    >>> how_many_vowels('a')\n    0\n    >>> how_many_vowels('aaa')\n    3\n    >>> how_many_vowels('bc')\n    0\n    >>> how_many_vowels('bcde')\n    2\n    >>> how_many_vowels('abcde')\n    3\n    \"\"\"\n\ndef how_many_consonants(string: str) -> int:\n    \"\"\" Find how many consonants are present in the given string.\n    >>> how_many_consonants('a')\n    1\n    >>> how_many_consonants('aaa')\n    0\n    >>> how_many_consonants('bc')\n    2\n    >>> how_many_consonants('bcde')\n    4\n    >>> how_many_consonants('abcde')\n    3\n    \"\"\"\n\ndef how_many_vowels_and_consonants(string: str) -> tuple[int, int]:\n    \"\"\" Find how many vowels and consonants are present in the given string.\n    >>> how_many_vowels_and_consonants('a')\n    (0, 1)\n    >>> how_many_vowels_and_consonants('aaa')\n    (3, 0)\n    >>> how_many_vowels_and_conson", "\ndef how_many_times_v2(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_v2('', 'a')\n    0\n    >>> how_many_times_v2('aaa', 'a')\n    3\n    >>> how_many_times_v2('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_v3(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_v3('', 'a')\n    0\n    >>> how_many_times_v3('aaa', 'a')\n    3\n    >>> how_many_times_v3('aaaa', 'aa')\n    3\n    \"\"\"\n\ndef how_many_times_v4(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_v4('', 'a')\n    0\n    >>> how_many_times_v4('aaa', 'a')\n    3\n    >>> how_many_times_v4('aaaa', 'aa')\n    3\n    \"\"\"\n\nif __name__ == '__main__':\n    # Test your code with the following doctests.\n    print(how_many_times_v4.__doc__)\n    print(how_many_times_v4('aaa', 'a'))\n    print(how_many_times_v4('aaaa', 'aa'))\n    print(how_many_times_v4('aaaaa', 'aa'))\n    print(how_many_times_v4('aaaaaa', 'aa'))\n"], ["", "", "", "\n# TODO: implement this function\n    return \"\"\n\ndef sort_letters(letters: str) -> str:\n    \"\"\" Input is a space-delimited string of letters from 'a' to 'z'.\n    Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n    Return the string with letters sorted from smallest to largest.\n    >>> sort_letters('d b f')\n    'b d f'\n    \"\"\"\n\n# TODO: implement this function\n    return \"\"\n\n\ndef get_num_count(phrase: str) -> List[int]:\n    \"\"\" Input is a string of letters and numbers.\n    Return a list of integers, where each integer is the number of times the corresponding letter appears in the string.\n    >>> get_num_count('a b c c d e f g')\n    [1, 2, 3, 1, 1, 1, 1, 1]\n    \"\"\"\n\n# TODO: implement this function\n    return []\n\n\ndef get_largest_num_count(phrase: str) -> int:\n    \"\"\" Input is a string of letters and numbers.\n    Return the largest number of times the same letter appears in the string.\n    >>> get_largest_num_count('a b c c d e f g')\n    3\n    \"\"\"\n\n# TODO: implement this function\n    return 0\n\n\ndef reverse_string(string: str) -> str:\n    \"\"\" Input is a string.\n    Return the string with the characters in reversed order.\n    >>> reverse_string('abc')\n    'cba'\n    \"\"\"\n\n# TODO: implement", "#    numbers = numbers.split()\n#    numbers.sort()\n#    return \" \".join(numbers)\n    return \" \".join(sorted(numbers.split()))\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"Input a string, return True if it is a palindrome.\n    >>> is_palindrome('racecar')\n    True\n    \"\"\"\n    return string == string[::-1]\n\n\ndef sum_all(numbers: List[int]) -> int:\n    \"\"\"Input a list of numbers, return the sum of all numbers.\n    >>> sum_all([1, 2, 3, 4, 5])\n    15\n    \"\"\"\n    return sum(numbers)\n\n\ndef get_name_from_age(age: int) -> str:\n    \"\"\"Given an age, return a string with the age in years and months,\n    e.g., 42 years and 12 months.\n    >>> get_name_from_age(20)\n    '20 years and 2 months'\n    \"\"\"\n    return f'{age // 12} years and {age % 12} months'\n\n\ndef count_vowels(string: str) -> int:\n    \"\"\"Input a string, return the number of vowels in the string.\n    >>> count_vowels('aaabbb')\n    3\n    \"\"\"\n    return sum(1 for i in string if i in 'aeiouAEIOU')\n\n\ndef remove_vowels(string: str) -> str:\n    \"\"\"Input a string, return a string with all vowels removed.\n    >>> remove_vowels('aaabbb')\n    'bbb'\n    \"\"\"\n    return ''.join([c for c in string if c not in 'aeiouAEIOU'])\n"], ["", "", "\n# TODO: Fix this\n# def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n#     \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n#     other and return them in order (smaller number, larger number).\n#     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n#     (2.0, 2.2)\n#     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n#     (2.0, 2.0)\n#     \"\"\"\n#     # TODO: Implement this function!\n#     return 0, 0\n", "", ""], ["", "", "#     min_val = min(numbers)\n#     max_val = max(numbers)\n    min_val = 0.0\n    max_val = 1.0\n    return [(x-min_val)/(max_val-min_val) for x in numbers]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "", ""], ["", "", "\t# TODO: Implement me!\n    pass\n", "", ""], ["\ndef strreverse(string: str) -> str:\n    \"\"\" Return string reversed\n    >>> strreverse('')\n    ''\n    >>> strreverse('abc')\n    'cba'\n    \"\"\"\n\ndef strcount(string: str, sub: str) -> int:\n    \"\"\" Count the number of occurrences of substring sub in string\n    >>> strcount('abc', 'a')\n    1\n    >>> strcount('abc', 'b')\n    0\n    \"\"\"\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Replace all occurrences of a string in another string\n    >>> strreplace('abc', 'a', '1')\n    '1bc'\n    \"\"\"\n\ndef strrepcount(string: str, sub: str, new: str) -> int:\n    \"\"\" Replace all occurrences of substring sub with new and count the number of occurrences of new\n    >>> strrepcount('abc', 'a', '1')\n    2\n    \"\"\"\n\ndef strtrim(string: str) -> str:\n    \"\"\" Remove leading and trailing white spaces\n    >>> strtrim(' abc ')\n    'abc'\n    \"\"\"\n\ndef strnormalize(string: str) -> str:\n    \"\"\" Remove leading and trailing white spaces and convert all characters to lowercase\n    >>> strnormalize(' ABC ')\n    'abc'\n    \"\"\"\n\ndef strfind(string: str, sub: str, start: int = 0, end: int = 0) -> int:\n    \"\"\" Find the first occurrence of substring sub in string, return the index of the first character of the first occurrence.\n    >>> strfind('abc', 'a')\n    0\n    >>> strfind('abc', 'b')\n    -1\n    \"\"\"\n\ndef strrfind(string: str, sub: str, start: int = 0, end: int = 0) -> int:\n    \"\"\" Find the last occurrence of substring sub in string, return the index of the first character of the last occurrence.\n    >>> strrfind('abc', 'a')\n    2\n    >>> strrfind('abc', 'b')\n    -1\n    \"\"\"\n\ndef strindex(string: str, sub: str, start: int = 0, end: int = 0) -> int:\n    \"\"\"", "\ndef strstr(haystack: str, needle: str) -> str:\n    \"\"\" Find first occurence of needle in haystack\n    >>> strstr('abcdefg', 'def')\n    'def'\n    >>> strstr('abcdefg', 'ghi')\n    >>> strstr('abcdefg', 'abc')\n    'abc'\n    \"\"\"\n\ndef strrchr(string: str, needle: str) -> str:\n    \"\"\" Find last occurence of needle in string\n    >>> strrchr('abcdefg', 'def')\n    'def'\n    >>> strrchr('abcdefg', 'ghi')\n    >>> strrchr('abcdefg', 'abc')\n    'abc'\n    \"\"\"\n\ndef strspn(string: str, accept: str) -> int:\n    \"\"\" Find first occurence of first character not in accept\n    >>> strspn('abcdefg', 'abcdefg')\n    0\n    >>> strspn('abcdefg', 'g')\n    2\n    >>> strspn('abcdefg', 'f')\n    0\n    \"\"\"\n\ndef strcspn(string: str, reject: str) -> int:\n    \"\"\" Find first occurence of first character in reject\n    >>> strcspn('abcdefg', 'abcdefg')\n    0\n    >>> strcspn('abcdefg', 'g')\n    0\n    >>> strcspn('abcdefg', 'f')\n    1\n    \"\"\"\n\ndef strpbrk(string: str, accept: str) -> str:\n    \"\"\" Find first occurence of character in accept\n    >>> strpbrk('abcdefg', 'abcdefg')\n    >>> strpbrk('abcdefg', 'g')\n    'g'\n    >>> strpbrk('abcdefg', 'f')\n    'f'\n    \"\"\"\n\ndef strspn_r(string: str, accept: str) -> int:\n    \"\"\" Find first occurence of first character not in accept\n    >>> strspn_r('abcdefg', 'abcdefg')\n    0\n    >>> strspn_r('abcdefg', 'g')\n    2\n    >>> strspn_r('abcdefg', 'f')\n    0\n    \"\"\"\n\ndef strcspn_r(string: str, reject: str) -> int:\n    \"\"\" Find first occuren", "\ndef reverse(string: str) -> str:\n    \"\"\" Return a reversed copy of the given string\n    >>> reverse('')\n    ''\n    >>> reverse('abc')\n    'cba'\n    \"\"\"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return true if the given string is a palindrome, false otherwise\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('abc')\n    True\n    >>> is_palindrome('abcba')\n    True\n    >>> is_palindrome('abccba')\n    True\n    >>> is_palindrome('abccba')\n    True\n    >>> is_palindrome('abcd')\n    False\n    >>> is_palindrome('abcdabcd')\n    True\n    \"\"\"\n\ndef is_permutation(s1: str, s2: str) -> bool:\n    \"\"\" Return true if s2 is a permutation of s1, false otherwise\n    >>> is_permutation('', '')\n    True\n    >>> is_permutation('abc', 'abc')\n    True\n    >>> is_permutation('abc', 'abd')\n    False\n    >>> is_permutation('abc', 'bca')\n    False\n    >>> is_permutation('abc', 'acb')\n    False\n    >>> is_permutation('abc', 'abc')\n    True\n    >>> is_permutation('abc', 'abc')\n    True\n    >>> is_permutation('abc', 'abc')\n    True\n    >>> is_permutation('abc', 'abc')\n    True\n    >>> is_permutation('abc', 'abc')\n    True\n    >>> is_permutation('abc', 'abc')\n    True\n    >>> is_permutation('abc', 'abc')\n    True\n    >>> is_permutation('abc', 'abc')\n    True\n    >>> is_permutation('abc', 'abc')\n    True\n    >>> is_permutation('abc', 'abc')\n    True\n    >>> is_permutation('abc', 'abc')\n    True\n    >>> is_permutation('abc', 'abc')\n    True\n    >>> is_permutation('abc', 'abc')\n    True\n    >>> is_permutation('abc', 'abc')\n    True\n    >>> is_permutation('abc', 'abc')\n    True\n    >>> is_permutation('abc', 'abc')\n    True\n    >>> is_permutation('abc', 'abc')\n    True\n    >>> is_permutation('", "\ndef strchr(string: str, c: int) -> str:\n    \"\"\" Return string beginning at the first occurrence of c\n    >>> strchr('', 0)\n    ''\n    >>> strchr('abc', 'a')\n    'a'\n    >>> strchr('abc', 'b')\n    'b'\n    \"\"\"\n\ndef strstr(string: str, substring: str) -> str:\n    \"\"\" Return first occurrence of substring\n    >>> strstr('abc', 'a')\n    'a'\n    >>> strstr('abc', 'b')\n    'b'\n    >>> strstr('abc', 'cd')\n    \"\"\"\n\ndef strcpy(dest: str, src: str) -> str:\n    \"\"\" Copy src to dest, return dest\n    >>> dest = 'abcdefgh'\n    >>> strcpy(dest, 'zyxwvu')\n    'zyxwvu'\n    >>> dest\n    'zyxwvu'\n    \"\"\"\n\ndef strncpy(dest: str, src: str, n: int) -> str:\n    \"\"\" Copy src to dest, return dest\n    >>> dest = 'abcdefgh'\n    >>> strncpy(dest, 'zyxwvu', 4)\n    'zyxw'\n    >>> dest\n    'zyxwvu'\n    \"\"\"\n\ndef strcat(dest: str, src: str) -> str:\n    \"\"\" Concatenate src to dest, return dest\n    >>> dest = 'abc'\n    >>> strcat(dest, 'def')\n    'abcdef'\n    >>> dest\n    'abcdef'\n    \"\"\"\n\ndef strncat(dest: str, src: str, n: int) -> str:\n    \"\"\" Concatenate src to dest, return dest\n    >>> dest = 'abc'\n    >>> strncat(dest, 'def', 3)\n    'abcde'\n    >>> dest\n    'abcdef'\n    \"\"\"\n\ndef strcmp(s1: str, s2: str) -> int:\n    \"\"\" Compare s1 to s2\n    >>> strcmp('', '')\n    0\n    >>> strcmp('abc', 'abc')\n    0\n    >>> strcmp('abc', 'abd')\n    -1\n    >>> strcmp('abd', 'abc')\n    1\n    \"\"\"\n\ndef strncmp(s1: str, s2: str, n: int) -> int:", "\ndef reverse(string: str) -> str:\n    \"\"\" Reverse given string\n    >>> reverse('abc')\n    'cba'\n    \"\"\"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return whether or not given string is palindrome\n    >>> is_palindrome('abc')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('abccba')\n    True\n    >>> is_palindrome('abccbb')\n    False\n    \"\"\"\n\ndef is_one_away(str1: str, str2: str) -> bool:\n    \"\"\" Return whether or not given strings differ by 1 character\n    >>> is_one_away('abc', 'bcd')\n    True\n    >>> is_one_away('abc', 'abd')\n    False\n    \"\"\"\n\ndef is_two_away(str1: str, str2: str) -> bool:\n    \"\"\" Return whether or not given strings differ by 2 characters\n    >>> is_two_away('abc', 'bcd')\n    False\n    >>> is_two_away('abc', 'abd')\n    True\n    \"\"\"\n\ndef is_three_away(str1: str, str2: str) -> bool:\n    \"\"\" Return whether or not given strings differ by 3 characters\n    >>> is_three_away('abc', 'bcd')\n    False\n    >>> is_three_away('abc', 'abd')\n    False\n    \"\"\"\n\ndef is_four_away(str1: str, str2: str) -> bool:\n    \"\"\" Return whether or not given strings differ by 4 characters\n    >>> is_four_away('abc', 'bcd')\n    False\n    >>> is_four_away('abc', 'abd')\n    False\n    \"\"\"\n"], ["\ndef is_prime(n: int) -> bool:\n    \"\"\" For a given number n, determine whether it is prime or not\n    >>> is_prime(15)\n    True\n    \"\"\"\n\ndef primes_up_to(n: int) -> List[int]:\n    \"\"\" For a given integer n, find all the prime numbers up to that integer\n    >>> primes_up_to(100)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \"\"\"\n\ndef multiples_of_3_and_5(n: int) -> int:\n    \"\"\" For a given integer n, find the sum of all the multiples of 3 or 5 below n\n    >>> multiples_of_3_and_5(10)\n    23\n    \"\"\"\n\ndef is_pandigital(n: int) -> bool:\n    \"\"\" For a given integer n, determine whether it is pandigital or not\n    >>> is_pandigital(123456789)\n    True\n    \"\"\"\n\ndef largest_palindrome(n: int) -> int:\n    \"\"\" For a given integer n, find the largest palindrome made from the product of two 2-digit numbers below n\n    >>> largest_palindrome(10)\n    9009\n    \"\"\"\n\ndef sum_digits(n: int) -> int:\n    \"\"\" For a given integer n, find the sum of all the individual digits\n    >>> sum_digits(12345)\n    15\n    \"\"\"\n\ndef sum_of_squares(n: int) -> int:\n    \"\"\" For a given integer n, find the sum of all the squares of all the integers below n\n    >>> sum_of_squares", "\ndef smallest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the smallest number that divides n evenly, larger than n\n    >>> smallest_divisor(15)\n    3\n    \"\"\"\n\ndef prime_factors(n: int) -> List[int]:\n    \"\"\" For a given number n, return a list of all prime factors of n\n    >>> prime_factors(15)\n    [3, 5]\n    \"\"\"\n\ndef perfect_number(n: int) -> bool:\n    \"\"\" For a given number n, return True if n is a perfect number, False otherwise\n    >>> perfect_number(6)\n    False\n    >>> perfect_number(28)\n    True\n    \"\"\"\n\ndef sum_of_digits(n: int) -> int:\n    \"\"\" For a given number n, return the sum of its digits\n    >>> sum_of_digits(15)\n    6\n    >>> sum_of_digits(156)\n    21\n    \"\"\"\n\ndef sum_of_primes(n: int) -> int:\n    \"\"\" For a given number n, return the sum of all its primes\n    >>> sum_of_primes(10)\n    17\n    >>> sum_of_primes(100)\n    1060\n    \"\"\"\n\ndef sum_of_divisors(n: int) -> int:\n    \"\"\" For a given number n, return the sum of all its divisors\n    >>> sum_of_divisors(10)\n    45\n    >>> sum_of_divisors(100)\n    972\n    \"\"\"\n\ndef find_divisors(n: int) -> List[int]:\n    \"\"\" For a given number n, return a list of all its divisors\n    >>> find_divisors(15)\n    [1, 3, 5, 15]\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\" For a given number n, return True if n is prime, False otherwise\n    >>> is_prime(15)\n    False", "\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()", "\ndef is_prime(n: int) -> bool:\n    \"\"\" Returns True if n is a prime number, False otherwise\n    >>> is_prime(13)\n    True\n    \"\"\"\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Returns True if s is a palindrome, False otherwise\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('abccba')\n    True\n    \"\"\"\n\ndef is_pandigital(n: int) -> bool:\n    \"\"\" Returns True if n is a pandigital number, False otherwise\n    >>> is_pandigital(123456789)\n    True\n    >>> is_pandigital(1234)\n    False\n    >>> is_pandigital(12345)\n    True\n    \"\"\"\n\ndef get_pythagorean_triplet(a: int, b: int) -> Optional[Tuple[int, int, int]]:\n    \"\"\" Returns a tuple of pythagorean triplet (a, b, c) such that a^2 + b^2 = c^2\n    >>> get_pythagorean_triplet(1, 2)\n    (3, 4, 5)\n    >>> get_pythagorean_triplet(1, 3)\n    (4, 3, 5)\n    >>> get_pythagorean_triplet(2, 3)\n    (3, 4, 5)\n    \"\"\"\n\ndef get_next_prime(n: int) -> Optional[int]:\n    \"\"\" Returns the next prime number after n\n    >>> get_next_prime(13)\n    17\n    >>> get_next_prime(2)\n    3\n    >>> get_next_prime(3)\n    5\n    \"\"\"\n\ndef get_previous_prime(n: int) -> Optional[int]:\n    \"\"\" Returns the previous prime number before n\n    >>> get_previous_prime(2)\n    1\n    >>> get_previous_prime(3)\n    2\n    >>> get_previous_prime(4)\n    3\n    \"\"\"\n\n", "\ndef largest_divisor_brute(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_brute(15)\n    5\n    \"\"\"\n\ndef prime_factors(n: int) -> list:\n    \"\"\" For a given number n, find the prime factors of n\n    >>> prime_factors(15)\n    [3, 5]\n    \"\"\"\n\ndef prime_factors_brute(n: int) -> list:\n    \"\"\" For a given number n, find the prime factors of n\n    >>> prime_factors_brute(15)\n    [3, 5]\n    \"\"\"\n\ndef sum_primes(n: int) -> int:\n    \"\"\" For a given number n, find the sum of all primes smaller than n\n    >>> sum_primes(15)\n    12\n    \"\"\"\n\ndef sum_primes_brute(n: int) -> int:\n    \"\"\" For a given number n, find the sum of all primes smaller than n\n    >>> sum_primes_brute(15)\n    12\n    \"\"\"\n\ndef sum_primes_divisors(n: int) -> int:\n    \"\"\" For a given number n, find the sum of all primes divisors of n\n    >>> sum_primes_divisors(15)\n    4\n    \"\"\"\n\ndef sum_primes_divisors_brute(n: int) -> int:\n    \"\"\" For a given number n, find the sum of all primes divisors of n\n    >>> sum_primes_divisors_brute(15)\n    4\n    \"\"\"\n"], ["", "", "", "", ""], ["", "", "", "", ""], ["\ndef count_vowels(string: str) -> int:\n    \"\"\" For a given string, count the number of vowels.\n    >>> count_vowels('Hello')\n    2\n    \"\"\"\n\ndef count_words(string: str) -> int:\n    \"\"\" For a given string, count the number of words.\n    >>> count_words('Hello World!')\n    2\n    \"\"\"\n\ndef count_words_in_sentence(sentence: str) -> int:\n    \"\"\" For a given sentence, count the number of words.\n    >>> count_words_in_sentence('Hello World!')\n    2\n    \"\"\"\n\ndef reverse_sentence(sentence: str) -> str:\n    \"\"\" For a given sentence, reverse the words in the sentence.\n    >>> reverse_sentence('Hello World!')\n    '! dlroW olleH'\n    \"\"\"\n\ndef reverse_sentence_using_list_comprehension(sentence: str) -> str:\n    \"\"\" For a given sentence, reverse the words in the sentence using list comprehension.\n    >>> reverse_sentence_using_list_comprehension('Hello World!')\n    '! dlroW olleH'\n    \"\"\"\n\ndef reverse_sentence_using_string_formatting(sentence: str) -> str:\n    \"\"\" For a given sentence, reverse the words in the sentence using string formatting.\n    >>> reverse_sentence_using_string_formatting('Hello World!')\n    '! dlroW olleH'\n    \"\"\"\n\ndef count_char_type(string: str) -> dict:\n    \"\"\" For a given string, count the number of each character type.\n    >>> count_char_type('Hello World!')\n    {'a': 1, 'e': 2, 'H': 1, 'l': 3, 'o': 2, 'r': 1, 's': 1, 'W': 1, 'd': 1, '!': 1, ' ': 1}\n    \"\"\"\n\ndef count_char_type_with_default_dict(string: str) -> dict:\n    \"\"\" For a given string, count the number of each character type.\n    >>> count_char_type", "\ndef sort_words(words: str) -> str:\n    \"\"\" For a given string of words, sort the words and return a string with the words separated by a comma.\n    >>> sort_words('is2 Thi1s T4est 3a')\n    'Thi1s is2 3a T4est'\n    \"\"\"\n\ndef split_string(string: str, length: int) -> str:\n    \"\"\" Given a string, return a string with the words shorter than the length passed in rejoined.\n    >>> split_string('Hello world', 4)\n    'He...rld'\n    \"\"\"\n\ndef make_tags(string: str) -> str:\n    \"\"\" Given a string, return a string where each word is wrapped in single-quotes.\n    >>> make_tags('This is a sentence.')\n    'This is a sentence.'\n    \"\"\"\n\ndef make_tags_2(string: str) -> str:\n    \"\"\" Given a string, return a string where each word is wrapped in single-quotes, except for words starting with 'stop' which should be left as-is.\n    >>> make_tags_2('This is a sentence.')\n    'This is a sentence.'\n    \"\"\"\n\ndef make_tags_3(string: str) -> str:\n    \"\"\" Given a string, return a string where each word is wrapped in single-quotes, except for words that start with 'stop'.\n    >>> make_tags_3('This is a sentence.')\n    'This is a sentence.'\n    \"\"\"\n\ndef make_tags_4(string: str) -> str:\n    \"\"\" Given a string, return a string where each word is wrapped in single-quotes, except for words that start with 'stop'.\n    >>> make_tags_4('This is a sentence.')\n    'This is a sentence.'\n    \"\"\"\n\ndef make_tags_5(string: str) -> str:\n    \"\"\" Given a string, return a string where each word is wrapped in single-quotes, except for words that start with 'stop'.\n    >>> make_tags_5('This is a sentence.')\n    'This is a sentence.'\n    \"\"\"\n\ndef make_tags_", "\ndef is_palindrome(string: str) -> bool:\n    \"\"\" For a given string, determine if it is a palindrome. A palindrome is one that reads the same backward as forward.\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('hello')\n    False\n    \"\"\"\n\ndef is_palindrome_2(string: str) -> bool:\n    \"\"\" For a given string, determine if it is a palindrome. A palindrome is one that reads the same backward as forward.\n    >>> is_palindrome_2('racecar')\n    True\n    >>> is_palindrome_2('hello')\n    False\n    \"\"\"\n\ndef reverse_string(string: str) -> str:\n    \"\"\" For a given string, return it with all characters in reverse order.\n    >>> reverse_string('Hello')\n    'olleH'\n    \"\"\"\n\ndef reverse_string_2(string: str) -> str:\n    \"\"\" For a given string, return it with all characters in reverse order.\n    >>> reverse_string_2('Hello')\n    'olleH'\n    \"\"\"\n\ndef is_palindrome_3(string: str) -> bool:\n    \"\"\" For a given string, determine if it is a palindrome. A palindrome is one that reads the same backward as forward.\n    >>> is_palindrome_3('racecar')\n    True\n    >>> is_palindrome_3('hello')\n    False\n    \"\"\"\n\ndef is_palindrome_4(string: str) -> bool:\n    \"\"\" For a given string, determine if it is a palindrome. A palindrome is one that reads the same backward as forward.\n    >>> is_palindrome_4('racecar')\n    True\n    >>> is_palindrome_4('hello')\n    False\n    \"\"\"\n\ndef is_palindrome_5(string: str) -> bool:\n    \"\"\" For a given string, determine if it is a palindrome. A palindrome is one that reads the same backward as forward.\n    >>> is_palindrome_5('racecar')\n    True\n    >>> is_palindrome_5('hello')\n    False\n    \"\"\"\n\ndef is_", "\ndef is_pangram(sentence: str) -> bool:\n    \"\"\" Given a sentence, return True if it is a pangram, False otherwise.\n    >>> is_pangram('The quick brown fox jumps over the lazy dog')\n    True\n    >>> is_pangram('The quick brown fox jumps over the lazy dogg')\n    False\n    \"\"\"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Given a string, return True if it is a palindrome, False otherwise.\n    >>> is_palindrome('hannah')\n    True\n    >>> is_palindrome('abc')\n    False\n    \"\"\"\n\ndef is_vowel(letter: str) -> bool:\n    \"\"\" Given a letter, return True if it is a vowel, False otherwise.\n    >>> is_vowel('a')\n    True\n    >>> is_vowel('e')\n    True\n    >>> is_vowel('b')\n    False\n    \"\"\"\n\ndef replace_with_alphabet(string: str) -> str:\n    \"\"\" Given a string, replace all spaces with the alphabet.\n    >>> replace_with_alphabet('the quick brown fox jumps over the lazy dog')\n    'thequickbrownfoxjumpsoverthelazydog'\n    \"\"\"\n\ndef reverse_string(string: str) -> str:\n    \"\"\" Given a string, reverse it and return it.\n    >>> reverse_string('hannah')\n    'hanna'\n    >>> reverse_string('abc')\n    'cba'\n    \"\"\"\n\ndef reverse_words(string: str) -> str:\n    \"\"\" Given a string, reverse the order of the words in it and return it.\n    >>> reverse_words('the quick brown fox jumps over the lazy dog')\n    'the lazy dog jumps over the brown fox quick'\n    \"\"\"\n\ndef rotate_list(list_: list) -> None:\n    \"\"\" Rotate a list to the right by one.\n    >>> rotate_list(['a', 'b', 'c'])\n    ['b', 'c', 'a']\n    >>> rotate_list([])\n    []\n    \"\"\"\n\ndef rotate_list_inplace(list_: list) -> None:\n   ", "\ndef palindrome(string: str) -> bool:\n    \"\"\" Given a string, determine if it's a palindrome.\n    >>> palindrome('kayak')\n    True\n    >>> palindrome('hello')\n    False\n    \"\"\"\n\ndef find_longest_substring(string: str, substring: str) -> int:\n    \"\"\" Given a string and substring, find the length of the longest substring.\n    >>> find_longest_substring('Hello world!', 'world')\n    6\n    \"\"\"\n\ndef find_longest_word(string: str) -> str:\n    \"\"\" Given a string, find the longest word in the string.\n    >>> find_longest_word('Hello world!')\n    'world'\n    \"\"\"\n\ndef remove_char(string: str, char: str) -> str:\n    \"\"\" Given a string and a character, remove the character from the string.\n    >>> remove_char('Hello world!', 'l')\n    'Heo wor!d!'\n    \"\"\"\n\ndef find_repeated_word(string: str) -> str:\n    \"\"\" Given a string, find the first word that appears more than once in the string.\n    >>> find_repeated_word('The quick brown fox jumped over the lazy dog.')\n    'the'\n    \"\"\"\n\ndef find_repeated_word_v2(string: str) -> str:\n    \"\"\" Given a string, find the first word that appears more than once in the string.\n    >>> find_repeated_word_v2('The quick brown fox jumped over the lazy dog.')\n    'the'\n    \"\"\"\n\ndef find_repeated_word_v3(string: str) -> str:\n    \"\"\" Given a string, find the first word that appears more than once in the string.\n    >>> find_repeated_word_v3('The quick brown fox jumped over the lazy dog.')\n    'the'\n    \"\"\"\n\ndef compress(string: str) -> str:\n    \"\"\" Given a string, return the string with only unique characters, and in sorted order,\n    with a character followed by a number representing how many times that character was repeated.\n    >>> compress('aaabbc')\n    'a3b2c1"], ["", "", "", "# TODO: Write your code here\n    return ''.join(strings)\n", "\ndef join_strings(strings: List[str]) -> str:\n    \"\"\" Join list of strings into a single string with commas and spaces\n    >>> join_strings([])\n    ''\n    >>> join_strings(['a', 'b', 'c'])\n    'a, b, c'\n    \"\"\"\n\ndef remove_empty_strings(strings: List[str]) -> List[str]:\n    \"\"\" Remove strings from list which are empty strings\n    >>> remove_empty_strings([])\n    []\n    >>> remove_empty_strings(['a', 'b', 'c', ''])\n    ['a', 'b', 'c']\n    \"\"\"\n\ndef remove_strings_with_special_char(strings: List[str]) -> List[str]:\n    \"\"\" Remove strings from list which are empty strings\n    >>> remove_strings_with_special_char([])\n    []\n    >>> remove_strings_with_special_char(['a', 'b', 'c', 'd', ''])\n    ['a', 'b', 'c', 'd']\n    >>> remove_strings_with_special_char(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', ''])\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n    \"\"\"\n\ndef remove_special_char_from_string(string: str) -> str:\n    \"\"\" Remove special characters from string\n    >>> remove_special_char_from_string('')\n    ''\n    >>> remove_special_char_from_string('abc')\n    'abc'\n    >>> remove_special_char_from_string('abc$')\n    'abc'\n    >>> remove_special_char_from_string('abc@')\n    'abc'\n    >>> remove_special_char_from_string('abc#')\n    'abc'\n    >>> remove_special_char_from_string('abc?')\n    'abc'\n    >>> remove_special_char_from_string('abc!')\n    'abc'\n    >>> remove_special_char_from_string('abc"], ["", "\ndef filter_by_prefix_2(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix_2([], 'a')\n    []\n    >>> filter_by_prefix_2(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "", "", ""], ["# your code here\n    positive_list = []\n    for i in range(len(l)):\n        if l[i] > 0:\n            positive_list.append(l[i])\n    return positive_list\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "\treturn list(filter(lambda x: x > 0, l))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()", "#     return [x for x in l if x > 0]\n    return filter(lambda x: x > 0, l)\n\ndef get_positive_v2(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive_v2([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive_v2([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return list(filter(lambda x: x > 0, l))\n\ndef get_positive_v3(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive_v3([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive_v3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return list(filter(lambda x: x > 0, l))\n\ndef get_positive_v4(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive_v4([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive_v4([5, 3, -5, 2, -", "\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n    \"\"\"\n\ndef get_zero(l: list):\n    \"\"\"Return only zeroes in the list.\n    >>> get_zero([-1, 2, -4, 5, 6])\n    []\n    >>> get_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [0]\n    \"\"\"\n\ndef get_positive_sum(l: list):\n    \"\"\"Return the sum of only the positive numbers in the list.\n    >>> get_positive_sum([-1, 2, -4, 5, 6])\n    7\n    >>> get_positive_sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    136\n    \"\"\"\n\ndef get_negative_sum(l: list):\n    \"\"\"Return the sum of only the negative numbers in the list.\n    >>> get_negative_sum([-1, 2, -4, 5, 6])\n    -1\n    >>> get_negative_sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -15\n    \"\"\"\n", "\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n    \"\"\"\n\ndef get_nonnegative(l: list):\n    \"\"\"Return only non-negative numbers in the list.\n    >>> get_nonnegative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_nonnegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\ndef get_nonpositive(l: list):\n    \"\"\"Return only non-positive numbers in the list.\n    >>> get_nonpositive([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_nonpositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n    \"\"\"\n\ndef get_between(l: list):\n    \"\"\"Return only numbers between -5 and 5.\n    >>> get_between([-1, 2, -4, 5, 6])\n    [2, 5]\n    >>> get_between([5, 3, -"], ["# Your code here\n\ndef get_divisors(n):\n    \"\"\"Return the divisors of a given number, in sorted order.\n    >>> get_divisors(24)\n    [1, 2, 3, 4, 6, 8, 12, 24]\n    >>> get_divisors(100)\n    [1, 2, 4, 5, 10, 20, 25, 50, 100]\n    >>> get_divisors(89)\n    [1, 13, 39, 89]\n    >>> get_divisors(1)\n    []\n    \"\"\"\n# Your code here\n\ndef is_perfect_power(n):\n    \"\"\"Return true if a given number is a perfect power, and false otherwise.\n    >>> is_perfect_power(2)\n    True\n    >>> is_perfect_power(3)\n    True\n    >>> is_perfect_power(4)\n    False\n    >>> is_perfect_power(9)\n    True\n    >>> is_perfect_power(81)\n    True\n    >>> is_perfect_power(80)\n    False\n    \"\"\"\n# Your code here\n\ndef get_primes(n):\n    \"\"\"Return all primes up to and including n.\n    >>> get_primes(5)\n    [2, 3, 5]\n    >>> get_primes(10)\n    [2, 3, 5, 7]\n    >>> get_primes(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> get_primes(100)\n    [2, 3, 5, 7, 11, 13, 1", "#    if n == 2 or n == 3:\n#        return True\n#    if n % 2 == 0 or n % 3 == 0:\n#        return False\n#    for i in range(5, int(sqrt(n)) + 1, 6):\n#        if n % i == 0 or n % (i + 2) == 0:\n#            return False\n#    return True\n    for i in range(2, int(sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\n\ndef primes(n):\n    \"\"\"Return a list of primes up to n.\n    >>> primes(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> primes(2)\n    [2]\n    >>> primes(1)\n    []\n    \"\"\"\n    #return [x for x in range(2, n) if is_prime(x)]\n    return [x for x in range(2, n) if is_prime(x)]\n\ndef lcm(a,b):\n    \"\"\"Return the least common multiple of a and b.\n    >>> lcm(3, 4)\n    12\n    >>> lcm(2, 4)\n    8\n    \"\"\"\n    return a*b//gcd(a,b)\n\ndef gcd(a,b):\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> gcd(3, 4)\n    1\n    >>> gcd(2, 4)\n    2\n    >>> gcd(6, 9)\n    3\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef binomial(n, k):\n    \"\"\"Return the binomial coefficient C(n", "\n# Write a function that tests if a number is prime.\n# It should return a boolean.\n# Hint: If you are not sure about the definition of a prime number,\n# use the is_prime(n) function you wrote in the previous exercise.\n#\n# >>> is_prime(6)\n# False\n# >>> is_prime(101)\n# True\n# >>> is_prime(11)\n# True\n# >>> is_prime(13441)\n# True\n# >>> is_prime(61)\n# True\n# >>> is_prime(4)\n# False\n# >>> is_prime(1)\n# False\n\ndef is_prime(n):\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,n):\n        if n%i==0:\n            return False\n    return True\n\n# Write a function that tests if a number is prime.\n# It should return a boolean.\n# Hint: If you are not sure about the definition of a prime number,\n# use the is_prime(n) function you wrote in the previous exercise.\n#\n# >>> is_prime(6)\n# False\n# >>> is_prime(101)\n# True\n# >>> is_prime(11)\n# True\n# >>> is_prime(13441)\n# True\n# >>> is_prime(61)\n# True\n# >>> is_prime(4)\n# False\n# >>> is_prime(1)\n# False\n\ndef is_prime(n):\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,n):\n        if n%i==0:\n            return False\n    return True", "\ndef main():\n    \"\"\"main function\n    \"\"\"\n    print(is_prime(5))\n    print(is_prime(6))\n    print(is_prime(101))\n    print(is_prime(11))\n    print(is_prime(13441))\n    print(is_prime(61))\n    print(is_prime(4))\n    print(is_prime(1))\n\nif __name__ == \"__main__\":\n    main()\n\n# vim: set expandtab:\n", "\ndef is_palindrome(n):\n    \"\"\"Return true if a given number is a palindrome, and false otherwise.\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(23454321)\n    True\n    >>> is_palindrome(10001)\n    True\n    >>> is_palindrome(9999)\n    True\n    >>> is_palindrome(23)\n    False\n    \"\"\"\n\ndef is_armstrong(n):\n    \"\"\"Return true if a given number is an Armstrong number, and false otherwise.\n    >>> is_armstrong(153)\n    True\n    >>> is_armstrong(9)\n    False\n    >>> is_armstrong(233)\n    True\n    >>> is_armstrong(5)\n    False\n    >>> is_armstrong(2)\n    False\n    \"\"\"\n\ndef is_palindrome_prime(n):\n    \"\"\"Return true if a given number is a palindromic prime, and false otherwise.\n    >>> is_palindrome_prime(101)\n    True\n    >>> is_palindrome_prime(222)\n    True\n    >>> is_palindrome_prime(10001)\n    True\n    >>> is_palindrome_prime(123)\n    False\n    >>> is_palindrome_prime(4)\n    False\n    >>> is_palindrome_prime(1)\n    False\n    \"\"\"\n\ndef is_square(n):\n    \"\"\"Return true if a given number is a square, and false otherwise.\n    >>> is_square(16)\n    True\n    >>> is_square(1)\n    True\n    >>> is_square(9)\n    False\n    >>> is_square(121)\n    True\n    >>> is_square(2)\n    False\n    \"\"\"\n\ndef is_pandigital(n):\n    \"\"\"Return true if"], ["", "#     xs = [1, 2]\n#     xs = [-6, 11, -6, 1]\n    non_zero_coeff = xs.count(0)\n    if non_zero_coeff % 2:\n        raise ValueError(\"number of coefficients must be even and largest non-zero coefficient must be 1\")\n    if non_zero_coeff > len(xs) - 1:\n        raise ValueError(\"number of coefficients must be greater than number of non-zero coefficients\")\n    x_zero = None\n    for i in range(len(xs)):\n        if xs[i] == 0:\n            continue\n        if x_zero is None:\n            x_zero = -xs[i] / xs[i+1]\n        else:\n            if poly(xs, x_zero) * poly(xs, -xs[i] / xs[i+1]):\n                return x_zero\n    if x_zero is None:\n        raise ValueError(\"no zero point\")\n    return x_zero\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n", "#   TODO: Write your code here.\n    zero = 0\n    for i in range(1, len(xs), 2):\n        zero += xs[i] / poly(xs[:i], 0)\n    return -zero\n\n\n# TESTS\nfor func in [lambda x: x, lambda x: 3 * x - 2, lambda x: 3 * x + 2]:\n    for degree in range(1, 11):\n        print(f\"for polynomial: {func(2)} + {func(3)}x + {func(4)}x^2 + ... + {func(degree)}x^{degree}\", end=\" \")\n        try:\n            print(f\"= {round(find_zero([func(i) for i in range(1, degree + 1)]), 2)}\")\n        except Exception as e:\n            print(f\"find_zero failed: {e}\")\n\n# TODO: Write your own tests.\n# You can use find_zero for testing.\n# Don't forget to print the result.\n", "", "#    import cProfile\n#    cProfile.run('find_zero([1, 2])')\n    for i in range(1, len(xs)):\n        if xs[i] == 0:\n            continue\n        delta = xs[0] / xs[i]\n        if delta < 1:\n            delta = -delta\n        if delta > 1:\n            delta = 1\n        x = -delta\n        while abs(x * poly(xs, x)) > 1e-10:\n            x = x - poly(xs, x) / poly(xs[i:], x)\n        return x\n\n\ndef main():\n    \"\"\" Main function \"\"\"\n    print(find_zero([1, 2]))\n    print(find_zero([-6, 11, -6, 1]))\n    print(find_zero([1, 2, 0, 0, 0, 0]))\n    print(find_zero([1, 0, 0, 0, 0, 0]))\n\n\nif __name__ == '__main__':\n    main()\n"], ["\ndef main():\n    \"\"\"\n    This function runs all the test cases in the module and returns 1 if all the test cases pass\n    \"\"\"\n    print(\"Running test cases in module test_sort\")\n    test_cases = {\n        'sort_first': [\n            ([], []),\n            ([1], [1]),\n            ([1, 2], [1, 2]),\n            ([5, 4, 3], [3, 4, 5]),\n            ([1, 2, 3], [1, 2, 3]),\n            ([5, 6, 3, 4, 8, 9, 2], [2, 3, 4, 5, 6, 8, 9]),\n        ],\n        'sort_second': [\n            ([], []),\n            ([1], [1]),\n            ([1, 2], [1, 2]),\n            ([5, 4, 3], [3, 4, 5]),\n            ([1, 2, 3], [1, 2, 3]),\n            ([5, 6, 3, 4, 8, 9, 2], [2, 3, 4, 5, 6, 8, 9]),\n        ],\n        'sort_third': [\n            ([], []),\n            ([1], [1]),\n            ([1, 2], [1, 2]),\n            ([5, 4, 3], [3, 4, 5]),\n            ([1, 2, 3], [1, 2, 3]),\n            ([5, 6, 3, 4, 8, ", "\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()", "", "# Your code here\n\ndef sort_fourth(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by four, while its values at the indicies that are divisible by four are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_fourth([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_fourth([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n# Your code here\n\ndef sort_fifth(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_fifth([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_fifth([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n# Your code here\n\ndef sort_sixth(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are", ""], ["\treturn list(set(l))\n\ndef groupby(l: list, key: callable):\n    \"\"\"Return a dictionary of lists of items where the key is the result of the\n    key function.\n    >>> groupby([5, 3, 5, 2, 3, 3, 9, 0, 123], key=lambda x: x % 2)\n    {1: [3, 3], 0: [5, 0]}\n    \"\"\"\n\treturn {key(item): [item for item in l if key(item) == key(item)]}\n\ndef flatten(l: list):\n    \"\"\"Return a list with all nested lists removed\n    >>> flatten([5, 3, [5, 2, 3, 3, [9, 0, 123]]])\n    [5, 3, 5, 2, 3, 3, 9, 0, 123]\n    \"\"\"\n\tif type(l) == list:\n\t\treturn [item for sublist in l for item in flatten(sublist)]\n\telse:\n\t\treturn [l]\n\ndef union(l1: list, l2: list):\n    \"\"\"Return the union of two lists.\n    >>> union([5, 3, 5, 2, 3, 3, 9, 0, 123], [1, 3, 2, 9, 0, 123, 1, 2, 3])\n    [0, 1, 2, 3, 5, 9, 123]\n    \"\"\"\n\treturn list(set(l1 + l2))\n\ndef intersection(l1: list, l2: list):\n    \"\"\"Return the intersection of two lists.\n    >>> intersection([5, 3, 5, 2, 3, 3, 9, 0, 123], [1, ", "#     l.sort()\n#     l = list(set(l))\n#     return l\n    return list(set(l))\n\ndef intersect(l1: list, l2: list):\n    \"\"\"Return the intersection of two lists\n    >>> intersect([1, 2, 3], [4, 5, 6, 3])\n    [3]\n    \"\"\"\n    return list(set(l1).intersection(set(l2)))\n\ndef diff(l1: list, l2: list):\n    \"\"\"Return the difference of two lists\n    >>> diff([1, 2, 3], [4, 5, 6, 3])\n    [1, 2]\n    \"\"\"\n    return list(set(l1).difference(set(l2)))\n\ndef common(l1: list, l2: list):\n    \"\"\"Return the common elements of two lists\n    >>> common([1, 2, 3], [4, 5, 6, 3])\n    [3]\n    \"\"\"\n    return list(set(l1).intersection(set(l2)))\n\ndef find_index(l: list, e):\n    \"\"\"Return the index of element e in list l\n    >>> find_index([1, 2, 3, 4], 4)\n    3\n    >>> find_index([1, 2, 3, 4], 0)\n    -1\n    \"\"\"\n    return l.index(e)\n\ndef find_min(l: list):\n    \"\"\"Return the index of the minimum element in a list\n    >>> find_min([1, 2, 3, 4])\n    1\n    \"\"\"\n    return min(l)\n\ndef find_max(l: list):\n    \"\"\"Return the index of the maximum element in a list\n    >>> find_max([1, 2, 3, 4])\n    3\n    \"\"\"\n    return max(l)\n\ndef find_min_max(l: list):\n    \"\"\"Return the index", "\ndef get_sum(a: list):\n    \"\"\"Return the sum of the elements in a list\n    >>> get_sum([1, 3, 4, 5])\n    15\n    \"\"\"\n\ndef product(a: list):\n    \"\"\"Return the product of the elements in a list\n    >>> product([1, 3, 4, 5])\n    120\n    \"\"\"\n\ndef remove_duplicates(l: list):\n    \"\"\"Return a list with the duplicates removed\n    >>> remove_duplicates([1, 3, 4, 5, 2, 3, 3, 9, 0, 123, 1, 3, 4, 5, 2, 3, 3, 9, 0, 123])\n    [0, 1, 2, 3, 4, 5, 9, 123]\n    \"\"\"\n\ndef remove_duplicates_keep_order(l: list):\n    \"\"\"Return a list with the duplicates removed\n    >>> remove_duplicates_keep_order([1, 3, 4, 5, 2, 3, 3, 9, 0, 123, 1, 3, 4, 5, 2, 3, 3, 9, 0, 123])\n    [0, 1, 2, 3, 4, 5, 9, 123, 1, 3, 4, 5, 2, 3, 3, 9, 0, 123]\n    \"\"\"\n\ndef flatten(l: list):\n    \"\"\"Return a flattened list\n    >>> flatten([[1, 2], [3, 4], 5, 6, [7, 8]])\n    [1, 2, 3, 4, 5, 6, 7, 8]\n    \"\"\"\n\ndef flatten_once(l", "\treturn list(set(l))\n\ndef find_in_list(l: list, x: any):\n    \"\"\"Return the first index of x in l or -1 if not found\n    >>> find_in_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 5)\n    1\n    >>> find_in_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 123)\n    7\n    >>> find_in_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n    -1\n    \"\"\"\n\ttry:\n\t\treturn l.index(x)\n\texcept ValueError:\n\t\treturn -1\n\ndef find_all_in_list(l: list, x: any):\n    \"\"\"Return all indexes of x in l or empty list if not found\n    >>> find_all_in_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 5)\n    [1, 3]\n    >>> find_all_in_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 123)\n    [7]\n    >>> find_all_in_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n    []\n    \"\"\"\n\treturn [i for i, v in enumerate(l) if v == x]\n\ndef first(l: list):\n    \"\"\"Return first element of a list\n    >>> first([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    5\n    >>>", "\n# -\n\n# ## 5. Functions\n#\n# ### 5.1. Defining functions\n#\n# Functions are defined with the `def` keyword:\n\ndef my_function():\n    pass\n\n\n# Functions are also objects.\n\nmy_function\n\n# You can call a function by using its name.\n\nmy_function()\n\n\n# We'll use this function later.\n\n# ### 5.2. Parameters\n#\n# Functions can take parameters.\n\ndef my_function_with_a_parameter(some_parameter):\n    print(some_parameter)\n\n\n# Parameters are passed to functions when they are called.\n\nmy_function_with_a_parameter(\"some parameter\")\n\n\n# ### 5.3. Arguments\n#\n# You can name the parameter in the function definition.\n\ndef my_function_with_a_parameter(some_parameter):\n    print(some_parameter)\n\n\n# Call the function with a name for the parameter.\n\nmy_function_with_a_parameter(some_parameter=\"some parameter\")\n\n\n# ### 5.4. Return values\n#\n# Functions can return values.\n\ndef my_function_with_a_return_value():\n    return \"some return value\"\n\n\n# Call the function and store the return value in a variable.\n\nmy_return_value = my_function_with_a_return_value()\nmy_return_value\n\n\n# ### 5.5. Multiple parameters\n#\n# Multiple parameters are separated by commas.\n\ndef my_function_with_multiple_parameters(some_parameter, another_parameter):\n    print(some_parameter, another_parameter)\n\n\n# Call the function with multiple parameters.\n\nmy_function_with_multiple_parameters(\"some\", \"parameters\")\n\n\n# ### 5.6. Default parameter values\n#\n# Default parameter values are defined like this:\n\ndef my_function_with_a"], ["\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "", "", "\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n\ndef count_greater_than(l: list, n: float):\n    \"\"\"Return number of elements in the list that are greater than the given number.\n    >>> count_greater_than([1, 2, 3], 0)\n    0\n    >>> count_greater_than([1, 2, 3], 2)\n    1\n    >>> count_greater_than([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n    4\n    \"\"\"\n\ndef count_smaller_than(l: list, n: float):\n    \"\"\"Return number of elements in the list that are smaller than the given number.\n    >>> count_smaller_than([1, 2, 3], 0)\n    3\n    >>> count_smaller_than([1, 2, 3], 2)\n    0\n    >>> count_smaller_than([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n    3\n    \"\"\"\n\ndef count_between(l: list, n1: float, n2: float):\n    \"\"\"Return number of elements in the list that are between the given numbers.\n    >>> count_between([1, 2, 3], 0, 1)\n    1\n    >>> count_between([1, 2, 3], 1, 2)\n    1\n    >>> count_between([5, 3, -5", "\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"], ["\n#def add_five(n: int) -> int:\n#    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n#    >>> add_five(50)\n#    0\n#    >>> add_five(78)\n#    2\n#    >>> add_five(79)\n#    3\n#    \"\"\"\n\n\n#def add_five(n: int) -> int:\n#    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n#    >>> add_five(50)\n#    0\n#    >>> add_five(78)\n#    2\n#    >>> add_five(79)\n#    3\n#    \"\"\"\n\ndef add_five(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> add_five(50)\n    0\n    >>> add_five(78)\n    2\n    >>> add_five(79)\n    3\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n % 11 == 0 or n % 13 == 0:\n            count += 1\n        n = n - 1\n    return count\n\n\n#def fizz_buzz(n: int) -> int:\n#    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n#    >>> fizz_buzz(50)\n#    0\n#    >>> fizz_buzz(78)\n#    2\n#    >>> fizz_buzz(79)\n#    3\n#    \"\"\"\n\n#def fizz_buzz(n: int) ->", "\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\ndef test_fizz_buzz(fizz_buzz, capsys):\n    assert fizz_buzz(1) == 0\n    out, _ = capsys.readouterr()\n    assert out == '0\\n'\n    assert fizz_buzz(5) == 0\n    out, _ = capsys.readouterr()\n    assert out == '0\\n'\n    assert fizz_buzz(11) == 1\n    out, _ = capsys.readouterr()\n    assert out == '1\\n'\n    assert fizz_buzz(13) == 1\n    out, _ = capsys.readouterr()\n    assert out == '1\\n'\n    assert fizz_buzz(23) == 0\n    out, _ = capsys.readouterr()\n    assert out == '0\\n'\n    assert fizz_buzz(26) == 1\n    out, _ = capsys.readouterr()\n    assert out == '1\\n'\n    assert fizz_buzz(32) == 1\n    out, _ = capsys.readouterr()\n    assert out == '1\\n'\n    assert fizz_buzz(37) == 2\n    out, _ = capsys.readouterr()\n    assert out == '2\\n'\n    assert fizz_buzz(43) == 1\n    out, _ = capsys.readouterr()\n    assert out == '1\\n'\n    assert fizz_buzz(49) == 2\n    out, _ = capsys.readouterr()\n    assert out == '2\\n'\n    assert fizz_buzz(50) == 0\n    out, _ = capsys.readouterr()\n    assert out == '0\\n'\n    assert fizz_buzz(55) == 1\n    out, _ = capsys.readouterr()\n    assert out == '1\\n'\n    assert fizz_buzz(5", "\ndef fibonacci(n: int):\n    \"\"\"Return the n-th Fibonacci number.\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    \"\"\"\n\ndef fibonacci_sequence(n: int):\n    \"\"\"Generate the first n Fibonacci numbers in a sequence.\n    >>> list(fibonacci_sequence(5))\n    [1, 1, 2, 3, 5]\n    \"\"\"\n", "\ndef binary_search(arr: List[int], target: int) -> bool:\n    \"\"\"Return True if target is in arr, and False otherwise.\n    >>> binary_search([1, 2, 3, 4, 5], 1)\n    True\n    >>> binary_search([1, 2, 3, 4, 5], 2)\n    True\n    >>> binary_search([1, 2, 3, 4, 5], 3)\n    True\n    >>> binary_search([1, 2, 3, 4, 5], 4)\n    True\n    >>> binary_search([1, 2, 3, 4, 5], 5)\n    True\n    >>> binary_search([1, 2, 3, 4, 5], 6)\n    False\n    \"\"\"\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\"Return True if s is a palindrome, and False otherwise.\n    >>> is_palindrome(\"tacocat\")\n    True\n    >>> is_palindrome(\"tacocat!\")\n    True\n    >>> is_palindrome(\"tacocat\")\n    True\n    >>> is_palindrome(\"tacocat!!\")\n    False\n    \"\"\"\n\ndef reverse(s: str) -> str:\n    \"\"\"Return a copy of s with all its characters in reverse order.\n    >>> reverse(\"abcdef\")\n    'fedcba'\n    >>> reverse(\"Hello, world!\")\n    '!dlrow ,olleH'\n    \"\"\"\n\ndef longest_substring(s: str, k: int) -> str:\n    \"\"\"Return the longest substring of s which consists only of characters in the range ['a'-'z'] exactly k times.\n    >>> longest_substring(\"banana\", 2)\n    'anana'\n    >>> longest_substring(\"banana\", 1)\n    'na'\n    >>> longest_substring(\"banana\", 3)\n    'nana'\n    \"\"\"\n\ndef palindrome_product("], ["# write your code here\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    >>> sort_odd([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_odd([5, 6, 3, 4])\n    [5, 4, 3, 6]\n    \"\"\"\n# write your code here\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "# YOUR CODE HERE\n\ndef is_sorted_1(l: list):\n    \"\"\"This function takes a list l and returns True if l is sorted in ascending order.\n    >>> is_sorted_1([1, 2, 3])\n    True\n    >>> is_sorted_1([1, 2, 3, 4])\n    True\n    >>> is_sorted_1([1, 2, 3, 4, 5])\n    True\n    >>> is_sorted_1([1, 2, 3, 4, 5, 6])\n    True\n    >>> is_sorted_1([1, 2, 3, 4, 5, 6, 7])\n    False\n    >>> is_sorted_1([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    False\n    \"\"\"\n# YOUR CODE HERE\n\ndef is_sorted_2(l: list):\n    \"\"\"This function takes a list l and returns True if l is sorted in ascending order.\n    >>> is_sorted_2([1, 2, 3])\n    True\n    >>> is_sorted_2([1, 2, 3, 4])\n    True\n    >>> is_sorted_2([1, 2, 3, 4, 5])\n    True\n    >>> is_sorted_2([1, 2, 3, 4, 5, 6])\n    True\n    >>> is_sorted_2([1, 2, 3, 4, 5, 6, 7])\n    False\n    >>> is_sorted_2([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    False\n    \"\"\"\n", "# Your code here\n\ndef test_even():\n    \"\"\"This function runs your sort_even function on a series of lists\n    to make sure it passes the tests.\n    \"\"\"\n    assert sort_even([1, 2, 3]) == [1, 2, 3]\n    assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]\n\ntest_even()\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    >>> sort_odd([1, 2, 3])\n    [3, 2, 1]\n    >>> sort_odd([5, 6, 3, 4])\n    [6, 3, 5, 4]\n    \"\"\"\n# Your code here\n\ndef test_odd():\n    \"\"\"This function runs your sort_odd function on a series of lists\n    to make sure it passes the tests.\n    \"\"\"\n    assert sort_odd([1, 2, 3]) == [3, 2, 1]\n    assert sort_odd([5, 6, 3, 4]) == [6, 3, 5, 4]\n\ntest_odd()\n\ndef check_if_palindrome(s: str) -> bool:\n    \"\"\"This function takes a string s and returns a bool.\n    >>> check_if_palindrome('abcba')\n    True\n    >>> check_if_palindrome('abc')\n    False\n    \"\"\"\n# Your code here\n\ndef test_palindrome():\n    \"\"\"", "\ndef sort_even_v2(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even_v2([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even_v2([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n", "\ndef insert_at(l: list, elem: object, index: int):\n    \"\"\"This function takes a list l and an object elem and an index and inserts elem at index into l.\n    >>> insert_at([1, 2, 3], 'a', 0)\n    ['a', 1, 2, 3]\n    >>> insert_at([1, 2, 3], 'a', 1)\n    [1, 'a', 2, 3]\n    >>> insert_at([1, 2, 3], 'a', 2)\n    [1, 2, 'a', 3]\n    \"\"\"\n\ndef find_max(l: list):\n    \"\"\"This function takes a list l and returns the index of the largest value in l.\n    >>> find_max([1, 2, 3])\n    2\n    >>> find_max([5, 2, 3])\n    0\n    \"\"\"\n\ndef find_min(l: list):\n    \"\"\"This function takes a list l and returns the index of the smallest value in l.\n    >>> find_min([1, 2, 3])\n    0\n    >>> find_min([5, 2, 3])\n    1\n    \"\"\"\n\ndef get_max(l: list):\n    \"\"\"This function takes a list l and returns the largest value in l.\n    >>> get_max([1, 2, 3])\n    3\n    >>> get_max([5, 2, 3])\n    5\n    \"\"\"\n\ndef get_min(l: list):\n    \"\"\"This function takes a list l and returns the smallest value in l.\n    >>> get_min([1, 2, 3])\n    1\n    >>> get_min([5, 2, 3])\n    2"], ["", "#     print(s)\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse each group. Unless group has fewer elements than 3.\n    groups = [(group[::-1] if len(group) == 3 else group) for group in groups]\n    return \"\".join(groups)\n\ndef encode_cyclic_fast(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic_fast(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse each group. Unless group has fewer elements than 3", "#     decode_string = \"\"\n#     for i in range(len(s)):\n#         if i % 3 == 0:\n#             decode_string += s[i + 1] + s[i + 2]\n#         elif i % 3 == 1:\n#             decode_string += s[i + 2] + s[i + 1]\n#     return decode_string\n\n    # group = s[0:3]\n    # while group != s:\n    #     group = s[3:6] + s[0:3]\n    #     s = group\n    # return s\n    # s = s[1:] + s[0]\n    # return s[1:] + s[0]\n    s = s[2:] + s[0]\n    return s[2:] + s[0]\n\n\ndef decode_cyclic_2(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    return ''.join(s[1:]+s[0:1]) + s[2:]\n\n\ndef test_encode_cyclic():\n    s = \"abc\"\n    assert encode_cyclic(s) == \"bcd\"\n\n\ndef test_decode_cyclic():\n    s = \"bcd\"\n    assert decode_cyclic(s) == \"abc\"\n\n\ndef test_decode_cyclic_2():\n    s = \"bcd\"\n    assert decode_cyclic_2(s) == \"abc\"\n\n\ndef test_encode_decode_cyc", "", "#    # split string to groups. Each of length 3.\n#    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n#    # cycle elements in each group. Unless group has fewer elements than 3.\n#    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # rejoin groups into string\n    return \"\".join(s[i:i + 3] for i in range(0, len(s), 3))\n\n\ndef encode_vigenere(s: str, key: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # key.\n    key = list(key)\n    # encode each group\n    groups = [encode_cyclic(group, key) for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_vigenere(s: str, key: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function"], ["\nif __name__ == '__main__':\n    # run_doctests if this file is run as a script\n    import doctest\n    doctest.testmod()\n", "", "\ndef is_prime(number: int) -> bool:\n    \"\"\"\n    is_prime returns True if number is a prime number, False otherwise\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    \"\"\"\n\ndef is_armstrong(number: int) -> bool:\n    \"\"\"\n    is_armstrong returns True if number is an Armstrong number, False otherwise\n    >>> is_armstrong(153)\n    True\n    >>> is_armstrong(1)\n    False\n    >>> is_armstrong(0)\n    False\n    >>> is_armstrong(1000)\n    False\n    \"\"\"\n\ndef is_palindrome(number: int) -> bool:\n    \"\"\"\n    is_palindrome returns True if number is a palindrome, False otherwise\n    >>> is_palindrome(123)\n    True\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(111)\n    False\n    \"\"\"\n\ndef is_square(number: int) -> bool:\n    \"\"\"\n    is_square returns True if number is a square, False otherwise\n    >>> is_square(1)\n    True\n    >>> is_square(16)\n    True\n    >>> is_square(25)\n    False\n    \"\"\"\n\ndef is_triangular(number: int) -> bool:\n    \"\"\"\n    is_triangular returns True if number is a triangular number, False otherwise\n    >>> is_triangular(1)\n    True\n    >>> is_triangular(3)\n    True\n    >>> is_triangular(4)\n    False\n    \"\"\"\n\ndef is_pentagonal(number: int) -> bool:\n    \"\"\"\n    is_pentagonal returns True if number is a pentagonal number, False otherwise\n    >>> is_pentagonal(1)\n   ", "", "\n# TODO: Write test cases.\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"], ["\ndef count_digits(n: int):\n    \"\"\"\n    count_digits takes an integer as input and returns the number of digits in it.\n\n    >>> count_digits(123)\n    3\n    >>> count_digits(123456)\n    6\n    >>> count_digits(0)\n    1\n    >>> count_digits(1)\n    1\n    >>> count_digits(-1)\n    1\n    >>> count_digits(1000)\n    4\n    \"\"\"\n\ndef count_digit_occurrences(n: int, d: int):\n    \"\"\"\n    count_digit_occurrences takes two arguments: an integer and a digit.\n    It returns the number of times that digit appears in the integer.\n\n    >>> count_digit_occurrences(123, 1)\n    1\n    >>> count_digit_occurrences(123, 3)\n    1\n    >>> count_digit_occurrences(123, 2)\n    0\n    >>> count_digit_occurrences(123, 0)\n    0\n    \"\"\"\n\ndef sum_digits(n: int):\n    \"\"\"\n    sum_digits takes an integer as input and returns the sum of its digits.\n\n    >>> sum_digits(123)\n    6\n    >>> sum_digits(123456)\n    21\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(1)\n    1\n    >>> sum_digits(-1)\n    -1\n    >>> sum_digits(1000)\n    1\n    \"\"\"\n\n", "#%%\n    if len(l) < 3:\n        return False\n    elif len(l) == 3:\n        if l[0] + l[1] + l[2] == 0:\n            return True\n        else:\n            return False\n    else:\n        for i in range(0, len(l) - 2):\n            for j in range(i + 1, len(l) - 1):\n                for k in range(j + 1, len(l)):\n                    if l[i] + l[j] + l[k] == 0:\n                        return True\n        return False\n\ndef odd_even_sum(l: list):\n    \"\"\"\n    odd_even_sum takes a list of integers as an input.\n    it returns the sum of the even numbers and the sum of the odd numbers.\n\n    >>> odd_even_sum([1, 2, 3, 4, 5, 6])\n    12\n    >>> odd_even_sum([1, 3, 5, 7])\n    9\n    >>> odd_even_sum([2, 4, 6, 8, 10])\n    12\n    >>> odd_even_sum([3, 6, 9, 12])\n    15\n    >>> odd_even_sum([1, 3, 5])\n    4\n    >>> odd_even_sum([1, 2, 4, 6])\n    6\n    \"\"\"\n#%%\n    even_sum = 0\n    odd_sum", "", "\ndef longest_word(words: list):\n    \"\"\"\n    longest_word takes a list of strings as an input.\n    It returns the longest string.\n\n    >>> longest_word(['ab', 'cde', 'fgh'])\n    'fgh'\n    >>> longest_word(['a', 'ab', 'cdef'])\n    'cdef'\n    >>> longest_word(['abcd', 'efgh', 'ijkl'])\n    'ijkl'\n    >>> longest_word(['abcd', 'efgh'])\n    'abcd'\n    >>> longest_word([])\n    ''\n    \"\"\"\n\ndef number_of_primes(n: int):\n    \"\"\"\n    number_of_primes takes a positive integer as an input.\n    It returns the number of primes less than or equal to n.\n\n    >>> number_of_primes(1)\n    1\n    >>> number_of_primes(2)\n    2\n    >>> number_of_primes(3)\n    2\n    >>> number_of_primes(4)\n    3\n    >>> number_of_primes(5)\n    3\n    >>> number_of_primes(6)\n    3\n    >>> number_of_primes(7)\n    4\n    >>> number_of_primes(8)\n    4\n    >>> number_of_primes(9)\n    4\n    >>> number_of_primes(10)\n    4\n    >>> number_of_primes(11)\n    5\n    >>> number_of_primes(12)\n    5\n    >>> number_of_primes(13", "\ndef sum_of_digits(n: int):\n    \"\"\"\n    sum_of_digits takes an integer as an input.\n    it returns the sum of the digits of that integer.\n\n    >>> sum_of_digits(1024)\n    10\n    >>> sum_of_digits(10240)\n    12\n    >>> sum_of_digits(102400)\n    14\n    >>> sum_of_digits(1024000)\n    17\n    >>> sum_of_digits(10240000)\n    20\n    >>> sum_of_digits(102400000)\n    23\n    >>> sum_of_digits(1024000000)\n    26\n    \"\"\"\n\ndef sum_of_squares(n: int):\n    \"\"\"\n    sum_of_squares takes an integer as an input.\n    it returns the sum of the squares of the digits of that integer.\n\n    >>> sum_of_squares(1024)\n    24\n    >>> sum_of_squares(10240)\n    67680\n    >>> sum_of_squares(102400)\n    216000\n    >>> sum_of_squares(1024000)\n    5712000\n    >>> sum_of_squares(10240000)\n    175440000\n    >>> sum_of_squares"], ["\ndef car_race_collision_brute_force(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n", "\nif __name__ == \"__main__\":\n    for i in range(1, 25000):\n        print(car_race_collision(i))\n", "\nif __name__ == '__main__':\n    print(car_race_collision(10))\n    print(car_race_collision(100))\n", "\n# %%\n\n# %%\n", "\ndef car_race_simulation(n: int, m: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of m cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of cars that end up in the same place.\n    \"\"\"\n\ndef car_race_statistics(n: int, m: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of m cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of cars that end up in the same place\n    and the number of collisions.\n    \"\"\"\n\ndef car_race_average(n: int, m: int):\n    \"\"\"\n    Imagine a"], ["\n# 1. Write a function that takes a list as an input and returns a new list which contains all\n# the elements in the input list, except the first one.\n# 2. Write a function that takes a list as an input and returns a new list which contains the first\n# three elements of the input list.\n# 3. Write a function that takes a list as an input and returns a new list which contains all\n# the elements in the input list in reverse order.\n# 4. Write a function that takes a list as an input and returns a new list which contains all\n# the elements in the input list, except the last one.\n# 5. Write a function that takes a list as an input and returns a new list which contains all\n# the elements in the input list, except the first two.\n# 6. Write a function that takes a list as an input and returns a new list which contains all\n# the elements in the input list in reverse order, except the first two.\n# 7. Write a function that takes a list as an input and returns a new list which contains all\n# the elements in the input list, except the first three.\n# 8. Write a function that takes a list as an input and returns a new list which contains all\n# the elements in the input list, except the last three.\n# 9. Write a function that takes a list as an input and returns a new list which contains all\n# the elements in the input list in reverse order, except the last three.\n# 10. Write a function that takes a list as an input and returns a new list which contains all\n# the elements in the input list, except the first four.\n# 11. Write a function that takes a list as an input and returns a new list which contains all\n#", "\ndef is_palindrome(s: str) -> bool:\n    \"\"\"Return True if s is a palindrome (same forwards and backwards).\n    >>> is_palindrome('anna')\n    True\n    >>> is_palindrome('annan')\n    False\n    \"\"\"\n    return s == s[::-1]\n\ndef is_subsequence(s: str, t: str) -> bool:\n    \"\"\"Return True if s is a subsequence of t.\n    >>> is_subsequence('cat', 'catch')\n    True\n    >>> is_subsequence('cat', 'horse')\n    False\n    \"\"\"\n\ndef make_divisible(n: int, divisor: int) -> int:\n    \"\"\"Return the smallest integer >= n that is divisible by divisor.\n    >>> make_divisible(13, 3)\n    12\n    >>> make_divisible(12, 10)\n    20\n    \"\"\"\n\ndef make_negative(x: int) -> int:\n    \"\"\"Return the negative of x.\n    >>> make_negative(3)\n    -3\n    >>> make_negative(-2)\n    -2\n    \"\"\"\n\ndef make_pos(x: int) -> int:\n    \"\"\"Return the positive of x.\n    >>> make_pos(-2)\n    2\n    >>> make_pos(3)\n    3\n    \"\"\"\n\ndef make_str_divisible(n: int, divisor: int) -> str:\n    \"\"\"Return the string representation of the smallest integer >= n that is divisible by divisor.\n    >>> make_str_divisible(13, 3)\n    '12'\n    >>> make_str_divisible(12, 10)\n    '20'\n    \"\"\"\n\ndef max_length(s1: str, s2: str) -> int:\n    \"\"\"Return the length of the longest", "# YOUR CODE HERE\nraise NotImplementedError()\n\ndef incr_list_iter(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_iter([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_iter([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n# YOUR CODE HERE\nraise NotImplementedError()\n\ndef incr_list_lambda(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_lambda([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_lambda([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n# YOUR CODE HERE\nraise NotImplementedError()\n\ndef incr_list_map(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_map([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_map([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n# YOUR CODE HERE\nraise NotImplementedError()\n\n", "\tl.append(l[-1] + 1)\n\treturn l\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()", "\ndef is_divisible(n: int, m: int):\n    \"\"\"Return True if n is divisible by m.\n    >>> is_divisible(11, 3)\n    True\n    >>> is_divisible(11, 2)\n    False\n    \"\"\"\n\ndef is_palindrome(s: str):\n    \"\"\"Return True if s is a palindrome.\n    >>> is_palindrome('civic')\n    True\n    >>> is_palindrome('racecar')\n    False\n    \"\"\"\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(13)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n\ndef knapsack(items: list, max_weight: int):\n    \"\"\"Return the maximum value that can be put in a knapsack.\n    >>> knapsack([('A', 3), ('B', 2), ('C', 1)], 4)\n    [('B', 2), ('C', 1)]\n    \"\"\"\n\ndef last_digit(n: int):\n    \"\"\"Return the last digit of a number.\n    >>> last_digit(1234)\n    4\n    >>> last_digit(12345)\n    5\n    \"\"\"\n\ndef longest_word(words: list):\n    \"\"\"Return the longest word in words.\n    >>> longest_word(['a', 'the', 'there', 'answer', 'any', 'by', 'bye'])\n    'by'\n    \"\"\"\n\ndef max_len(words: list):\n    \"\"\"Return the maximum length of any word in words.\n    >>> max_len(['a', 'the', 'there', 'answer', 'any', 'by', 'bye'])\n    3\n    \"\"\"\n\ndef max_sum_subarray"], ["\tfor x in range(len(l)):\n\t\tfor y in range(x + 1, len(l)):\n\t\t\tif x + y == 0:\n\t\t\t\treturn False\n\t\t\telif x + y == l[x] + l[y]:\n\t\t\t\treturn True\n\treturn False\n\n#pairs_sum_to_zero([1, 3, 5, 0])\n#pairs_sum_to_zero([1, 3, -2, 1])\n#pairs_sum_to_zero([1, 2, 3, 7])\n#pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n#pairs_sum_to_zero([1])\n\ndef first_non_repeating_letter(string):\n    \"\"\"\n    first_non_repeating_letter takes a string as input.\n    it returns the first character that is not repeated anywhere\n    >>> first_non_repeating_letter(\"stress\")\n    't'\n    >>> first_non_repeating_letter(\"aardvark\")\n    'd'\n    >>> first_non_repeating_letter(\"banana\")\n    'b'\n    \"\"\"\n    for i in range(len(string)):\n        if string.lower().count(string[i].lower()) == 1:\n            return string[i]\n    return None\n\n#first_non_repeating_letter(\"stress\")\n#first_non_repeating_letter(\"aardvark\")\n#first_non_repeating_", "\ndef is_anagram(s1, s2):\n    \"\"\"\n    is_anagram takes two strings as arguments.\n    it returns True if they are anagrams of each other, and False otherwise.\n    >>> is_anagram('a','b')\n    False\n    >>> is_anagram('ab','ba')\n    True\n    >>> is_anagram('abc','cba')\n    True\n    \"\"\"\n\ndef is_subsequence(s1, s2):\n    \"\"\"\n    is_subsequence takes two strings as arguments.\n    it returns True if s1 is a subsequence of s2, and False otherwise.\n    >>> is_subsequence('a', 'a')\n    True\n    >>> is_subsequence('a', 'ab')\n    True\n    >>> is_subsequence('ab', 'a')\n    False\n    >>> is_subsequence('abc', 'cba')\n    True\n    >>> is_subsequence('xyz', 'x')\n    False\n    >>> is_subsequence('xyz', 'xy')\n    False\n    >>> is_subsequence('xyz', 'xyz')\n    True\n    >>> is_subsequence('xyz', 'xyzz')\n    True\n    >>> is_subsequence('xyz', 'xyzzz')\n    True\n    \"\"\"\n\ndef is_palindrome(s):\n    \"\"\"\n    is_palindrome takes a string as an argument.\n    it returns True if the string is a palindrome, and False otherwise.\n    >>> is_palindrome('a')\n    True\n    >>> is_palindrome('ab')\n    False\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('ab", "\tif len(l) < 3:\n\t\treturn False\n\tfor i in range(len(l) - 1):\n\t\tfor j in range(i + 1, len(l)):\n\t\t\tif l[i] + l[j] == 0:\n\t\t\t\treturn True\n\treturn False\n\ndef reverse_string(s):\n    \"\"\"\n    reverse_string takes a string as input and returns a new string\n    that is the reverse of the original.\n    >>> reverse_string(\"Hello\")\n    olleH\n    >>> reverse_string(\"Howdy\")\n    ydwoH\n    >>> reverse_string(\"Greetings\")\n    sgnoetdmeg\n    \"\"\"\n\treturn s[::-1]\n\ndef flatten(l):\n    \"\"\"\n    flatten takes a list of lists as input and returns a single list\n    that contains all the elements in the input lists.\n    >>> flatten([[1, 2, 3], [4, 5], [6, 7, 8, [9, 10], 11], 12])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    >>> flatten([1, 2, [3, 4, [5]]])\n    [1, 2, 3, 4, 5]\n    >>> flatten([])\n    []\n    \"\"\"\n\tif l == []:\n\t\treturn []\n\telse:\n\t\treturn flatten(l[0]) + flatten(l", "\ndef count_digits(n):\n    \"\"\"\n    count_digits takes an integer as an input, and returns the number of digits\n    in the integer.\n    >>> count_digits(123)\n    3\n    >>> count_digits(12345)\n    5\n    >>> count_digits(100000)\n    7\n    >>> count_digits(1)\n    1\n    >>> count_digits(10)\n    2\n    >>> count_digits(0)\n    1\n    \"\"\"\n    digits = 0\n    while n > 0:\n        digits += 1\n        n = n // 10\n    return digits\n\ndef is_armstrong_number(n):\n    \"\"\"\n    is_armstrong_number takes an integer as an input.\n    it returns True if the number is a palindrome, and False otherwise.\n    >>> is_armstrong_number(153)\n    True\n    >>> is_armstrong_number(10)\n    False\n    >>> is_armstrong_number(5)\n    False\n    \"\"\"\n\ndef remove_duplicates(l):\n    \"\"\"\n    remove_duplicates takes a list as an input and returns a list with\n    duplicate values removed.\n    >>> remove_duplicates([1, 3, 5, 5, 3, 1, 2, 4])\n    [1, 3, 5, 2, 4]\n    >>> remove_duplicates([1, 3, 5])\n    [1, 3, 5]\n    >>> remove_duplicates([1, 1, 1, 3, 5,", "\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)\n"], ["", "\ndef change_base2(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    >>> change_base2(8, 3)\n    '22'\n    >>> change_base2(8, 2)\n    '1000'\n    >>> change_base2(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    if base == 1:\n        return x\n    if base == 2:\n        return bin(x).replace('0b', '')\n    if base == 3:\n        return oct(x).replace('0o', '')\n    if base == 4:\n        return hex(x).replace('0x', '')\n    if base == 5:\n        digits = []\n        while x != 0:\n            digits.append(x % base)\n            x //= base\n        digits.reverse()\n        return ''.join(map(str, digits))\n    if base == 6:\n        digits = []\n        while x != 0:\n            digits.append(x % base)\n            x //= base\n        digits.reverse()\n        return ''.join(map(str, digits))\n    if base == 7:\n        digits = []\n        while x != 0:\n            digits.append(x % base)\n            x //= base\n        digits.reverse()\n        return ''.join(map(str, digits))\n    if base == 8:\n        digits = []\n        while x != 0:\n            digits.append(x % base)\n            x //= base\n        digits.reverse()\n        return ''.join(map(str, digits))\n    if base == 9:\n        digits = []\n        while x != 0:\n            digits.append(x % base)\n            x //= base\n        digits.reverse()\n        return ''.join(map(str, digits))\n    if base", "\ndef int_to_bin(n: int, base: int = 2) -> str:\n    \"\"\"Convert a decimal integer into a binary string, with base.\n    >>> int_to_bin(5, 2)\n    '101'\n    >>> int_to_bin(8, 2)\n    '1000'\n    >>> int_to_bin(15, 2)\n    '1111'\n    \"\"\"\n\ndef int_to_hex(n: int, base: int = 16) -> str:\n    \"\"\"Convert a decimal integer into a hexadecimal string, with base.\n    >>> int_to_hex(5, 16)\n    '0x5'\n    >>> int_to_hex(8, 16)\n    '0x8'\n    >>> int_to_hex(15, 16)\n    '0xf'\n    \"\"\"\n\ndef int_to_oct(n: int, base: int = 8) -> str:\n    \"\"\"Convert a decimal integer into an octal string, with base.\n    >>> int_to_oct(5, 8)\n    '05'\n    >>> int_to_oct(8, 8)\n    '010'\n    >>> int_to_oct(15, 8)\n    '017'\n    \"\"\"\n\ndef int_to_bin_array(n: int, base: int = 2) -> List[int]:\n    \"\"\"Convert a decimal integer into a binary array, with base.\n    >>> int_to_bin_array(5, 2)\n    [0, 0, 1]\n    >>> int_to_bin_array(8, 2)\n    [0, 1, 0, 0]\n    >>> int_to_bin_array(15, 2)\n    [1, 1, ", "\ndef change_base_recursive(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_recursive(8, 3)\n    '22'\n    >>> change_base_recursive(8, 2)\n    '1000'\n    >>> change_base_recursive(7, 2)\n    '111'\n    \"\"\"\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", ""], ["\ndef distance(x1, y1, x2, y2):\n    \"\"\"Given two points (x1, y1) and (x2, y2) return the distance between\n    the two.\n\n    >>> distance(1, 2, 4, 6)\n    5\n    \"\"\"\n\ndef circumference(r):\n    \"\"\"Given the radius of a circle return the circumference.\n\n    >>> circumference(2)\n    12.566370614359172\n    \"\"\"\n\ndef circumference2(r):\n    \"\"\"Given the radius of a circle return the circumference.\n\n    >>> circumference2(2)\n    12.566370614359172\n    \"\"\"\n\ndef perimeter(r):\n    \"\"\"Given the radius of a circle return the perimeter.\n\n    >>> perimeter(2)\n    28.274333882308138\n    \"\"\"\n\ndef area(r):\n    \"\"\"Given the radius of a circle return the area.\n\n    >>> area(2)\n    12.566370614359172\n    \"\"\"\n\ndef volume(r):\n    \"\"\"Given the radius of a circle return the volume.\n\n    >>> volume(2)\n    12.566370614359172\n    \"\"\"\n\ndef surface_area(r):\n    \"\"\"Given the radius of a circle return the surface area.\n\n    >>> surface_area(2)\n    34.14213562373095\n    \"\"\"\n\ndef surface_area_box(length, width, height):\n    \"\"\"Given the dimensions of a box return the surface area.\n\n    >>> surface_area_box(4, 3, 5)\n    36\n    \"\"\"\n\ndef volume_box(length, width, height):\n    \"\"\"Given the dimensions of a box return the volume.\n\n    >>> volume_box(4, 3, 5)\n    60\n    \"\"\"\n\ndef diagonal(a, b):\n    \"\"\"Given the length of two sides of a right angle", "\ndef distance(x1, y1, x2, y2):\n    \"\"\"Given x1, y1, x2, y2 as integers return the distance between them\n    >>> distance(1, 2, 4, 6)\n    5\n    \"\"\"\n\ndef distance_to_center(x, y):\n    \"\"\"Given x, y as integers return the distance of x, y from the center\n    >>> distance_to_center(1, 2)\n    2.82842712474619\n    \"\"\"\n\ndef square_area(side):\n    \"\"\"Given side as a number return the area of a square\n    >>> square_area(1)\n    1\n    >>> square_area(2)\n    4\n    \"\"\"\n\ndef rectangle_area(length, width):\n    \"\"\"Given length and width as integers return the area of a rectangle\n    >>> rectangle_area(1, 2)\n    2\n    \"\"\"\n\ndef circle_area(radius):\n    \"\"\"Given radius as a number return the area of a circle\n    >>> circle_area(1)\n    3.141592653589793\n    >>> circle_area(2)\n    12.566370614359172\n    \"\"\"\n\ndef area(shape, arg):\n    \"\"\"Given a shape and an argument return the area of the shape\n    >>> area('square', 1)\n    1\n    >>> area('circle', 2)\n    12.566370614359172\n    \"\"\"\n\ndef pythagorean_triple(a, b, c):\n    \"\"\"Given a, b, c as numbers return the largest number that is a pythagorean triple\n    >>> pythagorean_triple(3, 4, 5)\n    5\n    >>> pythagorean_triple(5, 12, 13)\n    13\n    \"\"\"\n\ndef make_word(length, fill_char):\n    \"\"\"Given a length and fill_char as characters return a word\n    >>> make_word(5, '*')\n    '*****'\n    >>>", "\ndef pentagonal_area(a, h):\n    \"\"\"Given length of a side and high return area for a pentagon.\n    >>> pentagonal_area(5, 3)\n    22.5\n    \"\"\"\n\ndef hexagonal_area(a, h):\n    \"\"\"Given length of a side and high return area for a hexagon.\n    >>> hexagonal_area(5, 3)\n    28.5\n    \"\"\"\n\ndef heptagonal_area(a, h):\n    \"\"\"Given length of a side and high return area for a heptagon.\n    >>> heptagonal_area(5, 3)\n    35.5\n    \"\"\"\n\ndef octagonal_area(a, h):\n    \"\"\"Given length of a side and high return area for a octagon.\n    >>> octagonal_area(5, 3)\n    42.5\n    \"\"\"\n\ndef nonagon_area(a, h):\n    \"\"\"Given length of a side and high return area for a nonagon.\n    >>> nonagon_area(5, 3)\n    49.5\n    \"\"\"\n\ndef decagonal_area(a, h):\n    \"\"\"Given length of a side and high return area for a decagon.\n    >>> decagonal_area(5, 3)\n    56.5\n    \"\"\"\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "\n# The following should raise an exception:\ndef area_of_triangle(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> area_of_triangle(5, 3)\n    7.5\n    \"\"\"\n\n# The following should raise an exception:\ndef area_of_triangle(a, b, c):\n    \"\"\"Given three sides of a triangle return its area.\n    >>> area_of_triangle(5, 3, 4)\n    6.0\n    \"\"\"\n\n# The following should raise an exception:\ndef area_of_triangle(a, b, c):\n    \"\"\"Given three sides of a triangle return its area.\n    >>> area_of_triangle(5, 3, 4)\n    6.0\n    \"\"\"\n\ndef area_of_triangle(a, b, c):\n    \"\"\"Given three sides of a triangle return its area.\n    >>> area_of_triangle(5, 3, 4)\n    6.0\n    \"\"\"\n    return 0.5 * a * (b + c)\n\n\ndef test_triangle_area():\n    assert triangle_area(3, 4) == 6\n    assert triangle_area(5, 3) == 7.5\n\n\ndef test_area_of_triangle():\n    assert area_of_triangle(3, 4, 5) == 6\n    assert area_of_triangle(5, 3, 4) == 6\n\ndef test_area_of_triangle():\n    assert area_of_triangle(3, 4, 5) == 6\n    assert area_of_triangle(5, 3, 4) == 6\n\ndef test_area_of_triangle():\n    assert area_of_triangle(3, 4, 5) == 6\n    assert area_of_triangle(5, 3, 4) == 6\n\ndef test_area_of_triangle():\n    assert area_of_triangle(3, 4, 5) == 6\n    assert area_of_triangle(5, 3, 4) == ", "\ndef test_triangle_area():\n    assert triangle_area(10, 12) == 50, 'Should be 50'\n\n# 5.3.2\n\ndef test_triangle_area_2():\n    assert triangle_area(4, 3) == 6, 'Should be 6'\n\n# 5.4.1\ndef test_triangle_area_3():\n    assert triangle_area(1, 1) == 1, 'Should be 1'\n\ndef test_triangle_area_4():\n    assert triangle_area(2, 1) == 0.5, 'Should be 0.5'\n\n# 5.4.2\ndef test_triangle_area_5():\n    assert triangle_area(10, 12) == 50, 'Should be 50'\n\n# 5.5.1\ndef test_triangle_area_6():\n    assert triangle_area(5, 3) == 7.5, 'Should be 7.5'\n\n# 5.5.2\ndef test_triangle_area_7():\n    assert triangle_area(4, 3) == 6, 'Should be 6'\n\n# 5.6.1\ndef test_triangle_area_8():\n    assert triangle_area(1, 1) == 1, 'Should be 1'\n\n# 5.6.2\ndef test_triangle_area_9():\n    assert triangle_area(2, 1) == 0.5, 'Should be 0.5'\n\n# 5.7.1\ndef test_triangle_area_10():\n    assert triangle_area(10, 12) == 50, 'Should be 50'\n\n# 5.7.2\ndef test_triangle_area_11():\n    assert triangle_area(5, 3) == 7.5, 'Should be 7.5'\n\n# 5.8.1\ndef test_triangle_area"], ["\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    4\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    14\n    \"\"\"\n\ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 2\n    fib6(3) -> 0\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n    Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n    >>> fib6(5)\n    4\n    >>> fib6(6)\n    8\n    >>>", "\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    5\n    >>> fib5(6)\n    13\n    >>> fib5(7)\n    29\n    \"\"\"\n\ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 2\n    fib6(3) -> 0\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n    Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n    >>> fib6(5)\n    6\n    >>> fib6(6)\n    18", "\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 1\n    fib5(2) -> 1\n    fib5(3) -> 2\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    4\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    14\n    \"\"\"\n\ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 1\n    fib6(2) -> 2\n    fib6(3) -> 3\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n    Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n    >>> fib6(5)\n    5\n    >>> fib6(6)\n    13\n   ", "\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(4) -> 3\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    3\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    17\n    \"\"\"\n\ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 2\n    fib6(3) -> 0\n    fib6(4) -> 3\n    fib6(5) -> 0\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n    Please write a function to efficiently compute the n-th element of the fib6 number sequence", "\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    3\n    >>> fib5(6)\n    5\n    >>> fib5(7)\n    10\n    \"\"\"\n\ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 2\n    fib6(3) -> 0\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n    Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n    >>> fib6(5)\n    2\n    >>> fib6(6)\n    4\n    >>>"], ["\ndef mode(l: list):\n    \"\"\"Return mode of elements in the list l.\n    >>> mode([3, 1, 2, 4, 5, 3, 5, 3])\n    3\n    >>> mode([1, 2, 3, 1, 2, 3, 1, 2, 3])\n    1\n    \"\"\"\n\ndef mean(l: list):\n    \"\"\"Return mean of elements in the list l.\n    >>> mean([1, 2, 3])\n    2.0\n    >>> mean([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    5.5\n    \"\"\"\n\ndef std(l: list):\n    \"\"\"Return standard deviation of elements in the list l.\n    >>> std([1, 2, 3])\n    0.0\n    >>> std([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    3.1622776601683795\n    \"\"\"\n\ndef variance(l: list):\n    \"\"\"Return variance of elements in the list l.\n    >>> variance([1, 2, 3])\n    0.0\n    >>> variance([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    9.166666666666666\n    \"\"\"\n\ndef cov(x: list, y: list):\n    \"\"\"Return covariance of elements in the lists x and y.\n    >>> cov([1, 2, 3], [2, 4, 6])\n    2.0\n    >>> cov([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4,", "\ndef mode(l: list):\n    \"\"\"Return the most frequent element in the list l.\n    >>> mode([3, 1, 2, 4, 5])\n    1\n    >>> mode([1, 1, 1, 1, 3])\n    1\n    \"\"\"\n\ndef variance(l: list):\n    \"\"\"Return the variance of elements in the list l.\n    >>> variance([3, 1, 2, 4, 5])\n    1.25\n    >>> variance([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    9.0\n    \"\"\"\n\ndef stddev(l: list):\n    \"\"\"Return the standard deviation of elements in the list l.\n    >>> stddev([3, 1, 2, 4, 5])\n    1.1180339887498949\n    >>> stddev([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    3.0276503540974902\n    \"\"\"\n\ndef cov(x: list, y: list):\n    \"\"\"Return the covariance of x and y.\n    >>> cov([1, 2, 3], [1, 2, 3])\n    0.0\n    >>> cov([1, 2, 3], [2, 4, 6])\n    2.0\n    \"\"\"\n\ndef corr(x: list, y: list):\n    \"\"\"Return the correlation of x and y.\n    >>> corr([1, 2, 3], [1, 2, 3])\n    1.0\n    >>> corr([1, 2, 3], [2, 4, 6])\n    -1.0\n    \"\"\"\n\ndef sumsq(l: list):\n    \"\"\"Return the sum of the squares of the elements in the", "\ndef mode(l: list):\n    \"\"\"Return the mode of the elements in the list l.\n    >>> mode([3, 1, 2, 4, 5, 3, 1, 2, 4, 5, 3])\n    [3]\n    \"\"\"\n\ndef multimode(l: list):\n    \"\"\"Return the most common elements in the list l.\n    >>> multimode([3, 1, 2, 4, 5, 3, 1, 2, 4, 5, 3, 5, 1, 2, 3, 5, 3, 5, 1, 2, 3, 5, 3, 5, 1, 2, 3, 5, 3, 5, 1, 2, 3, 5, 3, 5, 1, 2, 3, 5, 3, 5, 1, 2, 3, 5, 3, 5, 1, 2, 3, 5, 3, 5, 1, 2, 3, 5, 3, 5, 1, 2, 3, 5, 3, 5, 1, 2, 3, 5, 3, 5, 1, 2, 3, 5, 3, 5, 1, 2, 3, 5, 3, 5, 1, 2, 3, 5, 3, 5, 1, 2, 3, 5, 3, 5, 1, 2, 3, 5, 3, 5, 1, 2, 3, 5, 3, 5, 1, 2, 3, 5, 3, 5, 1, ", "\ndef mode(l: list):\n    \"\"\"Return mode of elements in the list l.\n    >>> mode([1, 1, 2, 2, 3])\n    2\n    \"\"\"\n\ndef mode(l: list):\n    \"\"\"Return mode of elements in the list l.\n    >>> mode([1, 1, 2, 2, 3])\n    2\n    \"\"\"\n\ndef mean(l: list):\n    \"\"\"Return mean of elements in the list l.\n    >>> mean([1, 2, 3, 4, 5])\n    3.0\n    \"\"\"\n\ndef sd(l: list):\n    \"\"\"Return standard deviation of elements in the list l.\n    >>> sd([1, 2, 3, 4, 5])\n    1.4142135623730951\n    \"\"\"\n\ndef variance(l: list):\n    \"\"\"Return variance of elements in the list l.\n    >>> variance([1, 2, 3, 4, 5])\n    2.0\n    \"\"\"\n\ndef iqr(l: list):\n    \"\"\"Return interquartile range of elements in the list l.\n    >>> iqr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    3.5\n    \"\"\"\n\ndef iqr(l: list):\n    \"\"\"Return interquartile range of elements in the list l.\n    >>> iqr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    3.5\n    \"\"\"\n\ndef zscore(l: list):\n    \"\"\"Return z score of elements in the list l.\n    >>> zscore([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [ 0.0,  0.0,  0.0,  0", "\ndef mode(l: list):\n    \"\"\"Return most common element in the list l.\n    >>> mode([3, 1, 2, 4, 5])\n    1\n    >>> mode([3, 1, 2, 4, 5, 1])\n    1\n    \"\"\"\n\ndef powerset(l: list):\n    \"\"\"Return the powerset of a list of elements.\n    >>> powerset([])\n    []\n    >>> powerset([1, 2, 3])\n    [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n    \"\"\"\n\ndef print_permutations(l: list):\n    \"\"\"Print all possible permutations of the given list.\n    >>> print_permutations([1, 2, 3])\n    1 2 3\n    1 3 2\n    2 1 3\n    2 3 1\n    3 1 2\n    3 2 1\n    \"\"\"\n\ndef print_tree(root: TreeNode):\n    \"\"\"Prints out a tree by traversing it recursively.\n    >>> print_tree(None)\n    >>> print_tree(TreeNode(1))\n    1\n    >>> print_tree(TreeNode(1, TreeNode(2), TreeNode(3)))\n    1\n    2\n    3\n    \"\"\"\n\ndef read_file(filename: str):\n    \"\"\"Read the contents of a file into a list of strings.\n    >>> read_file(\"test.txt\")\n    ['one', 'two', 'three']\n    \"\"\"\n\ndef reverse_list(l: list):\n    \"\"\"Reverses the given list.\n    >>> reverse_list([1, 2, 3])\n    [3, 2, 1]\n    \"\"\"\n\ndef rotate_list(l: list):\n    \"\"\"Returns a list with the first element rotated to the end of the list.\n    >>> rotate_list([1, 2, 3])\n    [2, 3,"], ["\ndef reverse_words(text: str):\n    \"\"\"\n    Reverses words in a string\n    >>> reverse_words('a b c')\n    'c b a'\n    >>> reverse_words('a b c d')\n    'd c b a'\n    \"\"\"\n\ndef reverse_string(text: str):\n    \"\"\"\n    Reverses a string\n    >>> reverse_string('')\n    ''\n    >>> reverse_string('a')\n    'a'\n    >>> reverse_string('abc')\n    'cba'\n    >>> reverse_string('abcd')\n    'dcba'\n    \"\"\"\n\ndef is_string_unique(text: str):\n    \"\"\"\n    Checks if a string is unique\n    >>> is_string_unique('')\n    True\n    >>> is_string_unique('a')\n    True\n    >>> is_string_unique('abc')\n    False\n    >>> is_string_unique('aaaa')\n    False\n    \"\"\"\n\ndef is_string_palindrome(text: str):\n    \"\"\"\n    Checks if a string is a palindrome\n    >>> is_string_palindrome('')\n    True\n    >>> is_string_palindrome('a')\n    True\n    >>> is_string_palindrome('abc')\n    True\n    >>> is_string_palindrome('aaaa')\n    False\n    \"\"\"\n\ndef is_string_palindrome_v2(text: str):\n    \"\"\"\n    Checks if a string is a palindrome\n    >>> is_string_palindrome_v2('')\n    True\n    >>> is_string_palindrome_v2('a')\n    True\n    >>> is_string_palindrome_v2('abc')\n    True\n    >>> is_string_palindrome_v2('aaaa')\n    False\n    \"\"\"\n\ndef is_string_palindrome_v3(text: str):\n    \"\"\"\n    Checks if a string is a palindrome\n    >>> is_string_palindrome_v3('')\n    True\n    >>> is_string_palindrome_v3('a')\n    True\n    >>> is_string_palindrome_v3('abc')\n    True\n    >>> is_string_pal", "\ndef first_non_repeating_letter(text: str):\n    \"\"\"\n    Find the first character that is not repeated anywhere in the string\n    >>> first_non_repeating_letter(\"hha\")\n    'h'\n    >>> first_non_repeating_letter(\"aaabc\")\n    'c'\n    >>> first_non_repeating_letter(\"ababab\")\n    'a'\n    \"\"\"\n\ndef is_unique(text: str):\n    \"\"\"\n    Check if the given string is a permutation of a palindrome\n    >>> is_unique(\"aabb\")\n    True\n    >>> is_unique(\"abcdd\")\n    False\n    >>> is_unique(\"caca\")\n    True\n    >>> is_unique(\"abba\")\n    True\n    \"\"\"\n\ndef rotate(text: str):\n    \"\"\"\n    Given a string, return a new string with the characters rotated to the right by n\n    >>> rotate(\"abcd\", 1)\n    'bcda'\n    >>> rotate(\"abcd\", 2)\n    'dcab'\n    >>> rotate(\"abcd\", 3)\n    'abcd'\n    >>> rotate(\"abcd\", 4)\n    'dcba'\n    >>> rotate(\"abcd\", 10)\n    'abcd'\n    \"\"\"\n\ndef palindrome_permutation(text: str):\n    \"\"\"\n    Given a string, write a function to check if it is a permutation of a palindrome.\n    A palindrome is a word or phrase that is the same forwards and backwards. A permutation is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words.\n    >>> palindrome_permutation(\"taco cat\")\n    True\n    >>> palindrome_permutation(\"taco cat dog\")\n    False\n    >>> palindrome_permutation(\"tacocat\")\n    True\n    >>> palindrome_permutation(\"tacocat taco cat\")\n    True\n    >>> palindrome_permutation(\"tacocat taco cat dog\")\n    False\n    \"\"\"\n\ndef reverse_words(text: str):\n    \"\"\"\n    Given a string, return a new string with the reversed order of characters.\n    >>> reverse_words(\"", "#     return text == text[::-1]\n    return text.lower() == text.lower()[::-1]\n\n\nif __name__ == \"__main__\":\n    print(is_palindrome(''))\n    print(is_palindrome('aba'))\n    print(is_palindrome('aaaaa'))\n    print(is_palindrome('zbcd'))", "# Write your solution here.\n\ndef is_palindrome_v2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v2('')\n    True\n    >>> is_palindrome_v2('aba')\n    True\n    >>> is_palindrome_v2('aaaaa')\n    True\n    >>> is_palindrome_v2('zbcd')\n    False\n    \"\"\"\n# Write your solution here.\n\ndef is_palindrome_v3(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v3('')\n    True\n    >>> is_palindrome_v3('aba')\n    True\n    >>> is_palindrome_v3('aaaaa')\n    True\n    >>> is_palindrome_v3('zbcd')\n    False\n    \"\"\"\n# Write your solution here.\n\ndef is_palindrome_v4(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v4('')\n    True\n    >>> is_palindrome_v4('aba')\n    True\n    >>> is_palindrome_v4('aaaaa')\n    True\n    >>> is_palindrome_v4('zbcd')\n    False\n    \"\"\"\n# Write your solution here.\n\ndef is_palindrome_v5(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v5('')\n    True\n    >>> is_palindrome_v5('aba')\n    True\n    >>> is_palindrome_v5('aaaaa')\n    True\n    >>> is_palindrome_v5('zbcd')\n    False\n    \"\"\"\n# Write your solution here.\n\ndef is_palindrome_v6(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v6('')\n    True\n    >>> is_palindrome_v6('aba')\n    True\n    >>> is_palindrome_v6('aaaaa')\n    True\n    >>> is_pal", ""], ["#     return pow(2, n, p)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the inverse of n modulo p (be aware of numerics).\n    >>> modp_inv(1, 101)\n    1\n    >>> modp_inv(2, 101)\n    100\n    >>> modp_inv(3, 101)\n    10\n    >>> modp_inv(4, 101)\n    100\n    >>> modp_inv(5, 101)\n    90\n    \"\"\"\n#     return pow(n, -1, p)\n\ndef is_prime(p: int):\n    \"\"\"Check if p is a prime number.\n    >>> is_prime(1)\n    True\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    False\n    \"\"\"\n    # TODO\n    pass\n\ndef is_prob_prime(p: int, k: int = 10):\n    \"\"\"Check if p is a probable prime with k tests.\n    >>> is_prob_prime(3)\n    True\n    >>> is_prob_prime(13)\n    True\n    >>> is_prob_prime(11, 10)\n    False\n    >>> is_prob_prime(11, 11)\n    True\n    >>> is_prob_prime(11, 12)\n    False\n    >>> is_prob_prime(11, 13)\n    True\n    \"\"\"\n    # TODO\n   ", "\ndef divp(n: int, p: int):\n    \"\"\"Return floor(n/p)\n    >>> divp(10, 3)\n    3\n    >>> divp(23, 5)\n    4\n    >>> divp(4, 5)\n    0\n    >>> divp(24, 5)\n    3\n    >>> divp(7, 11)\n    6\n    \"\"\"\n\ndef bit_length(n: int):\n    \"\"\"Return the length of the binary representation of n.\n    >>> bit_length(1)\n    1\n    >>> bit_length(2)\n    1\n    >>> bit_length(3)\n    2\n    >>> bit_length(257)\n    8\n    >>> bit_length(258)\n    9\n    \"\"\"\n\ndef gcd(a: int, b: int):\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> gcd(12, 18)\n    6\n    >>> gcd(4, 24)\n    8\n    >>> gcd(5, 5)\n    5\n    >>> gcd(4, 6)\n    2\n    >>> gcd(9, 10)\n    1\n    \"\"\"\n\ndef egcd(a: int, b: int):\n    \"\"\"Return (x, y, gcd(a, b)).\n    >>> egcd(12, 18)\n    (2, -4, 6)\n    >>> egcd(4, 24)\n    (2, 2, 8)\n    >>> egcd(5, 5)\n    (1, 0, 5)\n    >>> egcd(4, 6)\n    (2, -2, 2)\n    >>> egcd(9, 10)\n    (1, 1, 1)\n    \"\"\"\n\ndef lcm(a: int, b: int):\n    \"\"\"Return the least common", "\ndef addp(a: int, b: int, p: int):\n    \"\"\"Return a+b modulo p (be aware of numerics).\n    >>> addp(3, 5, 11)\n    8\n    >>> addp(100, 200, 101)\n    1\n    \"\"\"\n\ndef subp(a: int, b: int, p: int):\n    \"\"\"Return a-b modulo p (be aware of numerics).\n    >>> subp(100, 200, 101)\n    99\n    >>> subp(100, 100, 101)\n    0\n    \"\"\"\n\ndef mulp(a: int, b: int, p: int):\n    \"\"\"Return a*b modulo p (be aware of numerics).\n    >>> mulp(3, 5, 11)\n    6\n    >>> mulp(100, 200, 101)\n    19\n    >>> mulp(100, 100, 101)\n    1\n    \"\"\"\n\ndef divp(a: int, b: int, p: int):\n    \"\"\"Return a//b modulo p (be aware of numerics).\n    >>> divp(100, 200, 101)\n    1\n    >>> divp(100, 101, 101)\n    1\n    \"\"\"\n\ndef powp(a: int, b: int, p: int):\n    \"\"\"Return a**b modulo p (be aware of numerics).\n    >>> powp(100, 0, 101)\n    1\n    >>> powp(100, 1, 101)\n    100\n    >>> powp(100, 2, 1", "", "\ndef powmod(x: int, n: int, p: int):\n    \"\"\"Return x^n modulo p (be aware of numerics).\n    >>> powmod(3, 5, 11)\n    8\n    >>> powmod(1101, 10, 101)\n    2\n    >>> powmod(11, 0, 101)\n    1\n    >>> powmod(11, 1, 101)\n    11\n    >>> powmod(3, 2, 11)\n    1\n    \"\"\"\n\ndef random_prime(n: int, r: int):\n    \"\"\"Return a random prime number of length n (with probability r)\n    >>> random_prime(5, 0.5)\n    11\n    >>> random_prime(10, 0.3)\n    29\n    \"\"\"\n\ndef factorial(n: int):\n    \"\"\"Return the factorial of n.\n    >>> factorial(10)\n    3628800\n    \"\"\"\n\ndef fibonacci(n: int):\n    \"\"\"Return the n-th Fibonacci number.\n    >>> fibonacci(10)\n    55\n    \"\"\"\n\ndef gcd(a: int, b: int):\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> gcd(6, 10)\n    2\n    >>> gcd(12, 8)\n    4\n    >>> gcd(20, 16)\n    4\n    \"\"\"\n\ndef is_prime(n: int, r: float):\n    \"\"\"Return True if n is a prime number with probability r (with probability 0.5).\n    >>> is_prime(5, 0.5)\n    True\n    >>> is_prime(11, 0.7)\n    False\n    \"\"\"\n\ndef invmod(a: int, p: int"], ["", "\ndef encrypt(message: str, key: int):\n    \"\"\"\n    encrypts string message with key k\n    \"\"\"\n    encoded = encode_shift(message)\n    encrypted_message = \"\"\n    for i in encoded:\n        if i.isalpha():\n            encrypted_message += chr(((ord(i) + key - ord(\"a\")) % 26) + ord(\"a\"))\n        else:\n            encrypted_message += i\n    return encrypted_message\n\n\ndef decrypt(message: str, key: int):\n    \"\"\"\n    decrypts string message with key k\n    \"\"\"\n    encoded = encode_shift(message)\n    encrypted_message = \"\"\n    for i in encoded:\n        if i.isalpha():\n            encrypted_message += chr(((ord(i) - key - ord(\"a\")) % 26) + ord(\"a\"))\n        else:\n            encrypted_message += i\n    return encrypted_message\n\n\ndef main():\n    message = \"Hello, how are you?\"\n    key = 2\n    encrypted = encrypt(message, key)\n    decrypted = decrypt(encrypted, key)\n    print(encrypted)\n    print(decrypted)\n    if message == decrypted:\n        print(\"Your message is secure!\")\n    else:\n        print(\"Your message is not secure!\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "", "#     return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26 + ord(\"a\")) for ch in s])\n    return \"\".join([chr((ord(ch) - 5) % 26 + ord(\"a\")) for ch in s])\n\n\nif __name__ == \"__main__\":\n    s = \"abc\"\n    print(s)\n    print(encode_shift(s))\n    print(decode_shift(encode_shift(s)))\n", ""], ["\ndef check_palindrome(text):\n    \"\"\"\n    check_palindrome is a function that takes string and returns boolean if the string is palindrome.\n    >>> check_palindrome('')\n    True\n    >>> check_palindrome(\"abcdef\\nghijklm\")\n    False\n    >>> check_palindrome('abcdef')\n    True\n    >>> check_palindrome('aaaaa')\n    True\n    >>> check_palindrome('aaBAA')\n    False\n    >>> check_palindrome('zbcd')\n    True\n    \"\"\"\n\ndef count_vowels(text):\n    \"\"\"\n    count_vowels is a function that takes string and returns number of vowels.\n    >>> count_vowels('')\n    0\n    >>> count_vowels(\"abcdef\\nghijklm\")\n    3\n    >>> count_vowels('abcdef')\n    3\n    >>> count_vowels('aaaaa')\n    5\n    >>> count_vowels('aaBAA')\n    2\n    >>> count_vowels('zbcd')\n    0\n    \"\"\"\n\ndef is_unique(text):\n    \"\"\"\n    is_unique is a function that takes string and returns True if the string contains all unique characters and False otherwise.\n    >>> is_unique('')\n    True\n    >>> is_unique(\"abcdef\\nghijklm\")\n    False\n    >>> is_unique('abcdef')\n    False\n    >>> is_unique('aaaaa')\n    True\n    >>> is_unique('aaBAA')\n    False\n    >>> is_unique('zbcd')\n    True\n    \"\"\"\n\ndef is_palindrome(text):\n    \"\"\"\n    is_palindrome is a function that takes string and returns True if the string is palindrome and False otherwise.\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome(\"", "\t#Your code here\n    if text == '':\n        return ''\n    if text[0] == 'a' or text[0] == 'e' or text[0] == 'i' or text[0] == 'o' or text[0] == 'u':\n        return remove_vowels(text[1:])\n    else:\n        return text[0] + remove_vowels(text[1:])\n\nprint(remove_vowels(\"abcdef\\nghijklm\"))\nprint(remove_vowels('abcdef'))\nprint(remove_vowels('aaaaa'))\nprint(remove_vowels('aaBAA'))\nprint(remove_vowels('zbcd'))\nprint(remove_vowels('Zbcd'))\n\n# +\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    if text == '':\n        return ''\n    if text[0] == 'a' or text[0] == 'e' or text[0] == 'i' or text[0] == 'o' or text[0] == 'u':\n        return remove_vowels(text[1:])\n    else:\n        return text[0] + remove", "#   Write your code here.\n    vowels = ['a','e','i','o','u']\n    vowels = \"\".join(vowels)\n    text = text.lower()\n    text = text.replace(vowels, \"\")\n    return text\n\ndef reverse(text):\n    \"\"\"\n    reverse is a function that takes string and returns string in reverse order.\n    >>> reverse('')\n    ''\n    >>> reverse(\"abcdef\\nghijklm\")\n    'mjklihg\\nfedcba'\n    >>> reverse('abcdef')\n    'fedcba'\n    >>> reverse('aaaaa')\n    'aaaaa'\n    >>> reverse('aaBAA')\n    'AAbaa'\n    >>> reverse('zbcd')\n    'zbcd'\n    \"\"\"\n#   Write your code here.\n    text = text[::-1]\n    return text\n\n\ndef palindrome(text):\n    \"\"\"\n    palindrome is a function that takes string and returns True if string is palindrome.\n    >>> palindrome('')\n    True\n    >>> palindrome(\"abcdef\\nghijklm\")\n    True\n    >>> palindrome('abcdef')\n    True\n    >>> palindrome('aaBAA')\n    True\n    >>> palindrome('zbcd')\n    False\n    \"\"\"\n#   Write your code here.\n    text = text.replace(\" \", \"\")\n    text = text.lower()\n    text = remove_vowels(text)\n    if text == reverse(text):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "# your code here\n\ndef reverse_word(word):\n    \"\"\"\n    reverse_word is a function that takes string and returns reversed string.\n    >>> reverse_word('')\n    ''\n    >>> reverse_word('abcdef')\n    'fedcba'\n    >>> reverse_word('a')\n    'a'\n    >>> reverse_word('hello')\n    'olleh'\n    >>> reverse_word('abcde')\n    'edcba'\n    \"\"\"\n# your code here\n\ndef reverse_sentence(sentence):\n    \"\"\"\n    reverse_sentence is a function that takes string and returns reversed string.\n    >>> reverse_sentence('')\n    ''\n    >>> reverse_sentence('abcdef')\n    'fedcba'\n    >>> reverse_sentence('a')\n    'a'\n    >>> reverse_sentence('hello')\n    'olleh'\n    >>> reverse_sentence('abcde')\n    'edcba'\n    >>> reverse_sentence('abcdefg hijklmn')\n    'mnhgjkl fcdbe'\n    >>> reverse_sentence('a b c d')\n    'd c b a'\n    \"\"\"\n# your code here\n\ndef remove_duplicate_words(sentence):\n    \"\"\"\n    remove_duplicate_words is a function that takes string and returns string without duplicate words.\n    >>> remove_duplicate_words('')\n    ''\n    >>> remove_duplicate_words('abcdef')\n    'abcdef'\n    >>> remove_duplicate_words('a')\n    'a'\n    >>> remove_duplicate_words('hello')\n    'hello'\n    >>> remove_duplicate_words('abcde')\n    'abcde'\n    >>> remove_duplicate_words('abcdefg hijklmn')\n    'abcdefg hijklmn'\n    >>> remove_duplicate_words('a b c d')\n    'a b c d'\n    >>> remove_duplicate_", "#write your code here\n    new_text = ''\n    for i in text:\n        if not i in 'aeiouAEIOU':\n            new_text += i\n    return new_text\n\n\ndef remove_vowels_v2(text):\n    \"\"\"\n    remove_vowels_v2 is a function that takes string and returns string without vowels.\n    >>> remove_vowels_v2('')\n    ''\n    >>> remove_vowels_v2(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels_v2('abcdef')\n    'bcdf'\n    >>> remove_vowels_v2('aaaaa')\n    ''\n    >>> remove_vowels_v2('aaBAA')\n    'B'\n    >>> remove_vowels_v2('zbcd')\n    'zbcd'\n    \"\"\"\n#write your code here\n    return ''.join(x for x in text if x.lower() not in 'aeiouaeiou')\n\n\ndef is_palindrome(text):\n    \"\"\"\n    is_palindrome is a function that takes string and returns True if string is palindrome and False otherwise.\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome(\"abcdef\\nghijklm\")\n    False\n    >>> is_palindrome('abcdef')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('aaBAA')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n#write your code here\n    text = text.lower()\n    return text == text[::-1]\n\n\ndef is_palindrome_v2(text):\n    \"\"\"\n    is_palindrome_v2"], ["# YOUR CODE HERE\nraise NotImplementedError()\n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1, 2, 4, 10], 10)\n    False\n    >>> above_threshold([1, 20, 4, 10], 15)\n    True\n    \"\"\"\n# YOUR CODE HERE\nraise NotImplementedError()\n\ndef count_below(l: list, t: int):\n    \"\"\"Return the number of elements in the list l that are below threshold t.\n    >>> count_below([1, 2, 4, 10], 100)\n    2\n    >>> count_below([1, 20, 4, 10], 5)\n    1\n    \"\"\"\n# YOUR CODE HERE\nraise NotImplementedError()\n\ndef count_above(l: list, t: int):\n    \"\"\"Return the number of elements in the list l that are above threshold t.\n    >>> count_above([1, 2, 4, 10], 10)\n    1\n    >>> count_above([1, 20, 4, 10], 15)\n    2\n    \"\"\"\n# YOUR CODE HERE\nraise NotImplementedError()\n\ndef average(l: list):\n    \"\"\"Return the average of the numbers in the list l.\n    >>> average([1, 2, 4, 10])\n    6.0\n    >>> average([1, 20, 4, 10])\n    8.0\n    \"\"\"\n# YOUR CODE HERE\nraise NotImplementedError()\n\ndef mode(l: list):\n    \"\"\"Return the most common value in the list l.\n    >>> mode([1, 2, 4, 10, 10, 10])\n    10\n    >>> mode([1, 20, 4, 10, 10, 10", "\ndef print_all_primes(n: int):\n    \"\"\"Print the first n primes.\n    >>> print_all_primes(5)\n    2\n    3\n    5\n    7\n    11\n    \"\"\"\n\ndef print_primes(n: int):\n    \"\"\"Print the first n primes.\n    >>> print_primes(5)\n    2\n    3\n    5\n    7\n    11\n    \"\"\"\n\ndef print_first_n_primes(n: int):\n    \"\"\"Print the first n primes.\n    >>> print_first_n_primes(5)\n    2\n    3\n    5\n    7\n    11\n    \"\"\"\n\ndef print_first_n_fibonacci(n: int):\n    \"\"\"Print the first n Fibonacci numbers.\n    >>> print_first_n_fibonacci(5)\n    1\n    1\n    2\n    3\n    5\n    \"\"\"\n\ndef print_fibonacci(n: int):\n    \"\"\"Print the first n Fibonacci numbers.\n    >>> print_fibonacci(5)\n    1\n    1\n    2\n    3\n    5\n    \"\"\"\n\ndef print_first_n_triangle(n: int):\n    \"\"\"Print the first n triangle numbers.\n    >>> print_first_n_triangle(5)\n    1\n    3\n    6\n    10\n    15\n    \"\"\"\n\ndef print_triangle(n: int):\n    \"\"\"Print the first n triangle numbers.\n    >>> print_triangle(5)\n    1\n    3\n    6\n    10\n    15\n    \"\"\"\n\ndef print_first_n_square(n: int):\n    \"\"\"Print the first n square numbers.\n    >>> print_first_n_square(5)\n    1\n    4\n    9\n    16\n    25\n    \"\"\"\n\ndef print_square(n: int):\n    \"\"\"Print the first n square numbers.\n    >>> print_square(5)\n    1\n    4\n    9\n    16\n    25\n    \"\"\"\n\ndef print_first_n_", "\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1, 2, 4, 10], 5)\n    True\n    >>> above_threshold([1, 20, 4, 10], 100)\n    False\n    \"\"\"\n\ndef average_list(l: list):\n    \"\"\"Return the average value of the list l.\n    >>> average_list([1, 2, 4, 10])\n    4.5\n    >>> average_list([1, 20, 4, 10])\n    8.5\n    \"\"\"\n\ndef max_list(l: list):\n    \"\"\"Return the maximum value of the list l.\n    >>> max_list([1, 2, 4, 10])\n    10\n    >>> max_list([1, 20, 4, 10])\n    20\n    \"\"\"\n\ndef reverse_list(l: list):\n    \"\"\"Return a reversed list.\n    >>> reverse_list([1, 2, 3])\n    [3, 2, 1]\n    >>> reverse_list([])\n    []\n    \"\"\"\n\ndef is_palindrome(l: list):\n    \"\"\"Return True if the list l is a palindrome.\n    >>> is_palindrome([1, 2, 3, 2, 1])\n    True\n    >>> is_palindrome([1, 2, 3])\n    False\n    \"\"\"\n\ndef get_middle(l: list):\n    \"\"\"Return the middle value of the list l.\n    >>> get_middle([1, 2, 3, 4, 5])\n    3\n    >>> get_middle([1, 2, 3, 4])\n    3\n    >>> get_middle([1, 2, 3])\n    2\n    >>> get_middle([1, 2])\n    2\n   ", "\ndef count_below_threshold(l: list, t: int):\n    \"\"\"Return the number of numbers in the list l that are below threshold t.\n    >>> count_below_threshold([1, 2, 4, 10], 100)\n    1\n    >>> count_below_threshold([1, 20, 4, 10], 5)\n    2\n    \"\"\"\n\ndef sum_below_threshold(l: list, t: int):\n    \"\"\"Return the sum of all numbers in the list l that are below threshold t.\n    >>> sum_below_threshold([1, 2, 4, 10], 100)\n    11\n    >>> sum_below_threshold([1, 20, 4, 10], 5)\n    15\n    \"\"\"\n\ndef sum_of_list(l: list):\n    \"\"\"Return the sum of all numbers in the list l.\n    >>> sum_of_list([1, 2, 4, 10])\n    21\n    >>> sum_of_list([1, 20, 4, 10])\n    25\n    \"\"\"\n\ndef sum_of_squares(l: list):\n    \"\"\"Return the sum of the squares of all numbers in the list l.\n    >>> sum_of_squares([1, 2, 4, 10])\n    100\n    >>> sum_of_squares([1, 20, 4, 10])\n    240\n    \"\"\"\n\ndef sum_of_cubes(l: list):\n    \"\"\"Return the sum of the cubes of all numbers in the list l.\n    >>> sum_of_cubes([1, 2, 4, 10])\n    280\n    >>> sum_of_cubes([1, 20, 4, 10])\n    1100\n    \"\"\"\n\ndef first_negative(l:", "\ndef count_evens(l: list):\n    \"\"\"Return the number of even numbers in the list l.\n    >>> count_evens([2, 5, 2, 6, 9])\n    2\n    >>> count_evens([1, 1, 3, 5, 1])\n    2\n    \"\"\"\n\ndef count_negatives(l: list):\n    \"\"\"Return the number of negative numbers in the list l.\n    >>> count_negatives([1, -2, 3, -4, 5, -6, 7, -8])\n    4\n    >>> count_negatives([1, 2, 3, 4, 5, 6, 7, 8])\n    0\n    \"\"\"\n\ndef average(l: list):\n    \"\"\"Return the average of all the numbers in the list l.\n    >>> average([1, 2, 3, 4, 5])\n    3\n    >>> average([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    5.5\n    \"\"\"\n\ndef flatten(l: list):\n    \"\"\"Return a flattened version of the list l.\n    >>> flatten([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [1, 2, 3, 4, 5, 6, 7, 8]\n    \"\"\"\n\ndef sum_lists(l: list):\n    \"\"\"Return a new list containing the sum of the elements of all lists in the list l.\n    >>> sum_lists([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [16, 15, 13, 11]\n    \"\"\"\n\ndef is_increasing(l"], ["\n# add(2,3)\n# add(5,7)\n\ndef sub(x: int, y: int):\n    \"\"\"Substract two numbers x and y\n    >>> sub(2, 3)\n    -1\n    >>> sub(5, 7)\n    -2\n    \"\"\"\n\n# sub(2,3)\n# sub(5,7)\n\ndef mult(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mult(2, 3)\n    6\n    >>> mult(5, 7)\n    35\n    \"\"\"\n\n# mult(2,3)\n# mult(5,7)\n\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    0\n    >>> div(5, 7)\n    0\n    \"\"\"\n\n# div(2,3)\n# div(5,7)\n\ndef square(x: int):\n    \"\"\"Returns the square of x\n    >>> square(2)\n    4\n    >>> square(5)\n    25\n    \"\"\"\n\n# square(2)\n# square(5)\n\ndef cube(x: int):\n    \"\"\"Returns the cube of x\n    >>> cube(2)\n    8\n    >>> cube(5)\n    125\n    \"\"\"\n\n# cube(2)\n# cube(5)\n\ndef power(x: int, n: int):\n    \"\"\"Returns the power of x to the nth power\n    >>> power(2, 2)\n    4\n    >>> power(2, 3)\n    8\n    >>> power(5, 2)\n    25\n    \"\"\"\n\n# power(2,2)\n# power(2,3)\n# power(5,2)\n\ndef exp(x: int, y: int):\n    \"\"\"Returns x to the power y\n    >>> exp(2, 3)\n    8\n    >>> exp(3, 2)\n    9\n    >>> exp(4, 3)\n    64\n    \"\"\"\n\n# exp(2,3)\n# exp(3,2)\n# exp", "\ndef subtract(x: int, y: int) -> int:\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(5, 7)\n    -2\n    >>> subtract(2, 3)\n    -1\n    \"\"\"\n\ndef multiply(x: int, y: int) -> int:\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n\ndef divide(x: int, y: int) -> float:\n    \"\"\"Divide two numbers x and y\n    >>> divide(6, 2)\n    3.0\n    >>> divide(5, 2)\n    2.5\n    \"\"\"\n\ndef power(x: int, y: int) -> int:\n    \"\"\"Raise x to the power of y\n    >>> power(2, 3)\n    8\n    >>> power(5, 2)\n    25\n    \"\"\"\n\ndef sqrt(x: float) -> float:\n    \"\"\"Find the square root of x\n    >>> sqrt(4)\n    2.0\n    >>> sqrt(9)\n    3.0\n    \"\"\"\n\ndef factorial(x: int) -> int:\n    \"\"\"Find the factorial of x\n    >>> factorial(5)\n    120\n    >>> factorial(6)\n    720\n    \"\"\"\n\ndef fibonacci(n: int) -> int:\n    \"\"\"Find the nth Fibonacci number\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(8)\n    21\n    \"\"\"\n", "", "\ndef add_with_type(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add_with_type(2, 3)\n    5\n    >>> add_with_type(5, 7)\n    12\n    \"\"\"\n    return x + y\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(optionflags=doctest.ELLIPSIS)\n", "\n# 1.3.4. Class and Instances\n\nclass Person:\n    \"\"\"Class for storing information about a person\n    \"\"\"\n\n    def __init__(self, name: str, age: int):\n        \"\"\"Create a person object\n\n        Args:\n            name (str): person's name\n            age (int): person's age\n        \"\"\"\n        self.name = name\n        self.age = age\n\n    def __repr__(self):\n        \"\"\"Return a string representation of a person object\n\n        Returns:\n            str: person's name and age\n        \"\"\"\n        return f\"{self.name} is {self.age} years old\"\n\n    def __str__(self):\n        \"\"\"Return a string representation of a person object\n\n        Returns:\n            str: person's name and age\n        \"\"\"\n        return f\"{self.name} is {self.age} years old\"\n\n    def __len__(self):\n        \"\"\"Return the number of characters in a person's name\n\n        Returns:\n            int: number of characters in a person's name\n        \"\"\"\n        return len(self.name)\n\n    def __iter__(self):\n        \"\"\"Return a person's name\n\n        Yields:\n            str: person's name\n        \"\"\"\n        yield self.name\n\n    def __eq__(self, other):\n        \"\"\"Check if two persons are the same\n\n        Args:\n            other (Person): person to compare to\n\n        Returns:\n            bool: True if the persons are the same\n        \"\"\"\n        return self.name == other.name and self.age == other.age\n\ndef test_repr(p: Person):\n    \"\"\"Test if the person's representation is correct\n\n    Args:\n        p (Person): person to test\n\n    Returns:\n        bool: True if the representation is correct\n    \"\"\"\n    return repr(p) == f\"{p.name} is {p.age} years old\"\n\ndef test_str(p: Person):\n    \"\"\"Test if the person's string representation is correct\n\n    Args:\n        p (Person): person to test\n\n    Returns:\n        bool: True if the string representation is correct\n    \"\"\"\n    return str(p) == f\"{p.name} is {p.age} years old\"\n\ndef test_len(p: Person):\n    \"\"\"Test"], ["#    print(s0)\n#    print(s1)\n    if len(s0) != len(s1):\n        return False\n    for char in s0:\n        if char not in s1:\n            return False\n    return True\n\n\ndef longest_word(s: str) -> str:\n    \"\"\"\n    Find longest word in a string.\n    >>> longest_word('abc abcd abcd efg')\n    'abcd'\n    >>> longest_word('abcd')\n    'abcd'\n    >>> longest_word('abcdefghijklmnopqrstuvwxyz')\n    'abcdefghijklmnopqrstuvwxyz'\n    >>> longest_word(' ')\n    ' '\n    \"\"\"\n    if s == '':\n        return ''\n    longest = s[0]\n    for word in s.split():\n        if len(word) > len(longest):\n            longest = word\n    return longest\n\n\ndef longest_word_non_repeating_characters(s: str) -> str:\n    \"\"\"\n    >>> longest_word_non_repeating_characters('abc abcd abcd efg')\n    'abcd'\n    >>> longest_word_non_repeating_characters('abcd')\n    'abcd'\n    >>> longest_word_non_repeating_characters('abcdefghijklmnopqrstuvwxyz')\n    'abcd'\n    >>> longest_word_non_repeating_characters(' ')\n    ' '\n    \"\"\"\n    if s == '':\n        return ''\n    longest = ''\n    for word in s.split():\n        if same_chars(word, longest):\n            continue\n        if len(word) > len(longest):\n            longest = word\n    return longest\n\n\ndef longest_word_non_repeating_characters_new(s: str) -> str:\n    \"\"\"\n    >>> longest_word_non_repeating_characters_new", "\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\ndef first_non_repeating_letter(s: str) -> str:\n    \"\"\"\n    Find the first non-repeating letter in a string.\n    >>> first_non_repeating_letter('abcd')\n    'b'\n    >>> first_non_repeating_letter('abcbcd')\n    'c'\n    >>> first_non_repeating_letter('abcccc')\n    'a'\n    >>> first_non_repeating_letter('abccaa')\n    'c'\n    >>> first_non_repeating_letter('abccaa')\n    'c'\n    \"\"\"\n    if len(s) <= 1:\n        return s[0]\n    else:\n        if s[0] == s[1]:\n            return first_non_repeating_letter(s[2:])\n        else:\n            return s[0]\n\ndef remove_nth(l: List[int], n: int) -> List[int]:\n    \"\"\"\n    Remove the nth element from a list.\n    >>> remove_nth([1, 2, 3, 4], 2)\n    [1, 2, 4]\n    >>> remove_nth([1, 2, 3, 4], 1)\n    [1, 3, 4]\n    >>> remove_nth([1, 2, 3, 4], 0)\n    [2, 3, 4]\n    \"\"\"\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\"\n    Determine if a string is a palindrome.\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abcba')\n    False\n    \"\"\"\n\ndef find_index(l: List[int], x: int) ->", "\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()", "\ndef same_chars_2(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_2('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_2('abcd', 'dddddddabc')\n    True\n    >>> same_chars_2('dddddddabc', 'abcd')\n    True\n    >>> same_chars_2('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_2('abcd', 'dddddddabce')\n    False\n    >>> same_chars_2('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_3(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_3('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_3('abcd', 'dddddddabc')\n    True\n    >>> same_chars_3('dddddddabc', 'abcd')\n    True\n    >>> same_chars_3('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_3('abcd', 'dddddddabce')\n    False\n    >>> same_chars_3('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\ndef same_chars_4(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_4('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_4('abcd', 'dddddddabc')\n    True\n    >>> same_chars_4('dddddddabc"], ["", "", "\ndef fib2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n\ndef fib3(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib3(10)\n    55\n    >>> fib3(1)\n    1\n    >>> fib3(8)\n    21\n    \"\"\"\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\ndef fib_sum(n: int):\n    \"\"\"Return sum of n-th Fibonacci number.\n    >>> fib_sum(10)\n    89\n    >>> fib_sum(1)\n    1\n    >>> fib_sum(8)\n    13\n    \"\"\"\n\ndef fib_series(n: int):\n    \"\"\"Return Fibonacci series of n-th term.\n    >>> fib_series(10)\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    >>> fib_series(1)\n    [1]\n    >>> fib_series(8)\n    [1, 1, 2, 3, 5, 8, 13, 21]\n    \"\"\"\n\ndef fib_tree(n: int):\n    \"\"\"Return Fibonacci tree of n-th node.\n    >>> fib_tree(10)\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    >>> fib_tree(1)\n    [1]\n    >>> fib_tree(8)\n    [1, 1, 2, 3, 5, 8, 13, 21]\n    \"\"\"\n\ndef fib_matrix(n: int):\n    \"\"\"Return Fibonacci matrix of n-th row and n-th column.\n    >>> fib_matrix(10)\n    [[1, 1, 2, 3, 5, 8, 13, 21, 34, 55], [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]]\n    >>> fib_matrix(1)\n    [[1], [1]]\n    >>> fib_matrix(8)\n    [[1, 1, 2, 3, 5, 8, 13, 21], [1, 1, 2, 3, ", "\ndef fib_gen(n: int):\n    \"\"\"Return a generator that computes n-th Fibonacci number.\n    >>> list(fib_gen(10))\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    >>> list(fib_gen(1))\n    [1]\n    >>> list(fib_gen(8))\n    [1, 1, 2, 3, 5, 8, 13, 21]\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        yield a\n        a, b = b, a + b\n\ndef fib_gen_with_memo(n: int):\n    \"\"\"Return a generator that computes n-th Fibonacci number.\n    >>> list(fib_gen_with_memo(10))\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    >>> list(fib_gen_with_memo(1))\n    [1]\n    >>> list(fib_gen_with_memo(8))\n    [1, 1, 2, 3, 5, 8, 13, 21]\n    \"\"\"\n    a, b = 0, 1\n    memo = [1]\n    for i in range(n):\n        if i < len(memo):\n            yield memo[i]\n        else:\n            memo.append(a + b)\n            yield a\n            a, b = b, a + b\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"], ["\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\ndef is_valid_string(string):\n    \"\"\" Return True if string is a valid string, and False if it isn't.\n\n    A string is valid if:\n    1. It is non-empty\n    2. It contains only the characters a-z and A-Z\n    3. It does not contain any numbers\n    4. It does not contain any spaces\n\n    >>> is_valid_string(\"a\")\n    True\n    >>> is_valid_string(\"abc\")\n    True\n    >>> is_valid_string(\"abc123\")\n    False\n    >>> is_valid_string(\"a1\")\n    False\n    >>> is_valid_string(\"1a\")\n    False\n    >>> is_valid_string(\"abc def\")\n    False\n    \"\"\"\n\ndef is_valid_password(password):\n    \"\"\" Return True if password is a valid password, and False if it isn't.\n\n    A password is valid if:\n    1. It is non-empty\n    2. It is at least 6 characters long\n    3. It contains at least 1 uppercase letter and 1 lowercase letter\n    4. It contains at least 1 digit\n    5. It contains at least 1 special character\n\n    >>> is_valid_password(\"<PASSWORD>\")\n    False\n    >>> is_valid_password(\"<PASSWORD>\")\n    True\n    \"\"\"\n\ndef is_valid_email(email):\n    \"\"\" Return True if email is a valid email, and False if it isn't.\n\n    An email is valid if:\n    1. It is non-empty\n    2. It is in the form of \"<EMAIL>\"\n    3. It contains at least 1 '@' and 1 '.'\n    4. It contains at least 1 character from each of the following sets:\n      - 'a'-'z'\n      - 'A'-'Z'\n      - '0'-'9'\n      - '.'\n      - '-'\n      - '_'\n\n    >>> is_valid_email(\"<EMAIL>\")\n    True\n    >>> is_valid_email(\"<EMAIL>\")\n    False\n    \"\"\"\n\ndef is_", "\ndef get_brackets(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return a list of tuples (opening, closing) for every\n    opening bracket.\n\n    >>> get_brackets(\"<><\")\n    [('<<', '>')], [('<<', '>')], [('<<', '>>')]\n    \"\"\"\n\ndef get_corresponding_closing(opening: str, brackets: list):\n    \"\"\" opening is a single opening bracket.\n    brackets is a list of tuples (opening, closing).\n    return the closing bracket for the given opening bracket.\n\n    >>> get_corresponding_closing('<', [('<<', '>')])\n    '>'\n    >>> get_corresponding_closing('<<', [('<<', '>')])\n    '>'\n    >>> get_corresponding_closing('<<', [('<<', '>>')])\n    '>>'\n    >>> get_corresponding_closing('<<', [('>>', '>')])\n    None\n    \"\"\"\n\ndef get_corresponding_opening(closing: str, brackets: list):\n    \"\"\" closing is a single closing bracket.\n    brackets is a list of tuples (opening, closing).\n    return the opening bracket for the given closing bracket.\n\n    >>> get_corresponding_opening('>', [('<<', '>')])\n    '<<'\n    >>> get_corresponding_opening('>>', [('<<', '>>')])\n    '<<'\n    >>> get_corresponding_opening('>>', [('>>', '>')])\n    None\n    \"\"\"\n\ndef get_bracket_type(opening: str, closing: str, brackets: list):\n    \"\"\" opening and closing are single brackets.\n    brackets is a list of tuples (opening, closing).\n    return the type of bracket for the given opening/closing brackets.\n\n    >>> get_bracket_type('<<', '>', [('<<', '>')])\n    'opening'\n    >>> get_bracket_type('<', '>>', [('<<', '>>')])\n    'closing'\n    >>> get_bracket_type('<<', '>>',", "\ndef check_valid_parentheses(string: str):\n    \"\"\" Return True if the string is valid (well-formed).\n    >>> check_valid_parentheses(\"(this is a string)\")\n    True\n    >>> check_valid_parentheses(\"(this is a string)\")\n    True\n    >>> check_valid_parentheses(\"this is a string)\")\n    False\n    >>> check_valid_parentheses(\"this is a string(\")\n    False\n    >>> check_valid_parentheses(\"this is a string)\")\n    False\n    >>> check_valid_parentheses(\"this is a string((this is a string))\")\n    True\n    >>> check_valid_parentheses(\"this is a string(((this is a string))\")\n    False\n    \"\"\"\n\ndef check_valid_parentheses2(string: str):\n    \"\"\" Return True if the string is valid (well-formed).\n    >>> check_valid_parentheses2(\"(this is a string)\")\n    True\n    >>> check_valid_parentheses2(\"(this is a string)\")\n    True\n    >>> check_valid_parentheses2(\"this is a string)\")\n    False\n    >>> check_valid_parentheses2(\"this is a string(\")\n    False\n    >>> check_valid_parentheses2(\"this is a string)\")\n    False\n    >>> check_valid_parentheses2(\"this is a string((this is a string))\")\n    True\n    >>> check_valid_parentheses2(\"this is a string(((this is a string))\")\n    False\n    \"\"\"\n\ndef check_valid_parentheses3(string: str):\n    \"\"\" Return True if the string is valid (well-formed).\n    >>> check_valid_parentheses3(\"(this is a string)\")\n    True\n    >>> check_valid_parentheses3(\"(this is a string)\")\n    True\n    >>> check_valid_parentheses3(\"this is a string)\")\n    False\n    >>> check_valid_parentheses3(\"this is a string(\")\n    False\n    >>> check_valid_parentheses3(\"this", "\ndef valid_parentheses(parentheses: str):\n    \"\"\" parentheses is a string of \"()\" and \"{}\"\n    return True if every pair of matching parentheses is balanced.\n\n    >>> valid_parentheses(\"()\")\n    True\n    >>> valid_parentheses(\"{}\")\n    True\n    >>> valid_parentheses(\"()[]{}\")\n    True\n    >>> valid_parentheses(\"([)]\")\n    False\n    >>> valid_parentheses(\"{[()()]}\")\n    True\n    \"\"\"\n\ndef valid_brackets(brackets: str):\n    \"\"\" brackets is a string of \"<>\" and \"{}\"\n    return True if every pair of matching brackets is balanced.\n\n    >>> valid_brackets(\"<>\")\n    True\n    >>> valid_brackets(\"{}\")\n    True\n    >>> valid_brackets(\"()[]{}\")\n    True\n    >>> valid_brackets(\"([)]\")\n    False\n    >>> valid_brackets(\"{[()()]}\")\n    True\n    \"\"\"\n\ndef valid_braces(braces: str):\n    \"\"\" braces is a string of \"[]\" and \"{}\"\n    return True if every pair of matching braces is balanced.\n\n    >>> valid_braces(\"[]\")\n    True\n    >>> valid_braces(\"{}\")\n    True\n    >>> valid_braces(\"()[]{}\")\n    True\n    >>> valid_braces(\"([)]\")\n    False\n    >>> valid_braces(\"{[()()]}\")\n    True\n    \"\"\"\n\ndef valid_brackets_braces_braces(s: str):\n    \"\"\" s is a string of \"()\" and \"{}\"\n    return True if every pair of matching braces is balanced.\n\n    >>> valid_brackets_braces_braces(\"()\")\n    True\n    >>> valid_brackets_braces_braces(\"{}\")\n    True\n    >>> valid_brackets_braces_braces(\"()[]{}\")\n    True\n    >>> valid_brackets_braces_braces(\"([)]\")\n    False\n    >>> valid_brackets_braces_braces(\"{[()"], ["\ndef all_equal(l: list):\n    \"\"\"Return True if all list elements are equal.\n    >>> all_equal([1, 1, 1])\n    True\n    >>> all_equal([1, 2, 3])\n    False\n    \"\"\"\n\ndef all_equal_pairs(l: list):\n    \"\"\"Return True if all list elements are equal.\n    >>> all_equal_pairs([1, 2, 3, 4])\n    True\n    >>> all_equal_pairs([1, 2, 3, 5])\n    False\n    \"\"\"\n\ndef first_non_repeating_letter(s: str):\n    \"\"\"Return the first non-repeating character in a string.\n    >>> first_non_repeating_letter(\"abracadabra\")\n    'c'\n    >>> first_non_repeating_letter(\"banana\")\n    'b'\n    >>> first_non_repeating_letter(\"abcd\")\n    'a'\n    \"\"\"\n\ndef is_unique(s: str):\n    \"\"\"Return True if all characters in a string are unique and False if they are not.\n    >>> is_unique('abcde')\n    True\n    >>> is_unique('abccde')\n    False\n    \"\"\"\n\ndef is_unique_chars(s: str):\n    \"\"\"Return True if all characters in a string are unique and False if they are not.\n    >>> is_unique_chars('abcde')\n    True\n    >>> is_unique_chars('abccde')\n    False\n    \"\"\"\n\ndef is_unique_chars2(s: str):\n    \"\"\"Return True if all characters in a string are unique and False if they are not.\n    >>> is_unique_chars2('abcde')\n    True\n    >>> is_unique_chars2('abccde')\n    False\n    \"\"\"\n\ndef is_unique_chars3(s: str):\n    \"\"\"Return True if all characters in a string are unique and False if they are not.\n   ", "\ndef merge(l1: list, l2: list):\n    \"\"\"Return a new sorted list of the given list of lists.\n    >>> merge([[3, 1], [2]], [[1, 5], [7, 9]])\n    [[1, 3, 5, 7], [1, 2, 9]]\n    >>> merge([[1, 3, 5], [1, 2, 9]], [[3, 1], [2]])\n    [[1, 1, 2, 3, 5, 9], [1, 5, 7, 9]]\n    \"\"\"\n\ndef max_of_3(a: int, b: int, c: int):\n    \"\"\"Return the max of 3 numbers.\n    >>> max_of_3(3, 2, 1)\n    3\n    \"\"\"\n\ndef merge_sort(l: list):\n    \"\"\"Return a sorted copy of the list.\n    >>> merge_sort([3, 1, 5, 4, 2])\n    [1, 2, 3, 4, 5]\n    >>> merge_sort([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n\ndef min_of_3(a: int, b: int, c: int):\n    \"\"\"Return the min of 3 numbers.\n    >>> min_of_3(3, 2, 1)\n    1\n    \"\"\"\n\ndef merge_sort_in_place(l: list):\n    \"\"\"Sort the list in place.\n    >>> merge_sort_in_place([3, 1, 5, 4, 2])\n    [1, 2, 3, 4, 5]\n    >>> merge_sort_in_place([1, 2, 3, 4, 5])\n    [1,", "# YOUR CODE HERE\n    if len(l) == 1:\n        return True\n    elif l[0] < l[1]:\n        for i in range(1, len(l)):\n            if l[i] < l[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(l)):\n            if l[i] > l[i-1]:\n                return False\n        return True\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\ti = 1\n\twhile i < len(l):\n\t\tif l[i] < l[i-1]:\n\t\t\treturn False\n\t\ti += 1\n\treturn True\n\ndef monotonic_increasing(l: list):\n\t\"\"\"Return True is list elements are monotonically increasing.\n\t>>> monotonic_increasing([1, 2, 4, 20])\n\tTrue\n\t>>> monotonic_increasing([1, 20, 4, 10])\n\tFalse\n\t>>> monotonic_increasing([4, 1, 0, -10])\n\tFalse\n\t\"\"\"\n\treturn monotonic(l) and l[0] > 0\n\ndef monotonic_decreasing(l: list):\n\t\"\"\"Return True is list elements are monotonically decreasing.\n\t>>> monotonic_decreasing([1, 2, 4, 20])\n\tFalse\n\t>>> monotonic_decreasing([1, 20, 4, 10])\n\tTrue\n\t>>> monotonic_decreasing([4, 1, 0, -10])\n\tTrue\n\t\"\"\"\n\treturn monotonic(l) and l[0] < 0\n\nif __name__ == '__main__':\n\timport doctest\n\tdoctest.testmod()\n", "\ndef main():\n    \"\"\"Read input file into list and call function.\n    Print output file.\n    \"\"\"\n\nif __name__ == \"__main__\":\n    main()"], ["#    return sorted(list(set(l1) & set(l2)))\n    return sorted(set(l1) & set(l2))\n\ndef common2(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common2([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common2([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if len(l1) > len(l2):\n        return common2(l2, l1)\n\n    s1 = set(l1)\n    s2 = set(l2)\n    res = []\n    for i in range(len(l2)):\n        if l2[i] in s1:\n            res.append(l2[i])\n    return res\n\n\ndef main():\n    \"\"\"Read file input.txt and write to output.txt.\n    Input format is one line per test case.\n    Each test case consists of two integer numbers a and b separated by a blank space.\n    \"\"\"\n    # read file input and create a list of test cases\n    # test_cases = read_file(\"input.txt\")\n    test_cases = read_file(\"test.txt\")\n\n    # write results to output.txt\n    write_file(\"output.txt\", solve(test_cases))\n\n\ndef solve(test_cases: list):\n    \"\"\"Return list of test cases, where each test case consists of\n    two integers separated by a blank space.\n    >>> solve([[1, 3],", "\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "#     l1 = set(l1)\n#     l2 = set(l2)\n#     l3 = l1 & l2\n#     return sorted(l3)\n\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l3 = []\n    i, j = 0, 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] < l2[j]:\n            i += 1\n        elif l1[i] > l2[j]:\n            j += 1\n        else:\n            l3.append(l1[i])\n            i += 1\n            j += 1\n    return l3\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "\ndef max_value(l: list):\n    \"\"\"Return the maximum value in a list.\n    >>> max_value([4, 3, 9, 6, 2])\n    9\n    >>> max_value([1, 2, 3, 4])\n    4\n\n    \"\"\"\n\ndef find_index(l: list, value: int):\n    \"\"\"Return the index of the first instance of the value in the list.\n    >>> find_index([1, 2, 3, 4], 3)\n    2\n    >>> find_index([1, 2, 3, 4], 6)\n    -1\n\n    \"\"\"\n\ndef find_index_reverse(l: list, value: int):\n    \"\"\"Return the index of the last instance of the value in the list.\n    >>> find_index_reverse([1, 2, 3, 4], 3)\n    2\n    >>> find_index_reverse([1, 2, 3, 4], 6)\n    -1\n\n    \"\"\"\n\ndef min_value(l: list):\n    \"\"\"Return the minimum value in a list.\n    >>> min_value([4, 3, 9, 6, 2])\n    2\n    >>> min_value([1, 2, 3, 4])\n    1\n\n    \"\"\"\n\ndef sum_values(l: list):\n    \"\"\"Return the sum of the values in a list.\n    >>> sum_values([4, 3, 9, 6, 2])\n    24\n    >>> sum_values([1, 2, 3, 4])\n    10\n\n    \"\"\"\n\ndef count_occurrences(l: list, value: int):\n    \"\"\"Return the number of occurrences of the value in the list.\n    >>> count_", "#     print(l1, l2)\n#     print(set(l1) & set(l2))\n    return list(set(l1) & set(l2))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    main()\n"], ["\n# For the curious, here is the algorithm I used to determine the largest\n# prime factor of n:\n#\n# 1. Create a list of all the prime factors of n.\n# 2. Loop through the list until the first prime number in the list is\n#    greater than or equal to n.\n# 3. Return the first prime number in the list.\n#\n# This algorithm is very inefficient, but the alternative is to use a\n# mathematical approach.\n#\n# The algorithm I used here is a bit more efficient, but I was also\n# interested in knowing that I had some sort of mathematical approach to\n# the problem.\n#\n# I will leave this as a challenge for you to figure out if you like it\n# better.\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\ndef is_palindrome(n: int):\n    \"\"\"Return True if n is a palindrome, False if not.\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    >>> is_palindrome(1234)\n    False\n    \"\"\"\n\n# This is a pretty standard approach to solving this problem.\ndef is_palindrome(n: int):\n    \"\"\"Return True if n is a palindrome, False if not.\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    >>> is_palindrome(1234)\n    False\n    \"\"\"\n\n# This is a more efficient approach. The idea is to reverse the digits in\n# n, and then compare the result to n.\n#\n# The first thing I do is check if n is a palindromic number by checking\n# if n is", "\ndef smallest_multiple(n: int):\n    \"\"\"Return the smallest multiple of n. Assume n > 1.\n    >>> smallest_multiple(12)\n    12\n    >>> smallest_multiple(13195)\n    232790625\n    \"\"\"\n\ndef sum_square_difference(n: int):\n    \"\"\"Return the sum of the squares of the first n natural numbers. Assume n > 1.\n    >>> sum_square_difference(10)\n    2640\n    >>> sum_square_difference(100)\n    25164150\n    \"\"\"\n\ndef sum_square_difference_2(n: int):\n    \"\"\"Return the sum of the squares of the first n natural numbers. Assume n > 1.\n    >>> sum_square_difference_2(10)\n    2640\n    >>> sum_square_difference_2(100)\n    25164150\n    \"\"\"\n\ndef difference_of_squares(n: int):\n    \"\"\"Return the difference of the squares of the first n natural numbers. Assume n > 1.\n    >>> difference_of_squares(10)\n    2640\n    >>> difference_of_squares(100)\n    25164150\n    \"\"\"\n\ndef square_of_sum(n: int):\n    \"\"\"Return the square of the sum of the first n natural numbers. Assume n > 1.\n    >>> square_of_sum(10)\n    285\n    >>> square_of_sum(100)\n    25502500\n    \"\"\"\n\ndef sum_of_squares(n: int):\n    \"\"\"Return the sum of the squares of the first n natural numbers. Assume n > 1.\n    >>> sum_of_squares(10)\n    3025\n    >>> sum_of_squares(100)\n    338350\n    \"\"\"\n\ndef difference_of_squares_2(n: int", "\ndef smallest_multiple(n: int):\n    \"\"\"Return the smallest number that is evenly divisible by all of the positive\n    integers below n. Assume n > 0.\n    >>> smallest_multiple(10)\n    2520\n    >>> smallest_multiple(30)\n    60\n    >>> smallest_multiple(50)\n    120\n    >>> smallest_multiple(100)\n    2520\n    \"\"\"\n\ndef sum_even_fibonacci_numbers(n: int):\n    \"\"\"Return the sum of the even-valued terms in the Fibonacci sequence whose\n    values do not exceed n. Assume n > 0.\n    >>> sum_even_fibonacci_numbers(10)\n    10\n    >>> sum_even_fibonacci_numbers(1000)\n    44\n    >>> sum_even_fibonacci_numbers(4000000)\n    4613732\n    \"\"\"\n\ndef sum_primes(n: int):\n    \"\"\"Return the sum of all the primes below n. Assume n > 0.\n    >>> sum_primes(10)\n    17\n    >>> sum_primes(100)\n    1429\n    >>> sum_primes(4000000)\n    1383953\n    \"\"\"\n\ndef largest_palindrome(n: int):\n    \"\"\"Return the largest palindrome made from the product of two n-digit numbers.\n    Assume n > 0.\n    >>> largest_palindrome(2)\n    987\n    >>> largest_palindrome(3)\n    9009\n    >>> largest_palindrome(4)\n    906609\n    \"\"\"\n\ndef smallest_multiple(n: int):\n    \"\"\"Return the smallest number that is evenly divisible by all of the positive\n    integers below n. Assume n > 0.\n    >>> smallest_multiple(10)\n    2520\n    >>> smallest_multiple(30)\n    60\n    >>> smallest_", "\ndef smallest_multiple(n: int):\n    \"\"\"Return the smallest positive integer that is evenly divisible by all of the numbers from 1 to n.\n    >>> smallest_multiple(2)\n    2\n    >>> smallest_multiple(5)\n    60\n    >>> smallest_multiple(10)\n    2520\n    \"\"\"\n\ndef sum_square_difference(n: int):\n    \"\"\"Return the difference between the sum of the squares of the first n natural numbers and the square of the sum.\n    >>> sum_square_difference(100)\n    2640\n    >>> sum_square_difference(1000)\n    25164150\n    \"\"\"\n\ndef sum_of_divisors(n: int):\n    \"\"\"Return the sum of all divisors of n.\n    >>> sum_of_divisors(10)\n    45\n    >>> sum_of_divisors(28)\n    360\n    >>> sum_of_divisors(120)\n    1425\n    \"\"\"\n\ndef sum_square_divisors(n: int):\n    \"\"\"Return the sum of the squares of all divisors of n.\n    >>> sum_square_divisors(10)\n    300\n    >>> sum_square_divisors(28)\n    9484\n    >>> sum_square_divisors(120)\n    50600\n    \"\"\"\n\ndef pythagorean_triplet(n: int):\n    \"\"\"Return a pythagorean triplet (a,b,c) such that a^2+b^2=c^2 and a+b+c=n.\n    >>> pythagorean_triplet(1000)\n    (31, 46, 55)\n    >>> pythagorean_triplet(10000)\n    (103, 343, 3305)\n    \"\"\"\n\ndef special_pyth", ""], ["\ndef sum_to_n_recursive(n: int):\n    \"\"\"sum_to_n_recursive is a function that sums numbers from 1 to n.\n    >>> sum_to_n_recursive(30)\n    465\n    >>> sum_to_n_recursive(100)\n    5050\n    >>> sum_to_n_recursive(5)\n    15\n    >>> sum_to_n_recursive(10)\n    55\n    >>> sum_to_n_recursive(1)\n    1\n    \"\"\"\n\ndef sum_to_n_recursive(n: int):\n    \"\"\"sum_to_n_recursive is a function that sums numbers from 1 to n.\n    >>> sum_to_n_recursive(30)\n    465\n    >>> sum_to_n_recursive(100)\n    5050\n    >>> sum_to_n_recursive(5)\n    15\n    >>> sum_to_n_recursive(10)\n    55\n    >>> sum_to_n_recursive(1)\n    1\n    \"\"\"\n\ndef sum_to_n_recursive(n: int):\n    \"\"\"sum_to_n_recursive is a function that sums numbers from 1 to n.\n    >>> sum_to_n_recursive(30)\n    465\n    >>> sum_to_n_recursive(100)\n    5050\n    >>> sum_to_n_recursive(5)\n    15\n    >>> sum_to_n_recursive(10)\n    55\n    >>> sum_to_n_recursive(1)\n    1\n    \"\"\"\n\ndef sum_to_n_recursive(n: int):\n    \"\"\"sum_to_n_recursive is a function that sums numbers from 1 to n.\n    >>> sum_to_n_recursive(30)\n    ", "\ndef sum_to_n_using_loop(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n_using_loop(30)\n    465\n    >>> sum_to_n_using_loop(100)\n    5050\n    >>> sum_to_n_using_loop(5)\n    15\n    >>> sum_to_n_using_loop(10)\n    55\n    >>> sum_to_n_using_loop(1)\n    1\n    \"\"\"\n\ndef sum_to_n_using_recursion(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n_using_recursion(30)\n    465\n    >>> sum_to_n_using_recursion(100)\n    5050\n    >>> sum_to_n_using_recursion(5)\n    15\n    >>> sum_to_n_using_recursion(10)\n    55\n    >>> sum_to_n_using_recursion(1)\n    1\n    \"\"\"\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\ndef sum_to_n_v2(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n_v2(30)\n    465\n    >>> sum_to_n_v2(100)\n    5050\n    >>> sum_to_n_v2(5)\n    15\n    >>> sum_to_n_v2(10)\n    55\n    >>> sum_to_n_v2(1)\n    1\n    \"\"\"\n\ndef sum_to_n_v3(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n_v3(30)\n    465\n    >>> sum_to_n_v3(100)\n    5050\n    >>> sum_to_n_v3(5)\n    15\n    >>> sum_to_n_v3(10)\n    55\n    >>> sum_to_n_v3(1)\n    1\n    \"\"\"\n\ndef sum_to_n_v4(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n_v4(30)\n    465\n    >>> sum_to_n_v4(100)\n    5050\n    >>> sum_to_n_v4(5)\n    15\n    >>> sum_to_n_v4(10)\n    55\n    >>> sum_to_n_v4(1)\n    1\n    \"\"\"\n\ndef sum_to_n_v5(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum", "#    print(f\"sum_to_n(n={n})\")\n    if n <= 1:\n        return 1\n    return n + sum_to_n(n-1)\n\ndef main():\n    print(sum_to_n(30))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef sum_to_n_v2(n: int):\n    \"\"\"sum_to_n_v2 is a function that sums numbers from 1 to n.\n    >>> sum_to_n_v2(30)\n    465\n    >>> sum_to_n_v2(100)\n    5050\n    >>> sum_to_n_v2(5)\n    15\n    >>> sum_to_n_v2(10)\n    55\n    >>> sum_to_n_v2(1)\n    1\n    \"\"\"\n\ndef sum_to_n_v3(n: int):\n    \"\"\"sum_to_n_v3 is a function that sums numbers from 1 to n.\n    >>> sum_to_n_v3(30)\n    465\n    >>> sum_to_n_v3(100)\n    5050\n    >>> sum_to_n_v3(5)\n    15\n    >>> sum_to_n_v3(10)\n    55\n    >>> sum_to_n_v3(1)\n    1\n    \"\"\"\n\ndef sum_to_n_v4(n: int):\n    \"\"\"sum_to_n_v4 is a function that sums numbers from 1 to n.\n    >>> sum_to_n_v4(30)\n    465\n    >>> sum_to_n_v4(100)\n    5050\n    >>> sum_to_n_v4(5)\n    15\n    >>> sum_to_n_v4(10)\n    55\n    >>> sum_to_n_v4(1)\n    1\n    \"\"\"\n\ndef sum_to_n_v5(n: int):\n    \"\"\"sum_to_n_v5 is a function"], ["\n# def correct_bracketing(brackets: str):\n#     \"\"\" brackets is a string of \"(\" and \")\".\n#     return True if every opening bracket has a corresponding closing bracket.\n\n#     >>> correct_bracketing(\"(\")\n#     False\n#     >>> correct_bracketing(\"()\")\n#     True\n#     >>> correct_bracketing(\"(()())\")\n#     True\n#     >>> correct_bracketing(\")(()\")\n#     False\n#     \"\"\"\n#     stack = []\n#     for bracket in brackets:\n#         if bracket == \"(\":\n#             stack.append(\")\")\n#         elif bracket == \")\":\n#             if not stack:\n#                 return False\n#             if stack.pop() != \"(\":\n#                 return False\n#     if stack:\n#         return False\n#     return True\n", "\ndef find_next_bracket(brackets: str, start: int) -> int:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    Return the index of the next unmatched closing bracket,\n    or -1 if none exists.\n\n    >>> find_next_bracket(\"(\", 0)\n    1\n    >>> find_next_bracket(\"(()())\", 0)\n    4\n    >>> find_next_bracket(\"(()())\", 1)\n    3\n    >>> find_next_bracket(\"(()())\", 4)\n    -1\n    \"\"\"\n    opening_bracket_count = 0\n    for i in range(start, len(brackets)):\n        if brackets[i] == '(':\n            opening_bracket_count += 1\n        elif brackets[i] == ')':\n            opening_bracket_count -= 1\n            if opening_bracket_count < 0:\n                return i\n    return -1\n\ndef count_matching_brackets(brackets: str) -> int:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    Return the number of matching closing brackets.\n    >>> count_matching_brackets(\"(()())\")\n    3\n    >>> count_matching_brackets(\"()(()())\")\n    3\n    \"\"\"\n    bracket_count = 0\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            bracket_count += 1\n        elif brackets[i] == ')':\n            bracket_count -= 1\n    return bracket_count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\ndef is_balanced(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket,\n    and if the brackets are correctly bracketed.\n    >>> is_balanced(\"()\")\n    True\n    >>> is_balanced(\"(()())\")\n    True\n    >>> is_balanced(\")(()\")\n    False\n    \"\"\"\n", "\ndef count_brackets(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return the number of opening brackets.\n\n    >>> count_brackets(\"(\")\n    1\n    >>> count_brackets(\"()\")\n    2\n    >>> count_brackets(\"(()())\")\n    3\n    >>> count_brackets(\")(()\")\n    0\n    \"\"\"\n\ndef find_wrong_brackets(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return a list of the indices where there are wrongly paired brackets.\n    If there are no wrongly paired brackets, return [].\n\n    >>> find_wrong_brackets(\"()\")\n    []\n    >>> find_wrong_brackets(\"(()())\")\n    []\n    >>> find_wrong_brackets(\")(()\")\n    [2]\n    >>> find_wrong_brackets(\"())(\")\n    [1, 3]\n    \"\"\"\n\ndef bracket_matches(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return the number of matching pairs of brackets.\n\n    >>> bracket_matches(\"()\")\n    1\n    >>> bracket_matches(\"(()())\")\n    3\n    >>> bracket_matches(\")(()\")\n    0\n    >>> bracket_matches(\"())(\")\n    2\n    \"\"\"\n\ndef check_brackets(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if the brackets are balanced.\n    If there are wrongly paired brackets, return False.\n\n    >>> check_brackets(\"()\")\n    True\n    >>> check_brackets(\"(()())\")\n    True\n    >>> check_brackets(\")(()\")\n    False\n    >>> check_brackets(\"())(\")\n    False\n    \"\"\"\n\ndef balanced_brackets(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if the brackets are balanced.\n    If there are wrongly paired brackets, return False.\n\n    >>> balanced_brackets(\"()\")", "\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"], ["\ndef interpolate(xs: list, ys: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    ys represent values of this polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return coefficients of interpolating polynomial\n    >>> interpolate([1, 2, 3], [2, 4, 6])\n    [1, 2, 3, 4]\n    >>> interpolate([1, 2], [3, 6])\n    [3, 2, 1]\n    \"\"\"\n\ndef solve(xs: list, ys: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    ys represent values of this polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of x, which equals to ys[0].\n    >>> solve([1, 2, 3, 4], [2, 4, 6, 8])\n    [2]\n    >>> solve([1, 2], [3, 6])\n    [1]\n    \"\"\"\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "\ndef roots(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return roots of this polynomial in the form of list.\n    >>> roots([3, 1, 2, 4, 5])\n    [-1.0, 1.0]\n    >>> roots([1, 2, 3])\n    [1.0]\n    \"\"\"\n\ndef solve(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return roots of this polynomial in the form of list.\n    >>> solve([3, 1, 2, 4, 5])\n    [-1.0, 1.0]\n    >>> solve([1, 2, 3])\n    [1.0]\n    \"\"\"", "\ndef main():\n    # print(derivative([3, 1, 2, 4, 5]))\n    # print(derivative([1, 2, 3]))\n    print(derivative([1, 3, 1]))\n\nif __name__ == '__main__':\n    main()\n", "#     if len(xs) == 1:\n#         return [0]\n#     if len(xs) == 2:\n#         return [2 * xs[1]]\n#     if len(xs) == 3:\n#         return [2 * xs[1], 2 * xs[2]]\n#     if len(xs) == 4:\n#         return [2 * xs[1], 4 * xs[2], 2 * xs[3]]\n#     if len(xs) == 5:\n#         return [2 * xs[1], 4 * xs[2], 6 * xs[3], 2 * xs[4]]\n#     if len(xs) == 6:\n#         return [2 * xs[1], 4 * xs[2], 6 * xs[3], 8 * xs[4], 2 * xs[5]]\n#     if len(xs) == 7:\n#         return [2 * xs[1], 4 * xs[2], 6 * xs[3], 8 * xs[4], 10 * xs[5], 2 * xs[6]]\n#     if len(xs) == 8:\n#         return [2 * xs[1], 4 * xs[2], 6 * xs[3], 8 * xs[4], 10 * xs[5], 12 * xs[6], 2 * xs[7]]\n    if len(xs) == 9:\n        return [2 * xs[1], 4 * xs[2], 6 * xs[3], 8 * xs[4], 10 * xs[5], 12 * xs[6], 14 * xs[7], 2 * xs[8]]\n    if len(xs", "\ndef integrate(xs: list, lower_bound: float, upper_bound: float):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial from lower_bound to upper_bound in the same form.\n    >>> integrate([3, 1, 2, 4, 5], 0, 2)\n    8.0\n    >>> integrate([1, 2, 3], 0, 2)\n    6.0\n    \"\"\"\n\ndef main():\n    \"\"\"\n    This is the main method.\n    \"\"\"\n    xs = [3, 1, 2, 4, 5]\n    print(derivative(xs))\n    print(integrate(xs, 0, 2))\n\nif __name__ == \"__main__\":\n    main()\n"], ["\ndef fibfib_rec(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_rec(1)\n    0\n    >>> fibfib_rec(5)\n    4\n    >>> fibfib_rec(8)\n    24\n    \"\"\"\n", "\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\ndef fib_iter(n: int):\n    \"\"\"The Fibonacci sequence is a famous infinite sequence of integers that occurs in nature.\n    The first two elements of the sequence are 0 and 1 and each successive element is the sum of the previous two elements.\n    The sequence is defined recursively as follows:\n    fib(0) = 0\n    fib(1) = 1\n    fib(2) = 1\n    fib(n) = fib(n-1) + fib(n-2)\n    Please write a function to efficiently compute the n-th element of the Fibonacci sequence.\n    >>> fib_iter(1)\n    0\n    >>> fib_iter(5)\n    4\n    >>> fib_iter(8)\n    24\n    \"\"\"\n\ndef fib_recur(n: int):\n    \"\"\"The Fibonacci sequence is a famous infinite sequence of integers that occurs in nature.\n    The first two elements of the sequence are 0 and 1 and each successive element is the sum of the previous two elements.\n    The sequence is defined recursively as follows:\n    fib(0) = 0\n    fib(1) = 1\n    fib(2) = 1\n    fib(n) = fib(n-1) + fib(n-2)\n    Please write a function to efficiently compute the n-th element of the Fibonacci sequence.\n    >>> fib_recur(1)\n    0\n    >>> fib_recur(5)\n    4\n    >>> fib_recur(8)\n    24\n    \"\"\"\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\ndef fibfib_naive(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_naive(1)\n    0\n    >>> fibfib_naive(5)\n    4\n    >>> fibfib_naive(8)\n    24\n    \"\"\"\n", ""], ["\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\ndef vowels_count2(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n", "\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = 0\n    for i in range(len(s)):\n        if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u':\n            vowels += 1\n        elif s[i] == 'y' and (i == len(s) - 1):\n            vowels += 1\n    return vowels\n\nprint(vowels_count(\"abcde\"))\nprint(vowels_count(\"ACEDY\"))", "\ndef vowels_count2(s):\n    \"\"\"Write a function vowels_count2 which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count2(\"abcde\")\n    2\n    >>> vowels_count2(\"ACEDY\")\n    3\n    \"\"\"\n\ndef vowels_count3(s):\n    \"\"\"Write a function vowels_count3 which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count3(\"abcde\")\n    2\n    >>> vowels_count3(\"ACEDY\")\n    3\n    \"\"\"\n\ndef vowels_count4(s):\n    \"\"\"Write a function vowels_count4 which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count4(\"abcde\")\n    2\n    >>> vowels_count4(\"ACEDY\")", "\ndef get_most_frequent_letter(word):\n    \"\"\"Write a function get_most_frequent_letter which takes a string representing\n    a word as input and returns the most frequently occurring letter in the\n    word. If there is a tie for the most frequent letter, return the one\n    that occurs first in the alphabet.\n\n    Example:\n    >>> get_most_frequent_letter(\"abcde\")\n    'a'\n    >>> get_most_frequent_letter(\"ACEDY\")\n    'A'\n    \"\"\"\n\ndef get_most_frequent_word(words):\n    \"\"\"Write a function get_most_frequent_word which takes a list of words\n    as input and returns the word which is the most frequently occurring word\n    in the list. If there is a tie for the most frequent word, return the one\n    that occurs first in the list.\n\n    Example:\n    >>> get_most_frequent_word([\"abcde\", \"ACEDY\", \"abc\"])\n    'abc'\n    \"\"\"\n\ndef get_all_anagrams(word):\n    \"\"\"Write a function get_all_anagrams which takes a string representing\n    a word as input and returns a list of all anagrams of the word. Anagrams\n    are strings that can be made by rearranging the letters of the word\n    to form another word.\n\n    Example:\n    >>> get_all_anagrams(\"abcde\")\n    ['abcde', 'ebcda']\n    >>> get_all_anagrams(\"ACEDY\")\n    ['ACEDE', 'CEDYA']\n    \"\"\"\n\ndef longest_palindrome(s):\n    \"\"\"Write a function longest_palindrome which takes a string s as input\n    and returns the longest palindrome in s. A palindrome is"], ["", "\ndef is_palindrome(x):\n    \"\"\"Check if the integer x is a palindrome.\n    >>> is_palindrome(12321)\n    True\n    >>> is_palindrome(21)\n    False\n    \"\"\"\n\ndef get_fibonacci(n):\n    \"\"\"Return the nth Fibonacci number.\n    >>> get_fibonacci(0)\n    0\n    >>> get_fibonacci(1)\n    1\n    >>> get_fibonacci(2)\n    1\n    >>> get_fibonacci(10)\n    55\n    >>> get_fibonacci(14)\n    832040\n    \"\"\"\n\ndef get_primes(n):\n    \"\"\"Return the first n primes.\n    >>> get_primes(1)\n    [2]\n    >>> get_primes(2)\n    [2, 3]\n    >>> get_primes(3)\n    [2, 3, 5]\n    >>> get_primes(10)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    \"\"\"\n\ndef get_digits(x):\n    \"\"\"Return the digits of x.\n    >>> get_digits(0)\n    []\n    >>> get_digits(12)\n    [1, 2]\n    >>> get_digits(12345)\n    [1, 2, 3, 4, 5]\n    \"\"\"\n\ndef is_prime(x):\n    \"\"\"Return True if x is prime.\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime", "\ndef get_max_score(x, y):\n    \"\"\"Get the maximum of two integers x and y.\n    >>> get_max_score(3, 5)\n    5\n    >>> get_max_score(5, 3)\n    5\n    \"\"\"\n\ndef get_max_score_2(x, y):\n    \"\"\"Get the maximum of two integers x and y.\n    >>> get_max_score_2(3, 5)\n    5\n    >>> get_max_score_2(5, 3)\n    5\n    \"\"\"\n\ndef get_max_score_3(x, y):\n    \"\"\"Get the maximum of two integers x and y.\n    >>> get_max_score_3(3, 5)\n    5\n    >>> get_max_score_3(5, 3)\n    5\n    \"\"\"\n\ndef get_max_score_4(x, y):\n    \"\"\"Get the maximum of two integers x and y.\n    >>> get_max_score_4(3, 5)\n    5\n    >>> get_max_score_4(5, 3)\n    5\n    \"\"\"\n\ndef get_max_score_5(x, y):\n    \"\"\"Get the maximum of two integers x and y.\n    >>> get_max_score_5(3, 5)\n    5\n    >>> get_max_score_5(5, 3)\n    5\n    \"\"\"\n\ndef get_max_score_6(x, y):\n    \"\"\"Get the maximum of two integers x and y.\n    >>> get_max_score_6(3, 5)\n    5\n    >>> get_max_score_6(5, 3)\n    5\n    \"\"\"\n\ndef get_max_score_7(x, y):\n    \"\"\"Get the maximum of two integers x and y.\n    >>> get_max_score_7(3, 5)\n    5\n    >>> get_max_score_7(5,", "\ndef is_palindrome(n):\n    \"\"\"Return True if the number n is a palindrome, False otherwise.\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    \"\"\"\n\ndef num_digits(n):\n    \"\"\"Return the number of digits in the integer n.\n    >>> num_digits(12345)\n    5\n    >>> num_digits(0)\n    1\n    >>> num_digits(-234)\n    4\n    \"\"\"\n\ndef count_digits(n):\n    \"\"\"Return the number of digits in the integer n.\n    >>> count_digits(12345)\n    5\n    >>> count_digits(0)\n    1\n    >>> count_digits(-234)\n    4\n    \"\"\"\n\ndef is_armstrong(n):\n    \"\"\"Return True if n is an Armstrong number, False otherwise.\n    >>> is_armstrong(153)\n    True\n    >>> is_armstrong(12)\n    False\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(12)\n    True\n    >>> is_prime(11)\n    False\n    \"\"\"\n\ndef gcd(a, b):\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> gcd(12, 24)\n    12\n    >>> gcd(32, 80)\n    32\n    >>> gcd(42, 0)\n    42\n    \"\"\"\n\ndef lcm(a, b):\n    \"\"\"Return the least common multiple of a and b.\n    >>> lcm(12, 24)\n    36\n    >>> lcm(32, 80)\n    1080\n    >>> lcm(42, 0)\n    0\n    \"\"\"\n\ndef fibonacci(n):\n    \"\"\"Return the n-th number in the Fibonacci sequence.\n    >>> fib", ""], ["\ndef test_digitSum():\n    assert digitSum(\"\") == 0\n    assert digitSum(\"abAB\") == 131\n    assert digitSum(\"abcCd\") == 67\n    assert digitSum(\"helloE\") == 69\n    assert digitSum(\"woArBld\") == 131\n    assert digitSum(\"aAaaaXa\") == 153\n\n\n# 5. \u5b57\u7b26\u4e32\u66ff\u6362\n\ndef replaceSpaces(str, num):\n    \"\"\"Task\n    Write a function that replaces the spaces in a string with '%20'. You are not allowed to use any\n    other characters. You may assume that the string has sufficient space at the end to hold the additional\n    characters, and that you are given the \"true\" length of the string. (Note: if implementing in Java,\n    please use a character array so that you can perform this operation in place.)\n\n    Examples:\n        replaceSpaces(\"\", 0) => \"\"\n        replaceSpaces(\"abc def\", 10) => \"abc%20def\"\n        replaceSpaces(\"abc def\", 9) => \"abc%20d\"\n        replaceSpaces(\"abc def\", 8) => \"abc%20\"\n        replaceSpaces(\"abc def\", 4) => \"a%20b\"\n    \"\"\"\n\ndef test_replaceSpaces():\n    assert replaceSpaces(\"\", 0) == \"\"\n    assert replaceSpaces(\"abc def\", 10) == \"abc%20def\"\n    assert replaceSpaces(\"abc def\", 9) == \"abc%20d\"\n    assert replaceSpaces(\"abc def\", 8) == \"abc%20\"\n    assert replaceSpaces(\"abc def\", 4) == \"a%20b\"\n\n\n# 6. \u5b57\u7b26\u4e32\u8f6c\u6574\u6570\n\ndef myAtoi(str):\n    \"\"\"Task\n    Implement atoi which converts a string to an integer.\n\n    The function", "\ndef remove_duplicate(a):\n    \"\"\"Task\n    Write a function that takes an array and removes all duplicates from it.\n    \"\"\"\n\ndef sum_even_odd(a):\n    \"\"\"Task\n    Write a function that takes an array as input and returns the sum of even numbers in the array.\n    \"\"\"\n\ndef reverse_words(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the same string, but with all words reversed.\n    \"\"\"\n\ndef reverse_words2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the same string, but with all words reversed.\n    \"\"\"\n\ndef reverse_words3(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the same string, but with all words reversed.\n    \"\"\"\n\ndef reverse_words4(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the same string, but with all words reversed.\n    \"\"\"\n\ndef reverse_words5(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the same string, but with all words reversed.\n    \"\"\"\n\ndef reverse_words6(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the same string, but with all words reversed.\n    \"\"\"\n\ndef reverse_words7(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the same string, but with all words reversed.\n    \"\"\"\n\ndef reverse_words8(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the same string, but with all words reversed.\n    \"\"\"\n\ndef reverse_words9(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the same string, but with all words reversed.\n    \"\"\"\n\ndef reverse_words", "", "\nif __name__ == \"__main__\":\n    assert digitSum(\"\") == 0\n    assert digitSum(\"abAB\") == 131\n    assert digitSum(\"abcCd\") == 67\n    assert digitSum(\"helloE\") == 69\n    assert digitSum(\"woArBld\") == 131\n    assert digitSum(\"aAaaaXa\") == 153\n", "\n# Tests\nassert digitSum(\"\") == 0\nassert digitSum(\"abAB\") == 131\nassert digitSum(\"abcCd\") == 67\nassert digitSum(\"helloE\") == 69\nassert digitSum(\"woArBld\") == 131\nassert digitSum(\"aAaaaXa\") == 153\n\n# Time: O(n)\n# Space: O(1)"], ["\ndef string_to_number(s):\n    \"\"\"\n    In this task, you will be given a string that represents a number that is a positive integer.\n    You need to return the sum of the digits in the number.\n    for examble:\n    string_to_number(\"123\") -> 6\n    string_to_number(\"1234\") -> 20\n    string_to_number(\"12345\") -> 40\n    string_to_number(\"123456\") -> 60\n    string_to_number(\"1234567\") -> 90\n    \"\"\"\n\ndef string_to_number_2(s):\n    \"\"\"\n    In this task, you will be given a string that represents a number that is a positive integer.\n    You need to return the sum of the digits in the number.\n    for examble:\n    string_to_number_2(\"123\") -> 6\n    string_to_number_2(\"1234\") -> 20\n    string_to_number_2(\"12345\") -> 40\n    string_to_number_2(\"123456\") -> 60\n    string_to_number", "", "\ndef is_valid_parentheses(s):\n    \"\"\"\n    Given a string of parentheses return True if it's valid and False if it's invalid. \n    The string can contain any valid characters and the parentheses may be nested. \n    for example:\n    is_valid_parentheses(\"(())\") -> True\n    is_valid_parentheses(\"())\") -> False\n    is_valid_parentheses(\"(((())()))\") -> True\n    \"\"\"\n\n\ndef is_valid_parentheses_2(s):\n    \"\"\"\n    Given a string of parentheses return True if it's valid and False if it's invalid. \n    The string can contain any valid characters and the parentheses may be nested. \n    for example:\n    is_valid_parentheses(\"(())\") -> True\n    is_valid_parentheses(\"())\") -> False\n    is_valid_parentheses(\"(((())()))\") -> True\n    \"\"\"\n    stack = []\n    for char in s:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                last = stack.pop()\n                if last != \"(\":\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\ndef count_occurrences(text,", "#     apples, oranges, mango = 0, 0, 0\n#     for i in range(n):\n#         apples += 1 if s[i] == \"a\" else -1\n#         oranges += 1 if s[i] == \"o\" else -1\n#         if s[i] == \"m\":\n#             mango += 1\n#     return apples + oranges + mango\n\n    return sum(1 if s[i] == \"m\" else 0 for i in range(n))\n\nfruit_distribution(\"0 apples and 1 oranges\",3)\n\n# +\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19)", "def fruit_distribution2(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    apples, oranges, mango = map(int,s.split())\n    if apples + oranges <= n:\n        return n - app"], ["\ndef test_pluck():\n    arr = [4,2,3]\n    assert pluck(arr) == [2, 1]\n    arr = [1,2,3]\n    assert pluck(arr) == [2, 1]\n    arr = []\n    assert pluck(arr) == []\n    arr = [5, 0, 3, 0, 4, 2]\n    assert pluck(arr) == [0, 1]\n", "", "", "\ndef binary_search(arr, target):\n    \"\"\"\n    Given an array arr of integers and integer target, return the index of the first\n    such integer in arr, or -1 if there is no such integer.\n\n    The array is sorted in ascending order.\n\n    You must write an algorithm with O(log n) runtime complexity.\n\n    Example 1:\n        Input: arr = [4,5,6,7,0,1,2], target = 0\n        Output: 4\n\n    Example 2:\n        Input: arr = [4,5,6,7,0,1,2], target = 3\n        Output: -1\n\n    Constraints:\n        * 1 <= arr.length <= 104\n        * -104 <= arr[i] <= 104\n        * All the elements of arr are unique.\n        * -104 <= target <= 104\n    \"\"\"\n\ndef", "\nif __name__ == '__main__':\n    print(pluck([4, 2, 3]))\n    print(pluck([1, 2, 3]))\n    print(pluck([]))\n    print(pluck([5, 0, 3, 0, 4, 2]))"], ["\ndef remove_duplicate(lst):\n    '''\n    Given a list of integers, return a list of all unique values except for the first.\n    Examples:\n        remove_duplicate([2, 2, 1, 3, 3, 3]) == [1, 3, 3]\n    '''\n\ndef remove_duplicate_from_sorted(lst):\n    '''\n    Given a list of sorted integers, return a list of all unique values except for the first.\n    Examples:\n        remove_duplicate_from_sorted([2, 2, 1, 3, 3, 3]) == [1, 3]\n    '''\n\ndef find_all_pairs(lst1, lst2):\n    '''\n    Given two lists of integers, return a list of all pairs of values that sum to zero.\n    Examples:\n        find_all_pairs([1, 2, 3], [-3, -1, 0, 1, 2]) == [(-3, 1), (-1, 2)]\n    '''\n\ndef is_palindrome(num):\n    '''\n    Given an integer, return True if it is a palindrome. Otherwise, return False.\n    Examples:\n        is_palindrome(1234321) == True\n        is_palindrome(-121) == False\n        is_palindrome(10) == False\n    '''\n\ndef is_palindrome_recursive(num):\n    '''\n    Given an integer, return True if it is a palindrome. Otherwise, return False.\n    Examples:\n        is_palindrome_recursive(1234321) == True", "\nif __name__ == \"__main__\":\n    print(search([4, 1, 2, 2, 3, 1]))\n    print(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\n    print(search([5, 5, 4, 4, 4]))\n", "\n# Tests\nassert search([4, 1, 2, 2, 3, 1]) == 2\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nassert search([5, 5, 4, 4, 4]) == -1\n", "", "\n# O(n)\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n# O(n)\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n# O(n)\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers"], ["\n\ndef max_sub_seq(lst):\n    '''\n    Given list of integers, return the maximum sum of non-adjacent numbers.\n\n    Examples:\n    max_sub_seq([1, 3, -5, 2, -4, 7, 2]) == 10\n    max_sub_seq([3, 8, -1, 2, 3]) == 10\n    max_sub_seq([1, 4, 2, 1, 2]) == 6\n    max_sub_seq([]) == 0\n    '''\n\ndef sum_pairs(nums, target):\n    '''\n    Given two lists of integers, nums1 and nums2, and a target number, return a list of\n    pairs of values (one from each list) that sum to the target. If there are multiple\n    pairs that add up to the target, return any of them. If no such pair exists,\n    return an empty list.\n    '''\ndef sum_of_three(lst, target):\n    '''\n    Given a list of integers, find all triplets that sum to the specified target.\n    A triplet (arr[0], arr[1], arr[2]) must be in the list if and only if:\n    0 <= arr[0] + arr[1] + arr[2] == target\n    The solution can be obtained by sorting the list.\n\n    Examples:\n    sum_of_three([1, 2, 4, 1, 2], 4) == [(1, 2, 4)]\n    sum_of_three([1, 2, 1, 2, 4], 4) == [(1, 1, 2)]\n    sum_of_three([1, 1, 1, ", "\n", "}\n    lst = list(lst)\n    return_lst = []\n    while len(lst) > 0:\n        smallest = min(lst)\n        lst.remove(smallest)\n        return_lst.append(smallest)\n    return return_lst\n\n\ndef strange_sort_list2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list2([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list2([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list2([]) == []\n    '''}\n    lst = list(lst)\n    return_lst = []\n    while len(lst) > 0:\n        largest = max(lst)\n        lst.remove(largest)\n        return_lst.append(largest)\n    return return_lst\n\n\ndef strange_sort_list3(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list3([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list3([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list3([]) == []\n    '''}\n    lst = list(lst)\n    return_", "\t\n    if not lst:\n        return lst\n\n    sorted_lst = []\n\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n\n        if min_val > max_val:\n            min_val, max_val = max_val, min_val\n\n        sorted_lst.append(min_val)\n        sorted_lst.append(max_val)\n        lst.remove(min_val)\n        lst.remove(max_val)\n\n    return sorted_lst\n\n\ndef test_strange_sort_list(func):\n    '''\n    Test strange_sort_list function.\n    '''\n    assert func([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert func([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert func([]) == []\n\n\nif __name__ == '__main__':\n    test_strange_sort_list(strange_sort_list)\n", "\n#     lst = lst.copy()\n#     lst.sort()\n#     lst.reverse()\n#     return lst\n    return sorted(lst)\n"], ["\nif __name__ == '__main__':\n    print(triangle_area(3, 4, 5))\n    print(triangle_area(1, 2, 10))\n", "", "\ndef test_triangle_area():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n\nif __name__ == '__main__':\n    test_triangle_area()\n", "\ndef print_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, print out the\n    triangle. \n    Example:\n    print_triangle(3, 4, 5)\n    # 3.00 4.00 5.00\n    '''\n\ndef print_two_sum(a, b, c, target):\n    '''\n    Given an array of integers, return indices of the two numbers such that\n    they add up to a specific target.\n    You may assume that each input would have exactly one solution, and you may not\n    use the same element twice.\n    Example:\n    print_two_sum([2, 7, 11, 15], 9)\n    # [0, 1]\n    '''\n\ndef find_missing_number(a):\n    '''\n    Given an array of integers, find the first missing positive integer in\n    linear time and constant space. In other words, find the lowest positive\n    integer that does not exist in the array. The array can contain duplicates\n    and negative numbers as well.\n    Example:\n    find_missing_number([1, 2, 0]) == 3\n    find_missing_number([3, 4, -1, 1]) == 2\n    find_missing_number([7, 8, 9, 11, 12]) == 10\n    '''\n\ndef is_prime(n):\n    '''\n    Determine if a number is prime. A prime number is only evenly divisible\n    by 1 and itself.\n    Example:\n    is_prime(10) == True\n    is_prime(11) == False\n    '''\n\ndef rotate_matrix(matrix):\n    '''\n    Given an N by N matrix, rotate it by 90 degrees clockwise.\n   ", ""], ["\ndef main():\n    # For each of the 4 tests, output should be True or False\n    print(will_it_fly([3, 2, 3], 9))\n    print(will_it_fly([3, 2, 3], 1))\n    print(will_it_fly([1, 2], 5))\n    print(will_it_fly([3], 5))\n\nif __name__ == \"__main__\":\n    main()", "#     if sum(q) <= w:\n#         return True\n#     else:\n#         return False\n\ndef will_it_fly(q,w):\n    return sum(q) <= w and sum(q)==sum(q[::-1])\n\nprint(will_it_fly([3, 2, 3], 9))\nprint(will_it_fly([3], 5))\nprint(will_it_fly([1, 2], 5))\nprint(will_it_fly([3, 2, 3], 1))\nprint(will_it_fly([3, 2, 3], 9))", "#     print(len(q))\n#     print(w)\n#     if len(q) <= w and sum(q) <= w and q == q[::-1]:\n#         return True\n#     else:\n#         return False\n\n    if len(q) <= w and sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False\n\nprint(will_it_fly([1, 2], 5))\nprint(will_it_fly([3, 2, 3], 1))\nprint(will_it_fly([3, 2, 3], 9))\nprint(will_it_fly([3], 5))", "\ndef will_it_fly(q,w):\n    if sum(q) > w or sum(q)!=sum(q[::-1]):\n        return False\n    else:\n        return True\n\nprint(will_it_fly([3, 2, 3], 1))\nprint(will_it_fly([3, 2, 3], 9))\nprint(will_it_fly([3], 5))", "\ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the string s is a palindrome, and False otherwise.\n    A palindrome is a string that is the same forwards and backwards.\n\n    Example:\n    is_palindrome(\"racecar\") \u279e True\n    # \"racecar\" is a palindrome.\n\n    is_palindrome(\"radar\") \u279e True\n    # \"radar\" is a palindrome.\n\n    is_palindrome(\"not a palindrome\") \u279e False\n    # \"not a palindrome\" is not a palindrome.\n    '''\n\ndef first_non_repeating_character(s):\n    '''\n    Write a function that returns the first non-repeating character in a string.\n    If there are no non-repeating characters, return None.\n\n    Example:\n    first_non_repeating_character(\"hello\") \u279e \"l\"\n    # \"l\" is the first non-repeating character.\n\n    first_non_repeating_character(\"hannah\") \u279e \"n\"\n    # \"n\" is the first non-repeating character.\n\n    first_non_repeating_character(\"shazam\") \u279e \"z\"\n    # \"z\" is the first non-repeating character.\n\n    first_non_repeating_character"], ["", "\n#     if len(arr) % 2 == 0:\n#         return 0\n\n#     left = 0\n#     right = len(arr) - 1\n\n#     while left <= right:\n#         if arr[left] == arr[right]:\n#             left += 1\n#             right -= 1\n#         else:\n#             return right - left + 1\n\n#     return right - left\n\n#     left = 0\n#     right = len(arr) - 1\n#     while left <= right:\n#         if arr[left] != arr[right]:\n#             return right - left + 1\n#         else:\n#             left += 1\n#             right -= 1\n#     return 0\n\n#     left = 0\n#     right = len(arr) - 1\n#     while left <= right:\n#         if arr[left] == arr[right]:\n#             left += 1\n#             right -= 1\n#         else:\n#             return right - left + 1\n#     return 0\n\n\n#     left = 0\n#     right = len(arr) - 1\n#     while left <= right:\n#         if arr[left] != arr[right]:\n#             return right - left + 1\n#         else:\n#             left += 1\n#             right -= 1\n#     return 0\n\n\n#     left = 0\n#     right = len(arr) - 1\n#     while left <= right:\n#        ", "\ndef make_palindrome(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be removed in order to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards.\n\n    For example:\n    make_palindrome([1,2,3,5,4,7,9,6]) == [1,2,4,3,5,6,7,9]\n    make_palindrome([1, 2, 3, 4, 3, 2, 2]) == [1,2,3,4]\n    make_palindrome([1, 2, 3, 2, 1]) == []\n    \"\"\"\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(smallest_change([1,2,3,5,4,7,9,6]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert smallest_change([1,2,3,5,4,7,9,6]) == 4\n    assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert smallest_change([1, 2, 3, 2, 1]) == 0\n    assert make_palindrome([1,2,3,5,4,7,9,6]) == [1,2,4,3,5,6,7,9]\n    assert make_palindrome([1, 2, 3, 4", "", "\nif __name__ == \"__main__\":\n    arr = [1,2,3,5,4,7,9,6]\n    print smallest_change(arr)\n\n    arr = [1, 2, 3, 4, 3, 2, 2]\n    print smallest_change(arr)\n\n    arr = [1, 2, 3, 2, 1]\n    print smallest_change(arr)\n"], ["", "\n#code\ndef total_match(lst1, lst2):\n    lst3 = []\n    for i in lst1:\n        count = 0\n        for j in lst2:\n            if i == j:\n                count += 1\n        if count == 0:\n            lst3.append(i)\n    return lst3\n\n\n#code\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if x not in lst2]\n\n\n#code\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if x not in lst2]\n\n#code\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if x not in lst2]\n\n#code\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if x not in lst2]\n\n#code\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if x not in lst2]\n\n#code\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if x not in lst2]\n\n#code\ndef total_match(lst1, lst2):\n    return [x for x in lst1 if x not in lst2]\n\n\n#code\ndef total_match(lst1, lst2):\n    return [x for x in lst1", "\ndef total_match(lst1, lst2):\n    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst1 + lst2\n\n#total_match(['hi', 'admin'], ['hI', 'Hi']) #\u279e ['hI', 'Hi']\n#total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) #\u279e ['hi', 'admin']\n#total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) #\u279e ['hI', 'hi', 'hi']\n#total_match(['4'], ['1', '2', '3', '4', '5']) #\u279e ['4']\n\ndef total_match(lst1, lst2):\n    if len(lst1) > len(lst2):\n        return lst1\n    else:\n        return lst2\n\n#total_match(['hi', 'admin'], ['hI', 'Hi']) #\u279e ['hI', 'Hi']\n#total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) #\u279e ['hi', 'admin']\n#total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) #\u279e ['hI', 'hi', 'hi']\n#total_match(['4'], ['1', '2', '3", "\ndef total_match(lst1, lst2):\n    return sorted(set(lst1).difference(lst2))\n\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))", "\nlst1 = ['hi', 'admin']\nlst2 = ['hI', 'Hi']\nprint(total_match(lst1, lst2))\n\nlst1 = ['hi', 'admin']\nlst2 = ['hi', 'hi', 'admin', 'project']\nprint(total_match(lst1, lst2))\n\nlst1 = ['hi', 'admin']\nlst2 = ['hI', 'hi', 'hi']\nprint(total_match(lst1, lst2))\n\nlst1 = ['4']\nlst2 = ['1', '2', '3', '4', '5']\nprint(total_match(lst1, lst2))\n\nlst1 = ['4', '5']\nlst2 = ['1', '2', '3', '4', '5']\nprint(total_match(lst1, lst2))\n\n\n# +\ndef longest_word(words):\n    '''\n    Write a function that accepts a list of words and returns the longest word.\n    '''\n\nwords = ['hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi']\nprint(longest_word(words))\n\nwords = ['hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi"], ["\ndef count_digits(n):\n    \"\"\"Write a function that returns the number of digits in an integer.\n    Example:\n    count_digits(10) == 1\n    count_digits(523) == 3\n    \"\"\"\n    digits = 0\n    while n != 0:\n        digits += 1\n        n //= 10\n    return digits\n\ndef is_prime(n):\n    \"\"\"Write a function that returns True if the given number is prime, False otherwise.\n    Hint: You can use the is_divide function.\n    Example:\n    is_prime(2) == True\n    \"\"\"\n\ndef is_square(n):\n    \"\"\"Write a function that returns True if the given number is the square of an integer, False otherwise.\n    Hint: You can use the is_multiply_prime function.\n    Example:\n    is_square(4) == True\n    \"\"\"\n\ndef is_power_of_two(n):\n    \"\"\"Write a function that returns True if the given number is a power of two, False otherwise.\n    Hint: You can use the is_square function.\n    Example:\n    is_power_of_two(8) == True\n    \"\"\"\n\ndef reverse(s):\n    \"\"\"Write a function that returns the reverse of a string.\n    Example:\n    reverse('abcd') == 'dcba'\n    \"\"\"\n\ndef is_palindrome(s):\n    \"\"\"Write a function that returns True if the given string is a palindrome, False otherwise.\n    Hint: You can use the reverse function.\n    Example:\n    is_palindrome('abcba') == True\n    \"\"\"\n\ndef is_rotated_palindrome(s):\n    \"\"\"Write a function that returns True if the given string is a rotated palindrome, False otherwise.\n    Hint: You can use the is_palindrome function.\n    Example:\n    is_rotated_palindrome('abccba') == True\n    \"\"\"\n\ndef is_valid_word(s):\n    \"\"\"Write a function that returns True", "\ndef is_power_of_three(num):\n    \"\"\"Write a function that returns true if the given number is the power of 3 and false otherwise.\n    Knowing that (a) is less then 10000.\n    Example:\n    is_power_of_three(3) == True\n    3 = 3 * 3 * 3\n    \"\"\"\n\ndef is_power_of_two(num):\n    \"\"\"Write a function that returns true if the given number is the power of 2 and false otherwise.\n    Knowing that (a) is less then 10000.\n    Example:\n    is_power_of_two(8) == True\n    8 = 2 * 2 * 2\n    \"\"\"", "\ndef count_numbers_in_range(start, end):\n    \"\"\"Write a function that takes two numbers, start and end, as arguments and returns the number of numbers\n    between them.\n    \"\"\"\n\ndef is_leap_year(year):\n    \"\"\"Write a function that determines if a given year is a leap year.\n    \"\"\"\n\ndef is_prime(number):\n    \"\"\"Write a function that determines if the given number is prime.\n    \"\"\"\n\ndef is_palindrome(word):\n    \"\"\"Write a function that returns true if the given word is a palindrome and false otherwise.\n    \"\"\"\n\ndef sum_digits(number):\n    \"\"\"Write a function that returns the sum of digits of a given number.\n    \"\"\"\n\ndef count_ocurrences(text, word):\n    \"\"\"Write a function that counts how many times the given word appears in the given text.\n    \"\"\"\n\ndef find_first_occurrence(text, word):\n    \"\"\"Write a function that returns the index of the first occurrence of the given word in the given text.\n    \"\"\"\n\ndef find_last_occurrence(text, word):\n    \"\"\"Write a function that returns the index of the last occurrence of the given word in the given text.\n    \"\"\"\n\ndef find_all_occurrences(text, word):\n    \"\"\"Write a function that returns a list of all the occurrences of the given word in the given text.\n    \"\"\"\n\ndef find_all_occurrences_of_substring(text, word):\n    \"\"\"Write a function that returns a list of all the substrings of the given text that contain the given word.\n    \"\"\"\n\ndef get_character(text, index):\n    \"\"\"Write a function that returns the character at the given index of the given text.\n    \"\"\"\n\ndef is_vowel(letter):\n    \"\"\"Write a function that returns true if the given letter is a vowel and false otherwise.\n    \"\"\"\n\ndef is_consonant(letter):\n    \"\"\"Write a function that returns true if", "", "\ndef is_prime(n):\n    \"\"\"Write a function that returns true if the given number is prime and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_prime(30) == True\n    \"\"\"\n\ndef primes_range(start, end):\n    \"\"\"Write a function that returns the list of prime numbers in range [start, end].\n    Example:\n    primes_range(1, 30) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    \"\"\"\n\ndef is_palindrome(a):\n    \"\"\"Write a function that returns true if the given number is palindrome and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_palindrome(30) == True\n    \"\"\"\n\ndef is_palindrome_prime(a):\n    \"\"\"Write a function that returns true if the given number is palindrome and prime and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_palindrome_prime(30) == True\n    \"\"\"\n\ndef find_largest_palindrome(start, end):\n    \"\"\"Write a function that returns the largest palindrome in range [start, end].\n    Example:\n    find_largest_palindrome(1, 100) == 9009\n    \"\"\"\n\ndef sum_square_difference(n):\n    \"\"\"Write a function that returns the difference between the sum of the squares of the first n natural numbers\n    and the square of the sum of the first n natural numbers.\n    Example:\n    sum_square_difference(10) == 2640\n    \"\"\"\n\ndef sum_digits_power(a, p):\n    \"\"\"Write a function that returns the sum of the digits of a^p.\n    Example:\n    sum_"], ["\ndef is_simple_power2(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n", "\nprint(is_simple_power(3, 2))\n\ndef is_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a power\n    of n and false in other cases.\n    x is a power of n if x=n**int\n    For example:\n    is_power(2, 2) => true\n    is_power(8, 2) => true\n    is_power(3, 2) => false\n    is_power(3, 1) => false\n    is_power(5, 3) => false\n    \"\"\"\n\nprint(is_power(2, 2))\n\ndef sum_all(lst):\n    \"\"\"Your task is to write a function that returns the sum of all numbers in a list.\n    For example:\n    sum_all([1, 2, 3, 4, 10, 11]) => 31\n    sum_all([0, 0, 0, 0, 0, 0]) => 0\n    \"\"\"\n\nprint(sum_all([1, 2, 3, 4, 10, 11]))\n", "\ndef find_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns a number that is a simple power of\n    n. If there are several solutions, return the smallest one.\n    For example:\n    find_simple_power(4, 2) => 2\n    find_simple_power(4, 3) => 4\n    find_simple_power(4, 4) => 4\n    find_simple_power(4, 5) => 8\n    find_simple_power(4, 6) => 16\n    find_simple_power(6, 6) => 64\n    find_simple_power(12, 6) => 128\n    find_simple_power(12, 7) => 512\n    find_simple_power(12, 8) => 256\n    \"\"\"\n\ndef prime_sum(n):\n    \"\"\"Your task is to write a function that returns the sum of all prime numbers\n    less than or equal to n.\n    For example:\n    prime_sum(10) => 17\n    prime_sum(100) => 1060\n    prime_sum(1000) => 9592\n    \"\"\"\n\ndef prime_sum_div(n):\n    \"\"\"Your task is to write a function that returns the sum of all prime numbers\n    less than or equal to n.\n    For example:\n    prime_sum_div(10) => 17\n    prime_sum_div(100) => 1060\n    prime_sum_div(1000) => 9", "\ndef is_simple_power(x, n):\n    return x**int(math.log(x)/math.log(n)) == x\n\nprint is_simple_power(1, 4)\nprint is_simple_power(2, 2)\nprint is_simple_power(8, 2)\nprint is_simple_power(3, 2)\nprint is_simple_power(3, 1)\nprint is_simple_power(5, 3)\n\n# 8.2.2\ndef is_prime(x):\n    \"\"\"Your task is to write a function that returns true if a number is prime and\n    false in other cases.\n    The number is prime if the number can't be divided by any number between 1 and\n    itself.\n    For example:\n    is_prime(1) => false\n    is_prime(2) => true\n    is_prime(3) => true\n    is_prime(4) => false\n    is_prime(5) => true\n    is_prime(6) => false\n    \"\"\"\n\ndef is_prime(x):\n    for i in xrange(2, int(math.sqrt(x))+1):\n        if x % i == 0:\n            return False\n    return True\n\nprint is_prime(1)\nprint is_prime(2)\nprint is_prime(3)\nprint is_prime(4)\nprint is_prime(5)\nprint is_prime(6)\n\n# 8.2.3\ndef is_palindrome(x):\n    \"\"\"Your task is to write a function that returns true if a number is a\n    palindrome and false in", "\ndef get_next_power(number):\n    \"\"\"Given a number, find the next power of 2 that is greater than or equal to it.\n    If the number is already a power of 2, return it.\n    For example:\n    get_next_power(5) => 8\n    get_next_power(8) => 8\n    get_next_power(16) => 32\n    \"\"\"\n\ndef get_next_power_v2(number):\n    \"\"\"Given a number, find the next power of 2 that is greater than or equal to it.\n    If the number is already a power of 2, return it.\n    For example:\n    get_next_power_v2(5) => 8\n    get_next_power_v2(8) => 8\n    get_next_power_v2(16) => 32\n    \"\"\"\n\ndef get_next_power_v3(number):\n    \"\"\"Given a number, find the next power of 2 that is greater than or equal to it.\n    If the number is already a power of 2, return it.\n    For example:\n    get_next_power_v3(5) => 8\n    get_next_power_v3(8) => 8\n    get_next_power_v3(16) => 32\n    \"\"\"\n\ndef get_next_power_v4(number):\n    \"\"\"Given a number, find the next power of 2 that is greater than or equal to it.\n    If the number is already a power of 2, return it.\n    For example:\n    get_next_power_v4(5)"], ["\ndef is_palindrome(x):\n    '''\n    Write a function that takes an integer x and returns True\n    if this number is a palindrome.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_palindrome(1) ==> True\n    is_palindrome(2) ==> False\n    is_palindrome(-1) ==> True\n    is_palindrome(64) ==> True\n    is_palindrome(0) ==> True\n    is_palindrome(180) ==> False\n    '''\n\ndef is_palindrome_v2(x):\n    '''\n    Write a function that takes an integer x and returns True\n    if this number is a palindrome.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_palindrome(1) ==> True\n    is_palindrome(2) ==> False\n    is_palindrome(-1) ==> True\n    is_palindrome(64) ==> True\n    is_palindrome(0) ==> True\n    is_palindrome(180) ==> False\n    '''\n\ndef is_palindrome_v3(x):\n    '''\n    Write a function that takes an integer x and returns True\n    if this number is a palindrome.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_palindrome(1) ==> True\n    is_palindrome(2) ==> False\n    is_palindrome(-1) ==> True\n    is_palindrome(64) ==> True\n    is_palindrome(0) ==> True\n    is_palindrome(180) ==> False\n    '''\n\ndef is_palindrome_v4(x):\n    '''\n    Write a function that takes an integer x and returns True\n    if this number is a palindrome.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_palindrome(1) ==> True\n    is_", "\treturn a**3 == a\n\ndef isprime(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(1) ==> False\n    isprime(2) ==> True\n    isprime(-1) ==> False\n    isprime(64) ==> True\n    isprime(0) ==> False\n    isprime(180) ==> True\n    '''\n\tif a < 1:\n\t\treturn False\n\telif a == 1:\n\t\treturn False\n\telif a == 2:\n\t\treturn True\n\telse:\n\t\tfor i in range(2, a):\n\t\t\tif a%i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\ndef ispalindrome(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a palindrome.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispalindrome(1) ==> False\n    ispalindrome(2) ==> True\n    ispalindrome(-1) ==> False\n    ispalindrome(64) ==> True\n    ispalindrome(0) ==> True\n    ispalindrome(180) ==> False\n    '''\n\tif a < 0:\n\t\treturn False\n\tif a < 10:\n\t\treturn True\n\telse:\n\t\tstring = str(a)\n\t\tstring = string.replace(\" \", \"\")\n\t\ti = 0\n\t\tj = len(string) - 1\n\t\twhile i <= j:\n\t\t\tif string[i] != string[j]:\n\t\t\t\treturn False\n\t\t\ti += 1\n\t\t\tj -= 1\n\t\treturn True\n\ndef isleapyear(a):\n    '''\n    Write a function that takes an integer a and", "\ndef cube(a):\n    '''\n    Write a function that takes an integer a and returns the cube of this integer.\n    Note: you may assume the input is always valid.\n    Examples:\n    cube(1) ==> 1\n    cube(2) ==> 8\n    cube(3) ==> 27\n    cube(4) ==> 64\n    cube(5) ==> 125\n    cube(6) ==> 216\n    cube(7) ==> 343\n    cube(8) ==> 512\n    cube(9) ==> 729\n    cube(10) ==> 1000\n    '''\n\ndef isprime(a):\n    '''\n    Write a function that takes an integer a and returns True if this integer is a prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(2) ==> True\n    isprime(3) ==> True\n    isprime(4) ==> False\n    isprime(5) ==> True\n    isprime(6) ==> False\n    isprime(7) ==> True\n    isprime(8) ==> False\n    isprime(9) ==> False\n    isprime(10) ==> False\n    '''\n\ndef prime_factorization(a):\n    '''\n    Write a function that takes an integer a and returns a list of prime factors of this integer.\n    Note: you may assume the input is always valid.\n    Examples:\n    prime_factorization(2) ==> [2]\n    prime_factorization(3) ==> [3]\n    prime_factorization(4) ==> [2,2]\n    prime_factorization(5) ==> [5]\n    prime_factorization(6) ==> [2,3]\n    prime_factorization(7) ==> [7]\n    prime_factorization(8) ==> [2,2,2]\n    prime_factorization(9) ==> [3", "\ndef ispalindrome(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a palindrome of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispalindrome(121) ==> True\n    ispalindrome(888) ==> True\n    ispalindrome(-1) ==> False\n    ispalindrome(64) ==> True\n    ispalindrome(0) ==> True\n    ispalindrome(180) ==> False\n    '''\n\ndef ispowerof2(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a power of 2 of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispowerof2(1) ==> True\n    ispowerof2(2) ==> True\n    ispowerof2(-1) ==> False\n    ispowerof2(64) ==> True\n    ispowerof2(0) ==> True\n    ispowerof2(180) ==> False\n    '''\n\ndef isprime(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a prime of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(1) ==> False\n    isprime(2) ==> True\n    isprime(-1) ==> False\n    isprime(64) ==> True\n    isprime(0) ==> True\n    isprime(180) ==> False\n    '''\n\ndef isvalidpin(pin):\n    '''\n    Write a function that takes a string pin and returns True \n    if this string is a valid PIN number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isvalidpin(\"1234\") ==> True\n    isvalidpin(\"123", "\treturn a**3 == a\n\ndef isprime(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(1) ==> False\n    isprime(2) ==> True\n    isprime(-1) ==> False\n    isprime(64) ==> True\n    isprime(0) ==> False\n    isprime(180) ==> True\n    '''\n\tif a == 2:\n\t\treturn True\n\telif a == 1 or a < 0:\n\t\treturn False\n\telif a % 2 == 0:\n\t\treturn False\n\telse:\n\t\tfor i in range(3,int(a**0.5)+1,2):\n\t\t\tif a % i == 0:\n\t\t\t\treturn False\n\treturn True\n\ndef ispowerof3(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a power of 3.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispowerof3(1) ==> True\n    ispowerof3(2) ==> False\n    ispowerof3(-1) ==> True\n    ispowerof3(64) ==> False\n    ispowerof3(0) ==> False\n    ispowerof3(180) ==> True\n    '''\n\tif a == 1 or a == 3:\n\t\treturn True\n\telif a == 2 or a % 2 == 0:\n\t\treturn False\n\telse:\n\t\tfor i in range(3,int(a**0.5)+1,2):\n\t\t\tif a % i == 0:\n\t\t\t\treturn False\n\treturn True\n\ndef ispowerof2(a):\n    '''\n    Write a function that takes"], ["", "\ndef is_prime(number):\n    \"\"\"\n    Write a function is_prime/isPrime that accepts an integer number and returns\n    true if the number is prime otherwise it returns false.\n    The function should take an integer number as an argument and return a boolean.\n    Examples:\n    For number = 1234567890 the output should be is_prime(number) = true;\n    For number = 1234567891 the output should be is_prime(number) = false;\n    For number = 38 the output should be is_prime(number) = true;\n    For number = 13 the output should be is_prime(number) = true;\n    For number = 42 the output should be is_prime(number) = false.\n    \"\"\"\n\ndef count_by(n, k):\n    \"\"\"\n    Write a function that accepts a number (", "#     num_dic = {\n#         '2': 0,\n#         '3': 0,\n#         '5': 0,\n#         '7': 0,\n#         'B': 0,\n#         'D': 0\n#     }\n#     for digit in num:\n#         num_dic[digit] += 1\n#     for key in num_dic:\n#         if is_prime(int(key)):\n#             return num_dic[key]\n#     return 0\n    num_dic = {\n        '2': 0,\n        '3': 0,\n        '5': 0,\n        '7': 0,\n        'B': 0,\n        'D': 0\n    }\n    for digit in num:\n        if digit == '0':\n            num_dic['2'] += 1\n        if digit ==", "", "\nprint(hex_key('AB'))\nprint(hex_key('1077E'))\nprint(hex_key('ABED1A33'))\nprint(hex_key('123456789ABCDEF0'))\nprint(hex_key('2020'))\n\n\n# +\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5"], ["\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a number in binary format and your task is to convert it to\n    decimal format. The function should return an integer, the decimal representation of the binary number.\n\n    Examples:\n    binary_to_decimal(\"db1111db\")   # returns 15\n    binary_to_decimal(\"db100000db\") # returns 32\n    \"\"\"\n\ndef decimal_to_hexadecimal(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    hexadecimal format. The function should return a string, with each character representing a hexadecimal number.\n    Each character in the string will be '0' through '9', 'a' through 'f', or 'A' through 'F'.\n\n    Examples:\n    decimal_to_hexadecimal(15)   # returns \"9f\"\n    decimal_to_hexadecimal(32)   # returns \"20\"\n    \"\"\"\n\ndef hexadecimal_to_decimal(hexadecimal):\n    \"\"\"You will be given a number in hexadecimal format and your task is to convert it to\n    decimal format. The function should return an integer, the decimal representation of the hexadecimal number.\n\n    Examples:\n    hexadecimal_to_decimal(\"9f\")   # returns 15\n    hexadecimal_to_decimal(\"20\")   # returns 32\n    \"\"\"\n", "\ndef get_bit(value, index):\n    \"\"\"You will be given a number and an index. The index will be an integer value.\n    The function should return the bit value of the number at the given index.\n    The index is zero-based, so the first bit has index 0, the second bit has index 1, etc.\n\n    Examples:\n    get_bit(13, 0) # returns 1\n    get_bit(13, 1) # returns 1\n    get_bit(13, 2) # returns 0\n    get_bit(13, 3) # returns 0\n    \"\"\"\n\ndef set_bit(value, index):\n    \"\"\"You will be given a number and an index. The index will be an integer value.\n    The function should return the number with the bit at the given index set to 1.\n    The index is zero-based, so the first bit has index 0, the second bit has index 1, etc.\n\n    Examples:\n    set_bit(13, 0) # returns 14\n    set_bit(13, 1) # returns 15\n    set_bit(13, 2) # returns 34\n    set_bit(13, 3) # returns 13\n    \"\"\"\n\ndef clear_bit(value, index):\n    \"\"\"You will be given a number and an index. The index will be an integer value.\n    The function should return the number with the bit at the given index set to 0.\n    The index is zero-based, so the first bit has index 0, the second bit has index 1, etc.\n\n    Examples:", "\n# Write your code below:\ndef decimal_to_binary(decimal):\n    binary = []\n    binary.append(\"db\")\n    while decimal:\n        binary.append(str(decimal % 2))\n        decimal //= 2\n    binary.append(\"db\")\n    return \"\".join(binary)\n\ndecimal_to_binary(15)\n\ndecimal_to_binary(32)\n\ndecimal_to_binary(1234)\n\n# 14. Write a function that takes a list and returns the smallest number in the list.\n#     Use the function to find the smallest number in the following list:\n\nnumbers = [3, 6, 4, 2, 9, 10, 11, 13]\n\n# Write your code below:\ndef smallest(numbers):\n    \"\"\"You will be given a list of numbers. Your task is to find the smallest number in the list,\n    and return it.\n\n    Examples:\n    smallest([3, 6, 4, 2, 9, 10, 11, 13]) # returns 2\n    smallest([1, 2, 3, 4])               # returns 1\n    \"\"\"\n\n# Write your code below:\ndef smallest(numbers):\n    return min(numbers)\n\nsmallest([3, 6, 4, 2, 9, 10, 11, 13])\n\nsmallest([1, 2, 3, 4])\n\n# 15. Write a function that takes a list and returns the largest number in the list.\n#     Use the function", "\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a number in binary form and your task is to convert it to\n    decimal format. The function should return a number.\n\n    Examples:\n    binary_to_decimal(\"db1111db\")   # returns 15\n    binary_to_decimal(\"db100000db\")   # returns 32\n    \"\"\"\n\ndef binary_to_octal(binary):\n    \"\"\"You will be given a number in binary form and your task is to convert it to\n    octal format. The function should return a string, with each character representing an octal number.\n    Each character in the string will be '0' or '1' or '2' or '3' or '4' or '5' or '6' or '7'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    binary_to_octal(\"db1111db\")   # returns \"db173db\"\n    binary_to_octal(\"db100000db\")   # returns \"db200db\"\n    \"\"\"\n\ndef octal_to_binary(octal):\n    \"\"\"You will be given a number in octal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary number.\n    Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters", "\ndef decimal_to_binary_v2(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\ndef decimal_to_binary_v3(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a number in binary form and your task is to convert it to\n    decimal format. The function should return an integer, the decimal equivalent of the binary\n    number.\n\n    Examples:\n    binary_to_decimal(\"db11"], ["\nif __name__ == '__main__':\n    print(is_happy(\"abc\"))\n", "\ndef longest_consecutive_ones(s):\n    \"\"\"You are given a string s.\n    Your task is to find the length of the longest consecutive one in s.\n    For example:\n    longest_consecutive_ones(a) => 1\n    longest_consecutive_ones(aaaaa) => 5\n    longest_consecutive_ones(bbbbb) => 5\n    longest_consecutive_ones(abbcdb) => 4\n    longest_consecutive_ones(abcc) => 3\n    \"\"\"\n\ndef get_number_of_letters(s):\n    \"\"\"You are given a string s.\n    Your task is to find the number of letters in s.\n    For example:\n    get_number_of_letters(a) => 1\n    get_number_of_letters(abc) => 3\n    get_number_of_letters(aaba) => 2\n    \"\"\"\n\ndef longest_subsequence_palindromic(s):\n    \"\"\"You are given a string s.\n    Your task is to find the length of the longest subsequence of s which is palindromic.\n    For example:\n    longest_subsequence_palindromic(aab) => 2\n    longest_subsequence_palindromic(abcdabcd) => 4\n    longest_subsequence_palindromic(abcc) => 1\n    \"\"\"\n\ndef longest_substring_palindromic(s):\n    \"\"\"You are given a string s.\n    Your task is to find the length of the longest substring of s which is palindromic.\n    For example:\n    longest_substring_palindromic(aab) => 2\n    longest_substring_palindromic(abcdabcd) => 4\n    longest_substring_palindromic(abcc) => 2\n    \"\"\"\n\ndef", "", "\n# O(n) time | O(1) space\ndef is_happy_bitwise(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n# O(n) time | O(1) space\ndef is_happy_hash(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n# O(n) time | O(1) space\ndef is_happy_bitwise_hash(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n# O(n) time", ""], ["\ndef main():\n    grades = [4.0, 3, 1.7, 2, 3.5]\n    letter_grades = numerical_letter_grade(grades)\n    print(letter_grades)\n\n\nif __name__ == \"__main__\":\n    main()", "", "", "", "\n# Test Cases\nprint(numerical_letter_grade([3, 3, 3, 3, 3]))\nprint(numerical_letter_grade([3, 2, 2, 2, 2]))\nprint(numerical_letter_grade([4, 3, 1.7, 2, 3.5]))\nprint(numerical_letter_grade([1, 1, 1, 1, 1]))\nprint(numerical_letter_grade([4, 3, 1.7, 2, 3.5, 4, 3, 1.7, 2, 3.5]))\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5, 4, 3, 1.7, 2, 3.5]))"], ["\ndef is_palindrome(string):\n    \"\"\"Write a function that takes a string and returns True if the string is\n    a palindrome or False otherwise\n    Examples\n    is_palindrome('Hello') == True\n    is_palindrome('abcdcba') == True\n    is_palindrome('kittens') == True\n    is_palindrome('orange') == False\n    \"\"\"\n\ndef is_palindrome_v2(string):\n    \"\"\"Write a function that takes a string and returns True if the string is\n    a palindrome or False otherwise\n    Examples\n    is_palindrome_v2('Hello') == True\n    is_palindrome_v2('abcdcba') == True\n    is_palindrome_v2('kittens') == True\n    is_palindrome_v2('orange') == False\n    \"\"\"\n\ndef is_palindrome_v3(string):\n    \"\"\"Write a function that takes a string and returns True if the string is\n    a palindrome or False otherwise\n    Examples\n    is_palindrome_v3('Hello') == True\n    is_palindrome_v3('abcdcba') == True\n    is_palindrome_v3('kittens') == True\n    is_palindrome_v3('orange') == False\n    \"\"\"\n\ndef longest_palindrome(string):\n    \"\"\"Write a function that takes a string and returns the longest palindrome\n    Examples\n    longest_palindrome('Hello') == 'llo'\n    longest_palindrome('abcdcba') == 'dcbabcd'\n    longest_palindrome('kittens') == 'tens'\n    longest_palindrome('orange') == 'orange'\n    \"\"\"\n\ndef longest_palindrome_v2(string):\n    \"\"\"Write a function that takes a string and returns the longest palindrome\n    Examples\n    longest_palindrome('Hello') == 'llo'\n    longest_palindrome('abcdcba') == 'dcbabcd'\n    longest_palindrome('kittens') == 'tens'\n    longest_palindrome('orange') == 'orange'", "", "\n# Write a function that takes a string and returns True if the string\n# contains only vowels or False otherwise\ndef only_vowels(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    contains only vowels or False otherwise\n    Examples\n    only_vowels('Hello') == False\n    only_vowels('abcdcba') == True\n    only_vowels('kittens') == False\n    only_vowels('orange') == True\n    \"\"\"\n\n# Write a function that takes a string and returns a list of its characters\n# in reverse order\ndef reverse_chars(string):\n    \"\"\"Write a function that takes a string and returns a list of its characters\n    in reverse order\n    Examples\n    reverse_chars('Hello') == ['olleH']\n    reverse_chars('abcdcba') == ['b','a','d','c','b','a']\n    reverse_chars('kittens') == ['s','e','n','t','s','k']\n    reverse_chars('orange') == ['reno','nge']\n    \"\"\"\n\n# Write a function that takes a string and returns a list of its characters\n# in alphabetical order\ndef alphabetize_chars(string):\n    \"\"\"Write a function that takes a string and returns a list of its characters\n    in alphabetical order\n    Examples\n    alphabetize_chars('Hello') == ['H','e','l','l','o']\n    alphabetize_chars('abcdcba') == ['a','b','c','d','b','a']\n    alphabetize_chars('kittens') == ['e','k','i','n','t','s']\n    alphabetize_chars('orange') == ['e','g','n','o','r','a','o']\n    \"\"\"\n\n# Write a function that takes a string and returns True if the string is a\n# palindrome or False otherwise\ndef palindrome(string):\n    \"\"\"Write a function that takes a string and returns True if the string is a\n    pal", "\ndef prime_length_2(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length_2('Hello') == True\n    prime_length_2('abcdcba') == True\n    prime_length_2('kittens') == True\n    prime_length_2('orange') == False\n    \"\"\"\n\ndef test_prime_length_1():\n    assert prime_length('Hello') == True\n    assert prime_length('abcdcba') == True\n    assert prime_length('kittens') == True\n    assert prime_length('orange') == False\n\ndef test_prime_length_2():\n    assert prime_length_2('Hello') == True\n    assert prime_length_2('abcdcba') == True\n    assert prime_length_2('kittens') == True\n    assert prime_length_2('orange') == False\n\ndef test_prime_length_3():\n    assert prime_length_3('Hello') == True\n    assert prime_length_3('abcdcba') == True\n    assert prime_length_3('kittens') == True\n    assert prime_length_3('orange') == False\n\ndef test_prime_length_4():\n    assert prime_length_4('Hello') == True\n    assert prime_length_4('abcdcba') == True\n    assert prime_length_4('kittens') == True\n    assert prime_length_4('orange') == False\n\ndef test_prime_length_5():\n    assert prime_length_5('Hello') == True\n    assert prime_length_5('abcdcba') == True\n    assert prime_length_5('kittens') == True\n    assert prime_length_5('orange') == False\n\ndef test_prime_length_6():\n    assert prime_length_6('Hello') == True\n    assert prime_length_6('abcdcba') == True\n    assert prime_length_6('kittens') ==", "def word_count(string):\n    \"\"\"Write a function that takes a string and returns the number of words\n    in the string.\n    Examples\n    word_count('Hello world') == 2\n    word_count('How many apples?') == 3\n    \"\"\"\ndef is_palindrome(string):\n    \"\"\"Write a function that takes a string and returns True if it is a palindrome\n    or False otherwise\n    Examples\n    is_palindrome('abba') == True\n    is_palindrome('radar') == False\n    is_palindrome('tacocat') == True\n    \"\"\"\ndef is_palindrome_v2(string):\n    \"\"\"Write a function that takes a string and returns True if it is a palindrome\n    or False otherwise\n    Examples\n    is_palindrome_v2('abba') == True\n    is_palindrome_v2('radar') == False\n    is_palindrome_v2('tacocat') == True\n    \"\"\"\ndef is_palindrome_v3(string):\n    \"\"\"Write a function that takes a string and returns True if it is a palindrome\n    or False otherwise\n    Examples\n    is_palindrome_v3('abba') == True\n    is_palindrome_v3('radar') == False\n    is_palindrome_v3('tacocat') == True\n    \"\"\"\ndef is_palindrome_v4(string):\n    \"\"\"Write a function that takes a string and returns True if it is a palindrome\n    or False otherwise\n    Examples\n    is_palindrome_v4('abba') == True\n    is_palindrome_v4('radar') == False\n    is_palindrome_v4('tacocat') == True\n    \"\"\"\ndef is_palindrome_v5(string):\n    \"\"\"Write a function that takes a string and returns True if it is a palindrome\n    or False otherwise\n    Examples\n    is_palindrome_v5('abba') == True\n    is_palindrome_v5('radar') == False\n    is_palindrome_v5('tac"], ["\ndef ends_with_3(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that end with 3.\n    \"\"\"\n\ndef ends_with_4(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that end with 4.\n    \"\"\"\n\ndef ends_with_7(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that end with 7.\n    \"\"\"\n\ndef ends_with_9(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that end with 9.\n    \"\"\"\n\ndef main():\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that end with 3 or end with 4.\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef ends_one_starts(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that end or start with 1.\n    \"\"\"\n\ndef starts_two_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 2.\n    \"\"\"\n\ndef ends_two_starts(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that end or start with 2.\n    \"\"\"\n\ndef starts_three_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 3.\n    \"\"\"\n\ndef ends_three_starts(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that end or start with 3.\n    \"\"\"\n\ndef starts_four_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 4.\n    \"\"\"\n\ndef ends_four_starts(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that end or start with 4.\n    \"\"\"\n\ndef starts_five_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 5.\n    \"\"\"\n\ndef ends_five_starts(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that end or start with 5.\n    \"\"\"\n\ndef starts_six_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 6.\n    \"\"\"\n\ndef ends_six_starts(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that end or start with 6", "\ndef starts_two_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 2.\n    \"\"\"\n\ndef starts_three_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 3.\n    \"\"\"\n\ndef starts_four_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 4.\n    \"\"\"\n\ndef starts_five_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 5.\n    \"\"\"\n\ndef starts_six_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 6.\n    \"\"\"\n\ndef starts_seven_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 7.\n    \"\"\"\n\ndef starts_eight_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 8.\n    \"\"\"\n\ndef starts_nine_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 9.\n    \"\"\"\n\ndef starts_zero_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 0.\n    \"\"\"\n", "\nif __name__ == \"__main__\":\n    # run the main code\n    main()\n", ""], ["\n#     N = int(input())\n    return str(sum(int(i) for i in bin(N)[2:]))\n\nif __name__ == \"__main__\":\n    print(solve(150))", "", "\t#Your code goes here\n\tif N == 0:\n\t\treturn '0'\n\treturn str(bin(N)).count('1')\n", "", "\nif __name__ == '__main__':\n    print(solve(int(input())))\n"], ["\nprint(add([4, 2, 6, 7]))\n\n# ### Solution\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    even = []\n    odd = []\n    for i in range(len(lst)):\n        if i%2 != 0:\n            odd.append(lst[i])\n        else:\n            even.append(lst[i])\n    return sum(even)\n\n\n# ### Test\n\n# +\nassert add([4, 2, 6, 7]) == 2\n\nprint(\"All tests passed!\")\n", "#    if lst[0] % 2 == 0:\n#        lst[0] += 1\n#        return lst\n#    else:\n#        return lst[0]\n\n    if lst[0] % 2 == 0:\n        if lst[1] % 2 != 0:\n            lst[0] += lst[1]\n            lst.pop(1)\n            return lst\n        else:\n            return lst[0]\n    else:\n        return lst[0]\n\n\n\ndef add_all(lst):\n    \"\"\"Given a non-empty list of integers lst, add all the elements of lst.\n\n\n    Examples:\n        add_all([4, 2, 6, 7]) ==> 20 \n    \"\"\"\n    sum = 0\n    for elem in lst:\n        sum += elem\n    return sum\n\ndef append(lst, elem):\n    \"\"\"Given a non-empty list lst, and an element elem, add elem to the end of lst.\n\n\n    Examples:\n        append([4, 2, 6, 7], 10) ==> [4, 2, 6, 7, 10]\n    \"\"\"\n    lst.append(elem)\n    return lst\n\ndef count(lst, elem):\n    \"\"\"Given a list lst and an element elem, return the number of times elem occurs in lst.\n\n\n    Examples:\n        count([4, 2, 6, 7], 2) ==> 1\n    \"\"\"\n    count = 0\n    for e in lst:\n        if e == elem:\n            count += 1\n    return count\n\n\ndef count_if(lst, func):\n    \"\"\"Given a list lst and a function func, return the number of times func(elem) is true for some elem in lst.\n\n\n    Examples:\n        count_if([4, 2, 6, 7], lambda x: x > 3) ==> 2\n    \"\"\"\n    count = 0\n    for elem in lst:\n        if func(elem):\n            count += 1\n    return count\n\ndef delete(lst, index):\n    \"\"\"Given a non-empty list lst and an index i, delete the element", "\nif __name__ == '__main__':\n    print(add([4, 2, 6, 7]))\n    print(add([1, 3, 5, 7, 9]))\n    print(add([2, 4, 6]))\n    print(add([2, 4, 6, 8]))\n    print(add([1, 3, 5, 7, 9]))\n    print(add([4, 2, 6, 7, 5, 4]))", "\n# Your code goes here.\ndef add(lst):\n    if lst == []:\n        return 0\n    elif lst[0]%2 == 0:\n        return lst[0]+add(lst[1:])\n    else:\n        return add(lst[1:])\n\nprint(add([4,2,6,7]))", "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\ndef"], ["\nanti_shuffle('Hi')\nanti_shuffle('hello')\nanti_shuffle('Hello World!!!')\n", "\ndef test_anti_shuffle():\n    assert anti_shuffle('Hi') == 'Hi'\n    assert anti_shuffle('hello') == 'ehllo'\n    assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'\n    assert anti_shuffle('') == ''\n    assert anti_shuffle(' ') == ' '\n\nif __name__ == '__main__':\n    test_anti_shuffle()\n", "\ndef is_palindrome(s):\n    \"\"\"\n    Write a function that takes a string and returns True if the string is a\n    palindrome, False otherwise.\n\n    For example:\n    is_palindrome('abcdcba') returns True\n    is_palindrome('abcd') returns False\n    is_palindrome('abcba') returns True\n    \"\"\"\n\ndef longest_palindromic_substring(s):\n    \"\"\"\n    Write a function that takes a string and returns the longest palindromic\n    substring from the string. If there are multiple palindromic substrings\n    with the same length, return the first one.\n\n    For example:\n    longest_palindromic_substring('abc') returns 'c'\n    longest_palindromic_substring('abcba') returns 'bcba'\n    longest_palindromic_substring('aaaaa') returns 'aaaaa'\n    \"\"\"\n\ndef string_compression(s):\n    \"\"\"\n    Write a function that takes a string and returns a compressed version of it.\n    The compressed version of a string is a string where each character is\n    replaced with the number of times it appears.\n\n    For example:\n    string_compression('aabcccccaaa') returns 'a2b1c5a3'\n    string_compression('abc') returns 'abc'\n    string_compression('a') returns 'a'\n    \"\"\"\n\ndef string_rotation(s1, s2):\n    \"\"\"\n    Write a function that takes two strings and returns True if s2 is a\n    rotation of s1, False otherwise.\n\n    For example:\n    string_rotation('waterbottle', 'erbottlewat') returns True\n    string_rotation('waterbottle', 'erbottle') returns False\n    \"\"\"\n\ndef longest_common_subsequence(s1, s", "\ndef anti_shuffle2(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n\ndef anti_shuffle3(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n\ndef anti_shuffle4(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!')", ""], ["\ndef get_column(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each column may contain a different number of rows.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in descending order.\n    Also, sort coordinates of the column by columns in ascending order.\n    \n    Examples:\n    get_column([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(1, 3), (1, 2), (1, 5), (2, 2), (2, 4)]\n    get_column([], 1) == []\n    get_column([[], [1], [1, 2, 3]], 3) == [(2, 0", "", "", "\n# O(NlogN)\n# O(N^2)\n# O(1)\n\n\ndef get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        if lst[i][-1] == x:\n            result.append((i, len(lst[i]) - 1))\n    return result\n\n\ndef get_row(lst, x):\n    if not lst:\n        return []\n\n    return [(i, lst[i].index(x)) for i in range(len(lst)) if x in lst[i]]\n\n\nprint(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\nprint(get_row([], 1))\nprint(get_row([[], [1], [1, 2, 3]], 3))\n", "\nif __name__ == '__main__':\n    print(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    print(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    print(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1))\n    print(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5"], ["\ndef remove_duplicates(array):\n    \"\"\"\n    Given an array of non-negative integers, remove all duplicates from the array,\n    leaving only distinct elements from the array.\n\n    Note:\n    * don't change the given array.\n    * there should not be any elements in the array that are not distinct.\n\n    Examples:\n    * remove_duplicates([]) => []\n    * remove_duplicates([5]) => [5]\n    * remove_duplicates([2, 4, 3, 0, 1, 5]) => [2, 4, 3, 0, 1, 5]\n    * remove_duplicates([2, 4, 3, 0, 1, 5, 5]) => [2, 4, 3, 0, 1, 5]\n    \"\"\"\n\ndef find_min_max_indices(array):\n    \"\"\"\n    Given an array of non-negative integers, find the indices of the two largest numbers in the array.\n    Your solution should run in O(n) time.\n\n    Examples:\n    * find_min_max_indices([]) => []\n    * find_min_max_indices([5]) => [0, 0]\n    * find_min_max_indices([2, 4, 3, 0, 1, 5]) => [3, 4]\n    * find_min_max_indices([2, 4", "", "\ndef swap_case(string):\n    \"\"\"\n    Given a string, capitalize the letters that occupy even indexes and\n    lowercase the letters that occupy odd indexes in-place.\n\n    Note:\n    * don't change the given string.\n\n    Examples:\n    * swap_case('hello') => 'HELLO'\n    * swap_case('hello world') => 'hELLO wORLD'\n    * swap_case('hello world how are you') => 'hELLO wORLD hOW arE yoU'\n    \"\"\"\n\ndef get_second_highest(array):\n    \"\"\"\n    Given an array of integers, return the second highest integer in the array.\n    If the array contains more than two elements with the same value, return the second\n    highest value. If the array does not contain a second highest value, return -1.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * get_second_highest([]) => -1\n    * get_second_highest([1]) => -1\n    * get_second_highest([1, 2, 3]) => -1\n    * get_second_highest([2, 3, 3]) => 3\n    * get_second_highest([2, 3, 2]) => 2\n    \"\"\"\n\ndef remove_duplicates(array):\n    \"\"\"\n    Given an array of integers, return a new array without any duplicate values.\n    Note:\n    * don", "\ndef get_longest_consecutive_element(array):\n    \"\"\"\n    Given an array of non-negative integers, find the length of the longest consecutive elements sequence.\n    The array contains at least two elements.\n    You can move up and down the array to find the longest consecutive element.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * get_longest_consecutive_element([]) => 0\n    * get_longest_consecutive_element([1]) => 1\n    * get_longest_consecutive_element([1, 2]) => 2\n    * get_longest_consecutive_element([1, 2, 3, 4, 5, 6, 7, 8, 9]) => 5\n    * get_longest_consecutive_element([2, 4, 3, 0, 1, 5, 6, 7, 8, 9]) => 6\n    \"\"\"\n\ndef get_longest_consecutive_element_2(array):\n    \"\"\"\n    Given an array of non-negative integers, find the length of the longest consecutive elements sequence.\n    The array contains at least two elements.\n    You can move up and down the array to find the longest consecutive element.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * get_longest_consecutive_element_2([]) => 0\n    * get_", ""], ["\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n\ndef encrypt_decrypt(s, f):\n    \"\"\"Create a function encrypt_decrypt that takes a string and a function\n    as an argument. Call the function with the string and then return the \n    output.\n    \"\"\"\n", "\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    \ndef main():\n    \"\"\"Demonstrate the functions.\"\"\"\n    print encrypt('hi')\n    print encrypt('asdfghjkl')\n    print encrypt('gf')\n    print encrypt('et')\n    print decrypt('lm')\n    print decrypt('ewhjklnop')\n    print decrypt('kj')\n    print decrypt('ix')\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n", "def decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)\n", "\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n\ndef encrypt_decrypt(s):\n    \"\"\"Create a function encrypt_decrypt that takes a string as an argument\n    and returns a string that is the result of encrypting the string \n    provided and then decrypting the result.\n    For example:\n    encrypt_decrypt('hi') returns 'lm'\n    encrypt_decrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt_decrypt('gf') returns 'kj'\n    encrypt_decrypt('et') returns 'ix'\n    \"\"\"\n\n# Test Cases:\n# print(encrypt('hi'))\n# print(encrypt('asdfghjkl'))\n# print(encrypt('gf'))\n# print(encrypt('et'))\n\n# print(decrypt('lm'))\n# print(decrypt('ewhjklnop'))\n# print(decrypt('kj'))\n# print(decrypt('ix'))\n\n# print(encrypt_decrypt('hi'))\n# print(encrypt_decrypt('asdfghjkl'))\n# print(encrypt_decrypt('gf'))\n# print(encrypt_decrypt('et'))"], ["\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))\n", "", "\n# Your code here\ndef next_smallest(lst):\n    lst.sort()\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n\n# Unit Tests\n# These are 5 tests for a function called is_palindrome().\n# You can write more of these.\n\nprint(next_smallest([5, 1, 4, 3, 2]))\n\n# These are 4 tests for a function called is_palindrome().\n# You can write more of these.\n\nprint(next_smallest([5, 1, 4, 3, 2]))\n\n# These are 3 tests for a function called is_palindrome().\n# You can write more of these.\n\nprint(next_smallest([5, 1, 4, 3, 2]))\n\n# These are 2 tests for a function called is_palindrome().\n# You can write more of these.\n\nprint(next_smallest([5, 1, 4, 3, 2]))\n\n# These are 1 tests for a function called is_palindrome().\n# You can write more of these.\n\nprint(next_smallest([5, 1, 4, 3, 2]))\n\n\n# +\n# Question 3:\n# Given a list of integers, write a function that returns the largest product\n# that is less than 100.\n\ndef largest_product_below(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function largest_product_below() that returns the largest product\n    that is less than 100.\n    \"\"\"\n    # Your code here\n    prod = 1\n    max_prod =", "\ndef next_smallest_recursive(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\ndef next_smallest_recursive_v2(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\ndef next_smallest_iterative(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\ndef next_smallest_iterative_v2(lst):\n    \"\"\"\n   ", "\ndef next_smallest(lst):\n    if lst == []:\n        return None\n    lst.sort()\n    for i in range(len(lst)):\n        if lst[i] == lst[i+1]:\n            continue\n        else:\n            return lst[i+1]\n\nprint(next_smallest([1, 2, 3, 4, 5])) # 2\nprint(next_smallest([5, 1, 4, 3, 2])) # 2\nprint(next_smallest([])) # None\nprint(next_smallest([1, 1])) # None\n"], ["", "#    return S.count(\"I\")\n    return sum(1 for s in S.split('.?!') if s.startswith(\"I\"))\n\ndef is_bored2(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(1 for s in S.split('.?!') if s.startswith(\"I\"))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\ndef is_even_odd(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to determine if the\n    sentence ends with an \"odd\" or \"even\" word.\n   \n    For example:\n    >>> is_even_odd(\"Hello world\")\n    \"even\"\n    >>> is_even_odd(\"The sky is blue. The sun is shining. I love this weather\")\n    \"odd\"\n    \"\"\"\n\ndef is_nice(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to determine if the\n    sentence has \"nice\" words.\n   \n    For example:\n    >>> is_nice(\"Hello world\")\n    False\n    >>> is_nice(\"The sky is blue. The sun is shining. I love this weather\")\n    True\n    \"\"\"\n", "\ndef is_happy(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to check if the\n    string is happy. A happy string contains the word \"happy\".\n   \n    For example:\n    >>> is_happy(\"I am happy\")\n    True\n    >>> is_happy(\"I am not happy\")\n    False\n    \"\"\"\n\ndef is_palindrome(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to check if the string\n    is a palindrome. A palindrome is a string that reads the same backwards\n    as forwards.\n   \n    For example:\n    >>> is_palindrome(\"kayak\")\n    False\n    >>> is_palindrome(\"radar\")\n    True\n    \"\"\"\n\ndef is_unique(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to check if the string\n    is unique. A unique string is one that contains no duplicated letters.\n   \n    For example:\n    >>> is_unique(\"Hello\")\n    True\n    >>> is_unique(\"Hello World\")\n    False\n    \"\"\"\n\ndef is_word(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to check if the string\n    contains any words.\n   \n    For example:\n    >>> is_word(\"Hello\")\n    True\n    >>> is_word(\"Hello World\")\n    True\n    >>> is_word(\"Hello World!\")\n    True\n    >>> is_word(\"Hello World.\")\n    True\n    >>> is_word(\"Hello World?\")\n    True\n    >>> is_word(\"Hello World,\")\n    True\n    \"\"\"\n\ndef max_word_len(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to return the length\n    of the longest word in the string.\n   \n    For example:\n    >>> max_word_len(\"Hello World\")\n    5\n    >>> max_word_len(\"Hello World Hello\")\n    1", "\ndef bored_string(n):\n    \"\"\"\n    You'll be given an integer n, and your task is to return a string\n    representing a sentence with n boredoms.\n   \n    For example:\n    >>> bored_string(1)\n    \"I am bored!\"\n    >>> bored_string(2)\n    \"I am bored! I am bored!\"\n    \"\"\"\n\ndef bored_string2(n):\n    \"\"\"\n    You'll be given an integer n, and your task is to return a string\n    representing a sentence with n boredoms.\n   \n    For example:\n    >>> bored_string2(1)\n    \"I am bored!\"\n    >>> bored_string2(2)\n    \"I am bored! I am bored!\"\n    \"\"\"\n"], ["#   Write your code here.\ndef any_int(x, y, z):\n    if x + y + z == int(x) + int(y) + int(z):\n        if x == int(x) and y == int(y) and z == int(z):\n            return True\n        else:\n            return False\n    else:\n        return False\n\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))", "#solution \n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x == z + y:\n            return True\n        else:\n            return False\n    else:\n        return False", "\ndef any_int(x, y, z):\n    return (x+y+z) == x or (x+y+z) == y or (x+y+z) == z or isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))", "# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n\ndef any_int(x, y, z):\n    return x == z + y and x.is_integer() and y.is_integer() and z.is_integer()\n    \nany_int(5, 2, 7)\n# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n\ndef any_int(x, y, z):\n    return x == z + y and x % 1 == 0 and y % 1 == 0 and z % 1 == 0\n\nany_int(5, 2, 7)\n# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n\ndef any_int(x, y, z):\n    return x == z + y and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)\n\nany_int(5, 2, 7)\n# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n\ndef any_int(x, y, z):\n    return x == z + y and (x % 1 == 0 or", "\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))"], ["\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)\n", "", "\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it by swapping\n    case of all letters, replacing all vowels in the message with the \n    letter that appears 2 places behind that vowel in the english \n    alphabet. Assume only letters.\n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n\ndef hamming(message):\n    \"\"\"\n    Write a function that takes a message, and returns the \n    number of hamming distance errors it contains.\n    \n    Hamming distance is the number of places where the letters in\n    the message differ. Assume only letters.\n    \n    Examples:\n    >>> hamming('test')\n    1\n    >>> hamming('This is a message')\n    2\n    \"\"\"\n\ndef edit(message):\n    \"\"\"\n    Write a function that takes a message, and returns the number of \n    edit distance errors it contains.\n    \n    Edit distance is the number of places where the letters in the \n    message differ. Assume only letters.\n    \n    Examples:\n    >>> edit('test')\n    1\n    >>> edit('This is a message')\n    2\n    \"\"\"\n\ndef check_anagram(message, word):\n    \"\"\"\n    Write a function that takes two messages, and returns True if\n    the first message is an anagram of the second message.\n    Assume only letters.\n    \n    Examples:\n    >>> check_anagram('test', 'test')\n    True\n    >>> check_anagram('test', 'test1')\n    False\n    \"\"\"\n\n", "\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places behind that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"", "\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes the message \n    by swapping case of all letters, replacing all vowels in the \n    message with the letter that appears 2 places behind that vowel \n    in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n"], ["\ndef count_by_id(lst):\n    \"\"\"You are given a list of integers.\n    For each of the integers in the list, you need to return a dictionary with a key of that integer and a value of the number of times that integer appears in the list.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be count_by_id(lst) = {0:1, 3:2, 2:1, 1:1, 5:2, 7:1, 4:1, 181:1, 32:3, 324:1, 3:1}\n    For lst =", "\tlst = list(lst)\n\tmax = 0\n\tfor i in lst:\n\t\tif i > max:\n\t\t\tmax = i\n\tfor i in lst:\n\t\tif i == max:\n\t\t\treturn sum(int(i) for i in str(i))\n\ndef check_prime(number):\n    \"\"\"Check if number is prime or not.\"\"\"\n    if number == 1:\n        return False\n    if number % 2 == 0 and number > 2:\n        return False\n    return all(number % i for i in range(3, int(number ** 0.5) + 1, 2))\n\ndef is_prime(number):\n    \"\"\"Check if number is prime or not.\"\"\"\n    if number == 1:\n        return False\n    elif number == 2:\n        return True\n    elif number % 2 == 0:\n        return False\n    for", "\ndef test_skjkasdkd():\n    assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10\n    assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25\n    assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13\n    assert skjkas", "\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nprint(skjkasdkd([0,724,32,71,99,", "\ndef max_digits(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest integer that is made by summing up the digits of the integers in the list.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,1"], ["\ndef check_dict_case2(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case2({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case2({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case2({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case2({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case2({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\ndef check_dict_case3(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case3({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case3({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case3({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should", "\ndef is_string_unique(word):\n    \"\"\"\n    Given a string, return True if the string is a unique string, else \n    return False. The function should return False if the string is empty.\n    Examples:\n    is_string_unique(\"hello\") should return True.\n    is_string_unique(\"Hello\") should return False.\n    is_string_unique(\"hello world\") should return True.\n    is_string_unique(\"Hello World\") should return False.\n    is_string_unique(\"Hello world\") should return True.\n    \"\"\"\n    if len(word) == 0:\n        return False\n\n    word = word.lower()\n    unique = True\n    for i in range(len(word)):\n        if word.find(word[i]) != word.rfind(word[i]):\n            unique = False\n    \n    return unique\n\ndef is_palindrome(word):\n    \"\"\"\n    Given a string, return True if the string is a palindrome, else \n    return False. The function should return False if the string is empty.\n    Examples:\n    is_palindrome(\"madam\") should return True.\n    is_palindrome(\"Madam\") should return False.\n    is_palindrome(\"racecar\") should return True.\n    is_palindrome(\"Racecar\") should return False.\n    is_palindrome(\"A man, a plan, a canal: Panama\") should return True.\n    is_palindrome(\"A man, a plan, a canal: Panama\") should return False.\n    \"\"\"\n    if", "\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) # True\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) # False\ncheck_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) # False\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) # False\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) # True\n\n# 3. Write a function that takes two integer values and returns the larger of the two numbers.\n# If the two numbers are equal, the function should return the first number.\n# Examples:\n# max_of_two(1, 2) should return 2\n# max_of_two(2, 1) should return 2\n# max_of_two(1, 1) should return 1\n# max_of_two(1, 10) should return 10\n\ndef max_of_two(x, y):\n    \"\"\"\n    Given two integers, return the larger of the two numbers.\n    If the two numbers are equal, return the first number.\n    \"\"\"\n\nmax_of_two(1, 2) # 2\nmax_of_two(2, 1) # 2\nmax_of_two(1, 1) # 1\nmax_of_", "#     if dict:\n#         for k,v in dict.items():\n#             if type(k) != str or type(v) != str:\n#                 return False\n#             elif k != k.lower() and k != k.upper():\n#                 return False\n#     else:\n#         return False\n    return all([type(k) == str and type(v) == str and k == k.lower() or k == k.upper() for k,v in dict.items()])\n", "\n# 10. Write a function, capitalize_each(dict), that takes in a dictionary,\n# and returns a new dictionary where all the keys and values have been converted\n# to upper case.\ndef capitalize_each(dict):\n    \"\"\"\n    Given a dictionary, return a new dictionary where all the keys and \n    values have been converted to upper case.\n    Examples:\n    capitalize_each({\"a\":\"apple\", \"b\":\"banana\"}) should return {\"A\":\"APPLE\", \"B\":\"BANANA\"}\n    capitalize_each({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return {\"A\":\"BANANA\", \"B\":\"BANANA\"}\n    capitalize_each({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return {\"A\":\"APPLE\", \"8\":\"BANANA\", \"A\":\"APPLE\"}\n    capitalize_each({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return {\"NAME\":\"JOHN\", \"AGE\":\"36\", \"CITY\":\"HOUSTON\"}\n    capitalize_each({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return {\"STATE\":\"NC\", \"ZIP\":\"12345\" }\n    \"\"\"\n\n# 11. Write a function, remove_vowels(string), that takes in a string and\n# returns a new string where all the vowels have been removed.\ndef remove_vowels(string):\n    \"\"\"\n    Given"], ["\ndef count_up_to_with_primes(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to_with_primes(5) => [2,3]\n    count_up_to_with_primes(11) => [2,3,5,7]\n    count_up_to_with_primes(0) => []\n    count_up_to_with_primes(20) => [2,3,5,7,11,13,17,19]\n    count_up_to_with_primes(1) => []\n    count_up_to_with_primes(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\ndef remove_at_index(xs, i):\n    \"\"\"Implement a function that takes an array and an index and returns an array with the value at\n    index removed.\n    for example:\n    remove_at_index([1, 2, 3], 1) => [1, 3]\n    remove_at_index([1, 2, 3], 0) => [2, 3]\n    \"\"\"\n\ndef insert_at_index(xs, i, x):\n    \"\"\"Implement a function that takes an array and an index and returns an array with the value at\n    index inserted.\n    for example:\n    insert_at_index([1, ", "\ndef prime_sum(n):\n    \"\"\"Implement a function that takes a non-negative integer n and returns the sum of the primes\n    up to n.\n    For example:\n    prime_sum(5) => 17\n    prime_sum(11) => 17\n    prime_sum(0) => 0\n    prime_sum(20) => 331\n    prime_sum(1) => 0\n    prime_sum(18) => 51\n    \"\"\"\n\ndef prime_factors(n):\n    \"\"\"Implement a function that takes a non-negative integer n and returns an array of all prime\n    factors of n, ordered by size.\n    For example:\n    prime_factors(5) => [5]\n    prime_factors(11) => [11, 1]\n    prime_factors(0) => []\n    prime_factors(20) => [2, 2, 5, 5]\n    prime_factors(1) => []\n    prime_factors(18) => [2, 2, 3, 3, 3, 5]\n    \"\"\"\n\ndef prime_sum_imperative(n):\n    \"\"\"Implement a function that takes a non-negative integer n and returns the sum of the primes\n    up to n.\n    For example:\n    prime_sum_imperative(5) => 17\n    prime_sum_imperative(11) => 17\n    prime_sum_imperative(0) => 0\n    prime_sum_imperative(20) =>", "\ndef add_two_numbers(a, b):\n    \"\"\"Implement a function that adds two numbers together.\n    for example:\n    add_two_numbers(4, 6) => 10\n    add_two_numbers(5, 5) => 10\n    add_two_numbers(5, 10) => 15\n    add_two_numbers(0, 0) => 0\n    \"\"\"\n\ndef reverse(word):\n    \"\"\"Implement a function that takes a string as an argument and returns that string reversed.\n    for example:\n    reverse('hello') => 'olleh'\n    reverse('goodbye') => 'eybdoog'\n    reverse('a') => 'a'\n    reverse('ab') => 'ba'\n    reverse('') => ''\n    \"\"\"\n\ndef sum_digits(n):\n    \"\"\"Implement a function that takes a non-negative integer as an argument and returns the sum of the\n    digits in that number.\n    for example:\n    sum_digits(10) => 1\n    sum_digits(321) => 6\n    sum_digits(100) => 3\n    sum_digits(0) => 0\n    \"\"\"\n\ndef palindrome(word):\n    \"\"\"Implement a function that determines if a string is a palindrome. A palindrome is a word that\n    is spelled the same way both forward and backward.\n    for example:\n    palindrome('racecar') => True\n    palindrome('palindrome') => True\n    palindrome('palindromo') => False\n    \"\"\"\n\ndef palindrome_permutation(word):\n   ", "", "\ncount_up_to(5)\ncount_up_to(11)\ncount_up_to(0)\ncount_up_to(20)\ncount_up_to(1)\ncount_up_to(18)\n\n\n# +\n# Implement a function that takes a string and returns an array containing the characters in reverse order.\n# for example:\n# reverse('hello') => ['o','l','l','e','h']\n# reverse('1234') => ['4','3','2','1']\n# reverse('apple') => ['p','l','e','a','n']\n\ndef reverse(s):\n    \"\"\"\n    s: string\n    \"\"\"\n    pass\n\nreverse('hello')\nreverse('1234')\nreverse('apple')\n\n\n# +\n# Implement a function that takes two strings as arguments and returns the longest common subsequence of\n# the two strings. The subsequence should be returned as a string.\n# for example:\n# longest_common_subsequence('AGGTAB', 'GXTXAYB') => 'GTAB'\n# longest_common_subsequence('CATCGA', 'GTATGCAT') => 'ATGCAT'\n# longest_common_subsequence('GTAGC', 'GTCGTAG') => 'GTAGC'\n# longest_common_subsequence('GGACTGAAATCTG', 'AGGACGGA') => 'AATCTG'\n# longest_common_subsequence('ACCGGGTT', 'ACCCGG') => '"], ["\nmultiply(148, 412)\nmultiply(19, 28)\nmultiply(2020, 1851)\nmultiply(14, -15)\n\n\n# +\ndef reverse_digits(n):\n    \"\"\"Complete the function that takes an integer and returns the \n    reversed integer.\n    Assume the input is always valid.\n    Examples:\n    reverse_digits(12345) should return 54321.\n    reverse_digits(9837) should return 7389.\n    reverse_digits(30000) should return 0.\n    reverse_digits(5420) should return 2045.\n    \"\"\"\n\nreverse_digits(12345)\nreverse_digits(9837)\nreverse_digits(30000)\nreverse_digits(5420)\n\n\n# +\ndef is_unique_str(s):\n    \"\"\"Complete the function that takes a string and returns True if the \n    string contains all unique characters, and False otherwise.\n    Assume the input is always valid.\n    Examples:\n    is_unique_str(\"abcd\") should return True.\n    is_unique_str(\"aaaa\") should return False.\n    is_unique_str(\"abba\") should return False.\n    is_unique_str(\"abc\") should return True.\n    \"\"\"\n\nis_unique_str(\"abcd\")\nis_unique_str(\"aaaa\")\nis_unique_str(\"abba\")\nis_unique_str(\"abc\")\n\n\n# +\ndef palindrome(s):\n    \"\"\"Complete the function that takes a string and returns True if it \n    is a palindrome, and False otherwise.\n    Assume the input is always valid.\n    Examples:\n    palindrome(\"racecar\") should return True.\n   ", "\ndef test_multiply():\n    assert multiply(148, 412) == 16\n    assert multiply(19, 28) == 72\n    assert multiply(2020, 1851) == 0\n    assert multiply(14, -15) == 20\n    print(\"All tests passed!\")\n\ntest_multiply()", "#    print(a, b)\n    res = []\n    while a > 0:\n        #print(a)\n        #print(res)\n        if len(res) == 0:\n            res.append(a % 10)\n            a = a // 10\n        else:\n            res.append(res[-1] * a % 10)\n            a = a // 10\n\n    res.reverse()\n    print(res)\n    res_str = ''.join(str(x) for x in res)\n    return int(res_str)\n\nprint(multiply(148, 412))\nprint(multiply(19, 28))\nprint(multiply(2020, 1851))\nprint(multiply(14,-15))", "\ndef sum_digits(number):\n    \"\"\"Complete the function that takes an integer as an argument\n    and returns the sum of all the digits in the number.\n    Assume the input is always valid.\n    Examples:\n    sum_digits(1234) should return 10.\n    sum_digits(24) should return 6.\n    sum_digits(11111) should return 1.\n    sum_digits(567) should return 13.\n    \"\"\"\n\ndef palindrome(text):\n    \"\"\"Complete the function that takes a string as an argument\n    and returns true if the string is a palindrome, false otherwise.\n    Assume the input is always valid.\n    Examples:\n    palindrome(\"racecar\") should return True.\n    palindrome(\"hello\") should return False.\n    palindrome(\"1234321\") should return True.\n    \"\"\"\n", "\ndef sum_digits(n):\n    \"\"\"Complete the function that takes an integer and \n    returns the sum of its digits.\n    Assume the input is always valid.\n    Examples:\n    sum_digits(5) should return 10.\n    sum_digits(19) should return 18.\n    sum_digits(321) should return 6.\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Complete the function that determines if a given \n    number is prime or not.\n    Assume the input is always valid.\n    Examples:\n    is_prime(13) should return False.\n    is_prime(17) should return True.\n    is_prime(29) should return True.\n    is_prime(37) should return True.\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"Complete the function that determines if a given \n    number is a palindrome or not.\n    Assume the input is always valid.\n    Examples:\n    is_palindrome(1) should return True.\n    is_palindrome(121) should return True.\n    is_palindrome(12321) should return True.\n    is_palindrome(1232) should return False.\n    \"\"\"\n\ndef is_square(n):\n    \"\"\"Complete the function that determines if a given \n    number is a square or not.\n    Assume the input is always valid.\n    Examples:\n    is_square(1) should return True.\n    is_square(16) should return True.\n    is_square(19) should return True.\n    is_square(21) should return False.\n    \"\"\"\n\ndef is_armstrong(n):\n    \"\"\"Complete the function that determines if a given \n    number is an Armstrong number or not.\n    Assume the input is always valid.\n    Examples:\n    is_armstrong(153"], ["\ndef count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 2\n    count_lower('abcdefg') returns 0\n    count_lower('dBBE') returns 1\n    \"\"\"\n\ndef get_vowel_indices(s):\n    \"\"\"\n    Given a string s, return a list of the indices of the vowels in s.\n    \n    For example:\n    get_vowel_indices('aBCdEf') returns [1, 3, 5]\n    get_vowel_indices('abcdefg') returns []\n    get_vowel_indices('dBBE') returns [1, 4]\n    \"\"\"\n", "# Your code here\n\ndef count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.isupper())\n\nprint(count_upper('aBCdEf'))\nprint(count_upper('abcdefg'))\nprint(count_upper('dBBE'))", "\ndef count_upper_vowels(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper_vowels('aBCdEf') returns 1\n    count_upper_vowels('abcdefg') returns 0\n    count_upper_vowels('dBBE') returns 1\n    \"\"\"\n\ndef count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 0\n    count_lower('abcdefg') returns 1\n    count_lower('dBBE') returns 0\n    \"\"\"\n\ndef count_lower_vowels(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower_vowels('aBCdEf') returns 0\n    count_lower_vowels('abcdefg') returns 1\n    count_lower_vowels('dBBE') returns 1\n    \"\"\"\n\ndef count_vowels(s):\n    \"\"\"\n    Given a string s, count the number of vowels in even indices.\n    \n    For example:\n    count_vowels('aBCdEf') returns 1\n    count_vowels('abcdefg') returns 1\n    count_vowels('dBBE') returns 1\n    \"\"\"\n\ndef count_vowels_even(s):\n    \"\"\"\n    Given a string s, count the number of vowels in even indices.\n    \n    For example:\n    count_vowels_even('aBCdEf') returns 1\n    count_vowels_even('abcdefg') returns 1\n    count_vowels_even('dBBE') returns 1\n    \"\"\"\n\ndef count_vowels_odd(s):\n    \"\"\"\n    Given a string s, count the number of vowels in odd indices.\n    \n    For example:\n    count_", "#     # Your code goes here\n#     pass\n    return len(s[::2].upper())\n\nprint(count_upper('aBCdEf'))\nprint(count_upper('abcdefg'))\nprint(count_upper('dBBE'))\n\n# +\n# %%writefile -a day08.py\n\ndef count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 2\n    count_lower('abcdefg') returns 0\n    count_lower('dBBE') returns 1\n    \"\"\"\n#     # Your code goes here\n#     pass\n    return len(s[::2].lower())\n\nprint(count_lower('aBCdEf'))\nprint(count_lower('abcdefg'))\nprint(count_lower('dBBE'))\n\n# +\n# %%writefile -a day08.py\n\ndef remove_vowels(s):\n    \"\"\"\n    Given a string s, return a string with all vowels removed.\n    \n    For example:\n    remove_vowels('aBCdEf') returns 'dC'\n    remove_vowels('abcdefg') returns 'bcdfg'\n    remove_vowels('dBBE') returns 'BBE'\n    \"\"\"\n#     # Your code goes here\n#     pass\n    return s.translate(str.maketrans('aeiouAEIOU', ' ' * 5))\n\nprint(remove_vowels('aBCdEf'))\nprint(remove_vowels('abcdefg'))\nprint(remove_vowels('dBBE'))\n\n# +\n# %%writefile -a day08.py\n\ndef remove_vowels(s):\n    \"\"\"\n    Given a string s, return a string with all vowels removed.\n    \n    For example:\n    remove_vowels('aBCdEf') returns 'dC'\n    remove_vowels", "\ndef sum_of_squares(n):\n    \"\"\"\n    Given an integer n, find the difference between the sum of the squares of the first n natural numbers and the square of the sum.\n    \n    For example:\n    sum_of_squares(5) returns 225\n    sum_of_squares(20) returns 25164150\n    \"\"\"\n\ndef sum_digits(n):\n    \"\"\"\n    Given an integer n, return the sum of the digits of n.\n    \n    For example:\n    sum_digits(123) returns 6\n    sum_digits(99) returns 18\n    \"\"\"\n\ndef is_palindrome(s):\n    \"\"\"\n    Given a string s, check if it is a palindrome.\n    \n    For example:\n    is_palindrome('aBcDeFg') returns True\n    is_palindrome('aBceFG') returns True\n    is_palindrome('abcd') returns False\n    \"\"\"\n\ndef is_palindrome_recursive(s):\n    \"\"\"\n    Given a string s, check if it is a palindrome using recursion.\n    \n    For example:\n    is_palindrome_recursive('aBcDeFg') returns True\n    is_palindrome_recursive('aBceFG') returns True\n    is_palindrome_recursive('abcd') returns False\n    \"\"\"\n\ndef is_palindrome_iterative(s):\n    \"\"\"\n    Given a string s, check if it is a palindrome using iteration.\n    \n    For example:\n    is_palindrome_iterative('aBcDeFg') returns True\n    is_palindrome_iterative('aBceFG') returns True\n    is_palindrome_iterative('abcd') returns False\n    \"\"\"\n\ndef is_palindrome_stack(s):\n    \"\"\"\n    Given a string s, check if it is a palindrome using a stack.\n    \n    For example:\n    is_palindrome_stack('aBcDeFg') returns True\n    is_palindrome_stack('aBceFG') returns True\n    is_palindrome_stack('abcd') returns False\n   "], ["", "\ndef is_prime(num):\n    '''\n    Create a function that takes a positive number (integer) as an argument and\n    returns True if the number is prime, False otherwise.\n\n    Examples\n    >>> is_prime(2)\n    True\n    >>> is_prime(17)\n    False\n    >>> is_prime(19)\n    True\n    '''\n\ndef convert_to_celsius(temp):\n    '''\n    Create a function that takes a temperature in Fahrenheit as an argument\n    and returns the corresponding temperature in Celsius.\n\n    Examples\n    >>> convert_to_celsius(32)\n    0\n    >>> convert_to_celsius(0)\n    -17\n    >>> convert_to_celsius(-10)\n    -23\n    '''\n\ndef convert_to_fahrenheit(temp):\n    '''\n    Create a function that takes a temperature in Celsius as an argument\n    and returns the corresponding temperature in Fahrenheit.\n\n    Examples\n    >>> convert_to_fahrenheit(0)\n    -17\n    >>> convert_to_fahrenheit(-10)\n    -23\n    >>> convert_to_fahrenheit(32)\n    32\n    '''\n\ndef reverse_string(string):\n    '''\n    Create a function that takes a string as an argument and returns the\n    string reversed.\n\n    Examples\n    >>> reverse_string(\"hello\")\n    olleh\n    >>> reverse_string(\"1234\")\n    4321\n    '''\n\ndef palindrome_check(string):\n    '''\n    Create a function that takes a string as an argument and returns True\n    if the string is a palindrome and", "\n#-------------------------------------------------------------\ndef factorial(number):\n    '''\n    Create a function that takes a positive integer and returns the\n    factorial of it.\n\n    Examples\n    >>> factorial(3)\n    6\n    >>> factorial(4)\n    24\n    >>> factorial(5)\n    120\n\n    Note:\n    The factorial of a number is defined as the product of all the positive\n    integers less than or equal to it.\n    For example, the factorial of 3 is 3 * 2 * 1 which equals 6.\n    '''\n\n#-------------------------------------------------------------\ndef average(numbers):\n    '''\n    Create a function that takes a list of numbers and returns the average\n    of all of the numbers.\n\n    Examples\n    >>> average([1,2,3,4,5])\n    3.0\n    >>> average([1,2,3,4,5,6])\n    3.5\n    >>> average([])\n    Traceback (most recent call last):\n    ...\n    ValueError: No numbers to average\n    '''\n\n#-------------------------------------------------------------\ndef is_prime(number):\n    '''\n    Create a function that takes a number and returns whether or not it is\n    a prime number.\n\n    Examples\n    >>> is_prime(11)\n    True\n    >>> is_prime(13)\n    False\n    '''\n\n#-------------------------------------------------------------\ndef fibonacci(number):\n    '''\n    Create a function that takes a positive integer and returns the nth\n    Fibonacci number.\n\n    Examples\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(5)\n    5", "\ndef reverse_word(word):\n    '''\n    Create a function that takes a word (string) as input and returns\n    the same word in reverse.\n\n    Examples\n    >>> reverse_word(\"hello\")\n    'olleh'\n    >>> reverse_word(\"cat\")\n    'tac'\n    '''\n\ndef square_digits(num):\n    '''\n    Create a function that takes a number (integer) as input and returns the\n    square of each digit.\n\n    Examples\n    >>> square_digits(9119)\n    811181\n    >>> square_digits(911)\n    8111\n    '''\n\ndef remove_duplicate_letters(string):\n    '''\n    Create a function that takes a string (sentence) as input and returns a\n    string with duplicate letters removed.\n\n    Examples\n    >>> remove_duplicate_letters(\"abcda\")\n    'abcd'\n    >>> remove_duplicate_letters(\"aaabbcc\")\n    'abcc'\n    '''\n\ndef longest_consecutive_character_replacement(string):\n    '''\n    Create a function that takes a string (sentence) as input and returns the\n    length of the longest substring in which the same letter doesn't repeat\n    more than twice.\n\n    Examples\n    >>> longest_consecutive_character_replacement(\"abccde\")\n    3\n    >>> longest_consecutive_character_replacement(\"abccdeff\")\n    5\n    '''\n\ndef count_substring(string, sub_string):\n    '''\n    Create a function that takes a string (sentence) and a substring (word)\n    and returns the number of times the substring appears in the string.\n\n    Examples\n    >>> count_substring(\"The quick brown fox jumps over", "\ndef closest_number(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_number(\"10\")\n    10\n    >>> closest_number(\"15.3\")\n    15\n    >>> closest_number(\"-15.3\")\n    -15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_number(\"14.5\") should\n    return 15 and closest_number(\"-14.5\") should return -15.\n    '''\n\ndef closest_power(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest power of 2 to it. If the number is equidistant\n    from two powers of 2, round it away from zero.\n\n    Examples\n    >>> closest_power(\"10\")\n    10\n    >>> closest_power(\"15.3\")\n    16\n    >>> closest_power(\"-15.3\")\n    16\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two powers of 2, the one you should return is the one that is the\n    farthest from zero. For example closest_power(\"14.5\") should\n    return 16 and closest_power(\"-14.5\") should return 16.\n    '''\n\ndef closest"], ["", "", "\ndef make_a_row(n):\n    \"\"\"\n    Given a positive integer n, you have to make a row of n stones.\n    The first stone has weight 1.\n    The weight of the next stone is the sum of the weights of the previous two stones.\n    Return the weight of each stone in a list, where element at index i represents\n    the weight of the stone at the i-th level.\n\n    Examples:\n    >>> make_a_row(3)\n    [1, 2, 3]\n    \"\"\"\n\ndef make_a_triangle(n):\n    \"\"\"\n    Given a positive integer n, you have to make a triangle of n stones.\n    The first stone has weight 1.\n    The weight of the next stone is the sum of the weights of the previous two stones.\n    Return the weight of each stone in a list, where element at index i represents\n    the weight of the stone at the i-th level.\n\n    Examples:\n    >>> make_a_triangle(3)\n    [1, 3, 6, 10]\n    \"\"\"\n\ndef make_a_zigzag(n):\n    \"\"\"\n    Given a positive integer n, you have to make a zigzag of n stones.\n    The first stone has weight 1.\n    The weight of the next stone is the sum of the weights of the previous two stones.\n    Return the weight of each stone in a list, where element at index i represents\n    the weight of the stone at the i-th level.\n\n    Examples:\n    >>> make_a_zigzag(3)\n    [1, 2, 3]\n    \"\"\"\n\ndef make_a_zigzag_2(n):\n    \"\"\"\n    Given a", "#     def _make_a_pile(n):\n#         if n == 1:\n#             return [1]\n#         elif n % 2 == 1:\n#             return _make_a_pile(n-1) + [n]\n#         else:\n#             return _make_a_pile(n/2) + [n]\n#     return _make_a_pile(n)\n    \n    # one line solution\n    return [i for i in range(1, n+1) if i % 2 == 1] + [i for i in range(1, n+1) if i % 2 == 0]\n\n\n# -\n\nmake_a_pile(2)\n\nmake_a_pile(3)\n\n# ## Finding the first number divisible by all numbers smaller than it\n#\n# Write a function that finds the first number that is divisible by all numbers smaller than it.\n\n# +\n# %%writefile find_first_divisible_by_smaller.py\n\ndef find_first_divisible_by_smaller(n):\n    \"\"\"\n    Given a positive integer n, you have to find the first number that is divisible by all numbers smaller than it.\n\n    Examples:\n    >>> find_first_divisible_by_smaller(10)\n    5\n    \"\"\"\n#     def _find_first_divisible_by_smaller(n):\n#         if n == 1:\n#             return 1\n#         else:\n#             return _find_first_divisible_by_smaller(n-1) * (n-1)\n#     return _find", "\nprint(make_a_pile(2))\n"], ["\ndef is_palindrome(string):\n    \"\"\"\n    Return True if the given string is a palindrome. Otherwise, return False.\n    \n    A palindrome is defined as \"a word or phrase that is the same forwards and backwards.\"\n    \n    For example:\n    is_palindrome(\"tacocat\") == True\n    is_palindrome(\"radar\") == True\n    is_palindrome(\"tacocat!\") == False\n    \"\"\"\n\ndef reverse(string):\n    \"\"\"\n    Reverse a given string.\n    \n    For example:\n    reverse(\"abc\") == \"cba\"\n    reverse(\"kayak\") == \"kayak\"\n    \"\"\"\n\ndef capitalize_words(sentence):\n    \"\"\"\n    Return the given sentence with the first word capitalized.\n    \n    For example:\n    capitalize_words(\"hello there\") == \"Hello there\"\n    capitalize_words(\"How are you?\") == \"How are you?\"\n    \"\"\"\n\ndef is_vowel(char):\n    \"\"\"\n    Return True if the given character is a vowel, False otherwise.\n    \n    A vowel is defined as one of the following characters: 'a', 'e', 'i', 'o', or 'u'.\n    \n    For example:\n    is_vowel('a') == True\n    is_vowel('k') == False\n    \"\"\"\n\ndef longest_word(words):\n    \"\"\"\n    Return the length of the longest word in the given array of words.\n    \n    For example:\n    longest_word([\"a\", \"really\", \"long\", \"word\"]) == 7\n    longest_word([\"oh\", \"no\", \"what\", \"is\", \"going\", \"on\"]) == 4\n    \"\"\"\n\ndef longest_word_length(words):\n    \"\"\"\n    Return the length of the longest word in the given array of words.\n    \n    For example:\n    longest_word_length([\"a\", \"really\", \"long\", \"word", "", "\nprint(words_string(\"Hi, my name is John\"))\n\n# +\n# Create a function called first_and_last that takes a string as an argument. Your function\n# should return a string that has the first character, the middle character, and the last\n# character of the original string in that order, with nothing in between.\n\n# For example:\n# first_and_last(\"abcdefg\") == \"aceg\"\n# first_and_last(\"programming\") == \"prgr\"\n\n# +\n# Create a function called first_and_last that takes a string as an argument. Your function\n# should return a string that has the first character, the middle character, and the last\n# character of the original string in that order, with nothing in between.\n\n# For example:\n# first_and_last(\"abcdefg\") == \"aceg\"\n# first_and_last(\"programming\") == \"prgr\"\n\ndef first_and_last(s):\n    \"\"\"\n    You will be given a string with at least 3 characters. Your task is to return a string\n    with the first, middle, and last characters in the original string.\n    \n    For example:\n    first_and_last(\"abcdefg\") == \"aceg\"\n    first_and_last(\"programming\") == \"prgr\"\n    \"\"\"\n\nprint(first_and_last(\"abcdefg\"))\n\n# +\n# Create a function called letter_positions that takes a string as an argument. Your function\n# should return an array of numbers representing the positions of each character in the\n# original string.\n\n# For example:\n# letter_positions(\"abcdefg\") == [0, 1, 2, 3, 4, 5, 6]\n# letter_positions(\"programming\") == [0,", "\n# words_string(\"Hi, my name is John\") #=> [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n# words_string(\"One, two, three, four, five, six\") #=> [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n", "\nwords_string(\"Hi, my name is John\")\n\nwords_string(\"One, two, three, four, five, six\")\n\nwords_string(\"One, two, three, four, five, six, seven\")\n\nwords_string(\"One, two, three, four, five, six, seven, eight, nine, ten\")\n\n\n# +\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(\",\")\n\nwords_string(\"Hi, my name is John\")\n\nwords_string(\"One, two, three, four, five, six\")\n\nwords_string(\"One, two, three, four, five, six, seven\")\n\nwords_string(\"One, two, three, four, five, six, seven, eight, nine, ten\")\n\n\n# -\n\n# # 5. Pig Latin\n#\n# Pig Latin is a made-up children's language that's intended to be confusing. It obeys a few simple rules (below), but when it's spoken quickly it's really difficult for non-children (and non-native speakers) to understand.\n#\n# Rule 1: If a word begins with a consonant (a, e, i, o, or u), move it to the end of the word, and then add \"ay\" to"], ["\ndef is_prime(x):\n    \"\"\"This function takes a number x and returns True if x is a prime number \n    and False otherwise.\n\n    For example:\n    is_prime(13) = True\n    is_prime(3) = True\n    is_prime(7) = True\n    is_prime(17) = False\n    \"\"\"\n\ndef num_digits(x):\n    \"\"\"This function takes a number x and returns the number of digits in x.\n\n    For example:\n    num_digits(123) = 3\n    num_digits(1234) = 4\n    \"\"\"\n\ndef is_palindrome(x):\n    \"\"\"This function takes a number x and returns True if x is a palindrome\n    and False otherwise.\n\n    For example:\n    is_palindrome(123) = True\n    is_palindrome(321) = True\n    is_palindrome(1) = True\n    is_palindrome(1234) = False\n    \"\"\"\n\ndef is_armstrong(x):\n    \"\"\"This function takes a number x and returns True if x is an Armstrong\n    number and False otherwise.\n\n    For example:\n    is_armstrong(153) = True\n    is_armstrong(370) = True\n    is_armstrong(123) = False\n    \"\"\"\n\ndef is_square(x):\n    \"\"\"This function takes a number x and returns True if x is a square and\n    False otherwise.\n\n    For example:\n    is_square(16) = True\n    is_square(512) = False\n    \"\"\"\n\ndef is_triangle(a, b, c):\n    \"\"\"This function takes three numbers a, b, and c and returns True if\n    the three numbers form a triangle and False otherwise.\n\n    For example:\n    is_triangle(2, 1, 2) = True\n    is_triangle(3, 4", "\nchoose_num(12, 15) # => 14\nchoose_num(13, 12) # => -1\n```\n\n### 2.\n\nWrite a Python function that takes two parameters and returns the biggest\neven integer number that is in the range [x, y] inclusive. If there's no\nsuch number, then the function should return -1.\n\n```python\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\nchoose_num(12, 15) # => 14\nchoose_num(13, 12) # => -1\n```\n\n### 3.\n\nWrite a Python function that takes three parameters and returns the biggest\neven integer number that is in the range [x, y] inclusive. If there's no\nsuch number, then the function should return -1.\n\n```python\ndef choose_num(x, y, z):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15, 16) = 14\n    choose_num(13, 12, 11) = -1\n    \"\"\"\n\nchoose_num(12, 15, 16) # => 14\nchoose_num(13, 12, 1", "\ndef is_prime(n):\n    \"\"\"This function returns True if n is a prime number, and False if n is\n    not a prime number.\n\n    For example:\n    is_prime(11) = True\n    is_prime(12) = False\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"This function returns True if n is a palindrome, and False if n is\n    not a palindrome.\n\n    For example:\n    is_palindrome(12321) = True\n    is_palindrome(12345) = False\n    \"\"\"\n\ndef palindrome_index(n):\n    \"\"\"This function returns the index of the first character that is different\n    from its reverse. If there is no such index, then the function should return -1.\n\n    For example:\n    palindrome_index(12321) = 2\n    palindrome_index(12345) = -1\n    \"\"\"\n\ndef check_if_palindrome(n):\n    \"\"\"This function returns the index of the first character that is different\n    from its reverse, or -1 if the number is not a palindrome.\n\n    For example:\n    check_if_palindrome(12321) = 2\n    check_if_palindrome(12345) = -1\n    \"\"\"\n", "# Write your code here\n", "\nprint(\"choose_num(12, 15) =\", choose_num(12, 15))\nprint(\"choose_num(13, 12) =\", choose_num(13, 12))\n\n# 6. Write a function that takes three positive integers and returns the \n# greatest common divisor of the integers. The greatest common divisor of two \n# numbers is the largest number that both numbers divide evenly.\n\ndef greatest_common_divisor(x, y, z):\n    \"\"\"This function takes three positive integers x, y, and z and returns the \n    greatest common divisor of the three numbers. If there's no such number, \n    then the function should return -1.\n\n    For example:\n    greatest_common_divisor(10, 12, 20) = 4\n    greatest_common_divisor(10, 12, 30) = -1\n    \"\"\"\n\nprint(\"greatest_common_divisor(10, 12, 20) =\", greatest_common_divisor(10, 12, 20))\nprint(\"greatest_common_divisor(10, 12, 30) =\", greatest_common_divisor(10, 12, 30))\n\n# 7. Write a function that takes three positive integers and returns the \n# least common multiple of the integers. The least common multiple of two \n# numbers is the smallest number that both numbers multiply evenly.\n\ndef least_common_multiple(x, y, z):\n    \"\"\"This function takes three positive integers x, y, and z and returns the \n    least common multiple of the three numbers. If there's no such number, \n    then the function should return -1.\n\n    For example:\n    least_common_multiple(10, 12"], ["\ndef main():\n    \"\"\"Read the input, call your functions, and print the output\"\"\"\n    n, m = get_input()\n    if n > m:\n        print(-1)\n    else:\n        print(rounded_avg(n, m))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef smallest_multiple(n, m):\n    \"\"\"Given two positive integers n and m, your task is to find the smallest \n    integer not less than the product of the two integers.\n    Example:\n    smallest_multiple(3, 7) => 21\n    smallest_multiple(7, 3) => 21\n    smallest_multiple(1, 1) => 1\n    \"\"\"\n\ndef n_divisible(n):\n    \"\"\"Given a positive integer n, your task is to determine how many integers \n    from 1 to n are divisible by 7.\n    Example:\n    n_divisible(10) => 2\n    n_divisible(20) => 4\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Given a positive integer n, your task is to determine whether it is prime. \n    A prime number is a number that is only divisible by one and itself. \n    Example:\n    is_prime(13) => False\n    is_prime(12) => True\n    \"\"\"\n\ndef sum_primes(n):\n    \"\"\"Given a positive integer n, your task is to determine the sum of all \n    primes less than n.\n    Example:\n    sum_primes(10) => 17\n    sum_primes(100) => 1060\n    \"\"\"\n\ndef is_palindrome(s):\n    \"\"\"Given a string s, your task is to determine if the string is a palindrome.\n    A palindrome is a string that reads the same backward as forward. \n    Example:\n    is_palindrome('abba') => True\n    is_palindrome('kayak') => False\n    \"\"\"", "\ndef is_prime(n):\n    \"\"\"You are given a positive integer n, and your task is to determine if n is prime.\n    Return True if n is prime, and False otherwise.\n    A prime number is a number that is only divisible by 1 and itself.\n    Example:\n    is_prime(13) => True\n    is_prime(25) => False\n    \"\"\"\n\ndef is_power_of_two(n):\n    \"\"\"You are given a positive integer n, and your task is to determine if n is a power of two.\n    Return True if n is a power of two, and False otherwise.\n    A power of two is a number that is divisible by 2 and 1, but not by 4.\n    Example:\n    is_power_of_two(1024) => True\n    is_power_of_two(1) => True\n    is_power_of_two(2) => True\n    is_power_of_two(4) => False\n    \"\"\"\n\ndef square_digits(n):\n    \"\"\"You are given a positive integer n, and your task is to square every digit of the number.\n    Return the resulting number.\n    Example:\n    square_digits(9119) => 811181\n    \"\"\"\n\ndef sum_square_digits(n):\n    \"\"\"You are given a positive integer n, and your task is to calculate the square of each of the \n    digits in n. Then sum up the squares of each of the digits.\n    Return the result.\n    Example:\n    sum_square_digits(9119) => 1308481\n    \"\"\"\n\n", "\ndef count_vowels(word):\n    \"\"\"You are given a string word.\n    Return the number of vowels in the string.\n    Example:\n    count_vowels(\"apples\") => 3\n    count_vowels(\"bananas\") => 4\n    count_vowels(\"cheese\") => 0\n    \"\"\"\n\ndef count_consonants(word):\n    \"\"\"You are given a string word.\n    Return the number of consonants in the string.\n    Example:\n    count_consonants(\"apples\") => 1\n    count_consonants(\"bananas\") => 3\n    count_consonants(\"cheese\") => 4\n    \"\"\"\n\ndef first_non_repeating_character(word):\n    \"\"\"You are given a string word.\n    Return the first character that is not repeated anywhere in the string.\n    Return \"None\" if there is no non-repeating character.\n    Example:\n    first_non_repeating_character(\"apples\") => \"a\"\n    first_non_repeating_character(\"bananas\") => \"b\"\n    first_non_repeating_character(\"cheese\") => \"c\"\n    first_non_repeating_character(\"cheese\") => \"None\"\n    \"\"\"\n\ndef first_repeating_character(word):\n    \"\"\"You are given a string word.\n    Return the first character that is repeated anywhere in the string.\n    Return \"None\" if there is no repeating character.\n    Example:\n    first_repeating_character(\"apples\") => \"None\"\n    first_repeating_character(\"bananas\") => \"a\"\n    first_", "\ndef binary_search(lst, val):\n    \"\"\"Write a binary search function that takes in a sorted list and a value, and returns the\n    index of the first value that is greater than the value or -1 if the value is not found in the list.\n    Example:\n    binary_search([1, 2, 3, 4, 5], 3) => 2\n    binary_search([1, 2, 3, 4, 5], 10) => -1\n    binary_search([], 5) => -1\n    binary_search([1], 1) => 0\n    \"\"\"\n\ndef binary_search_recursive(lst, val, low, high):\n    \"\"\"Write a recursive binary search function that takes in a sorted list and a value, and returns the\n    index of the first value that is greater than the value or -1 if the value is not found in the list.\n    Example:\n    binary_search_recursive([1, 2, 3, 4, 5], 3) => 2\n    binary_search_recursive([1, 2, 3, 4, 5], 10) => -1\n    binary_search_recursive([], 5) => -1\n    binary_search_recursive([1], 1) => 0\n    \"\"\"\n\ndef is_palindrome(s):\n    \"\"\"Write a function that determines if a string is a palindrome.\n    A palindrome is a word or phrase that is spelled the same backward as forward, ignoring spaces,\n    punctuation, and capitalization.\n    Examples:\n    is_palindrome('radar') => True\n    is_palindrome('racecar')"], ["\ndef count_letters(text):\n    \"\"\"Given a string text. return a dictionary that maps each letter\n    to the number of times it appears in the string text.\n    \n    For example:\n    >>> count_letters(\"this is a string\")\n    {'t': 1, 'h': 1, 'i': 1, 's': 2, 'a': 1, 'r': 1, 'n': 1, 'g': 1, '': 1}\n    \"\"\"\n    # your code here\n\ndef is_permutation(a, b):\n    \"\"\"Given two strings a and b. return True if a is a permutation of b.\n    Return False otherwise.\n    \n    For example:\n    >>> is_permutation(\"abc\", \"bca\")\n    True\n    >>> is_permutation(\"abc\", \"bc\")\n    False\n    \"\"\"\n    # your code here\n\ndef count_occurrences(text):\n    \"\"\"Given a string text. return a dictionary that maps each letter\n    to the number of times it appears in the string text.\n\n    Note: The letter in the dictionary is the capitalized version of the\n    letter in the text.\n\n    For example:\n    >>> count_occurrences(\"this is a string\")\n    {'T': 1, 'H': 1, 'I': 1, 'S': 2, 'A': 1, 'R': 1, 'N': 1, 'G': 1, '': 1}\n    \"\"\"\n    # your code here\n\ndef find_max_sublist(numbers):\n    \"\"\"Given a list of integers numbers. Return a sublist that contains\n    the largest numbers.\n    \n    For example:\n    >>> find_max_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12", "", "\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "\ndef get_max_path_sum(root):\n    \"\"\"Given a root node of a tree. Find the maximum sum path in the tree.\n    The maximum sum path can start from any node in the tree.\n    \n    For example:\n    >>> root = create_tree(5)\n    >>> insert(root, 6)\n    >>> insert(root, 1)\n    >>> insert(root, 2)\n    >>> insert(root, 4)\n    >>> insert(root, 5)\n    >>> insert(root, 7)\n    >>> get_max_path_sum(root)\n    19\n    \"\"\"\n\ndef get_max_path_sum_helper(root):\n    \"\"\"\n    Helper function for get_max_path_sum.\n    \"\"\"\n\ndef get_max_path_sum(root):\n    \"\"\"Given a root node of a tree. Find the maximum sum path in the tree.\n    The maximum sum path can start from any node in the tree.\n    \n    For example:\n    >>> root = create_tree(5)\n    >>> insert(root, 6)\n    >>> insert(root, 1)\n    >>> insert(root, 2)\n    >>> insert(root, 4)\n    >>> insert(root, 5)\n    >>> insert(root, 7)\n    >>> get_max_path_sum(root)\n    19\n    \"\"\"\n\ndef get_max_path_sum_helper(root):\n    \"\"\"\n    Helper function for get_max_path_sum.\n    \"\"\"\n\ndef get_max_path_sum_helper(root):\n    \"\"\"\n    Helper function for get_max_path_sum.\n    \"\"\"\n\ndef get_max_path_sum_helper(root):\n    \"\"\"\n    Helper function for get_max_path_sum.\n    \"\"\"\n\ndef get_max_path_sum(root):\n   ", "\n# Write a function that takes a positive integer n and returns a list of all\n# positive integers less than or equal to n.\n#\n# Note: Returned list should be sorted in increasing order.\n#\n# For example:\n# >>> positive_integers(5)\n# [1, 2, 3, 4, 5]\n# >>> positive_integers(10)\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\ndef positive_integers(n):\n    \"\"\"Given a positive integer n. return a sorted list of all positive\n    integers less than or equal to n.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> positive_integers(5)\n    [1, 2, 3, 4, 5]\n    >>> positive_integers(10)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \"\"\"\n\n# Write a function that takes two positive integers n and m and returns the\n# maximum of n and m.\n#\n# Note: Returned list should be sorted in increasing order.\n#\n# For example:\n# >>> maximum_of_two(1, 3)\n# 3\n# >>> maximum_of_two(1, 5)\n# 5\n\ndef maximum_of_two(n, m):\n    \"\"\"Given two positive integers n and m. return the maximum of n and m.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> maximum_of_two(1, 3)\n    3\n    >>> maximum_of_two(1, 5)\n    "], ["#     Solution 1: Use python built-in functions\n    return sorted(arr, reverse=True)\n\nprint(by_length([1, -1, 55]))\nprint(by_length([]))\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))\n", "\ndef test_by_length():\n    \"\"\"\n    Test for by_length function\n    \"\"\"\n    assert by_length([1, -1, 55]) == [\"One\"]\n    assert by_length([]) == []\n    assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n", "\n#   TODO: Write your code here\n    a = []\n    for i in range(len(arr)):\n        if 1<=arr[i]<=9:\n            a.append(str(arr[i]))\n    a.sort(reverse=True)\n    return a\n\n#   TODO: Uncomment the following lines when you're ready to try it out\n#   print(by_length([]))\n#   print(by_length([2, 1, 1, 4, 5, 8, 2, 3]))\n#   print(by_length([1, -1 , 55]))\n", "", "\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3])) # ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\nprint(by_length([])) # []\nprint(by_length([1, -1, 55])) # ['One']\n\n\n# 2. \n# Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting array, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# arr = [2, 1, 1, 4, 5, 8, 2, 3]\n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n# -> reverse arr -> [8, 5"], ["", "\nprint(f(5))\n", "\nf(5)\n```\n\n```python\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i * i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\nf(5)\n```\n\n### 5. Implement the function `f` that takes a dictionary as a parameter, and returns a list of all keys in the dictionary.\n\n```python\ndef f(d):\n    \"\"\" Implement the function f that takes a dictionary as a parameter,\n    and returns a list of all keys in the dictionary.\n    Example:\n    f({\"a\": 1, \"b\": 2, \"c\": 3}) == [\"a\", \"b\", \"c\"]\n    \"\"\"\n\nf({\"a\": 1, \"b\": 2, \"c\": 3})\n```\n\n```python\ndef f(d):\n    \"\"\" Implement the function f that takes a dictionary as a parameter,\n    and returns a list of all keys in the dictionary.\n    Example:\n    f({\"a\": 1, \"b\": 2, \"c\": 3}) == [\"a\", \"b", "\nprint(f(5))", "\n#     if n < 1:\n#         return []\n#     elif n == 1:\n#         return [1]\n\n#     else:\n#         result = [0] * n\n#         result[0] = 1\n#         result[1] = 2\n#         for i in range(2, n):\n#             if i % 2 == 0:\n#                 result[i] = result[i-2] * i\n#             else:\n#                 result[i] = result[i-1] + result[i-2]\n\n#     return result"], ["", "", "", "", ""], ["\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\ndef is_prime(num):\n    \"\"\"\n    Write a function is_prime which checks if a number is prime.\n    >>> is_prime(1) == True\n    >>> is_prime(2) == True\n    >>> is_prime(3) == True\n    >>> is_prime(4) == False\n    >>> is_prime(5) == True\n    >>> is_prime(6) == False\n    \"\"\"\n\ndef is_palindrome(word):\n    \"\"\"\n    Write a function is_palindrome which checks if a word is palindrome.\n    >>> is_palindrome(\"hello\") == True\n    >>> is_palindrome(\"civic\") == True\n    >>> is_palindrome(\"radar\") == True\n    >>> is_palindrome(\"civil\") == False\n    \"\"\"\n\ndef is_palindrome_iterative(word):\n    \"\"\"\n    Write a function is_palindrome_iterative which checks if a word is palindrome\n    using a recursive iteration.\n    >>> is_palindrome_iterative(\"hello\") == True\n    >>> is_palindrome_iterative(\"civic\") == True\n    >>> is_palindrome_iterative(\"radar\") == True\n    >>> is_palindrome_iterative(\"civil\") == False\n    \"\"\"\n\ndef fibonacci(n):\n    \"\"\"\n    Write a function fibonacci which returns the n-th number of the Fibonacci\n    sequence.\n    >>> fibonacci(0) == 0\n    >>> fibonacci(1) == 1\n    >>> fibonacci(2) == 1\n    >>> fibonacci(3) == 2\n    >>> fibonacci(4) == 3\n    \"\"\"\n\ndef fizzbuzz(n):\n    \"\"\"\n    Write a function fizzbuzz which returns the string 'fizz' if the number is\n    divisible by 3, 'buzz", "\ndef count_vowels(s):\n    \"\"\"\n    Given a string, write a function that returns the number of vowels contained\n    in it.\n\n    >>> count_vowels('this is a test')\n    3\n    >>> count_vowels('this is another test')\n    4\n    \"\"\"\n\ndef find_longest_substring(s):\n    \"\"\"\n    Given a string, write a function that returns the longest substring that\n    contains only unique characters.\n    >>> find_longest_substring('this is a test')\n    'this is a '\n    >>> find_longest_substring('this is another test')\n    'this is ano'\n    \"\"\"\n\ndef reverse_words(s):\n    \"\"\"\n    Given a string, write a function that returns a new string that is the\n    reverse of the order of the characters in the original string.\n    >>> reverse_words('this is a test')\n    'test a is this'\n    >>> reverse_words('this is another test')\n    'test another is this'\n    \"\"\"\n\ndef count_vowels_and_consonants(s):\n    \"\"\"\n    Given a string, write a function that returns a tuple containing the number\n    of vowels and consonants in the string.\n    >>> count_vowels_and_consonants('this is a test')\n    (3, 4)\n    >>> count_vowels_and_consonants('this is another test')\n    (4, 7)\n    \"\"\"\n\ndef longest_palindrome(s):\n    \"\"\"\n    Given a string, write a function that returns the longest palindrome\n    substring in it.\n    >>> longest_palindrome('this is a test')\n    's a t'\n    >>> longest_palindrome('this is another test')\n    'anoth'\n    \"\"\"", "\ndef sum_digits(num):\n    \"\"\"\n    Write a function sum_digits which takes an integer as input and returns the\n    sum of its digits.\n    >>> sum_digits(1) == 1\n    >>> sum_digits(10) == 1\n    >>> sum_digits(123) == 6\n    >>> sum_digits(-123) == -6\n    \"\"\"\n\ndef max_sum_path(grid, row=0, col=0):\n    \"\"\"\n    Write a function max_sum_path which takes a 2D array of integers and\n    returns the maximum sum of a path through the array.\n    >>> max_sum_path([]) == 0\n    >>> max_sum_path([[1], [1]]) == 1\n    >>> max_sum_path([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 23\n    >>> max_sum_path([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0, 0) == 23\n    \"\"\"\n\ndef count_matches(arr1, arr2):\n    \"\"\"\n    Write a function count_matches which takes two arrays as input and returns\n    the number of elements that appear in both arrays.\n    >>> count_matches([], []) == 0\n    >>> count_matches([1, 2, 3], [1, 2, 3]) == 3\n    >>> count_matches([1, 2, 3], [1, 2, 3, 4, 5]) == 3\n    \"\"\"\n\ndef is_palindrome(s):\n    \"\"\"\n    Write a function is_palindrome which takes a string as input and returns a", ""], ["", "", "", "# Your code goes here\ndef move_one_ball(arr):\n    # check if the array is empty or not\n    if len(arr) == 0:\n        return True\n    # check if the list is sorted in non-decreasing order\n    if arr[0] >= arr[-1]:\n        return True\n    # store the last element\n    last = arr.pop()\n    # check if the array is now sorted\n    if arr[0] >= arr[-1]:\n        return True\n    else:\n        # append the last element to the front\n        arr.append(last)\n        # check if the array is sorted\n        if arr[0] >= arr[-1]:\n            return True\n        else:\n            return False\n\n\n# -\n\n# # Test Cases\n\n# +\n# Test-1\narr = [3, 4, 5, 1, 2]\n\nif move_one_ball(arr) == True:\n    print(\"Test-1 passed\")\nelse:\n    print(\"", ""], ["\ndef main():\n    \"\"\"Run sample exchange functions. Do not import.\n    \"\"\"\n    print(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\n    print(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\n    print(exchange([1, 2, 3, 4], [1, 2, 3, 5]))\n\nif __name__ == \"__main__\":\n    main()\n", "", "\ndef reverse(lst):\n    \"\"\"Write a function that reverses a list of numbers.\"\"\"\n\ndef insert(lst, index, element):\n    \"\"\"Write a function that inserts an element into a list of numbers.\"\"\"\n\ndef delete(lst, index):\n    \"\"\"Write a function that deletes an element from a list of numbers.\"\"\"\n\ndef split(lst, index):\n    \"\"\"Write a function that splits a list of numbers into two lists.\n    The first list should contain all the elements up to the index,\n    and the second list should contain all the elements from the index on.\n    The first list should contain the same elements in the same order as the original list.\n    The second list should contain the same elements in the same order as the original list.\n    \"\"\"\n\ndef merge(lst1, lst2):\n    \"\"\"Write a function that takes two sorted lists of numbers, and returns\n    the sorted list containing all the elements of lst1 and lst2.\"\"\"\n\ndef merge_sort(lst):\n    \"\"\"Write a function that takes a list of numbers, and returns\n    a sorted list containing all the elements of lst.\"\"\"\n\ndef bubble_sort(lst):\n    \"\"\"Write a function that takes a list of numbers, and returns\n    a sorted list containing all the elements of lst.\"\"\"\n\ndef selection_sort(lst):\n    \"\"\"Write a function that takes a list of numbers, and returns\n    a sorted list containing all the elements of lst.\"\"\"\n\ndef insertion_sort(lst):\n    \"\"\"Write a function", "\ndef exchange_test():\n    assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n\ndef count_odd_numbers(lst):\n    \"\"\"In this problem, you will implement a function that counts the number of odd numbers\n    in a given list.\n    For example:\n    count_odd_numbers([1, 2, 3, 4, 5, 6]) => 3\n    count_odd_numbers([1, 3, 5, 7]) => 3\n    \"\"\"\n\ndef count_odd_numbers_test():\n    assert count_odd_numbers([1, 2, 3, 4, 5, 6]) == 3\n    assert count_odd_numbers([1, 3, 5, 7]) == 3\n\ndef max_even_number(lst):\n    \"\"\"In this problem, you will implement a function that returns the maximum even number\n    in a given list.\n    For example:\n    max_even_number([1, 2, 3, 4, 5, 6]) => 6\n    max_even_number([1, 3, 5, 7]) => 7\n    \"\"\"\n\ndef max_even_number_test():\n   ", "\ndef merge_sort(arr):\n    \"\"\"\n    Given a list of integers, merge sort will sort the list in ascending order.\n    This is an in-place sorting algorithm, meaning that the original list\n    is sorted as a result of the algorithm.\n    For example:\n    merge_sort([3, 2, 5, 1, 6, 4]) => [1, 2, 3, 4, 5, 6]\n    \"\"\"\n\ndef quick_sort(arr):\n    \"\"\"\n    Given a list of integers, quick sort will sort the list in ascending order.\n    This is an in-place sorting algorithm, meaning that the original list\n    is sorted as a result of the algorithm.\n    For example:\n    quick_sort([3, 2, 5, 1, 6, 4]) => [1, 2, 3, 4, 5, 6]\n    \"\"\"\n\ndef insertion_sort(arr):\n    \"\"\"\n    Given a list of integers, insertion sort will sort the list in ascending order.\n    This is an in-place sorting algorithm, meaning that the original list\n    is sorted as a result of the algorithm.\n    For example:\n    insertion_sort([3, 2, 5, 1, 6, 4]) => [1, 2, 3, 4, 5, 6]\n    \"\"\"\n\ndef heap_sort(arr):\n    \"\"\"\n    Given a list of integers, heap"], ["\ndef test_histogram():\n    assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    assert histogram('a b b a') == {'a': 2, 'b': 2}\n    assert histogram('a b c a b') == {'a': 2, 'b': 2}\n    assert histogram('b b b b a') == {'b': 4}\n    assert histogram('') == {}\n", "\thistogram = {}\n\tfor word in test.split():\n\t\tfor letter in word.lower():\n\t\t\tif letter not in histogram:\n\t\t\t\thistogram[letter] = 1\n\t\t\telse:\n\t\t\t\thistogram[letter] += 1\n\treturn histogram\n\nprint(histogram('a b c'))\n# {'a': 1, 'b': 1, 'c': 1}\nprint(histogram('a b b a'))\n# {'a': 2, 'b': 2}\nprint(histogram('a b c a b'))\n# {'a': 2, 'b': 2}\nprint(histogram('b b b b a'))\n# {'b': 4}\nprint(histogram(''))\n# {}\n", "\ndef histogram2(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\ndef histogram3(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\ndef histogram4(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': ", "\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\ndef histogram_with_tally(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram_with_tally('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram_with_tally('a b b a') == {'a': 2, 'b': 2}\n    histogram_with_tally('a b c a b') == {'a': 2, 'b': 2}\n    histogram_with_tally('b b b b a') == {'b': 4}\n    histogram_with_tally('') == {}\n\n    \"\"\"\n"], ["\ndef reverse_string(string):\n    \"\"\"Task\n    We are given a string s, you have to return a string that contains all the characters that are not in s.\n    Example\n    For s = \"abcdefg\", the result should be \"fgdcba\"\n    For s = \"abccba\", the result should be \"acba\"\n    For s = \"aa\", the result should be \"aa\"\n    \"\"\"\n\ndef add_binary(a,b):\n    \"\"\"Task\n    Given two binary strings a and b, return their sum as a binary string.\n    Example\n    For a = \"1010\" and b = \"1011\", the output should be addBinary(a,b) = \"10101\".\n    \"\"\"\n\ndef array_diff(a,b):\n    \"\"\"Task\n    Given two arrays a and b, return their difference, i.e. a - b.\n    Example\n    For a = [1, 2, 3] and b = [2, 3, 4], the output should be arrayDiff(a, b) = [1, 4].\n    \"\"\"\n\ndef array_max_consecutive_sum(a):\n    \"\"\"Task\n    We have an array of integers.\n    For each index, we want to know the maximum sum of elements starting from and including that index.\n    Example\n    For a = [1, 2, 3, 4], the output should be arrayMaxConsecutiveSum(a) = [1, 3, 6, 10].\n    \"\"\"\n\ndef array_replace(a):\n    \"\"\"Task\n    Given an array of integers", "\ndef palindrome_permutation(str):\n    \"\"\"Task\n    Given a string, write a function to check if it is a permutation of a palindrome. A palindrome is a word or phrase\n    that is the same forwards and backwards. A permutation is a rearrangement of letters. The palindrome does not need to\n    be limited to just dictionary words.\n    The input string can be assumed to contain only lowercase letters, and the lengths of both strings are in range [1, 10000].\n    Example\n    Input: \"tact coa\"\n    Output: True\n    \"\"\"\n\ndef valid_palindrome_permutation(str):\n    \"\"\"Task\n    Given a string, write a function to check if it is a permutation of a palindrome. A palindrome is a word or phrase that\n    is the same forwards and backwards. A permutation is a rearrangement of letters. The palindrome does not need to be\n    limited to just dictionary words.\n    The input string can be assumed to contain only lowercase letters, and the lengths of both strings are in range [1, 10000].\n    Example\n    Input: \"tact coa\"\n    Output: True\n    \"\"\"\n\ndef two_sum(numbers, target):\n    \"\"\"Task\n    Given an array of integers and a target sum, find two numbers such that they add up to the target.\n    The function twoSum should return indices of the two numbers such that they add up to the target,\n    where index1 must be less than index2.\n    Please note that your returned answers (both index1 and index2) are not zero-based.\n    You may assume that each input would have exactly one solution.", "\n# 12. Write a function that takes a string as an input and returns the character after every letter \"r\", except the first.\n# If the first letter is 'r', return an empty string \"\".\n# If the string does not start with 'r', return the string unchanged.\n# Example\n# For inputString = \"racer\" the output should be\n#   removeFirstAndLast(\"racer\") = \"cer\";\n# For inputString = \"coding\" the output should be\n#   removeFirstAndLast(\"coding\") = \"oding\";\n# For inputString = \"radar\" the output should be\n#   removeFirstAndLast(\"radar\") = \"ar\";\n# For inputString = \"codewarrior\" the output should be\n#   removeFirstAndLast(\"codewarrior\") = \"dewarrior\";\ndef remove_first_last(s):\n    \"\"\"Task\n    We are given a string s, we have to remove the first and last character of it.\n    You should return the result.\n    Example\n    For s = \"racer\", the output should be\n    removeFirstAndLast(s) = \"cer\";\n    For s = \"coding\", the output should be\n    removeFirstAndLast(s) = \"oding\";\n    For s = \"radar\", the output should be\n    removeFirstAndLast(s) = \"ar\";\n    For s = \"codewarrior\", the output should be\n    removeFirstAndLast(s) = \"dewarrior\";\n    \"\"\"\n\n# 13. Write a function that removes the first and last character of a string.\n#", "\ndef is_divisible(n,m):\n    \"\"\"Task\n    We are given two numbers n and m. You have to check if n is divisible by m.\n    Return true if n is divisible by m, otherwise return false.\n    If m is 0, return false.\n    Example\n    For n = 12, m = 4, the output should be\n    isDivisible(n,m) = true.\n    For n = 13, m = 4, the output should be\n    isDivisible(n,m) = false.\n    \"\"\"\n\ndef check_brackets(s):\n    \"\"\"Task\n    We are given a string s. Your task is to check if the brackets in the string are correctly matched.\n    Input/Output\n    [input] string s\n    A string consisting of the following characters only: (, ), {, }, [, ], <, >, |, :, ?.\n    Guaranteed constraints: 1 \u2264 s.length \u2264 1000.\n    [output] a boolean value\n    true if the brackets are correctly matched, false otherwise.\n    Example\n    For s = \"{[]()[]}\", the output should be\n    checkBrackets(s) = true;\n    For s = \"[{()}]\", the output should be\n    checkBrackets(s) = false.\n    \"\"\"\n\ndef check_brackets_recursive(s):\n    \"\"\"Task\n    We are given a string s. Your task is to check if the brackets in the string are correctly matched.\n    Input/Output\n    [input] string s\n    A string consisting of the following characters only: (, ), {, }, [, ], <,", "\ndef get_middle(s):\n    \"\"\"Task\n    We have a string S, and we want to partition the string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.\n\n    Example\n    For S = 'ababcbacadefegde', the output should be\n    get_middle(S) = [9, 3, 3].\n\n    There are 9 letters in the string, so we can split it into 3 parts of lengths 9, 3, and 3.\n    \"\"\"\n\ndef first_non_repeating_letter(s):\n    \"\"\"Task\n    We have a string s, and we want to implement a method that can take two arguments, a letter and a string. The method should return the index of the first appearance of the letter in the string. If the letter is not found in the string, return -1.\n\n    Example\n    For s = \"abracadabra\", letter = \"a\", the output should be\n    first_non_repeating_letter(s, letter) = 0;\n\n    For s = \"abracadabra\", letter = \"b\", the output should be\n    first_non_repeating_letter(s, letter) = 1.\n\n    \"\"\"\n\ndef is_digit(s):\n    \"\"\"Task\n    Given a string, return whether or not it is a digit.\n\n    Example\n    For s = \"123\", the output should be is_digit(s) = true;\n\n    For s = \"a123\", the output should be is_digit(s) = false;\n\n    For"], ["\ndef sum_digits(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits,\n    return a list. Each element i of the output should be \"the sum of the digits\n    in the string i of the input.\" where all the i's should be replaced by the\n    sum of the digits in the i'th string of the input.\n\n    >>> sum_digits(['1234567'])\n    [\"the sum of the digits in the str4ng 4 of the 4nput: 16\"]\n    >>> sum_digits(['3',\"11111111\"])\n    [\"the sum of the digits in the str1ng 1 of the 1nput: 18\",\n     \"the sum of the digits in the str8ng 8 of the 8nput: 14\"]\n    \"\"\"\n\ndef sum_even_digits(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits,\n    return a list. Each element i of the output should be \"the sum of the\n    even digits in the string i of the input.\" where all the i's should be\n    replaced by the sum of the even digits in the i'th string of the input.\n\n    >>> sum_even_digits(['1234567'])\n    [\"the sum of the even digits in the str4ng 4 of the 4nput: 12\"]\n    >>> sum_even_digits(['3',\"11111111\"])\n    [\"the sum", "\ndef odd_count_2(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count_2(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count_2(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\ndef test_odd_count():\n    \"\"\"Tests for odd_count\"\"\"\n    assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\ndef test_odd_count_2():\n    \"\"\"Tests for odd_count_2\"\"\"\n    assert odd_count_2(['1", "\ndef longest_palindrome(s):\n    \"\"\"Given a string, return the longest palindrome that can be made from\n    a substring of it.\n\n    >>> longest_palindrome('cabaabac')\n    'cabaabac'\n    >>> longest_palindrome('abba')\n    'abba'\n    >>> longest_palindrome('aaaaa')\n    'aaaaa'\n    \"\"\"\n    # Your code here\n\ndef rotate(lst):\n    \"\"\"Given a list of numbers, return a list where the first element has been\n    removed. All the other elements should have been shifted one step.\n\n    >>> rotate([1,2,3,4,5])\n    [2,3,4,5]\n    >>> rotate([1,2,3,4])\n    [2,3,4,1]\n    >>> rotate([1,2,3])\n    [2,3,1]\n    \"\"\"\n    # Your code here\n\ndef rotate_left(lst, k):\n    \"\"\"Given a list of numbers, and a number k, rotate the list k steps to the\n    left. Assume that the list is not empty.\n\n    >>> rotate_left([1,2,3,4,5], 2)\n    [4,5,1,2,3]\n    >>> rotate_left([1,2,3,4,5], 3)\n    [2,3,4,5,1]\n    \"\"\"\n    # Your code here\n\ndef rotate_right(lst, k):\n    \"\"\"Given a list of numbers, and a number k, rotate", "\ndef count_words(word_list):\n    \"\"\"Given a list of words, return a dictionary of word counts.\n\n    >>> count_words(['I','think','I','love','you'])\n    {'I': 1, 'think': 1, 'love': 1, 'you': 1}\n    \"\"\"\n\ndef sort_by_letter(word_list):\n    \"\"\"Given a list of words, return a list, sorted by the first letter of each word.\n\n    >>> sort_by_letter(['apple', 'bear', 'banana'])\n    ['bear', 'apple', 'banana']\n    \"\"\"\n\ndef get_first_word(word_list):\n    \"\"\"Given a list of words, return the first word.\n\n    >>> get_first_word(['I', 'love', 'you'])\n    'I'\n    \"\"\"\n\ndef get_last_word(word_list):\n    \"\"\"Given a list of words, return the last word.\n\n    >>> get_last_word(['I', 'love', 'you'])\n    'you'\n    \"\"\"\n\ndef get_first_n_words(word_list, n):\n    \"\"\"Given a list of words, return the first n words.\n\n    >>> get_first_n_words(['I', 'love', 'you'], 3)\n    ['I', 'love', 'you']\n    \"\"\"\n\ndef get_first_n_words_without_stopwords(word_list, n):\n    \"\"\"Given a list of words, return the first n words without stop words.\n\n   ", "\ndef list_to_str(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a string.\n    Each element i of the output should be the string i of the input.\n\n    >>> list_to_str(['3', '11111111'])\n    '311111111'\n    \"\"\"\n\ndef str_to_list(str):\n    \"\"\"Given a string, where each character is a digit, return a list.\n    Each element i of the output should be the digit i of the input.\n\n    >>> str_to_list('311111111')\n    ['3', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']\n    \"\"\"\n\ndef digit_count(str):\n    \"\"\"Given a string, where each character is a digit, return a list.\n    Each element i of the output should be the number of times that digit i appears in the input.\n\n    >>> digit_count('311111111')\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"], ["", "\ndef maxSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySum([-1, -2, -3]) == -1\n    \"\"\"\n\ndef maxSubArraySumWithKadane(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums using the Kadane's algorithm.\n    Example\n    maxSubArraySumWithKadane([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySumWithKadane([-1, -2, -3]) == -1\n    \"\"\"\n\ndef minSubArraySumWithKadane(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums using the Kadane's algorithm.\n    Example\n    minSubArraySumWithKadane([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySumWithKadane([-1, -2, -3]) == -6\n    \"\"\"\n\ndef maxSubArraySumWithDP(nums):\n    \"\"\"\n    Given an array of integers nums, find the maximum sum of any non-empty sub-array\n    of nums using dynamic programming.\n    Example\n    maxSubArraySumWithDP([2, 3, 4, 1, 2, 4]) == 12\n    maxSubArraySumWithDP([-1, -2, -3]) == -1\n    \"\"\"\n\ndef minSubArraySumWithDP(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums using dynamic programming.\n    Example\n    minSubArraySum", "", "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    sums = []\n    sums.append(nums[0])\n    for i in range(1, len(nums)):\n        sums.append(sums[-1] + nums[i])\n    min_sum = sums[0]\n    for i in range(1, len(sums)):\n        if sums[i] - sums[i - 1] < min_sum:\n            min_sum = sums[i] - sums[i - 1]\n    return min_sum\n\nif __name__ == '__main__':\n    print(minSubArraySum([2, 3, 4, 1, 2, 4]))\n    print(minSubArraySum([-1, -2, -3]))\n    print(minSubArraySum([-1, -2, -3, -4, -5]))\n    print(minSubArraySum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))", ""], ["\ndef max_fill_dp(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1", "", "", "\ndef max_fill_v2(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,", "\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1"], ["", "", "", "", ""], ["\ndef select_words_1(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    s = s.lower()\n    words = []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            words.append(s[0:i])\n            s = s[i+1:]\n    words.append(s)\n    words_list = []\n    for word in words:\n        if len(word) == n:\n            words_list.append(word)\n    return words_list\n\ndef select_words_2(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain", "#     if not s or n < 1:\n#         return []\n#     chars = []\n#     for i in range(len(s)):\n#         if s[i].isalpha():\n#             chars.append(s[i])\n#     for i in range(len(chars)):\n#         for j in range(i + 1, len(chars)):\n#             if abs(ord(chars[i]) - ord(chars[j])) == 1:\n#                 chars[i] += chars[j]\n#                 chars[j] = \" \"\n#     words = chars.split()\n#     return [word for word in words if len(word) == n]\n\n    if not s or n < 1:\n        return []\n    words = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            words.append(s[i])\n        else:\n            words.append(\" \")\n    words = \"\".join(words)\n    words = words.split()\n    return [word for word in words if len(word) == n]\n\ndef find_words(s):\n    \"\"\"Given a string s, you have been tasked to return the number of words in s \n    that start with the letter 'a' and end with the letter 'z' or the letter 'x'.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    find_words(\"Mary had a little lamb\") ==> ", "\nif __name__ == '__main__':\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))", "# Code goes here\n\n# Test Cases\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))\n\n# +\n# Solution\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = []\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            consonants = 0\n            while i < len(s):\n                if s[i].is", "\ndef select_words_2(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    consonant_list = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    word_list = []\n    for word in s.split():\n        if len(word) < n or word[n] not in consonant_list:\n            word_list.append(word)\n    return word_list\n\ndef select_words_3(s, n):\n    \"\"\"Given a string s and"], ["\ndef get_word_from_url(url):\n    \"\"\"You are given a URL. Your task is to return the last word in the URL.\n    \"\"\"\n    pass\n\ndef find_longest_consonant(word):\n    \"\"\"You are given a word. Your task is to return the longest consonant in the word.\n\n    Note: consonant is a letter which has the same sound as the next consonant in the alphabet,\n    but is not a vowel.\n    \"\"\"\n\ndef find_two_odd_numbers(n):\n    \"\"\"You are given a positive integer n. Your task is to find two odd numbers, that sum up \n    to n. You may assume that n is greater than 0 and n is a multiple of 4.\n    \"\"\"\n    pass\n\ndef find_palindromic_substring(s):\n    \"\"\"You are given a string s. Your task is to find the longest palindromic substring in s.\n\n    A palindromic string is a string which reads the same forwards and backwards.\n\n    Example:\n    find_palindromic_substring(\"abcba\") ==> \"bcb\"\n    find_palindromic_substring(\"abc\") ==> \"abc\"\n    \"\"\"\n\ndef find_longest_substring_with_repeating_characters(s):\n    \"\"\"You are given a string s. Your task is to find the longest substring in s, which has\n    repeating characters.\n    \"\"\"\n\ndef is_integer_palindrome(n):\n    \"\"\"You are given a positive integer n. Your task is to check if the given integer is a palindrome\n    or not.\n\n    Note: a palindrome is a word, number or other sequence which", "\ndef get_closest_vowel_2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel_2(\"yogurt\") ==> \"u\"\n    get_closest_vowel_2(\"FULL\") ==> \"U\"\n    get_closest_vowel_2(\"quick\") ==> \"\"\n    get_closest_vowel_2(\"ab\") ==> \"\"\n    \"\"\"\n\ndef get_closest_vowel_3(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel_3(\"yogurt\") ==> \"u\"\n    get_closest_vowel_3(\"FULL\") ==> \"U\"\n    get_closest_vowel_3(\"quick\") ==> \"\"\n    get_closest_vowel_3(\"ab\") ==> \"\"\n    \"\"\"\n\ndef get_closest_vowel_4(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side", "\ndef get_vowels(word):\n    \"\"\"You are given a word. Your task is to find the count of the vowels in the word.\n    \n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_vowels(\"yogurt\") ==> 3\n    get_vowels(\"FULL\") ==> 3\n    get_vowels(\"quick\") ==> 1\n    get_vowels(\"ab\") ==> 0\n    \"\"\"\n\ndef get_vowels_between_consonants(word):\n    \"\"\"You are given a word. Your task is to find the count of the vowels in the word.\n    \n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_vowels_between_consonants(\"yogurt\") ==> 3\n    get_vowels_between_consonants(\"FULL\") ==> 3\n    get_vowels_between_consonants(\"quick\") ==> 2\n    get_vowels_between_consonants(\"ab\") ==> 0\n    \"\"\"", "\ndef find_longest_substring(s):\n    \"\"\"Given a string, find the longest substring that contains at most two \n    different characters.\n    \n    Example:\n    find_longest_substring(\"abccba\") ==> \"bccba\"\n    find_longest_substring(\"abccdd\") ==> \"abccdd\"\n    find_longest_substring(\"abbccd\") ==> \"bbccd\"\n    find_longest_substring(\"abbbcc\") ==> \"abbbcc\"\n    \"\"\"\n\ndef find_longest_substring_two_pointers(s):\n    \"\"\"Given a string, find the longest substring that contains at most two \n    different characters.\n    \n    Example:\n    find_longest_substring(\"abccba\") ==> \"bccba\"\n    find_longest_substring(\"abccdd\") ==> \"abccdd\"\n    find_longest_substring(\"abbccd\") ==> \"bbccd\"\n    find_longest_substring(\"abbbcc\") ==> \"abbbcc\"\n    \"\"\"\n\ndef find_longest_substring_dp(s):\n    \"\"\"Given a string, find the longest substring that contains at most two \n    different characters.\n    \n    Example:\n    find_longest_substring(\"abccba\") ==> \"bccba\"\n    find_longest_substring(\"abccdd\") ==> \"abccdd\"\n    find_longest_substring(\"abbccd\") ==> \"bbccd\"\n    find_longest_substring(\"abbbcc\") ==> \"abbbcc\"\n    \"\"\"\n\ndef longest_palindromic_substring(s):\n    \"\"\"Given a string, find the longest palindromic substring in it.\n\n    Example:\n    longest_palindromic_substring(\"abccba\") ==> \"abccba\"\n    longest_", "\ndef is_valid_email(email):\n    \"\"\"You are given an email. Your task is to determine if the email is valid.\n\n    An email is valid if it has the following properties:\n        - It is a string, which is between 6 and 20 characters long.\n        - It starts with a letter, followed by a dot and another letter.\n        - It ends with a dot and a number or letter.\n        - It contains only lowercase letters, digits, underscores, hyphens and dots.\n        - It contains at most one dot, and it does not start or end with a dot.\n\n    Example:\n    is_valid_email(\"<EMAIL>\") ==> True\n    is_valid_email(\"nope\") ==> False\n    is_valid_email(\"email@\") ==> False\n    is_valid_email(\"email@email\") ==> False\n    is_valid_email(\"<EMAIL>\") ==> False\n    is_valid_email(\"<EMAIL>\") ==> True\n    \"\"\"\n\ndef find_max_product(arr):\n    \"\"\"You are given an array of integers. Your task is to find the maximum product that can be made by multiplying any three adjacent elements.\n\n    Example:\n    find_max_product([1, 2, 3, 4]) ==> 24\n    find_max_product([3, 2, 1]) ==> 6\n    find_max_product([3, 2, 1, 4, 6]) ==> 36\n    \"\"\"\n\ndef check_permutation(a, b):\n    \"\"\"You are given two strings, a and b. Your task is to check whether a is a permutation of b.\n\n    Example:\n    check_permutation(\"1234"], ["\ndef match_parens_v2(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens_v2(['()(', ')']) == 'Yes'\n    match_parens_v2([')', ')']) == 'No'\n    '''\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert match_parens(['()(', ')']) == 'Yes', \"One\"\n    assert match_parens([')', ')']) == 'No', \"Two\"\n    assert match_parens(['(()', '()']) == 'Yes', \"Three\"\n    assert match_parens(['(()(', ')())']) == 'Yes', \"Four\"\n    assert match_parens(['(()))', ')()']) == 'Yes', \"Five\"\n    print(\"All tests passed\")", "", "\ndef match_brackets(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    brackets '[' or close brackets ']' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all brackets in S\n    are balanced. For example: the string '[]()' is good, while the string\n    '[]' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_brackets(['[', ']']) == 'Yes'\n    match_brackets(['[', ')']) == 'No'\n    '''\n\ndef match_braces(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    braces '{' or close braces '}' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all braces in S\n    are balanced. For example: the string '{}' is good, while the string\n    '{' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_braces(['{', '}']) == 'Yes'\n    match_braces(['{', ')']) == 'No'\n    '''\n\ndef match_brackets_braces(lst):\n    '''\n    You are given a list", "\ndef check_brackets(str):\n    '''\n    You are given a string consisting of brackets and braces, square brackets\n    and curly brackets.\n    Your job is to check if it is possible to balance all of the brackets\n    and braces.\n\n    Examples:\n    check_brackets('{}[]') == 'Yes'\n    check_brackets('{}()') == 'Yes'\n    check_brackets('{}]') == 'No'\n    '''\n\ndef valid_parentheses(str):\n    '''\n    Given a string containing just the characters '(', ')', '{', '}', '[' and ']',\n    determine if the input string is valid.\n\n    The brackets must close in the correct order, \"()\" and \"()[]{}\" are all valid.\n    \"([)]\" and \"([)]{\" are not valid.\n\n    Examples:\n    valid_parentheses('()[]{}') == True\n    valid_parentheses('([)]') == False\n    '''\n", "\nif __name__ == '__main__':\n    print(match_parens(['()(', ')']))\n    print(match_parens([')', ')']))\n"], ["", "", "\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "", ""], ["\todd_sum = 0\n    for i in lst:\n        if i % 2 != 0:\n            odd_sum += i\n    return odd_sum\n\nif __name__ == \"__main__\":\n    print(solution([5, 8, 7, 1]))\n    print(solution([3, 3, 3, 3, 3]))\n    print(solution([30, 13, 24, 321]))\n", "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if not (x % 2 == 0) and x % 2 != 1)\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))", "# YOUR CODE HERE\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))", "\nif __name__ == '__main__':\n    print(solution([5, 8, 7, 1]))\n    print(solution([3, 3, 3, 3, 3]))\n    print(solution([30, 13, 24, 321]))", ""], ["", "\nif __name__ == '__main__':\n    arr = [111,21,3,4000,5,6,7,8,9]\n    k = 4\n    print(add_elements(arr, k))", "\ndef main():\n    arr = [111,21,3,4000,5,6,7,8,9]\n    k = 4\n    print(add_elements(arr, k))\n\nif __name__ == \"__main__\":\n    main()\n", "", ""], ["\ndef is_palindrome(str):\n    \"\"\"\n    Given a string str, check if it is a palindrome or not.\n\n    For example:\n        is_palindrome(\"A man, a plan, a canal: Panama\") returns True\n        is_palindrome(\"race a car\") returns False\n    \"\"\"\n\ndef get_permutations(string):\n    \"\"\"\n    Given a string, find the permutations of it.\n\n    For example:\n        get_permutations(\"abc\") returns [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n    \"\"\"\n\ndef get_permutations_rec(string):\n    \"\"\"\n    Given a string, find the permutations of it.\n\n    For example:\n        get_permutations_rec(\"abc\") returns [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n    \"\"\"\n\ndef get_subsets(items):\n    \"\"\"\n    Given a list, return all possible subsets of it.\n\n    For example:\n        get_subsets([1,2,3]) returns [[], [1], [2], [3], [1,2], [1,3], [2,3], [1,2,3]]\n    \"\"\"\n\ndef get_subsets_rec(items):\n    \"\"\"\n    Given a", "\ndef main():\n    print(get_odd_collatz(1))\n    print(get_odd_collatz(5))\n    print(get_odd_collatz(10000000))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef get_odd_collatz_range(start, end):\n    \"\"\"\n    Given a range of integer start and end, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz_range(1, 9) returns [1, 3, 5, 7, 9] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are 1, 3, 5, 7, and 9.\n    \"\"\"\n\ndef get_collatz_length(n):\n    \"\"\"\n    Given", "\ndef test_get_odd_collatz():\n    assert get_odd_collatz(1) == [1]\n    assert get_odd_collatz(5) == [1, 5]\n\n\ndef get_divisors(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has all of its divisors.\n\n    For example:\n    get_divisors(10) returns [1, 2, 5, 10]\n    \"\"\"\n\ndef test_get_divisors():\n    assert get_divisors(10) == [1, 2, 5, 10]\n\n\ndef get_fibonacci_until(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the first n Fibonacci numbers.\n\n    The Fibonacci numbers are the numbers in the following sequence:\n    F(0) = 0\n    F(1) = 1\n    F(n) = F(n - 1) + F(n - 2)\n\n    For example:\n    get_fibonacci_until(5) returns [0, 1, 1, 2, 3]\n    \"\"\"\n\ndef test_get_fibonacci_until():\n    assert get_fib", "\nif __name__ == \"__main__\":\n    print(get_odd_collatz(5))\n    print(get_odd_collatz(10))\n    print(get_odd_collatz(1))\n    print(get_odd_collatz(100))"], ["\ndef valid_date2(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_", "\n# 4. Write a function which takes a string as an argument and returns the character with the highest frequency.\n# The function should return the character which occurs most times in the string.\n# If the highest frequency of the character is more than 1, the function should return the first character\n# of the string.\n\ndef highest_char(string):\n    \"\"\"Write a function which takes a string as an argument and returns the character with the highest frequency.\n    The function should return the character which occurs most times in the string.\n    If the highest frequency of the character is more than 1, the function should return the first character\n    of the string.\n\n    For example:\n    highest_char('abcde') => 'a'\n\n    highest_char('Hello World') => 'l'\n\n    highest_char('a') => 'a'\n\n    highest_char('xyz') => 'x'\n    \"\"\"\n\n# 5. Write a function which takes a string as an argument and returns True if the string is a pangram.\n# A pangram (Greek: \u03c0", "\ndef valid_date(date):\n    return True if re.search(r'^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$', date) else False\n\ndef valid_date(date):\n    return True if re.search(r'^\\d{1,2}\\-\\d{1,2}\\-\\d{4}$', date) else False\n\ndef valid_date(date):\n    return True if re.search(r'^((0[1-9])|(1[0-2]))\\/(0[1-9]|[1-2]\\d|3[0-1])\\/\\d{4}$', date) else False\n\ndef valid_date(date):\n    return True if re.search(r'^(0[1-9]|1[0-2])-(0[1-9]|1\\d|2[0-8])-\\d{4}$', date) else False\n\ndef valid_date(date):\n    return True if re.search(r'^\\d", "\ndef valid_date(date):\n    try:\n        month, day, year = date.split('-')\n        if int(month) > 12 or int(month) < 1:\n            return False\n        if int(day) > 31 or int(day) < 1:\n            return False\n        if int(year) > 2040 or int(year) < 1900:\n            return False\n        if int(month) == 1 or int(month) == 3 or int(month) == 5 or int(month) == 7 or int(month) == 8 or int(month) == 10 or int(month) == 12:\n            if int(day) > 30:\n                return False\n        if int(month) == 4 or int(month) == 6 or int(month) == 9 or int(month) == 11:\n            if int(day) > 30:\n                return False\n        if int(month) == 2:\n            if int", "\ndef main():\n    print(valid_date('03-11-2000'))\n    print(valid_date('15-01-2012'))\n    print(valid_date('04-0-2040'))\n    print(valid_date('06-04-2020'))\n    print(valid_date('06/04/2020'))\n\nif __name__ == \"__main__\":\n    main()"], ["\n#     return txt.split() if len(txt.split()) > 1 else [txt]\n    return [x for x in txt.split() if len(x) > 1]\n\n#     return txt.split(',') if ',' in txt else [txt[i] for i in range(len(txt)) if i % 2 == 1]\n\n#     return txt.split() if len(txt.split()) > 1 else [txt[i] for i in range(len(txt)) if i % 2 == 1]\n\ndef sum_chars(txt):\n    '''\n    Given a string of characters, return the sum of all of the individual characters' values.\n    Examples\n    sum_chars(\"Hello world!\") \u279e 111\n    sum_chars(\"abcdef\") == 10 \n    '''\n#     return sum([ord(x) for x in txt])\n    return sum(ord(x) for x in txt)\n\n#     return sum(ord(x) for x in txt) if txt.isalpha() else sum(ord(x) for x in txt.split())\n\ndef word_count(txt):\n    '''\n    Given a string of words, return the count of each word.\n    Examples\n    word_count(\"Hello world!\") \u279e {\"Hello\": 1, \"world!\": 1}\n    word_count(\"Hello, world! How are you?\") \u279e {\"Hello\": 1, \"world!\": 1, \"How\": 1, \"are\": 1, \"you?\": 1}\n    word_count(\"a\") \u279e {\"a\": 1}\n    '''\n#     return {x: txt.split(x).", "\tl = txt.split()\n\tl1 = txt.split(\",\")\n\tl2 = []\n\tfor i in txt:\n\t\tif ord(i) % 2 != 0:\n\t\t\tl2.append(i)\n\tif len(l2) == 0:\n\t\treturn l\n\telif len(l) == 0:\n\t\treturn l1\n\telse:\n\t\treturn [l,l1,l2]\n\nprint(split_words(\"Hello world!\"))\nprint(split_words(\"Hello,world!\"))\nprint(split_words(\"abcdef\"))", "#     split_text = txt.split(' ')\n#     return split_text\n\n    return [word for word in txt.split(' ') if word != '']\n\n\ndef word_count(txt):\n    '''\n    Given a string of words, return a dictionary of the word counts.\n    Examples\n    word_count(\"Hello world!\") \u279e {\n    \"Hello\": 1,\n    \"world!\": 1,\n    }\n    word_count(\"Hello,world!\") \u279e {\n    \"Hello\": 1,\n    \"world!\": 1,\n    }\n    '''\n#     count_dict = {}\n#     split_text = txt.split(' ')\n#     for word in split_text:\n#         if word not in count_dict:\n#             count_dict[word] = 1\n#         else:\n#             count_dict[word] += 1\n#     return count_dict\n\n    count_dict = {}\n    for word in split_words(txt):\n        if word not in count_dict:\n            count_dict[word] = 1\n        else:\n            count_dict[word] += 1\n    return count_dict\n\n\ndef palindrome(txt):\n    '''\n    Given a string of words, return a boolean indicating whether the string is a palindrome.\n    A palindrome is a word, phrase, or sequence that's spelled the same way both ways, ignoring spaces and punctuation.\n    Examples\n    palindrome(\"Never Odd Or Even\") \u279e True\n    palindrome(\"Never Odd Or Even!\") \u279e True\n    palindrome(\"Never odd or even.\") \u279e False\n    '''\n\n    return True if txt == txt[::-1] else False\n\n\ndef first_non_repe", "", "#     txt = txt.strip()\n#     return txt.split(' ')\n    # return list(filter(None, txt.split()))\n    return list(filter(None, txt.split(',')))\n\nsplit_words(\"Hello world!\")\nsplit_words(\"Hello,world!\")\nsplit_words(\"abcdef\")\n\n\n# # 6. Addition of two lists\n# Given two lists of numbers, return a list of their sums.\n\n# +\ndef add_lists(nums1, nums2):\n    # return [sum(nums1[i], nums2[i]) for i in range(len(nums1))]\n    return [sum(i) for i in zip(nums1, nums2)]\n\nadd_lists([1,2,3], [4,5,6])\nadd_lists([1,2], [4,5,6])\n\n\n# -\n\n# # 7. Multiplication of two lists\n# Given two lists of numbers, return a list of their products.\n\n# +\ndef multiply_lists(nums1, nums2):\n    # return [sum(nums1[i] * nums2[i]) for i in range(len(nums1))]\n    return [sum(i * j) for i, j in zip(nums1, nums2)]\n\nmultiply_lists([1,2,3], [4,5,6])\nmultiply_lists([1,2], [4,5,6])\n\n\n# -\n\n# # 8. Square each number in a list\n# Given a list of numbers, return a list of their squares.\n\n# +\ndef square_list(nums):\n    # return [num**2"], ["\t# your code goes here\n    #check if the list is empty\n    if len(lst) == 0:\n        return True\n    else:\n        #check if first number is smaller than the second one\n        if lst[0] < lst[1]:\n            #check the rest of the numbers\n            return is_sorted(lst[1:])\n        else:\n            return False\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))", "\ndef sort_by_appearance(lst):\n    '''\n    Given a list of numbers, return a new list where the elements\n    of the given list are in order of appearance in the original list.\n\n    Examples\n    sort_by_appearance([1, 2, 3, 4, 5, 6, 7]) \u279e [1, 2, 3, 4, 5, 6, 7]\n    sort_by_appearance([1, 2, 3, 4, 5]) \u279e [1, 2, 3, 4, 5]\n    sort_by_appearance([7, 6, 5, 4, 3, 2, 1]) \u279e [1, 2, 3, 4, 5, 6, 7]\n    sort_by_appearance([1, 2, 3, 4, 5, 2, 3, 4]) \u279e [1, 2, 2, 3, 3, 4, 4, 5]\n    sort_by_appearance([1, 2, 3, 4, 5, 6, 7, 8, ", "\tfor i in range(len(lst)-1):\n\t\tif lst[i] > lst[i+1]:\n\t\t\treturn False\n\treturn True\n\n\n# Tests\nprint(is_sorted([5])) # True\nprint(is_sorted([1, 2, 3, 4, 5])) # True\nprint(is_sorted([1, 3, 2, 4, 5])) # False\nprint(is_sorted([1, 2, 3, 4, 5, 6])) # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7])) # True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7])) # False\nprint(is_sorted([1, 2, 2, 3, 3, 4])) # True\nprint(is_sorted([1, 2, 2, 2, 3, 4])) # False", "\ndef is_sorted(lst):\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\n\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return", "\ndef is_sorted_v2(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    lst.sort()\n    for i in range(len(lst)-1):\n        if lst[i"], ["", "#     if not is_interval(interval1) or not is_interval(interval2):\n#         return \"NO\"\n\n#     start1, end1 = interval1\n#     start2, end2 = interval2\n\n#     if not is_intersected(start1, end1, start2, end2):\n#         return \"NO\"\n\n#     inter = intersection_length(start1, end1, start2, end2)\n#     if inter % 2 == 0:\n#         return \"NO\"\n#     elif is_prime(inter):\n#         return \"YES\"\n#     else:\n#         return \"NO\"\n\n\ndef intersection_length(start1, end1, start2, end2):\n    \"\"\"\n    :param start1:\n    :param end1:\n    :param start2:\n    :param end2:\n    :return:\n    \"\"\"\n    if start1 > end2 or start2 > end1:\n        return 0\n\n    if start1 > start2:\n        start1, start2 = start2, start1\n\n    if end1 < end2:\n        end1, end2 = end2, end1\n\n    return end", "", "\nif __name__ == '__main__':\n    print(intersection((1, 2), (2, 3)))\n", "\ndef main():\n    assert intersection((1, 2), (2, 3)) == \"NO\"\n    assert intersection((-1, 1), (0, 4)) == \"NO\"\n    assert intersection((-3, -1), (-5, 5)) == \"YES\"\n\nif __name__ == '__main__':\n    main()\n"], ["\n# Write a function that takes an array of integers and returns the\n# maximum product of any 3 consecutive integers in the array.\n# Return None if the array contains less than 3 integers.\n\ndef max_product3(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    the maximum product of any 3 consecutive integers in the array.\n    Return None if the array contains less than 3 integers.\n\n    Example:\n    >>> max_product3([1, 2, 3, 2]) == 6\n    >>> max_product3([1, 2, 3]) == 6\n    >>> max_product3([1, 2]) == 2\n    >>> max_product3([1, 2, -1]) == 1\n    >>> max_product3([1, 2, 3, 4, 5, 6]) == 30\n    >>> max_product3([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 126\n    >>> max_product3([]) == None\n    \"\"\"\n\n# Write a function that takes an array of integers and returns the\n# maximum product of any 4 consecutive integers in the array.\n# Return None if the array contains less than 4 integers.\n\ndef max_product4(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    the maximum product of any 4 consecutive integers in the array.\n    Return None if the array contains less than 4 integers.\n\n    Example:\n    >>> max_product4([1, 2, 3, 2]) == 12\n    >>> max_product4([1, 2, 3]) == 6", "", "\ndef count_occurrences(arr):\n    \"\"\"\n    You are given an array arr of integers and an integer k.\n    Find the number of times k occurs in arr.\n\n    Example:\n    >>> count_occurrences([1, 2, 2, 1, 1], 1) == 3\n    >>> count_occurrences([1, 2, 2, 1, 1], 2) == 2\n    >>> count_occurrences([1, 2, 2, 1, 1], 3) == 0\n    \"\"\"\n\ndef reverse_arr(arr):\n    \"\"\"\n    You are given an array arr of integers. Your task is to reverse\n    it in-place, without using any extra space.\n\n    Example:\n    >>> reverse_arr([1, 2, 3, 4])\n    [4, 3, 2, 1]\n    \"\"\"\n\ndef reverse_arr_v2(arr):\n    \"\"\"\n    You are given an array arr of integers. Your task is to reverse\n    it in-place, without using any extra space.\n\n    Example:\n    >>> reverse_arr_v2([1, 2, 3, 4])\n    [4, 3, 2, 1]\n    \"\"\"\n\ndef reverse_arr_v3(arr):\n    \"\"\"\n    You are given an array arr of integers. Your task is to reverse\n    it in-place, without using any extra space.\n\n    Example:\n    >>> reverse_arr_v3([1, 2, 3, 4])\n    [4, 3, 2, 1]\n    \"\"\"\n\ndef reverse_arr_v4(arr):\n    \"\"\"\n    You are given an array arr of integers. Your task is to reverse\n    it in-place, without using any extra space.", "\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n# Tests\nimport doctest\ndoctest.testmod()\n"], ["", "", "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which", "", ""], ["#     print(\"tri(\" + str(n) + \")\")\n    if n < 1:\n        raise ValueError(\"tri() requires a positive integer n\")\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n    if n == 3:\n        return [1, 3, 2]\n    if n % 2 == 0:\n        return [1] + [3 * i / 2 for i in range(2, n + 1)]\n    else:\n        return [1] + [3 * i / 2 for i in range(2, n - 1)] + [3 * (n - 1) / 2]\n\ndef fib(n):\n    \"\"\"Fibonacci sequence: \n    F(1) = 1\n    F(2) = 1\n    F(n) = F(n - 1) + F(n - 2), for n > 2\n    You are given a non-negative integer n, you have to a return a list of the \n    first n + 1 numbers of the Fibonacci sequence.\n    Examples:\n    fib(3) = [1, 1, 2, 3, 5]\n   ", "", "\n# def fib(n):\n#     \"\"\"\n#     \"\"\"", "\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "\ndef main():\n    \"\"\"Read input from STDIN. Print output to STDOUT\"\"\"\n    # Get input\n    n = int(input())\n    # Print output\n    print(tri(n))\n\nif __name__ == \"__main__\":\n    main()\n"], ["#     n = int(n)\n#     if n == 0:\n#         return 0\n#     if n == 1:\n#         return 1\n#     if n%2 == 0:\n#         return 0\n#     if n%2 == 1:\n#         return n/2\n#     else:\n#         return 0\n\n#     while n>0:\n#         if n%2 == 1:\n#             return n\n#         n = n/2\n\n#     return 0\n\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    n = int(n)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n%2 == 0:\n        return 0\n    else:\n        return n/2\n\nprint(digits(235))\n", "\nprint(digits(1))\n#>>> 1\n\nprint(digits(4))\n#>>> 0\n\nprint(digits(235))\n#>>> 15\n\nprint(digits(1234567890))\n#>>> 56780\n\nprint(digits(2147483647))\n#>>> 0\n\nprint(digits(-2147483647))\n#>>> 0\n", "\ndef fibonacci(n):\n    \"\"\"Given a positive integer n, return the nth Fibonacci number.\n    For example:\n    fibonacci(1) == 1\n    fibonacci(2) == 1\n    fibonacci(3) == 2\n    fibonacci(4) == 3\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Given a positive integer n, return True if it is prime, or False if it is not.\n    For example:\n    is_prime(1)  == False\n    is_prime(4)  == False\n    is_prime(11) == True\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"Given a positive integer n, return True if it is a palindrome, or False if it is not.\n    For example:\n    is_palindrome(1)  == True\n    is_palindrome(4)  == False\n    is_palindrome(121) == True\n    \"\"\"\n\ndef is_armstrong(n):\n    \"\"\"Given a positive integer n, return True if it is an Armstrong number, or False if it is not.\n    An Armstrong number is a number such that the sum of its digits raised to the third power is equal to the number itself.\n    For example:\n    is_armstrong(1) == False\n    is_armstrong(153) == True\n    is_armstrong(370) == False\n    \"\"\"\n\ndef is_armstrong_with_sum(n):\n    \"\"\"Given a positive integer n, return True if it is an Armstrong number, or False if it is not.\n    An Armstrong number is a number such that the sum of its digits raised to the third power is equal to the number itself.\n    For example:\n    is_armstrong(1) == False\n    is_armstrong(153) == True\n    is_armstrong(370) == False\n    \"\"\"\n\ndef is_armstrong_with_reduce(n):\n    \"\"\"Given a positive integer n, return True if it is an Armstrong", "\ndef digit_sum(n):\n    \"\"\"Given a positive integer n, return the sum of the even digits.\n    Return 0 if there are no even digits.\n    For example:\n    digit_sum(1)  == 0\n    digit_sum(4)  == 0\n    digit_sum(235) == 26\n    \"\"\"\n\ndef reverse(n):\n    \"\"\"Given a positive integer n, return a string with the digits reversed.\n    For example:\n    reverse(1234) == '4321'\n    reverse(98765) == '56789'\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"Given a positive integer n, return True if it is a palindrome, False otherwise.\n    For example:\n    is_palindrome(12321) == True\n    is_palindrome(121) == True\n    is_palindrome(123421) == False\n    \"\"\"\n\ndef reverse_complement(n):\n    \"\"\"Given a positive integer n, return a string with the digits reversed and\n    the complement of the original digits.\n    For example:\n    reverse_complement(1234) == '2143'\n    reverse_complement(98765) == '56789'\n    \"\"\"\n\ndef fibonacci(n):\n    \"\"\"Given a positive integer n, return the n-th Fibonacci number.\n    For example:\n    fibonacci(1) == 1\n    fibonacci(2) == 1\n    fibonacci(3) == 2\n    fibonacci(4) == 3\n    \"\"\"\n\ndef longest_common_prefix(list_of_strs):\n    \"\"\"Given a list of strings, return the longest common prefix.\n    For example:\n    longest_common_prefix([\"a\",\"b\",\"c\",\"d\"]) == 'a'\n    longest_common_prefix([\"a\",\"b\",\"c\"]) == 'a'\n    longest_common_prefix([\"a\",\"b\",\"c\",\"d\",\"e\"]) ==", "\ndef is_prime(n):\n    \"\"\"Given a positive integer n, return True if n is prime.\n    For example:\n    is_prime(1)  == True\n    is_prime(4)  == False\n    is_prime(235) == True\n    \"\"\"\n\ndef primes_from(n):\n    \"\"\"Generate primes up to n using the Sieve of Eratosthenes.\n    For example:\n    primes_from(10) == [2, 3, 5, 7]\n    \"\"\"\n\ndef is_palindrome(s):\n    \"\"\"Given a string s, return True if it is a palindrome.\n    For example:\n    is_palindrome('kayak') == True\n    is_palindrome('racecar') == True\n    is_palindrome('madam') == False\n    \"\"\"\n\ndef palindrome_chars(s):\n    \"\"\"Given a string s, return the characters that form the palindrome\n    after removing the non-alphanumeric characters.\n    For example:\n    palindrome_chars('A man, a plan, a canal: Panama')\n    == 'amanaplanacanalpanama'\n    \"\"\"\n\ndef palindrome_words(s):\n    \"\"\"Given a string s, return the words that form the palindrome\n    after removing the non-alphanumeric characters.\n    For example:\n    palindrome_words('A man, a plan, a canal: Panama')\n    == ['amanaplanacanalpanama']\n    \"\"\"\n\ndef is_pangram(s):\n    \"\"\"Given a string s, return True if it is a pangram.\n    A pangram (Greek: \u03c0\u03b1\u03bd \u03b3\u03c1\u03ac\u03bc\u03bc\u03b1, pan gramma, \"every letter\")\n    is a sentence using every letter of the alphabet at least once.\n    For example:\n    is_pangram('The quick brown fox jumps over the lazy dog.')\n    == True\n    \"\"\"\n\ndef is_square(n):\n    \"\"\"Given a positive integer n, return True if it is"], ["\n# Solution\n\ndef is_nested(string):\n    if not string:\n        return False\n    stack = []\n    for i in string:\n        if i == '[':\n            stack.append(i)\n        elif i == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return True\n    if stack:\n        return False\n    else:\n        return True\n\n# Tests\n\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[[]]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[][]][[][][]]'))\nprint(is_nested('[[]][['))", "\ndef is_nested(string):\n    if string.startswith('['):\n        return True\n    elif string.startswith(']') and string.endswith(']'):\n        return True\n    else:\n        return False\n\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\nprint(is_nested('[[]]')) #True\nprint(is_nested('[]]]]]]][[[[')) #False\nprint(is_nested('[][]')) #False\nprint(is_nested('[]')) #False\nprint(is_nested('[[][]]')) #True\nprint(is_nested('[[]][[')) #True\n\n\n# +\n# https://www.codewars.com/kata/53c081026e7a00d38600058d/train/python\n\ndef is_string_palindrome(string):\n    \"\"\"\n    Returns True if the string is a palindrome, False otherwise.\n    \"\"\"\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n\ndef is_string_palindrome(string):\n    return string == string[::-1]\n\ndef is_string_palindrome(string):\n    return string == string[::-1]\n\ndef is_string_palindrome(string):\n    return string == string[::-1]\n\ndef is_string_palindrome(string):\n    return string == string[::-1]\n\ndef is_string_palindrome(string):\n    return string == string[::-1]\n\ndef is_string_palindrome(string):\n    return string == string[::-1]\n\ndef is_string_palindrome(string):\n    return string == string[::-", "\ndef is_nested(string):\n    return True if string.count('[') > string.count(']') else False\n\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return stack == []\n\n# is_nested('[]]]]]]][[[[[]')\n# is_nested('[[][]]')\n# is_nested('[[]][[')\n\n\n# 3. Validating Phone Numbers\n# 1. \n# A valid phone number should be 10 characters long and start with either + or 00.\n# After that, the following characters should be in the range [0, 9].\n# The following are valid phone numbers:\n# +1234567890\n# 001234567890\n# If the phone number is valid, return the phone number with the country code.\n# If the phone number is not valid, return 'invalid number'.\n# is_valid('1234567890') \u279e '+11234567890'\n# is_valid('001234567890') \u279e '+11234567890'\n# is_valid('0091234567890') \u279e 'invalid number'\n\ndef is_valid(string):\n    if len(string) == 10:\n        if string[0] == '+' or string[0] == '0':\n            return '+' + string[1:]\n    return 'invalid number'\n\n# is_valid('1234567890')\n# is_valid"], ["def add_border(picture, line):\n    \"\"\"You are given a picture (list of lists of integers) and a line of\n    characters. You need to add a border to each row of the picture using\n    the given line.\n\n    Examples:\n    For picture = [[1, 2, 3], [4, 5, 6]], line = '-' the output should be\n    [['-', 1, 2, 3, '-'], [4, 5, 6, '-', '-']]\n    For picture = [[1, 2, 3], [4, 5, 6]], line = '*' the output should be\n    [['*', 1, 2, 3, '*'], ['*', 4, 5, 6, '*']]\n\n    \"\"\"\ndef list_average(lst):\n    \"\"\"You are given a list of integers. You need to return the average\n    of the elements in the list rounded to the upper int(Ceiling).\n    Examples:\n    For lst = [1,2,3] the output should be 2\n    For lst = [1,2,3,4] the output should be 2.5\n    For lst = [1,2,3,4,5] the output should be 3\n\n    \"\"\"\ndef add_and_subtract(a, b):\n    \"\"\"You are given two numbers a and b.\n    You need to return the sum and difference of the two numbers.\n\n    Examples:\n    For a = 2, b = 3 the output should be [5, -1]\n    For a = 5, b = 2 the output should be [7, 3]\n    For a = 1, b", "", "", "\ndef is_in_range(x, a, b):\n    \"\"\"You are given three numbers a, b, and x.\n    You need to check if x is in the range between a and b (inclusive).\n    Examples:\n    For a = 1, b = 10, and x = 2 the output should be isInRange(x, a, b) = true\n    For a = 3, b = 4, and x = 3 the output should be isInRange(x, a, b) = true\n    For a = 1, b = 2, and x = 1 the output should be isInRange(x, a, b) = true\n    For a = 1, b = 2, and x = 3 the output should be isInRange(x, a, b) = false\n    For a = 4, b = 6, and x = 5 the output should be isInRange(x, a, b) = false\n    For a = 1, b = 5, and x = 1 the output should be isInRange(x, a, b) = true\n    For a = 1, b = 5, and x = 6 the output should be isInRange(x, a, b) = false\n    \"\"\"\n\ndef is_lucky(n):\n    \"\"\"You are given a positive number n. You need to check whether the number is lucky or not.\n    A positive number is lucky if it has the following properties:\n    1) It is divisible by 7.\n    2) It is divisible by 13.\n    3) It is divisible by 17.", "\nlst = [1.4,4.2,0]\nprint(sum_squares(lst))"], ["\ndef check_if_last_char_is_a_letter(txt):\n    if txt.count(\" \"):\n        txt = txt.split(\" \")\n        txt.remove('')\n        if txt[-1][-1] in string.ascii_letters:\n            return True\n        else:\n            return False\n    else:\n        if txt[-1][-1] in string.ascii_letters:\n            return True\n        else:\n            return False\n\n#check_if_last_char_is_a_letter(\"apple pie\") #\u279e False\n#check_if_last_char_is_a_letter(\"apple pi e\") #\u279e True\n#check_if_last_char_is_a_letter(\"apple pi e \") #\u279e False\n#check_if_last_char_is_a_letter(\"\") #\u279e False \n\n\n#10. Return the last character of a string.\ndef last_char(txt):\n    return txt[-1]\n\n#last_char(\"apple pie\") #\u279e \"e\"\n#last_char(\"apple pi e\") #\u279e \" \"\n#last_char(\"apple pi e \") #\u279e \" \"\n#last_char(\"\") #\u279e \"\"\n\n\n#11. Return the first character of a string.\ndef first_char(txt):\n    return txt[0]\n\n#first_char(\"apple pie\") #\u279e \"a\"\n#first_char(\"apple pi e\") #\u279e \"a\"\n#first_char(\"apple pi e \") #\u279e \"", "\ndef check_if_last_char_is_a_letter(txt):\n    txt = txt.strip()\n    if not txt:\n        return False\n    \n    if txt[-1] == ' ':\n        return False\n    \n    return bool(re.search(r'[a-z]', txt[-1]))\n\n\ncheck_if_last_char_is_a_letter(\"apple pie\")\ncheck_if_last_char_is_a_letter(\"apple pi e\")\ncheck_if_last_char_is_a_letter(\"apple pi e \")\ncheck_if_last_char_is_a_letter(\"\")**Task 8**Create a function that takes a string as an argument and returns the number of uppercase letters in the string.def count_uppercase(txt):\n    '''\n    Create a function that takes a string as an argument and returns the number of uppercase letters in the string.\n\n    Examples:\n    count_uppercase(\"Python\") \u279e 4\n    count_uppercase(\"JavaScript\") \u279e 4\n    count_uppercase(\"Java\") \u279e 3\n    count_uppercase(\"C#\") \u279e 1\n    count_uppercase(\"\") \u279e 0\n    '''\ndef count_uppercase(txt):\n    count = 0\n    for c in txt:\n        if c.isupper():\n            count += 1\n    return count\n\n\ncount_uppercase(\"Python\")\ncount_uppercase(\"JavaScript\")\ncount_uppercase(\"Java\")\ncount_uppercase(\"C#\")\ncount_uppercase(\"\")**Task 9**Create a function that returns the first character of a string.def first_char(txt):\n   ", "\n# solution 1\n    # if len(txt) > 0:\n    #     last = txt[-1]\n    #     return (last.isalpha() and (not last.isalnum()))\n\n# solution 2\n    # return txt[-1].isalpha() and not txt.strip().endswith(' ')\n\n\ncheck_if_last_char_is_a_letter(\"apple pie\")\ncheck_if_last_char_is_a_letter(\"apple pi e\")\ncheck_if_last_char_is_a_letter(\"apple pi e \")\ncheck_if_last_char_is_a_letter(\"\")\n\n# +\n# 10. Create a function that returns True if the first character\n# of a given string is an alphabetical character and is not a part\n# of a word, and False otherwise.\n\ndef check_if_first_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the first character\n    of a given string is an alphabetical character and is not a part\n    of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_first_char_is_a_letter(\"apple pie\") \u279e True\n    check_if_first_char_is_a_letter(\"apple pi e\") \u279e False\n    check_if_first_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_first_char_is_a_letter(\"\") \u279e False \n    '''\n\n# solution 1\n   ", "\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and not txt.rsplit(' ', 1)[-1].isalpha()\n\nprint(check_if_last_char_is_a_letter('apple pi e'))\nprint(check_if_last_char_is_a_letter('apple pie'))\nprint(check_if_last_char_is_a_letter('apple pi e '))\nprint(check_if_last_char_is_a_letter(''))", "\n#Code\n    if txt == \"\":\n        return False\n\n    word = txt.split(\" \")\n    last_char = word[-1]\n    last_char = last_char.strip(\" \")\n\n    if last_char.isalpha() and not last_char.isalnum():\n        return True\n    else:\n        return False\n\nprint(check_if_last_char_is_a_letter(\"apple pie\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))\nprint(check_if_last_char_is_a_letter(\"\"))"], ["\ndef can_arrange_all(arr):\n    \"\"\"Create a function which returns True if all the elements in the given\n    array are greater than or equal to the element immediately preceding it.\n\n    Examples:\n    can_arrange_all([1,2,4,3,5]) = True\n    can_arrange_all([1,2,3]) = False\n    \"\"\"\n\ndef can_arrange_reverse(arr):\n    \"\"\"Create a function which returns True if all the elements in the given\n    array are less than or equal to the element immediately preceding it.\n\n    Examples:\n    can_arrange_reverse([1,2,4,3,5]) = True\n    can_arrange_reverse([1,2,3]) = False\n    \"\"\"\n\ndef can_arrange_reverse_all(arr):\n    \"\"\"Create a function which returns True if all the elements in the given\n    array are less than or equal to the element immediately preceding it.\n\n    Examples:\n    can_arrange_reverse_all([1,2,4,3,5]) = True\n    can_arrange_reverse_all([1,2,3]) = False\n    \"\"\"\n\ndef can_arrange_all_unique(arr):\n    \"\"\"Create a function which returns True if all the elements in the given\n    array are unique and greater than or equal to the element immediately\n    preceding it.\n\n    Examples:\n    can_arrange_all_unique([1,2,4,3,5]) = True\n    can_arrange_all_unique([1,2,3]) = False\n    \"\"\"\n\ndef can_arrange_all_unique_reverse(arr):\n    \"\"\"Create a function which returns True if all the elements in the given\n    array are unique and less than or equal to the element immediately\n    preceding it.\n\n    Examples:\n    can_arrange_all_unique_reverse([1,2,4,3,5]) = True\n    can_arrange_all_unique_reverse([1,2", "", "\ndef can_arrange2(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange2([1,2,4,3,5]) = 3\n    can_arrange2([1,2,3]) = -1\n    \"\"\"\n\nif __name__ == '__main__':\n    print(can_arrange([1,2,4,3,5]))\n    print(can_arrange([1,2,3]))\n", "\n# Solution\ndef can_arrange(arr):\n    if len(arr) <= 2:\n        if arr[0] == 1:\n            return 0\n        elif arr[0] == 2:\n            return -1\n        else:\n            return -1\n    else:\n        arr_sorted = sorted(arr)\n        first = arr_sorted[0]\n        last = arr_sorted[-1]\n        if first == 1 and last == 2:\n            return -1\n        elif first == 1 and last == 3:\n            return 0\n        elif first == 2 and last == 3:\n            return 1\n        elif first == 1 and last == 4:\n            return 2\n        elif first == 2 and last == 4:\n            return 1\n        elif first == 3 and last == 4:\n            return 0\n        else:\n            return -1\n", "\ndef is_prime(n):\n    \"\"\"Returns True if the given number is prime. Otherwise, returns False.\n    This function is not optimised.\n\n    Examples:\n    is_prime(11) = True\n    is_prime(12) = False\n    \"\"\"\n\ndef primes_between(start, end):\n    \"\"\"Returns a list of prime numbers between the given range.\n\n    Examples:\n    primes_between(1,10) = [2,3,5,7]\n    primes_between(1,20) = [2,3,5,7,11,13,17,19]\n    \"\"\"\n\ndef sum_primes(n):\n    \"\"\"Returns the sum of the first n prime numbers.\n\n    Examples:\n    sum_primes(10) = 17\n    sum_primes(20) = 6765\n    \"\"\"\n\ndef product_primes(n):\n    \"\"\"Returns the product of the first n prime numbers.\n\n    Examples:\n    product_primes(10) = 360\n    product_primes(20) = 2100\n    \"\"\"\n\ndef longest_collatz(n):\n    \"\"\"Returns the length of the longest Collatz sequence that can be generated\n    starting from the given number.\n\n    Examples:\n    longest_collatz(13) = 10\n    longest_collatz(1000) = 9\n    longest_collatz(1000000) = 152\n    \"\"\"\n\ndef collatz(n):\n    \"\"\"Returns the Collatz sequence starting from the given number.\n\n    Examples:\n    collatz(13) = [13,40,20,10,5,16,8,4,2,1]\n    collatz(1000) = [1000,500"], ["\ndef prime_factors(n):\n    '''\n    Create a function that returns a list of prime factors of a number.\n    Prime factors are the unique divisors of a number other than 1 and itself.\n    A number has only one prime factor if the number itself is a prime.\n\n    Examples:\n    prime_factors(24) == [2, 2, 3]\n    prime_factors(12) == [2, 2, 3]\n    prime_factors(15) == [3, 5]\n    prime_factors(0) == []\n    '''\n\ndef is_leap_year(year):\n    '''\n    Create a function that returns True if a year is a leap year, False if not.\n    A leap year is a year that is divisible by 4, and also by 400,\n    but not by 100.\n\n    Examples:\n    is_leap_year(2000) == True\n    is_leap_year(2004) == True\n    is_leap_year(2100) == False\n    is_leap_year(2104) == False\n    '''\n\ndef list_of_tuples(lst, n):\n    '''\n    Create a function that returns a list of n-tuples of elements of a list.\n    The length of the tuples should be equal to the length of the list.\n\n    Examples:\n    list_of_tuples([1, 2, 3, 4, 5], 2) == [(1, 2), (3, 4), (5, None)]\n    list_of_tuples([1, 2, 3], 2) == [(1", "\n# Write your function here\ndef largest_smallest_integers(lst):\n    lst = list(lst)\n    neg = []\n    pos = []\n    for i in lst:\n        if i < 0:\n            neg.append(i)\n        elif i > 0:\n            pos.append(i)\n    if len(neg) == 0:\n        return (None, max(pos))\n    elif len(pos) == 0:\n        return (min(neg), None)\n    else:\n        return (min(neg), max(pos))\n\n\n# Test Cases\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # (None, 1)\nprint(largest_smallest_integers([]))  # (None, None)\nprint(largest_smallest_integers([0]))  # (None, None)\nprint(largest_smallest_integers([-1, 2, 4, 6]))  # (-1, 4)\nprint(largest_smallest_integers([10, 2, 3, 4, 5, 6]))  # (2, 6)\nprint(largest_smallest_integers([10, -1, -2, 2, -3]))  # (-3, 2)\nprint(largest_smallest_integers([10, 2, 3, 4, -5, 6]))  # (-5, 6)\nprint(largest_smallest_integers([10, 2, 3, 4, 5, -6]))  # (-6,", "", "\nif __name__ == '__main__':\n    print(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\n    print(largest_smallest_integers([]))\n    print(largest_smallest_integers([0]))\n    print(largest_smallest_integers([2, 2, 2]))\n", "\ndef first_last_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the first negative number, and 'b' is the last positive number in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    first_last_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, 7)\n    first_last_smallest_integers([]) == (None, None)\n    first_last_smallest_integers([0]) == (None, None)\n    '''\n\ndef average_negative_numbers(lst):\n    '''\n    Create a function that returns the average of negative numbers in a list.\n    If there is no negative numbers, return None.\n\n    Examples:\n    average_negative_numbers([2, 4, 1, 3, 5, 7]) == 2\n    average_negative_numbers([]) == None\n    average_negative_numbers([0]) == 0\n    '''\n\ndef remove_duplicates(lst):\n    '''\n    Create a function that removes duplicates from a list.\n\n    Examples:\n    remove_duplicates([2, 4, 1, 3, 5, 7]) == [2, 4, 1, 3, 5, 7]\n    remove_duplicates([]) == []\n    remove_duplicates([0]) == [0]\n    '''\n\ndef remove_duplicates_with_set(lst):\n    '''\n    Create a function that removes duplicates from a list using set.\n\n    Examples:\n    remove_duplicates_with_set([2, 4, 1, 3"], ["# create a list of types\n    types = [int, float, str]\n# create a list of values\n    values = [a, b]\n# create a list of variables\n    variables = [a, b]\n# create a list of variable types\n    var_types = [type(a), type(b)]\n# create a list of variable values\n    var_values = [a, b]\n# loop over types\n    for i in range(len(types)):\n        # if variables[i] is a variable type\n        if var_types[i] in types:\n            # if values[i] is greater than variables[i]\n            if var_values[i] > variables[i]:\n                # return variables[i]\n                return variables[i]\n# return None\n    return None\n\n# create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return None if the values are equal.\ndef compare(a, b):\n    \"\"\"\n    create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare(1, 2.5) \u279e 2.5\n    compare(1, \"2,3\") \u279e \"2,3\"\n    compare(\"5,1\", \"6\") \u279e \"6\"\n    compare(\"1\", 1) \u279e None\n    \"\"\"\n    # create a list of types\n    types = [int, float, str]\n    # create a list of values\n    values = [a, b]", "\ndef compare_one(a, b):\n    try:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    except:\n        return None\n\n\ndef main():\n    print(compare_one(1, 2.5))\n    print(compare_one(1, \"2,3\"))\n    print(compare_one(\"5,1\", \"6\"))\n    print(compare_one(\"1\", 1))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Solution 1\ndef compare_one(a, b):\n    if a == b:\n        return None\n    elif type(a) == str and type(b) == str:\n        return b\n    elif type(a) == str and type(b) == float or type(b) == str and type(a) == float:\n        return float(max(a, b))\n    elif type(a) == float and type(b) == float:\n        return float(max(a, b))\n    else:\n        return max(a, b)\n\n# Solution 2\ndef compare_one(a, b):\n    return max(a, b) if a != b else None\n\n# Solution 3\ndef compare_one(a, b):\n    if type(a) == str or type(b) == str:\n        return b if a == b else None\n    return max(a, b)\n\n# Solution 4\ndef compare_one(a, b):\n    return max(a, b) if a != b else None", "\ndef compare_one(a, b):\n    if isinstance(a, str) or isinstance(b, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        return max(a, b) if a > b else min(a, b)\n    return max(a, b) if a > b else min(a, b)\n\n#compare_one(1, 2.5) # 2.5\n#compare_one(1, \"2,3\") # \"2,3\"\n#compare_one(\"5,1\", \"6\") # \"6\"\n#compare_one(\"1\", 1) # None\n\n#666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666", "\ndef compare_one(a,b):\n    if a == b:\n        return None\n    else:\n        if float(a) > float(b):\n            return a\n        else:\n            return b\nprint(compare_one(1, 2.5))\nprint(compare_one(1, \"2,3\"))\nprint(compare_one(\"5,1\", \"6\"))\nprint(compare_one(\"1\", 1))None\n2,3\n6\nNoneTask 3 - 10001st primeWrite a function that returns the first prime number in a list.  Return the smallest prime number from the list.  Return None if there are no prime numbers in the list.def is_prime(num):\n    if num%2 == 0:\n        if num == 2:\n            return True\n        else:\n            return False\n    else:\n        for i in range(3,num//2+1,2):\n            if num%i == 0:\n                return False\n        return True\n\ndef first_prime(lst):\n    for i in lst:\n        if is_prime(i):\n            return i\n    return None\n\nlst = [2,3,4,5,6,7,8,9,10]\nprint(first_prime(lst))\nlst = [2,3,4,5,6,7,8,9,10,11]\nprint(first_prime(lst))\nlst = [2,3,5,7,11]\nprint(first_prime(lst))\nlst = [2,3,5,7,11,13,17,19,23,29"], ["\nprint(is_equal_to_sum_even(4))\nprint(is_equal_to_sum_even(6))\nprint(is_equal_to_sum_even(8))\n\n# +\n# is_equal_to_sum_even?\n# -\n\n# ## 2.5. Functions\n#\n# The function definition is followed by a colon. The body of the function is indented.\n\n# +\n# The function definition is followed by a colon. The body of the function is indented.\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    return (n - 2) % 4 == 0\n\nprint(is_equal_to_sum_even(4))\nprint(is_equal_to_sum_even(6))\nprint(is_equal_to_sum_even(8))\n\n\n# -\n\n# ## 2.6. Functions: Scope\n#\n# The scope of a variable is the code block where the variable is defined.\n#\n# When a variable is defined in a function, the scope of the variable is the function.\n#\n# The scope of a variable can be overruled by a global variable.\n\n# +\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    return (n - 2) % 4 == 0\n\nis_equal_to_sum_even(10)\n\n\n# -\n\n# ## 2.7. Functions: Scope\n#\n# A variable defined outside a function is called a global variable.\n#\n# Global variables can be read and modified by all functions.\n\n# +\ndef is_equal_to_sum_even(n):\n   ", "\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    is_equal_to_sum_odd(5) == False\n    is_equal_to_sum_odd(9) == False\n    is_equal_to_sum_odd(11) == True\n    \"\"\"\n\ndef is_equal_to_sum_negative(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n    Example\n    is_equal_to_sum_negative(1) == False\n    is_equal_to_sum_negative(3) == False\n    is_equal_to_sum_negative(5) == False\n    is_equal_to_sum_negative(7) == True\n    \"\"\"\n\ndef is_equal_to_sum_positive(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive numbers\n    Example\n    is_equal_to_sum_positive(2) == False\n    is_equal_to_sum_positive(4) == False\n    is_equal_to_sum_positive(6) == False\n    is_equal_to_sum_positive(8) == True\n    \"\"\"\n\ndef is_equal_to_sum_three(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 3 positive numbers\n    Example\n    is_equal_to_sum_three(3) == True\n    is_equal_to_sum_three(6) == False\n    is_equal_to_sum_three(9) == True\n    \"\"\"\n\ndef is_equal_to_sum_two(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 2 positive numbers\n    Example\n    is_equal_to_sum_two(2) == True\n    is_equal_to_sum", "\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    is_equal_to_sum_odd(5) == True\n    is_equal_to_sum_odd(7) == True\n    is_equal_to_sum_odd(9) == False\n    \"\"\"\n\ndef is_equal_to_sum_pair(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive numbers\n    that are not multiples of 3 or 5\n    Example\n    is_equal_to_sum_pair(5) == True\n    is_equal_to_sum_pair(10) == False\n    is_equal_to_sum_pair(15) == True\n    \"\"\"\n", "\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    is_equal_to_sum_odd(3) == False\n    is_equal_to_sum_odd(5) == False\n    is_equal_to_sum_odd(7) == True\n    \"\"\"\n\ndef is_equal_to_sum_prime(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive prime numbers\n    Example\n    is_equal_to_sum_prime(2) == True\n    is_equal_to_sum_prime(3) == True\n    is_equal_to_sum_prime(4) == False\n    is_equal_to_sum_prime(5) == False\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"Evaluate whether the given number n is a palindrome\n    Example\n    is_palindrome(121) == True\n    is_palindrome(123) == False\n    \"\"\"\n\ndef is_palindrome_optimized(n):\n    \"\"\"Evaluate whether the given number n is a palindrome\n    Example\n    is_palindrome_optimized(121) == True\n    is_palindrome_optimized(123) == False\n    \"\"\"\n\ndef is_palindrome_recursive(n):\n    \"\"\"Evaluate whether the given number n is a palindrome\n    Example\n    is_palindrome_recursive(121) == True\n    is_palindrome_recursive(123) == False\n    \"\"\"\n\ndef is_palindrome_optimized_recursive(n):\n    \"\"\"Evaluate whether the given number n is a palindrome\n    Example\n    is_palindrome_optimized_recursive(121) == True\n    is_palindrome_optimized_recursive(123) == False\n    \"\"\"\n\ndef is_palindrome_optimized_recursive_2(n):\n    \"\"\"Evaluate", "\ndef test_is_equal_to_sum_even():\n    \"\"\"Run tests on function is_equal_to_sum_even\"\"\"\n    assert is_equal_to_sum_even(4) == False\n    assert is_equal_to_sum_even(6) == False\n    assert is_equal_to_sum_even(8) == True\n\ndef is_sum_of_powers_of_three(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of a power of three times three\n    Example\n    is_sum_of_powers_of_three(9) == True\n    is_sum_of_powers_of_three(18) == True\n    is_sum_of_powers_of_three(27) == False\n    \"\"\"\n\ndef test_is_sum_of_powers_of_three():\n    \"\"\"Run tests on function is_sum_of_powers_of_three\"\"\"\n    assert is_sum_of_powers_of_three(9) == True\n    assert is_sum_of_powers_of_three(18) == True\n    assert is_sum_of_powers_of_three(27) == False\n\ndef is_sum_of_powers_of_five(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of a power of five times five\n    Example\n    is_sum_of_powers_of_five(25) == True\n    is_sum_of_powers_of_five(30) == True\n    is_sum_of_powers_of_five(35) == False\n    \"\"\"\n\ndef test_is_sum_of_powers_of_five():\n    \"\"\"Run tests on function is_sum_of_powers_of_five\"\"\"\n    assert is_sum_of_powers_of_five(25"], ["\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()", "", "", "", "\ndef fibonacci_number(n):\n    \"\"\"The fibonacci series is a sequence of numbers in which the next number\n    is the sum of the previous two numbers.\n\n    For example:\n    >>> fibonacci_number(1)\n    1\n    >>> fibonacci_number(2)\n    1\n    >>> fibonacci_number(3)\n    2\n    >>> fibonacci_number(4)\n    3\n    >>> fibonacci_number(5)\n    5\n    >>> fibonacci_number(10)\n    55\n    >>> fibonacci_number(20)\n    6765\n\n    The function will receive an integer as input and should return the nth\n    number of the fibonacci series.\n    \"\"\"\n\ndef reverse_string(word):\n    \"\"\"The reverse of a string is the string that contains the same characters\n    but in the opposite order.\n\n    For example:\n    >>> reverse_string('Hello')\n    olleH\n\n    The function will receive a string as input and should return its reverse.\n    \"\"\"\n\ndef reverse_word(word):\n    \"\"\"The reverse of a word is the word that contains the same characters\n    but in the opposite order.\n\n    For example:\n    >>> reverse_word('Hello')\n    olleH\n\n    The function will receive a word as input and should return its reverse.\n    \"\"\"\n\ndef palindrome(word):\n    \"\"\"A palindrome is a string that is the same as its reverse.\n\n    For example:\n    >>> palindrome('Hello')\n    True\n\n    The function will receive a word as input and should return True or False.\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"A prime number is a number that can only be divisible by two numbers\n    and one.\n\n    For example:\n    >>> is_prime(17)\n    True\n    >>> is_prime(5)\n    True\n    >>> is_prime(1)\n    False\n    >>> is_prime(7)\n    False\n\n    The function will receive an integer as input"], ["", "\ndef is_palindrome(text):\n    \"\"\"\n    Given a string text, return a boolean indicating whether it is a palindrome.\n    A palindrome is a word, number, or other sequence of characters which reads the same backward and forward.\n    is_palindrome(\"taco cat\") == True\n    is_palindrome(\"tacocat\") == True\n    is_palindrome(\"tacocats\") == False\n    \"\"\"\n\ndef is_palindrome_iterative(text):\n    \"\"\"\n    Given a string text, return a boolean indicating whether it is a palindrome.\n    A palindrome is a word, number, or other sequence of characters which reads the same backward and forward.\n    is_palindrome_iterative(\"taco cat\") == True\n    is_palindrome_iterative(\"tacocat\") == True\n    is_palindrome_iterative(\"tacocats\") == False\n    \"\"\"\n\ndef is_palindrome_recursive(text, left, right):\n    \"\"\"\n    Given a string text, return a boolean indicating whether it is a palindrome.\n    A palindrome is a word, number, or other sequence of characters which reads the same backward and forward.\n    is_palindrome_recursive(\"taco cat\") == True\n    is_palindrome_recursive(\"tacocat\") == True\n    is_palindrome_recursive(\"tacocats\") == False\n    \"\"\"\n\ndef palindrome_index(text):\n    \"\"\"\n    Given a string text, return the index of its first palindrome, or -1 if there is no palindrome.\n    A palindrome is a word, number, or other sequence of characters which reads the same backward and forward.\n    palindrome_index(\"taco cat\") == 1\n    palindrome_index(\"tacocat\") == 0\n    palindrome_index(\"tacocats\") == -1\n    \"\"\"\n\ndef palindrome_range(text):\n    \"\"\"\n   ", "\ndef max_len(string_list):\n    \"\"\"\n    Given a list of strings, find the longest string in the list and return its length.\n\n    max_len([\"Hello\", \"Hi\", \"I am Alyssa\"]) == 6\n    max_len([\"Hi\", \"I am Alyssa\", \"Hello\"]) == 7\n    max_len([\"Hi\"]) == 2\n    \"\"\"\n\ndef max_value(num_list):\n    \"\"\"\n    Given a list of numbers, find the largest number in the list and return its value.\n\n    max_value([1, 2, 3, 4, 5]) == 5\n    max_value([5, 4, 3, 2, 1]) == 5\n    max_value([5]) == 5\n    max_value([1000, 100, 1]) == 1000\n    \"\"\"\n\ndef merge_sort(numbers):\n    \"\"\"\n    Given a list of numbers, sort them in ascending order using merge sort algorithm.\n\n    merge_sort([3, 2, 4, 1]) == [1, 2, 3, 4]\n    merge_sort([4, 3, 1, 2]) == [1, 2, 3, 4]\n    merge_sort([3, 1, 2, 4]) == [1, 2, 3, 4]\n    merge_sort([1, 2, 3]) == [1, 2, 3]\n    \"\"\"\n\ndef max_len_string(string_list):\n    \"\"\"\n    Given a list of strings, find the longest string in the list and return its length.\n\n    max_len_string([\"Hello\", \"Hi\", \"I am Alyssa\"]) == 6\n    max_len_string([\"Hi\", \"I am Alyssa\",", "\ndef remove_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    remove_spaces(\"Example\") == \"Example\"\n    remove_spaces(\"Example 1\") == \"Example_1\"\n    remove_spaces(\" Example 2\") == \"_Example_2\"\n    remove_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\ndef remove_spaces_in_string(string):\n    \"\"\"\n    Remove all spaces in a string\n    \"\"\"\n\ndef remove_spaces_in_list(list):\n    \"\"\"\n    Remove all spaces in a list\n    \"\"\"\n\ndef remove_spaces_in_tuple(tuple):\n    \"\"\"\n    Remove all spaces in a tuple\n    \"\"\"\n\ndef remove_spaces_in_set(set):\n    \"\"\"\n    Remove all spaces in a set\n    \"\"\"\n\ndef remove_spaces_in_dictionary(dictionary):\n    \"\"\"\n    Remove all spaces in a dictionary\n    \"\"\"\n\ndef remove_spaces_in_string_list(list_of_strings):\n    \"\"\"\n    Remove all spaces in a list of strings\n    \"\"\"\n\ndef remove_spaces_in_string_tuple(tuple_of_strings):\n    \"\"\"\n    Remove all spaces in a tuple of strings\n    \"\"\"\n\ndef remove_spaces_in_string_set(set_of_strings):\n    \"\"\"\n    Remove all spaces in a set of strings\n    \"\"\"\n\ndef remove_spaces_in_string_dictionary(dictionary_of_strings):\n    \"\"\"\n    Remove all spaces in a dictionary of strings\n    \"\"\"\n\ndef remove_spaces_in_string_list_list(list_of_lists):\n    \"\"\"\n    Remove all spaces in a list of lists\n    \"\"\"\n\ndef remove_spaces_in_string_list_tuple(list_of_tuples):", ""], ["#     return 'Yes' if (file_name.count('.') == 1 and file_name.count('0') < 3 and file_name.startswith(r'[A-Za-z]')) else 'No'\n    return 'Yes' if (file_name.count('.') == 1 and file_name.count('0') < 3 and file_name.startswith(r'[A-Za-z]')) and file_name.split('.')[1] in ['txt', 'exe', 'dll'] else 'No'\n", "\n#-------------------------------------------------------\n# 4. Write a function that takes a string representing a file's name, and returns\n# 'Yes' if the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\") # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n#-------------------------------------------------------\n\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\n#-------------------------------------------------------\n# 5. Write a function that takes a string representing a file", "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if len(file_name) > 3 and file_name.count('.') == 1:\n        if file_name[0].isalpha():\n            if file_name[-4:].lower() in ['txt', 'exe', 'dll']:\n                return 'Yes'\n    return 'No'\n\n\n# # 6.\n# # Write a function", "\ndef file_name_check_v2(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    return 'Yes' if re.search(r'\\A[a-z][a-z0-9]*\\.[a-z]{3,4}\\Z', file_name) else 'No'\n\ndef file_name_check_v3(file_name):\n    \"\"\"Create a function which takes a string representing a file's", "\ndef file_type_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the file's type is valid, and returns 'No' otherwise.\n    The file's type is considered to be valid if and only if the substring after the \n    dot is one of these: ['txt', 'exe', 'dll'].\n    Examples:\n    file_type_check(\"example.txt\") # => 'Yes'\n    file_type_check(\"example.exe\") # => 'Yes'\n    file_type_check(\"example.dll\") # => 'Yes'\n    file_type_check(\"example.jpeg\") # => 'No'\n    \"\"\"\n\ndef file_size_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the file's size is valid, and returns 'No' otherwise.\n    The file's size is considered to be valid if and only if the number of digits in the\n    file's name is between 3 and 10 inclusive.\n    Examples:\n    file_size_check(\"example.txt\") # => 'Yes'\n    file_size_check(\"1234567890example.txt\") # => 'Yes'\n    file_size_check(\"12345678"], ["# your code goes here\n\nif __name__ == '__main__':\n    lst = [1,2,3,4,5,6,7,8,9,10]\n    print(sum_squares(lst))\n    ", "\n# YOUR CODE HERE\ndef sum_squares(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum\n", "\ndef sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    # return the sum of all entries in the list\n    return sum(list(map(lambda x: x**2 if x%3 == 0 and x%4 != 0 else x**3 if x%4 == 0 else x, lst)))\n", "", "#    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            lst[i] = lst[i] ** 2\n        elif i % 3 != 0 and i % 4 == 0:\n            lst[i] = lst[i] ** 3\n        sum += lst[i]\n    return sum\n\ndef test_sum_squares():\n    assert sum_squares([1,2,3]) == 6\n    assert sum_squares([]) == 0\n    assert sum_squares([-1,-5,2,-1,-5]) == -126\n\ndef test_sum_squares_one_arg():\n    assert sum_squares(3) == 27\n\ndef test_sum_squares_one_arg_negative():\n    assert sum_squares(-3) == 27\n\ndef test_sum_squares_one_arg_string():\n    assert sum_squares('3') == 27\n\ndef test_sum_squares_one_arg_float():\n    assert sum_squares(3.0) == 27\n\ndef test_sum_squares_one_arg_string_float():\n    assert sum_squares('3.0') == 27\n\ndef test_sum_squares_one_arg_complex():\n    assert sum_squares(3.0+2j) == 27\n\n"], ["", "", "\ndef main():\n    print(words_in_sentence('This is a test'))\n    print(words_in_sentence('lets go for swimming'))\n\nif __name__ == '__main__':\n    main()", "", "\ndef main():\n    sentence = \"This is a test\"\n    print(words_in_sentence(sentence))\n\nif __name__ == '__main__':\n    main()"], ["\nif __name__ == \"__main__\":\n    print(simplify(\"1/5\", \"5/1\"))\n    print(simplify(\"1/6\", \"2/1\"))\n    print(simplify(\"7/10\", \"10/2\"))\n", "\ndef is_prime(num):\n    \"\"\"Your task is to implement a function that determines if a given number is prime.\n    The function returns True if num is prime and False otherwise.\n\n    A number is called prime if it has exactly two divisors, one and itself.\n\n    Examples\n    is_prime(2) = True\n    is_prime(7) = True\n    is_prime(17) = False\n    \"\"\"\n\ndef main():\n    \"\"\"The main function\"\"\"\n    print(simplify(\"1/5\", \"5/1\"))\n    print(simplify(\"1/6\", \"2/1\"))\n    print(simplify(\"7/10\", \"10/2\"))\n    print(is_prime(2))\n    print(is_prime(7))\n    print(is_prime(17))\n\nif __name__ == '__main__':\n    main()\n", "", "", "\nif __name__ == \"__main__\":\n    print(simplify(\"1/5\", \"5/1\"))\n    print(simplify(\"1/6\", \"2/1\"))\n    print(simplify(\"7/10\", \"10/2\"))"], ["", "\ndef sort_by_sum_of_digits(nums):\n    \"\"\"\n    Sort the given list of integers in ascending order\n    according to their sum of digits.\n\n    >>> sort_by_sum_of_digits([1, 2, 3, 4, 5]) == [1, 3, 5, 2, 4]\n    \"\"\"\n\ndef sort_by_length(nums):\n    \"\"\"\n    Sort the given list of strings by length of strings\n    (number of characters).\n\n    >>> sort_by_length(['abc', 'aaa', 'bbc', 'aaaa']) == ['aaa', 'aaaa', 'bbc', 'abc']\n    \"\"\"\n\ndef sort_by_prefix(strs):\n    \"\"\"\n    Sort the given list of strings in ascending order\n    according to their first prefix.\n\n    >>> sort_by_prefix(['abc', 'aaa', 'bbc', 'aaaa']) == ['aaa', 'aaaa', 'abc', 'bbc']\n    \"\"\"\n\ndef sort_by_suffix(strs):\n    \"\"\"\n    Sort the given list of strings in ascending order\n    according to their last prefix.\n\n    >>> sort_by_suffix(['abc', 'aaa', 'bbc', 'aaaa']) == ['bbc', 'abc', 'aaaa', 'aaa']\n    \"\"\"\n\ndef sort_by_first(strs):\n    \"\"\"\n    Sort the given list of strings in ascending order\n    according to their first letter.\n\n    >>> sort_by_first(['abc', 'aaa', 'bbc', 'aaaa']) == ['aaa', 'aaaa', 'bbc', 'abc']\n    \"\"\"\n\ndef sort_by_last(strs):\n    \"\"\"\n    Sort the given list of strings in ascending order\n    according to their last letter.\n\n    >>> sort_by_last(['abc', 'aaa', 'bbc', 'aaaa']) == ['bbc', 'abc',", "\ndef sort_list_by_sum(lst):\n    \"\"\"\n    Write a function which takes a list of integers and returns\n    a list of all integers in the list but sorted by their sum.\n\n    >>> sort_list_by_sum([1, 11, -1, -11, -12]) == [11, -1, -11, -12, 1]\n    >>> sort_list_by_sum([]) == []\n    \"\"\"\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\ndef order_by_points_v2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_v2([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_v2([]) == []\n    \"\"\"\n\ndef order_by_points_v3(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_v3([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_v3([]) == []\n    \"\"\"\n\ndef order_by_points_v4(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_v4([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_v4([]) == []", "\ndef longest_word(words):\n    \"\"\"\n    Write a function which takes a list of words as an input and\n    returns the longest one.\n\n    >>> longest_word([\"a\", \"ab\", \"abc\", \"abcd\", \"bbc\"])\n    'abcd'\n    \"\"\"\n\ndef is_palindrome(word):\n    \"\"\"\n    Write a function that checks if a given word is palindrome or not.\n    A word is considered palindrome if it reads the same backward\n    as forward.\n\n    >>> is_palindrome('palindrome')\n    True\n    >>> is_palindrome('hello')\n    False\n    \"\"\"\n\ndef reverse_list(nums):\n    \"\"\"\n    Write a function which takes a list of numbers as an input and\n    returns the list in reversed order.\n\n    >>> reverse_list([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n    >>> reverse_list([]) == []\n    \"\"\"\n\ndef flatten_list(list_of_lists):\n    \"\"\"\n    Write a function which takes a list of lists as an input and\n    returns a flattened list.\n\n    >>> flatten_list([[1, 2], [3], [4, 5, [6, 7, 8]], [9, 10]])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \"\"\"\n\ndef remove_duplicates(nums):\n    \"\"\"\n    Write a function which takes a list of numbers as an input and\n    returns a list of unique elements.\n\n    >>> remove_duplicates([1, 1, 2, 3, 4, 4, 5, 6, 6])\n    [1, 2, 3, 4, "], ["\ndef specialFilter2(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\ndef specialFilter3(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\ndef specialFilter4(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\ndef specialFilter5(nums):\n    \"\"\"Write a function that takes an array of numbers as input", "\ndef sortNumbers(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    a new array of the same numbers sorted from smallest to largest.\n    For example:\n    sortNumbers([15, -73, 14, -15]) => [-15, 14, 15, -73]\n    sortNumbers([33, -2, -3, 45, 21, 109]) => [-3, -2, 21, 33, 45, 109]\n    \"\"\"\n\ndef findLargestNum(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the largest number.\n    For example:\n    findLargestNum([15, -73, 14, -15]) => 15\n    findLargestNum([33, -2, -3, 45, 21, 109]) => 109\n    \"\"\"\n\ndef findSmallestNum(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the smallest number.\n    For example:\n    findSmallestNum([15, -73, 14, -15]) => -73\n    findSmallestNum([33, -2, -3, 45, 21, 109]) => -3\n    \"\"\"\n\ndef sumNumbers(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the sum of all the numbers.\n    For example:\n    sumNumbers([15, -73, 14, -15]) => -68\n    sumNumbers([33, -2, -3, 45, ", "\n#print(specialFilter([15, -73, 14, -15]))\n#print(specialFilter([33, -2, -3, 45, 21, 109]))\n\ndef specialFilter2(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    i = 0\n    count = 0\n    while i < len(nums):\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] % 10 == 1:\n            count += 1\n        i += 1\n    return count\n\nprint(specialFilter2([15, -73, 14, -15]))\nprint(specialFilter2([33, -2, -3, 45, 21, 109]))\n\ndef is_valid_triangle(a, b, c):\n    if a + b <= c and b + c <= a and a + c <= b:\n        return True\n    else:\n        return False\n\ndef is_valid_triangle2(a, b, c):\n    return a + b > c and b + c > a and a + c > b\n\nprint(is_valid_triangle(1, 2, 3))\nprint", "", "\ndef main():\n    print(specialFilter([15, -73, 14, -15]))\n    print(specialFilter([33, -2, -3, 45, 21, 109]))\n\nif __name__ == \"__main__\":\n    main()"], ["\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    if n <= 3:\n        return 0\n\n    a = list(range(1, n+1))\n\n    return sum([1 for i in range(len(a)-2) for j in range(i+1, len(a)-1) for k in range(j+1, len(a)) if a[i]+a[j]+a[k] % 3 == 0])\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j", "\ndef find_the_distance_of_the_closest_number(nums):\n    \"\"\"\n    You are given an array nums of distinct integers.\n    The array nums is sorted in non-decreasing order.\n    In one step, you can jump from any index i to any index j in the range [i+1, j-1] \n    (i.e., j > i and j is not equal to i) such that the absolute difference j - i equals |nums[j] - nums[i]|.\n    You can modify the array nums in any way.\n    You can perform the following steps at most once:\n    Choose any index i.\n    Jump to any index j in the range [i+1, j-1] (i.e., j > i and j is not equal to i) such that the absolute difference j - i equals |nums[j] - nums[i]|.\n    Example 1:\n        Input: nums = [1,2,3,4,5,6,8,10]\n        Output: 3\n        Explanation: \n        The closest number to 6 is 8 and it is 3 steps away.\n        Example 2:\n        Input: nums = [1,1,1,1,1]\n        Output: 0\n        Explanation: \n        The closest number to any number in nums is 1, so the answer is 0.\n        Example 3:\n        Input: nums = [1,2,3,4,5]\n        Output: 5\n        Explanation: \n        There is no way to reach the number 5 from any", "\nprint(get_max_triples(5))\n\n\ndef get_max_triples_1(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = list(range(1,n+1))\n    cnt = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if a[i]+a[j]+a[k]%3==0:\n                    cnt += 1\n    return cnt\n\nprint(get_max_triples_1(5))\n", "", "\ndef find_longest_word(s, dictionary):\n    \"\"\"\n    Given a string s and a dictionary of words dict, find the longest word in dict that is a substring of s. If there are more than one possible answers, return the longest word with the smallest lexicographical order. If there is no possible answer, return the empty string.\n\n    Example :\n        Input: s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]\n        Output: \"apple\"\n        Input: s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]\n        Output: \"a\"\n    \"\"\"\n\ndef min_operations(m, n, a, b):\n    \"\"\"\n    You are given m and n coins. You want to make total of n coins using the m coins. \n    The way you can make the coins is by following 3 simple steps : \n    - You can either take one coin from the first pile or from the second pile.\n    - You cannot skip a coin.\n    - You cannot rearrange the order of the coins in any way.\n    Find out the minimum number of coins needed to make the total of n coins.\n\n    Example :\n        Input: m = 3, n = 7\n        Output: 2\n        Explanation: \n        First take 1 coin from first pile. m = 2, n = 6, a = [1], b = [2,3]\n        Then take 1 coin from second pile. m = 1, n = 6, a = [1,2], b = [3]\n        So, we need "], ["", "", "\n# 12.\ndef cbf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    cbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    cbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    cbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n# 13.\ndef dbf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet", "\ndef bf2(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf2(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf2(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf2(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\ndef bf3(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function", "def bf2(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf2(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf2(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf2(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\ndef bf3(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return"], ["\ndef sort_words(lst):\n    \"\"\"Write a function that accepts a list of words as a parameter,\n    and returns the list sorted alphabetically by the length of each word,\n    where the shorter words come first.\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    For example:\n    assert sort_words([\"aa\", \"a\", \"aaa\"]) => [\"a\", \"aa\", \"aaa\"]\n    assert sort_words([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"a\", \"ab\", \"aaa\", \"cd\"]\n    \"\"\"\n\ndef sort_list(lst):\n    \"\"\"Write a function that accepts a list as a parameter,\n    and returns the list sorted in ascending order.\n    The list is always a list of numbers and never a list of strings,\n    and it may contain duplicates.\n    For example:\n    assert sort_list([1, 3, 5, 2]) => [1, 2, 3, 5]\n    assert sort_list([1, 1, 3, 3, 5]) => [1, 1, 3, 3, 5]\n    \"\"\"\n\ndef sort_dict(dct):\n    \"\"\"Write a function that accepts a dictionary as a parameter,\n    and returns the dictionary sorted in ascending order.\n    The dictionary is always a dictionary of numbers and never a dictionary of strings,\n    and it may contain duplicates.\n    The key is always a number and the value is always a string", "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    new_list = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            new_list.append(word)\n    return sorted(new_list)\n\ndef is_palindrome(s):\n    \"\"\"Write a function that accepts a string as a parameter and returns a Boolean.\n    The function should return True if the string is a palindrome,\n    False if it isn't.\n    For example:\n    assert is_palindrome(\"kayak\") == True\n    assert is_palindrome(\"noon\") == True\n    assert is_palindrome(\"a\") == True\n    assert is_palindrome(\" \") ==", "\ndef list_sort(lst):\n    lst.sort(key=len)\n    lst.sort()\n    return lst\n\ndef sorted_list_sum_2(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(list(filter(lambda x: len(x)%2!=0, lst)), key=len)\n\ndef list_sort_2(lst):\n    return sorted(list(filter(lambda x: len(x)%2!=0, lst)), key=len, reverse=True)\n\n\ndef check_password_strength(password):\n    \"\"\"Write a function that accepts a string password as a parameter,\n    and returns the password strength in the following format:\n    'Password is too short' if it is", "", "\ndef sum_numbers(lst):\n    \"\"\"Write a function that accepts a list of numbers as a parameter,\n    and returns the sum of all numbers in the list.\n    The list is always a list of numbers and never an array of strings,\n    and it may contain duplicates.\n    The function should return an integer.\n    For example:\n    assert sum_numbers([1, 2, 3]) => 6\n    assert sum_numbers([1, 3, 5]) => 9\n    \"\"\"\n\ndef product_numbers(lst):\n    \"\"\"Write a function that accepts a list of numbers as a parameter,\n    and returns the product of all numbers in the list.\n    The list is always a list of numbers and never an array of strings,\n    and it may contain duplicates.\n    The function should return a float.\n    For example:\n    assert product_numbers([1, 2, 3]) => 6\n    assert product_numbers([1, 3, 5]) => 15\n    \"\"\"\n\ndef max_numbers(lst):\n    \"\"\"Write a function that accepts a list of numbers as a parameter,\n    and returns the highest number in the list.\n    The list is always a list of numbers and never an array of strings,\n    and it may contain duplicates.\n    The function should return a number.\n    For example:\n    assert max_numbers([1, 2, 3]) => 3\n    assert max_numbers([1, 3, 5]) => 5\n    \"\"\"\n\ndef min_numbers"], ["", "\ndef x_or_y_with_if(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y_with_if(7, 34, 12) == 34\n    for x_or_y_with_if(15, 8, 5) == 5\n\n    \"\"\"\n\ndef x_or_y_with_if_else(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y_with_if_else(7, 34, 12) == 34\n    for x_or_y_with_if_else(15, 8, 5) == 5\n\n    \"\"\"\n\ndef x_or_y_with_if_else_if(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y_with_if_else_if(7, 34, 12) == 34\n    for x_or_y_with_if_else_if(15, 8, 5) == 5\n\n    \"\"\"\n\ndef x_or_y_with_nested_if(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y_with_nested_if(7, 34, 12) == 34\n    for x_or_y_with_nested_if(15, 8", "\ndef test_x_or_y():\n    \"\"\"Check that x_or_y works as expected\"\"\"\n    assert x_or_y(15, 8, 5) == 5\n    assert x_or_y(7, 34, 12) == 34\n\n\nif __name__ == \"__main__\":\n    test_x_or_y()", "#     print(\"x = \", x)\n#     print(\"y = \", y)\n\n    if n%2 == 0:\n        return x\n\n    else:\n        return y\n\n\n\n# -\n\n# <a id='q6'></a>\n# ## Q6\n#\n# ### Write a program to calculate the factorial of a number using a for loop. \n#\n#\n\n# +\ndef factorial(n):\n    \"\"\"\n    Examples:\n    for factorial(5) == 120\n    for factorial(6) == 720\n    \"\"\"\n#     print(\"n = \", n)\n\n    if n == 1 or n == 0:\n        return 1\n\n    else:\n        result = n * factorial(n-1)\n        return result\n\n# print(\"factorial(5) = \", factorial(5))\n# print(\"factorial(6) = \", factorial(6))\n\n\n# -\n\n# <a id='q7'></a>\n# ## Q7\n#\n# ### Write a program to find the largest number among 4 numbers. \n\n# +\ndef max_of_four(n1, n2, n3, n4):\n    \"\"\"\n    Examples:\n    for max_of_four(10, 20, 30, 40) == 40\n    for max_of_four(40, 30, 20, 10) == 40\n    for max_of_four(10, 20, 30, 10) == 30\n    \"\"\"\n#     print(\"n1 = \", n1)\n#     print(\"n2 = \", n2)\n#     print(\"n3 = \", n3)\n#     print(\"n4 = \", n4)\n\n    if n1 >= n2 and n1 >= n3 and n1 >= n4:", "# YOUR CODE HERE\n\n\n# Test Cases\nprint(x_or_y(7, 34, 12))\nprint(x_or_y(15, 8, 5))\n"], ["# YOUR CODE HERE\nraise NotImplementedError()\n\nprint(\"Tests passed: %s/14\" % test_double_the_difference(double_the_difference))Tests passed: 14/14**Expected Output**```Tests passed: 14/14```  Exercise 4  Create a function that takes in a string and returns the count of vowels. The following vowels are considered:* A, E, I, O, U, a, e, i, o, udef count_vowels(word):\n    '''\n    Given a string, return the number of vowels.\n    \n    count_vowels('python') == 3\n    count_vowels('pythons') == 0\n    count_vowels('pythoned') == 3\n    count_vowels('') == 0\n    \n    If the input string is empty, return 0.\n    '''\n# YOUR CODE HERE\nraise NotImplementedError()\n\nprint(\"Tests passed: %s/14\" % test_count_vowels(count_vowels))Tests passed: 14/14**Expected Output**```Tests passed: 14/14```  Exercise 5  Create a function that takes in a string and returns the longest word in the string.def longest_word(sentence):\n    '''\n    Given a sentence, return the longest word in the string.\n    \n    longest_word('Python is a great language!') == 'great'\n    longest_word('Hello') == 'Hello'\n    longest_word('') == ''\n    \n    If the input string is empty, return an empty string.\n    '''\n# YOUR CODE HERE\nraise NotImplementedError()\n\nprint(\"Tests passed: %s", "\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))10\n0\n81\n0Exercise 2: Lists in function callsdef get_second(list_of_numbers):\n    '''\n    Return the second element of the list.\n    \n    get_second([1, 2, 3, 4]) == 2\n    get_second([1]) == 1\n    get_second([]) == None\n    '''\n\nprint(get_second([1, 2, 3, 4]))\nprint(get_second([1]))\nprint(get_second([]))\ndef get_second(list_of_numbers):\n    '''\n    Return the second element of the list.\n    \n    get_second([1, 2, 3, 4]) == 2\n    get_second([1]) == 1\n    get_second([]) == None\n    '''\n\nprint(get_second([1, 2, 3, 4]))\nprint(get_second([1]))\nprint(get_second([]))\ndef get_last(lst):\n    '''\n    Return the last element of the list.\n    \n    get_last([1, 2, 3, 4]) == 4\n    get_last([1]) == 1\n    get_last([]) == None\n    '''\n\nprint(get_last([1, 2, 3, 4]))\nprint(get_last([1]))\nprint(get_last([]))4\n1", "# your code here\ndef test_double_the_difference():\n    assert double_the_difference([1, 3, 2, 0]) == 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0\n\n\n# +\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if lst == []:\n        return 0\n    \n    total = 0\n    \n    for i in lst:\n        if i%2 == 1 and i%2 == 0 and i > 0:\n            total += i**2\n            \n    return total\n\ntest_double_the_difference()\n\n\n# +\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10", "#     Your code here\n\ndouble_the_difference([1, 3, 2, 0])\n#double_the_difference([-1, -2, 0])\n#double_the_difference([9, -2])\n#double_the_difference([0])Problem 6Write a function that returns the sum of the digits of a positive integer.def digit_sum(n):\n    '''\n    Given a positive integer, return the sum of the digits of that integer.\n    \n    digit_sum(12345) == 15\n    digit_sum(349) == 29\n    digit_sum(0) == 0\n    digit_sum(999999) == 999999\n    \n    If the input is 0, return 0.\n    '''\n    # Your code here\ndigit_sum(12345)\ndigit_sum(349)\ndigit_sum(0)\ndigit_sum(999999)Problem 7Write a function that returns the sum of the squares of the digits of a positive integer.def digit_square_sum(n):\n    '''\n    Given a positive integer, return the sum of the squares of the digits of that integer.\n    \n    digit_square_sum(12345) == 2950\n    digit_square_sum(349) == 434\n    digit_square_sum(0) == 0\n    digit_square_sum(999999) == 89999999\n    \n    If the input is 0, return 0.\n    '''\n#     Your code here", "\ndef make_negative(lst):\n    '''\n    Given a list of numbers, return a new list with each value in the original list\n    negated.\n    \n    make_negative([-1, 2, 3, 0]) == [1, -2, -3, 0]\n    make_negative([1, -2, 0]) == [-1, -2, 0]\n    make_negative([1, 2, 3, 0]) == [-1, -2, -3, 0]\n    make_negative([]) == []\n    \n    If the input list is empty, return an empty list.\n    '''\n\ndef list_minus_list(lst1, lst2):\n    '''\n    Given two lists of integers, return a new list containing all the values\n    from lst1 that are not in lst2.\n\n    list_minus_list([1, 3, 2], [1, 2, 3]) == [3]\n    list_minus_list([1, 2, 3], [2, 3, 4]) == [1, 4]\n    list_minus_list([1, 3, 2, 3], [1, 2, 3]) == []\n    list_minus_list([1, 2, 3], [1, 2, 3, 4]) == []\n    list_minus_list([1, 2, 3], []) == [1, 2, 3]\n    list_minus_list([], [1, 2, 3]) == []\n    list_minus_list([], []) == []\n    \n    If the input lists are empty, return an empty list.\n    '''\n\ndef list_min(lst"], ["\ndef sum_of_squares(n):\n    \"\"\"\n    Return the sum of the squares of the first n natural numbers.\n    \"\"\"\n    # Your code here\n\ndef difference_of_squares(n):\n    \"\"\"\n    Return the difference between the sum of the squares of the first n natural numbers\n    and the square of the sum.\n    \"\"\"\n    # Your code here\n\ndef square_of_sums(n):\n    \"\"\"\n    Return the square of the sum of the first n natural numbers.\n    \"\"\"\n    # Your code here\n\ndef sum_of_cubes(n):\n    \"\"\"\n    Return the sum of the cubes of the first n natural numbers.\n    \"\"\"\n    # Your code here\n\ndef difference_of_squares_sum_of_cubes(n):\n    \"\"\"\n    Return the difference between the square of the sum of the first n natural numbers\n    and the sum of the cubes of the first n natural numbers.\n    \"\"\"\n    # Your code here\n\ndef test_sum_of_squares(n):\n    \"\"\"\n    Test if the output of sum_of_squares(n) is correct\n    \"\"\"\n    # Your code here\n\ndef test_difference_of_squares(n):\n    \"\"\"\n    Test if the output of difference_of_squares(n) is correct\n    \"\"\"\n    # Your code here\n", "#     if len(game) != len(guess):\n#         return \"Game length is not equal to guess length\"\n#     else:\n#         return [abs(i-j) for i,j in zip(game,guess)]\n    \n    # My solution\n    if len(game) != len(guess):\n        return \"Game length is not equal to guess length\"\n    else:\n        return [abs(i-j) for i,j in zip(game,guess)]", "", "\ndef guess(game,guess):\n    \"\"\"Now the fun part, you're given the results of a game and your guess.\n    Your task is to return the number of matches that your guess has.\n    \n    example:\n    guess([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> 3\n    guess([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> 2\n    \"\"\"", ""], ["\ndef Number_of_Classes(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    number of classes is the number of extensions + 1.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 4.\n    Example:\n    for Number_of_Classes('my_class', ['AA', 'Be', 'CC']) == 4\n    \"\"\"\n\ndef Classes_List(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. You\n    should return a list of all the extensions in the following format:\n    ['ClassName.extension1', 'ClassName.extension2', ..., 'ClassName.extensionn']\n    Example:\n    for Classes_List('", "\ndef Split_String_By_Numbers(string):\n    \"\"\"You are given a string which may contain integers as well as strings. \n    Return a list with the integers and strings split, with the integers in the\n    order they occur in the string, and the strings in the order they occur in the\n    string.\n    Examples:\n    for Split_String_By_Numbers('abc123xyz') == ['abc', 123, 'xyz']\n    for Split_String_By_Numbers('123abcxyz') == [123, 'abc', 'xyz']\n    for Split_String_By_Numbers('a12b34c56') == ['a12b34c56']\n    \"\"\"\n\ndef String_To_Number(string):\n    \"\"\"You will be given a string and it will be split by a comma and a space.\n    You should return the integer which is the sum of the numbers in the string.\n    Example:\n    for String_To_Number('1, 2, 3') == 6\n    for String_To_Number('", "\nif __name__ == '__main__':\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'BB']))\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'BB', 'CC']))\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'BB', 'CC', 'CC']))\n", "\n# Task 4:\ndef Longest_Common_Prefix(strs):\n    \"\"\"You will be given a list of strings. You should find the longest common prefix\n    of all the strings in the list. If there is no common prefix, return the empty \n    string.\n    Example:\n    for Longest_Common_Prefix(['a', 'ab', 'abc']) == 'a'\n    for Longest_Common_Prefix(['abc', 'abcd', 'ab']) == ''\n    \"\"\"\n\n# Task 5:\ndef Shortest_String(str1, str2):\n    \"\"\"You will be given two strings. You should find the shortest string that \n    contains both strings as substrings. If there is no such string, return the \n    empty string.\n    Example:\n    for Shortest_String('I am', 'am') == 'I am'\n    for Shortest_String('I am', 'am I') == 'I am'\n    for Shortest_String('I am', 'I am I') == 'I am I'\n    \"\"\"\n\n# Task 6:\ndef Lon", "\ndef is_palindrome(word):\n    \"\"\"You will be given a word as a string. You should check if the word is\n    a palindrome. A palindrome is a word that is the same forwards and backwards.\n    Example:\n    for is_palindrome('racecar') == True\n    for is_palindrome('radar') == False\n    \"\"\"\n\ndef is_palindrome_v2(word):\n    \"\"\"You will be given a word as a string. You should check if the word is\n    a palindrome. A palindrome is a word that is the same forwards and backwards.\n    Example:\n    for is_palindrome_v2('racecar') == True\n    for is_palindrome_v2('radar') == False\n    \"\"\"\n\ndef longest_word(text):\n    \"\"\"You will be given a string. You should return the longest word in the\n    string, along with its length.\n    Example:\n    for longest_word('A string') == 'string', 6\n    \"\"\"\n\ndef longest_word_v2(text):\n    \"\"\"You will be given a string. You"], ["", "\ndef string_compression(s):\n    \"\"\"You are given a string. You need to return a new string which has all the duplicate characters removed and the remaining characters are concatenated together.\n    string_compression(\"aabcccccaaa\") => \"a2b1c5a3\"\n    string_compression(\"aabbccdd\") => \"aabbccdd\"\n    string_compression(\"aabbccddd\") => \"aabbccddd\"\n    string_compression(\"abbbccdd\") => \"abbbccdd\"\n\n    \"\"\"\n\ndef string_matching(s, t):\n    \"\"\"You are given 2 strings. You need to return the number of times the 2nd string appears in the 1st string.\n    string_matching(\"abc\",\"cab\") => 2\n    string_matching(\"abc\",\"cba\") => 2\n    string_matching(\"abc\",\"bac\") => 0\n    string_matching(\"abc\",\"cab\") => 2\n    string_matching(\"abc\",\"abc\") => 1\n    \"\"\"\n\ndef longest_palindrome(s):\n    \"\"\"You are given a string. You need to return the longest palindromic substring of the string.\n    longest_palindrome(\"abcdcba\") => \"abcdcba\"\n    longest_palindrome(\"abcdcb\") => \"bcdcb\"\n    longest_palindrome(\"abcd\") => \"abcd\"\n    longest_palindrome(\"abba\") => \"abba\"\n    longest_palindrome(\"abbb\") => \"abbb\"\n\n    \"\"\"\n\ndef longest_substring(s):\n    \"\"\"You are given a string. You need to return the longest substring of the string that only contains unique characters.\n    longest_substring(\"aabccbb\") => \"abccbb\"\n    longest_substring(\"abcdcb\") => \"abcdcb\"\n    longest_substring", "\n# 2. Write a function to find the longest substring that appears twice in a string\ndef substring_check(s):\n    \"\"\"Write a function that returns the longest substring that appears twice in a string.\n    s = \"abcd\"\n    substring_check(s) => \"cd\"\n    s = \"aabccbb\"\n    substring_check(s) => \"aabccbb\"\n\n    \"\"\"\n\n# 3. Write a function to find the longest palindromic substring in a string\ndef palindrome_check(s):\n    \"\"\"Write a function that returns the longest palindromic substring in a string.\n    s = \"aabccbb\"\n    palindrome_check(s) => \"aabccbb\"\n    s = \"abcd\"\n    palindrome_check(s) => \"abcd\"\n    s = \"abc\"\n    palindrome_check(s) => \"abc\"\n\n    \"\"\"\n\n# 4. Write a function to check if a string is a rotation of another string\ndef rotation_check(s1,s2):\n    \"\"\"Write a function to check if a string is a rotation of another string.\n    s1 = \"abcd\"\n    s2 = \"bcda\"\n    rotation_check(s1,s2) => True\n    s1 = \"abcd\"\n    s2 = \"cdaa\"\n    rotation_check(s1,s2) => True\n    s1 = \"abcd\"\n    s2 = \"abdc\"\n    rotation_check(s1,s2) => False\n    s1 = \"abcd\"\n    s2 = \"abdd\"\n    rotation_check(s1,s2) => False\n    s1 = \"abcd\"\n    s2 = \"abcd\"\n    rotation_check(s1,s2) => True", "\n#    return a.find(b) >= 0 or a.find(reverse(b)) >= 0\n#    return a.find(b) >= 0 or a.find(reverse(b)) >= 0 or a.find(reverse(reverse(b))) >= 0\n#    return a.find(b) >= 0 or a.find(reverse(b)) >= 0 or a.find(reverse(reverse(b))) >= 0 or a.find(reverse(reverse(reverse(b)))) >= 0\n#    return a.find(b) >= 0 or a.find(reverse(b)) >= 0 or a.find(reverse(reverse(b))) >= 0 or a.find(reverse(reverse(reverse(b)))) >= 0 or a.find(reverse(reverse(reverse(reverse(b))))) >= 0\n    return a.find(b) >= 0 or a.find(reverse(b)) >= 0 or a.find(reverse(reverse(b))) >= 0 or a.find(reverse(reverse(reverse(b)))) >= 0 or a.find(reverse(reverse(reverse(reverse(b))))) >= 0 or a.find(reverse(reverse(reverse(reverse(reverse(b)))))) >= 0\n\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\")", "\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"], ["\ndef check_prime(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        check_prime(1) ==> (True)\n        check_prime(2) ==> (True)\n        check_prime(3) ==> (False)\n        check_prime(4) ==> (True)\n        check_prime(5) ==> (False)\n        check_prime(6) ==> (True)\n        check_prime(7) ==> (False)\n        check_prime(8) ==> (True)\n        check_prime(9) ==> (False)\n        check_prime(10) ==> (False)\n    \"\"\"\n\ndef is_palindrome(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        is_palindrome(123) ==> (True)\n        is_palindrome(21) ==> (True)\n        is_palindrome(1221) ==> (True)\n        is_palindrome(2121) ==> (True)\n        is_palindrome(1212) ==> (True)\n        is_palindrome(212) ==> (False)\n    \"\"\"\n\ndef is_palindrome_recursive(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        is_palindrome_recursive(123) ==> (True)\n        is_palindrome_recursive(21) ==> (True)\n        is_palindrome_recursive(1221) ==> (True)\n        is_palindrome_recursive(2121) ==> (True)\n        is_palindrome_recursive(1212) ==> (True)\n        is_palindrome_recursive(212) ==> (False)\n    \"\"\"\n\ndef largest_product_of_3_numbers(num):\n    \"\"\"Given a list of numbers. return the largest product of 3 numbers.\n\n     Example:\n        largest_product_of", "\ndef is_palindrome(num):\n    \"\"\"Given a positive integer, return True if it is a palindrome, False otherwise.\n\n    Examples:\n        is_palindrome(12321) ==> True\n        is_palindrome(121) ==> True\n        is_palindrome(123) ==> False\n    \"\"\"\n\ndef is_prime(num):\n    \"\"\"Given a positive integer, return True if it is a prime, False otherwise.\n\n    Examples:\n        is_prime(12321) ==> True\n        is_prime(121) ==> True\n        is_prime(123) ==> False\n    \"\"\"\n\ndef reverse_integer(num):\n    \"\"\"Given a positive integer, return its reversed version.\n\n    Examples:\n        reverse_integer(123) ==> 321\n        reverse_integer(12321) ==> 12321\n    \"\"\"\n\ndef sum_digits(num):\n    \"\"\"Given a positive integer, return the sum of its digits.\n\n    Examples:\n        sum_digits(123) ==> 6\n        sum_digits(12321) ==> 8\n    \"\"\"\n\ndef is_armstrong_number(num):\n    \"\"\"Given an integer, return True if it is an armstrong number, False otherwise.\n\n    An Armstrong number is a number that is the cube of its own digits.\n\n    Examples:\n        is_armstrong_number(153) ==> True\n        is_armstrong_number(1) ==> True\n        is_armstrong_number(3) ==> False\n    \"\"\"\n\ndef is_armstrong_number_v2(num):\n    \"\"\"Given an integer, return True if it is an armstrong number, False otherwise.\n\n    An Armstrong number is a number that is the cube of its own digits.\n\n    Examples:\n        is_armstrong_number(153) ==> True\n        is_armstrong_number(1) ==> True\n        is_armstrong_number(3) ==> False\n    \"\"\"\n\ndef palindrome_", "\ndef longest_word(word_list):\n    \"\"\"Given a list of words. Return the length of the longest word in the list.\n\n    Example:\n        longest_word(['cat', 'elephant', 'snake']) ==> 7\n    \"\"\"\n\ndef list_to_binary(num):\n    \"\"\"Given an integer. Return the binary representation of the integer as a list of integers.\n\n    Example:\n        list_to_binary(3) ==> [1, 0, 1]\n    \"\"\"\n\ndef binary_to_list(num_list):\n    \"\"\"Given a list of integers. Return the integer represented by the binary representation of the integers in the list.\n\n    Example:\n        binary_to_list([1, 0, 1]) ==> 3\n    \"\"\"\n\ndef is_valid_ip_address(ip_address):\n    \"\"\"Given a string that is a valid IPv4 address. Return a boolean indicating whether the IP address is valid.\n    IP addresses are valid if they are strictly 4 numbers separated by a period.\n\n    Example:\n        is_valid_ip_address('172.16.254.1') ==> True\n        is_valid_ip_address('172.16.254') ==> False\n    \"\"\"\n\ndef is_valid_url(url):\n    \"\"\"Given a string that is a valid URL. Return a boolean indicating whether the URL is valid.\n    URLs are valid if they start with 'http://' or 'https://', contain only alphanumeric characters and are separated by a period.\n    They also end with a number or a letter.\n\n    Example:\n        is_valid_url('http://www.google.com') ==> True\n        is_valid_url('https://www.google.com') ==> True\n        is_valid_url('http://google.com') ==> False\n        is_valid_url('google.com') ==> False\n    \"\"\"\n\ndef find_the_difference(a, b):\n    \"\"\"Given two strings a and b. Return a string that is the longest common", "\ndef multiply_tables(table_1, table_2):\n    \"\"\"Given two square 2D arrays. Return the multiplication of these two tables.\n\n    Example:\n        multiply_tables([[1, 2],[3, 4]], [[5, 6],[7, 8]]) ==> [[19, 22],[43, 50]]\n    \"\"\"\n\ndef rotate_matrix(matrix):\n    \"\"\"Given a square 2D array. Rotate the matrix in place such that the first element becomes the last element, the second becomes the second to last etc.\n\n    Example:\n        rotate_matrix([[1, 2],[3, 4]]) ==> [[3, 4],[1, 2]]\n    \"\"\"\n\ndef sort_list(alist):\n    \"\"\"Given a list. Sort the list in place.\n\n    Example:\n        sort_list([1, 3, 2]) ==> [1, 2, 3]\n    \"\"\"\n\ndef palindrome_permutation(alist):\n    \"\"\"Given a list. Return True if the list is a palindrome.\n\n    Example:\n        palindrome_permutation([1, 2, 1]) ==> True\n        palindrome_permutation([1, 2, 3]) ==> False\n    \"\"\"\n\ndef is_anagram(word1, word2):\n    \"\"\"Given two strings. Return True if the strings are anagrams of each other.\n\n    Example:\n        is_anagram('hello', 'olleh') ==> True\n        is_anagram('hello', 'hello') ==> True\n    \"\"\"\n\ndef is_triangle(alist):\n    \"\"\"Given a list of three integers. Return True if the integers can form a triangle.\n\n    Example:\n        is_triangle([3, 4, 5]) ==> True\n        is_triangle([3, 4, 10]) ==> False\n    \"\"\"\n\ndef add_lists(alist1, alist2):\n    \"\"\"Given two lists. Return the sum of the two lists.\n\n    Example:\n        add_lists([1, 2], [3, 4", "\ndef count_vowels(sentence):\n    \"\"\"Given a string, return the number of vowels in the string.\n\n     Example:\n        count_vowels('abracadabra') ==> 5\n        count_vowels('banana') ==> 3\n    \"\"\"\n\ndef reverse_list(nums):\n    \"\"\"Given an array of numbers, return a new array that is the reverse of the given array.\n\n     Example:\n        reverse_list([1,2,3,4,5]) ==> [5,4,3,2,1]\n        reverse_list([5,4,3,2,1]) ==> [1,2,3,4,5]\n        reverse_list([1,2]) ==> [2,1]\n    \"\"\"\n\ndef reverse_string(word):\n    \"\"\"Given a string, return a new string that is the reverse of the given string.\n\n     Example:\n        reverse_string('abc') ==> 'cba'\n        reverse_string('hello') ==> 'olleh'\n        reverse_string('a') ==> 'a'\n    \"\"\"\n\ndef palindrome(word):\n    \"\"\"Given a string, return a boolean indicating if the string is a palindrome.\n\n     Example:\n        palindrome('abcba') ==> True\n        palindrome('racecar') ==> True\n        palindrome('madam') ==> False\n        palindrome('palindrome') ==> True\n        palindrome('12321') ==> True\n    \"\"\"\n\ndef max_consecutive(nums):\n    \"\"\"Given an array of numbers, return a new array that has the maximum number of consecutive numbers.\n\n     Example:\n        max_consecutive([1,2,3,1,2,1,3,4]) ==> [2,3,4]\n        max_consecutive([5,4,3,2,1,2,3,4]) ==> [5,4,3,2,1]\n        max_consecutive([1,2,3,4,5,6,7,8,9]) ==> [8,9,7"], ["", "\ndef mini_roman_to_int(number):\n    \"\"\"\n    Given a string containing a roman numeral, convert it to an integer.\n    Restrictions: num is a valid roman numeral in the range of 1-3999.\n\n    Examples:\n    >>> mini_roman_to_int('lxxx') == 400\n    >>> mini_roman_to_int('i') == 1\n    >>> mini_roman_to_int('dcclxxii') == 667\n    \"\"\"\n\ndef mini_roman_to_int2(number):\n    \"\"\"\n    Given a string containing a roman numeral, convert it to an integer.\n    Restrictions: num is a valid roman numeral in the range of 1-3999.\n\n    Examples:\n    >>> mini_roman_to_int2('lxxx') == 400\n    >>> mini_roman_to_int2('i') == 1\n    >>> mini_roman_to_int2('dcclxxii') == 667\n    \"\"\"\n", "\ndef mini_roman_to_int(number):\n    \"\"\"\n    Given a roman numeral, convert it to an integer.\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "", "\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3999\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'cili'\n    >>> int_to_roman(426) == 'cdxvi'\n    \"\"\"\n\ndef is_palindrome(number):\n    \"\"\"\n    Given a positive integer, return whether or not it is a palindrome.\n\n    Examples:\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(12321)\n    True\n    >>> is_palindrome(123456)\n    False\n    \"\"\"\n\ndef is_prime(number):\n    \"\"\"\n    Given a positive integer, return whether or not it is a prime.\n\n    Examples:\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(4)\n    False\n    \"\"\"\n\ndef is_palindrome_permutation(string):\n    \"\"\"\n    Given a string, return whether or not it is a palindrome permutation.\n\n    Examples:\n    >>> is_palindrome_permutation('taco cat')\n    True\n    >>> is_palindrome_permutation('taco cat taco')\n    False\n    \"\"\"\n\ndef knapsack(items, capacity):\n    \"\"\"\n    Given a list of items and a capacity, return the maximum value that can be\n    put in the knapsack.\n\n    Examples:\n    >>> knapsack([1, 2, 3, 4], 2)\n    4\n    >>> knapsack([2, 3, 4, 5], 1"], ["\ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(6, 8, 10) == True\n    assert right_angle_triangle(2, 6, 6) == False\n    assert right_angle_triangle(1, 1, 1) == True\n    assert right_angle_triangle(1, 2, 1) == False\n    assert right_angle_triangle(1, 1, 2) == False\n\n\ndef pyramid_shape(height):\n    '''\n    Given the height of a pyramid, return a list of the shape of a pyramid\n    Example:\n    pyramid_shape(3) == ['  *  ', ' *** ', '*****']\n    pyramid_shape(4) == ['   *  ', '  *** ', ' *****', '******']\n    '''\n\ndef test_pyramid_shape():\n    assert pyramid_shape(3) == ['  *  ', ' *** ', '*****']\n    assert pyramid_shape(4) == ['   *  ', '  *** ', ' *****', '******']\n\n\ndef shape_string(shapes):\n    '''\n    Given the shape of a pyramid as a list of strings, return the shape as a string\n    Example:\n    shape_string(['  *  ', ' *** ', '*****']) == '  *  *** *****'\n    shape_string(['   *  ', '  *** ', ' *****', '******']) == '   *  *** ***** ******'\n    '''\n\ndef test_shape_string():\n    assert shape_string(['  *  ', ' *** ', '*****']) == '  *  *** *****'\n    assert shape_string(['   *  ', ' ", "\ndef is_square(n):\n    '''\n    Given a number n, return True if the number is a square, False otherwise.\n    A number is a square if it is equal to the square of any positive integer.\n    Example:\n    is_square(16) == True\n    is_square(14) == False\n    '''\n\ndef is_palindrome(s):\n    '''\n    Given a string, return True if the string is a palindrome, False otherwise.\n    A palindrome is a word or phrase that is the same forwards and backwards.\n    Ignore capitalization when determining if a palindrome is formed.\n    Example:\n    is_palindrome('racecar') == True\n    is_palindrome('hello') == False\n    is_palindrome('123454321') == True\n    '''\n\ndef longest_common_prefix(strs):\n    '''\n    Given a list of strings, return the longest common prefix.\n    Example:\n    longest_common_prefix(['abc', 'ab', 'abcd']) == 'ab'\n    longest_common_prefix(['abc', 'ab', 'abde']) == 'ab'\n    longest_common_prefix(['abc', 'ab', 'ab']) == 'ab'\n    longest_common_prefix(['abc', 'ab', 'ab', 'abcd']) == 'ab'\n    longest_common_prefix(['abc', 'ab', 'ab', 'abcd', 'abcdef']) == 'ab'\n    '''\n\ndef longest_palindromic_substring(s):\n    '''\n    Given a string, return the longest palindromic substring in the string.\n    A palindromic string is a string that is the same forwards and backwards.\n    Ignore capitalization when determining if a palindromic string is formed.\n    Example:\n    longest_palindromic_substring('abcdcba') == 'bcdcba'\n    longest_palindrom", "\ndef sum_of_squares(n):\n    '''\n    Given a natural number n, return the sum of the squares of all positive\n    integers less than or equal to n.\n    Example:\n    sum_of_squares(10) == 55\n    sum_of_squares(5) == 55\n    '''\n\ndef difference_of_squares(n):\n    '''\n    Given a natural number n, return the difference between the sum of the squares \n    of all the natural numbers less than or equal to n and the square of the \n    sum.\n    Example:\n    difference_of_squares(10) == 2640\n    difference_of_squares(1) == 0\n    '''\n\ndef square_of_sum(n):\n    '''\n    Given a natural number n, return the square of the sum of all positive \n    integers less than or equal to n.\n    Example:\n    square_of_sum(10) == 225\n    square_of_sum(5) == 225\n    '''\n\ndef sum_of_cubes(n):\n    '''\n    Given a natural number n, return the sum of the cubes of all positive \n    integers less than or equal to n.\n    Example:\n    sum_of_cubes(10) == 10405071317\n    sum_of_cubes(5) == 177147\n    '''\n\ndef difference_of_cubes(n):\n    '''\n    Given a natural number n, return the difference between the sum of the \n    cubes of all the natural numbers less than or equal to n and the cube of \n    the sum.\n    Example:\n    difference_of_cubes(10) == 25904103435009\n    difference_of_cubes(1) == 1\n   ", "\ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) is True\n    assert right_angle_triangle(1, 2, 3) is False\n\n\nif __name__ == '__main__':\n    test_right_angle_triangle()\n", "\ndef valid_triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the area \n    of the triangle is greater than or equal to the sum of the lengths of any \n    two sides.\n    Example:\n    valid_triangle_area(3, 4, 5) == True\n    valid_triangle_area(1, 2, 3) == False\n    '''\n\ndef valid_triangle_area_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the area \n    of the triangle is greater than or equal to the sum of the lengths of any \n    two sides.\n    Example:\n    valid_triangle_area_2(3, 4, 5) == True\n    valid_triangle_area_2(1, 2, 3) == False\n    '''\n\ndef valid_triangle_area_3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the area \n    of the triangle is greater than or equal to the sum of the lengths of any \n    two sides.\n    Example:\n    valid_triangle_area_3(3, 4, 5) == True\n    valid_triangle_area_3(1, 2, 3) == False\n    '''\n\ndef triangle_type(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return one of the \n    following strings:\n    isosceles: All three sides are equal.\n    scalene: All sides are different and not equal to each other.\n    equilateral: All sides are equal.\n    Example:\n    triangle_type(3, 4, 5) == \"equilateral\"\n    triangle_type(1, 2, 3) == \"scalene\""], ["", "", "\ndef find_max_word(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max_word([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max_word([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max_word([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Your code here\n    return max(words, key=len)\n\nif __name__ == \"__main__\":\n    print(find_max_word([\"aaaaaaa\", \"bb\" ,\"cc\"]))\n", "\ndef find_max2(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max2([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max2([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max2([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    return max(words, key=lambda x: len(set(x)))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()", "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_word = ''\n    max_length = 0\n\n    for word in words:\n        length = len(set(word))\n        if length > max_length:\n            max_word = word\n            max_length = length\n\n    return max_word\n\n# 2. Write a function that accepts a list of strings.\n# The list contains different words. Return the word with maximum number of\n# characters. If multiple strings have the same maximum number of characters,\n# return the one which comes first in lexicographical order.\n# find_max_chars([\"name\", \"of\", \"string\"]) == \"of\"\n# find_max_chars([\"name\", \"enam\", \"game\"]) == \"enam\"\n# find_max_chars([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n# find_max_chars([\"aaa\", \"aaa\", \"aaa\"]) == \"aaa\"\n# find_max_chars([\"aaa\", \"aaa\", \"aaaa\"]) == \"aaa\"\n\ndef find_max_chars(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number of\n    characters. If multiple strings have the same maximum number of characters,\n    return the one which comes first"], ["", "\nif __name__ == \"__main__\":\n    print(eat(4, 8, 9))\n", "", "\nif __name__ == \"__main__\":\n    print(eat(5, 6, 10))\n    print(eat(4, 8, 9))\n    print(eat(1, 10, 10))\n    print(eat(2, 11, 5))\n", ""], ["\ndef do_power(base, exponent):\n    \"\"\"\n    Given two lists base, and exponent. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the power \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 ** 3 ** 4 ** 5\n    => result = 2417851639229258349412352\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n", "", "\nif __name__ == '__main__':\n    operator = ['+', '*', '-']\n    array = [2, 3, 4, 5]\n    print do_algebra(operator, array)\n", "\nif __name__ == \"__main__\":\n    print(\"Basic Algebra\")\n    print(\"-------------\")\n    print(\"Addition\")\n    print(\"--------\")\n    print(do_algebra(['+', '*'], [2, 3, 4, 5]))\n    print(\"Subtraction\")\n    print(\"----------\")\n    print(do_algebra(['-', '*'], [2, 3, 4, 5]))\n    print(\"Multiplication\")\n    print(\"-------------\")\n    print(do_algebra(['*', '*'], [2, 3, 4, 5]))\n    print(\"Floor Division\")\n    print(\"--------------\")\n    print(do_algebra(['//', '*'], [2, 3, 4, 5]))\n    print(\"Exponentiation\")\n    print(\"--------------\")\n    print(do_algebra(['**', '*'], [2, 3, 4, 5]))\n", "# do_algebra(['+', '*', '-'], [2, 3, 4, 5])\n# do_algebra(['*', '-'], [2, 3, 4, 5])\n# do_algebra(['-', '/', '*'], [2, 3, 4, 5])\n# do_algebra(['*', '+', '/'], [2, 3, 4, 5])\n# do_algebra(['+', '-', '**'], [2, 3, 4, 5])\n# do_algebra(['/', '*', '-'], [2, 3, 4, 5])\n# do_algebra(['+', '*', '/', '-', '-'], [2, 3, 4, 5])\n# do_algebra(['**', '+', '-'], [2, 3, 4, 5])\n# do_algebra(['-', '**'], [2, 3, 4, 5])\n# do_algebra(['/', '+', '-'], [2, 3, 4, 5])\n# do_algebra(['*', '/', '-'], [2, 3, 4, 5])\n# do_algebra(['**', '-'], [2, 3, 4, 5])\n# do_algebra(['-', '+', '/'], [2, 3, 4, 5])\n# do_algebra(['/', '-'], [2, 3, 4, 5])\n# do_algebra"], ["\nif __name__ == \"__main__\":\n    print(solve(\"1234\"))\n    print(solve(\"ab\"))\n    print(solve(\"#a@C\"))", "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234", "\nif __name__ == '__main__':\n    s = input()\n    print(solve(s))", "", "\nif __name__ == \"__main__\":\n    print(solve(\"1234\"))\n    print(solve(\"ab\"))\n    print(solve(\"#a@C\"))\n"], ["\ndef md5_to_string(md5_text):\n    \"\"\"\n    Given a string 'md5_text', return its string equivalent.\n    If 'md5_text' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha1('Hello world') == 'a94a8fe5ccb19ba61c4c0873d391e987982fbbd3'\n    \"\"\"\n\ndef sha1_to_string(sha1_text):\n    \"\"\"\n    Given a string 'sha1_text', return its string equivalent.\n    If 'sha1_text' is an empty string, return None.\n\n    >>> sha1_to_string('a94a8fe5ccb19ba61c4c0873d391e987982fbbd3') == 'Hello world'\n    \"\"\"\n\ndef string_to_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_sha256('Hello world') == '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n    \"\"\"\n\ndef sha256_to_string(sha256_", "\ndef md5_to_string(md5):\n    \"\"\"\n    Given an md5 hash, return its string equivalent.\n    If 'md5' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()", "", "\ndef md5_to_string(md5_hash):\n    \"\"\"\n    Given an md5 hash 'md5_hash', return its string equivalent.\n    If 'md5_hash' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n\ndef md5_string_to_list(md5_hash):\n    \"\"\"\n    Given an md5 hash 'md5_hash', return a list of its characters.\n    If 'md5_hash' is an empty string, return None.\n\n    >>> md5_string_to_list('3e25960a79dbc69b674cd4ec67a72c62') == ['3', 'e', '2', '5', '9', '6', '0', 'a', '7', '9', 'd', 'b', 'c', '6', '9', 'b', '6', '7', '4', 'c', 'd', '4', 'e', 'c', '6', '7', 'a', '7', '2', 'c', '6', '2']\n    \"\"\"\n\ndef md5_list_to_string(md5_list):\n    \"\"\"\n    Given an md5 hash 'md5_list', return its string equivalent.\n    If 'md5_list' is an empty list, return None.\n\n    >>> md5_list_to_string(['3', 'e', '2', '5', '9', '6', '0', 'a', '7', '9', 'd', 'b', 'c', '6', '9', 'b', '6', '7', '4', 'c', 'd', '4', 'e', 'c', '6', '", "\ndef md5_to_string(md5_hash):\n    \"\"\"\n    Given a md5 hash 'md5_hash', return its string equivalent.\n    If 'md5_hash' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n\ndef generate_md5_hash(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash.\n\n    >>> generate_md5_hash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef generate_md5_hash_list(text_list):\n    \"\"\"\n    Given a list 'text_list', return the list of its md5 hashes.\n\n    >>> generate_md5_hash_list(['Hello world', 'Goodbye world']) == ['3e25960a79dbc69b674cd4ec67a72c62', 'f430a229d729b7d17a8c08b2b1989a12']\n    \"\"\"\n\ndef main():\n    \"\"\"\n    Given the input file, process the text line by line.\n    For each line, if the line is a valid string, compute its md5 hash and print it.\n    \"\"\"\n\n    # open the input file\n    with open(sys.argv[1], 'r') as f:\n        # read the text line by line\n        for line in f:\n            # remove the newline character\n            line = line.strip()\n            # if the line is valid, print its md5 hash\n            if string_is_valid(line):\n                md5_hash = generate_md5_hash(line)\n                print(md5_"], ["\ndef generate_integers(a, b):\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n", "\ndef generate_integers_naive(a, b):\n    \"\"\"\n    Same as generate_integers, but without using any built-in functions.\n    \"\"\"\n\ndef generate_integers_optimized(a, b):\n    \"\"\"\n    Same as generate_integers, but using a built-in function.\n    \"\"\"\n\ndef generate_integers_optimized_2(a, b):\n    \"\"\"\n    Same as generate_integers, but using a built-in function.\n    \"\"\"\n", "", "", "\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"]]}