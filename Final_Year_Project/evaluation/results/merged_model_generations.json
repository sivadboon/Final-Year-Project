{"references": ["\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n", "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n", "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n", "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n", "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n", "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n", "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n", "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n", "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n", "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n", "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n", "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n", "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n", "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"], "predictions": [["", "", "", "", ""], ["", "", "", "", ""], ["\ndef is_prime(number: int) -> bool:\n    \"\"\" Given a positive integer, it can be decomposed into prime factors.\n    Return True if the given number is a prime number, otherwise return\n    False.\n\n    >>> is_prime(5)\n    True\n    >>> is_prime(10)\n    False\n    \"\"\"\n\ndef is_palindrome(number: int) -> bool:\n    \"\"\" Given a positive integer, return True if it is a palindrome,\n    otherwise return False.\n\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    \"\"\"\n\ndef prime_factors(number: int) -> List[int]:\n    \"\"\" Given a positive integer, it can be decomposed into prime factors.\n    Return the list of prime factors of the given number.\n\n    >>> prime_factors(100)\n    [2, 2, 5, 5]\n    \"\"\"\n\ndef is_palindrome_prime(number: int) -> bool:\n    \"\"\" Given a positive integer, it can be decomposed into prime factors\n    and it is a palindrome. Return True if the given number is a palindrome\n    prime, otherwise return False.\n\n    >>> is_palindrome_prime(121)\n    True\n    >>> is_palindrome_prime(123)\n    False\n    \"\"\"\n\ndef smallest_multiple(number: int) -> int:\n    \"\"\" Given a positive integer, it can be decomposed into prime factors.\n    Return the smallest positive integer that can be made by multiplying any\n    two of the given number's prime factors.\n\n    >>> smallest_multiple(2)\n    2\n    >>> smallest_multiple(3)\n    6\n    >>> smallest_multiple(4)\n    4\n    \"\"\"\n\ndef is_multiple(number: int, divisor: int) -> bool:\n    \"\"\" Given a positive integer, it can be decomposed into prime factors.\n    Return True if the given number is a multiple of the given divisor.\n\n    >>> is_", "\ndef get_decimal_places(number: float) -> int:\n    \"\"\"Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the number of decimal places in the number.\n    >>> get_decimal_places(12.34)\n    2\n    \"\"\"\n\ndef round_number(number: float, precision: int) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Round the decimal part of the number to the given precision.\n    >>> round_number(3.5, 1)\n    3.5\n    \"\"\"\n\ndef round_number_by_str(number: float, precision: str) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Round the decimal part of the number to the given precision.\n    >>> round_number_by_str(3.5, \"0.1\")\n    3.5\n    \"\"\"\n\ndef round_number_by_tuple(number: float, precision: tuple) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Round the decimal part of the number to the given precision.\n    >>> round_number_by_tuple(3.5, (0, \"0.1\"))\n    3.5\n    \"\"\"\n\ndef is_number(number: object) -> bool:\n    \"\"\"Given any object, return True if the object is a number.\n    >>> is_number(12)\n    True\n    >>> is_number", "\ndef get_min_max(array: List[float]) -> Tuple[float, float]:\n    \"\"\" Given an array of numbers, return the minimum and maximum values\n    of the array.\n\n    >>> get_min_max([1, 2, 3])\n    (1, 3)\n    \"\"\"\n\ndef get_min_max_from_list(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" Return the minimum and maximum values of an array of numbers\n    >>> get_min_max_from_list([1, 2, 3])\n    (1, 3)\n    \"\"\"\n\ndef get_min_max_from_list_in_range(numbers: List[float], range: float) -> Tuple[float, float]:\n    \"\"\" Return the minimum and maximum values of an array of numbers\n    that are smaller than or equal to the range.\n\n    >>> get_min_max_from_list_in_range([1, 2, 3], 2)\n    (1, 2)\n    \"\"\"\n\ndef get_median(array: List[float]) -> float:\n    \"\"\" Return the median of the array of numbers\n\n    >>> get_median([1, 2, 3])\n    2\n    \"\"\"\n\ndef get_mean(array: List[float]) -> float:\n    \"\"\" Return the mean of the array of numbers\n\n    >>> get_mean([1, 2, 3])\n    2\n    \"\"\"\n\ndef get_mean_from_list(numbers: List[float]) -> float:\n    \"\"\" Return the mean of the array of numbers\n\n    >>> get_mean_from_list([1, 2, 3])\n    2\n    \"\"\"\n\ndef get_mean_from_list_in_range(numbers: List[float], range: float) -> float:\n    \"\"\" Return the mean of the array of numbers\n    that are smaller than or equal to the range.\n\n    >>> get_mean_from_list_in_range([", "\ndef is_palindrome(num: int) -> bool:\n    \"\"\" Given a positive integer, check if it is a palindrome.\n\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(122)\n    False\n    \"\"\"\n\ndef is_palindrome_recursive(num: int) -> bool:\n    \"\"\" Given a positive integer, check if it is a palindrome.\n\n    >>> is_palindrome_recursive(121)\n    True\n    >>> is_palindrome_recursive(122)\n    False\n    \"\"\"\n\ndef is_palindrome_iterative(num: int) -> bool:\n    \"\"\" Given a positive integer, check if it is a palindrome.\n\n    >>> is_palindrome_iterative(121)\n    True\n    >>> is_palindrome_iterative(122)\n    False\n    \"\"\"\n\ndef count_digits(num: int) -> int:\n    \"\"\" Given a positive integer, count the number of its digits.\n\n    >>> count_digits(123)\n    3\n    >>> count_digits(12345)\n    5\n    \"\"\"\n\ndef count_digits_recursive(num: int) -> int:\n    \"\"\" Given a positive integer, count the number of its digits.\n\n    >>> count_digits_recursive(123)\n    3\n    >>> count_digits_recursive(12345)\n    5\n    \"\"\"\n\ndef count_digits_iterative(num: int) -> int:\n    \"\"\" Given a positive integer, count the number of its digits.\n\n    >>> count_digits_iterative(123)\n    3\n    >>> count_digits_iterative(12345)\n    5\n    \"\"\"\n\ndef reverse_string(string: str) -> str:\n    \"\"\" Given a string, reverse it.\n\n    >>> reverse_string('hello')\n    'olleh'\n    >>> reverse_string('goodbye')\n    'eybdoog'\n    \"\"\"\n\ndef reverse_", "\ndef is_prime(number: int) -> bool:\n    \"\"\" Checks if a number is prime.\n\n    >>> is_prime(7)\n    True\n    >>> is_prime(10)\n    False\n    \"\"\"\n\ndef is_palindrome(word: str) -> bool:\n    \"\"\" Checks if a word is a palindrome (same letters in reversed order).\n\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('radar')\n    False\n    \"\"\"\n\ndef contains_duplicates(items: list) -> bool:\n    \"\"\" Checks if the given list contains any duplicates.\n\n    >>> contains_duplicates([1, 2, 3, 4, 5])\n    False\n    >>> contains_duplicates([1, 1, 3, 4, 5])\n    True\n    >>> contains_duplicates([1, 2, 3, 2, 4, 5])\n    True\n    \"\"\"\n\ndef find_max_value_in_dict(dictionary: dict) -> int:\n    \"\"\" Given a dictionary, return the maximum value.\n\n    >>> find_max_value_in_dict({'a': 1, 'b': 2, 'c': 3})\n    3\n    >>> find_max_value_in_dict({'a': 1, 'b': 2, 'c': 1})\n    3\n    >>> find_max_value_in_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4})\n    4\n    \"\"\"\n\ndef find_min_value_in_dict(dictionary: dict) -> int:\n    \"\"\" Given a dictionary, return the minimum value.\n\n    >>> find_min_value_in_dict({'a': 1, 'b': 2, 'c': 3})\n    1\n    >>> find_min_value_in_dict({'a': 1, 'b': 2, 'c': 1})\n    1\n    >>> find_min_value"], ["", "", "", "", ""], ["", "", "", "", ""], ["", "", "", "\ndef test_intersperse():\n    assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n# def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n#     if len(numbers) == 0:\n#         return []\n#     elif len(numbers) == 1:\n#         return numbers\n#     else:\n#         return intersperse(numbers[1:], delimeter) + [delimeter] + intersperse(numbers[0:-1], delimeter)\n\n# def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n#     if len(numbers) == 0:\n#         return []\n#     elif len(numbers) == 1:\n#         return numbers\n#     else:\n#         return intersperse(numbers[1:], delimeter) + [delimeter] + intersperse(numbers[0:-1], delimeter)\n\n# def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n#     if len(numbers) == 0:\n#         return []\n#     elif len(numbers) == 1:\n#         return numbers\n#     else:\n#         return intersperse(numbers[1:], delimeter) + [delimeter] + intersperse(numbers[0:-1], delimeter)\n\n# def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n#     if len(numbers) == 0:\n#         return []\n#     elif len(numbers) == 1:\n#         return numbers\n#     else:\n#         return intersperse(numbers[1:], delimeter) + [delimeter] + intersperse(numbers[0:-1], delimeter)\n\n# def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n#     if len(numbers"], ["", "\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()", "", "", ""], ["", "\ndef filter_by_substring_old(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_old([], 'a')\n    []\n    >>> filter_by_substring_old(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return list(filter(lambda s: substring in s, strings))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)\n", "\ndef filter_by_length(strings: List[str], length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have given length\n    >>> filter_by_length([], 2)\n    []\n    >>> filter_by_length(['abc', 'bacd', 'cde', 'array'], 3)\n    ['abc', 'bacd', 'cde']\n    \"\"\"\n\n\ndef filter_by_length_and_substring(strings: List[str], substring: str, length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have given length and contain given substring\n    >>> filter_by_length_and_substring([], 'a', 1)\n    []\n    >>> filter_by_length_and_substring(['abc', 'bacd', 'cde', 'array'], 'a', 3)\n    ['abc', 'bacd']\n    \"\"\"\n\ndef filter_by_length_and_substring(strings: List[str], substring: str, length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have given length and contain given substring\n    >>> filter_by_length_and_substring([], 'a', 1)\n    []\n    >>> filter_by_length_and_substring(['abc', 'bacd', 'cde', 'array'], 'a', 3)\n    ['abc', 'bacd']\n    \"\"\"\n\ndef filter_by_length_and_substring(strings: List[str], substring: str, length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have given length and contain given substring\n    >>> filter_by_length_and_substring([], 'a', 1)\n    []\n    >>> filter_by_length_and_substring(['abc', 'bacd', 'cde', 'array'], 'a', 3)\n    ['abc', 'bacd']\n   ", "# YOUR CODE HERE\n", ""], ["", "", "", "", ""], ["\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 2, 2, 2, 2, 2]\n    \"\"\"\n\ndef rolling_sum(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling sum found until given moment in the sequence.\n    >>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n    [1, 3, 6, 11, 15, 21, 23]\n    \"\"\"\n\ndef rolling_product(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling product found until given moment in the sequence.\n    >>> rolling_product([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 6, 18, 72, 192, 240]\n    \"\"\"\n\ndef longest_increasing_subsequence(numbers: List[int]) -> List[int]:\n    \"\"\" Find the longest increasing subsequence in a given list of integers.\n    >>> longest_increasing_subsequence([1, 3, 6, 2, 7, 4, 6, 3, 1, 3])\n    [1, 3, 6, 7, 4, 6, 3, 1, 3]\n    \"\"\"\n\ndef longest_common_subsequence(s1: str, s2: str) -> Tuple", "\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 2, 2, 2, 2, 2]\n    \"\"\"\n\n\ndef rolling_average(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling average element found until given moment\n    in the sequence.\n    >>> rolling_average([1, 2, 3, 2, 3, 4, 2])\n    [1, 1.5, 2, 2.5, 3, 3.5, 4]\n    \"\"\"\n", "\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 2, 2, 2, 2, 2]\n    \"\"\"\n\ndef rolling_sum(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling sum element found until given moment\n    in the sequence.\n    >>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n    [1, 4, 7, 9, 12, 16, 18]\n    \"\"\"\n\ndef rolling_mean(numbers: List[int]) -> List[float]:\n    \"\"\" From a given list of integers, generate a list of rolling mean element found until given moment\n    in the sequence.\n    >>> rolling_mean([1, 2, 3, 2, 3, 4, 2])\n    [1.0, 2.0, 2.6666666666666665, 3.0, 3.3333333333333335, 3.75, 3.75]\n    \"\"\"\n\ndef rolling_median(numbers: List[int]) -> List[float]:\n    \"\"\" From a given list of integers, generate a list of rolling median element found until given moment\n    in the sequence.\n    >>> rolling_median([1, 2, 3, 2, 3, 4, 2])\n    [1.0, 2.0, 2.5,", "", ""], ["", "\nif __name__ == '__main__':\n    string = input(\"Input string: \")\n    print(\"Is string palindrome? {}\".format(is_palindrome(string)))\n    print(\"Make palindrome: {}\".format(make_palindrome(string)))\n", "", "", ""], ["\ndef string_xor_bitwise(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform bitwise XOR on these inputs and return result also as a string.\n    >>> string_xor_bitwise('010', '110')\n    '100'\n    \"\"\"\n\ndef string_xor_iterative(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform iterative XOR on these inputs and return result also as a string.\n    >>> string_xor_iterative('010', '110')\n    '100'\n    \"\"\"\n\ndef string_xor_recursive(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform recursive XOR on these inputs and return result also as a string.\n    >>> string_xor_recursive('010', '110')\n    '100'\n    \"\"\"\n\ndef xor_string(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> xor_string('010', '110')\n    '100'\n    \"\"\"\n    # XOR strings with string_xor_bitwise\n    # XOR strings with string_xor_iterative\n    # XOR strings with string_xor_recursive\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "\ndef xor(strings: List[str]) -> str:\n    \"\"\" Input are a list of strings consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> xor(['010', '110'])\n    '100'\n    \"\"\"\n\ndef xor_strings_inplace(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> xor_strings_inplace('010', '110')\n    '100'\n    \"\"\"\n\ndef xor_strings(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> xor_strings('010', '110')\n    '100'\n    \"\"\"\n", "\ndef hamming(a: str, b: str) -> int:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Calculate the Hamming distance between these strings.\n    >>> hamming('010', '110')\n    1\n    \"\"\"\n\ndef hamming_distance(a: str, b: str) -> int:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Calculate the Hamming distance between these strings.\n    >>> hamming_distance('010', '110')\n    1\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError('strings must be of same length')\n    return sum([1 for i in range(len(a)) if a[i] != b[i]])\n\ndef hamming_distance_gen(a: str, b: str) -> int:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Calculate the Hamming distance between these strings.\n    >>> hamming_distance_gen('010', '110')\n    1\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError('strings must be of same length')\n    return sum(1 for x, y in zip(a, b) if x != y)\n\n\ndef get_hamming_distance(a: str, b: str) -> int:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Calculate the Hamming distance between these strings.\"\"\"\n    return hamming_distance_gen(a, b)\n\n\ndef string_xor_gen(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('", "\ndef xor(a: List[int], b: List[int]) -> List[int]:\n    \"\"\" Input are two arrays of bits a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as an array.\n    >>> xor([0, 1, 0], [1, 1, 0])\n    [1, 0, 0]\n    \"\"\"\n\n\ndef string_xor_2(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor_2('010', '110')\n    '100'\n    \"\"\"\n\n\ndef xor_2(a: List[int], b: List[int]) -> List[int]:\n    \"\"\" Input are two arrays of bits a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as an array.\n    >>> xor_2([0, 1, 0], [1, 1, 0])\n    [1, 0, 0]\n    \"\"\"\n\n\ndef string_xor_3(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor_3('010', '110')\n    '100'\n    \"\"\"\n\n\ndef xor_3(a: List[int], b: List[int]) -> List[int]:\n    \"\"\" Input are two arrays of bits a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as an array.\n    >>> xor_3([0, 1, 0], [1, 1, 0])", "#     return \"\".join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n    return \"\".join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n\n\ndef get_input(file: str) -> List[str]:\n    \"\"\" Read all lines in file and return them as list.\n    >>> get_input('example.txt')\n    ['10100', '11110', '11100', '00111']\n    \"\"\"\n    with open(file) as f:\n        data = f.readlines()\n        return data\n"], ["", "", "", "", ""], ["", "\ndef greatest_common_divisors(a: int, b: int) -> tuple:\n    \"\"\" Return a tuple (gcd, x, y) where gcd is greatest common divisor,\n        x and y are positive integers such that a*x + b*y = gcd\n    >>> greatest_common_divisors(3, 5)\n    (1, 2, 1)\n    >>> greatest_common_divisors(25, 15)\n    (5, 1, -1)\n    \"\"\"\n\ndef greatest_common_divisors_fast(a: int, b: int) -> tuple:\n    \"\"\" Return a tuple (gcd, x, y) where gcd is greatest common divisor,\n        x and y are positive integers such that a*x + b*y = gcd\n    >>> greatest_common_divisors_fast(3, 5)\n    (1, 2, 1)\n    >>> greatest_common_divisors_fast(25, 15)\n    (5, 1, -1)\n    \"\"\"\n\ndef multiplicative_inverse(a: int, m: int) -> int:\n    \"\"\" Return multiplicative inverse of a modulo m\n    >>> multiplicative_inverse(2, 3)\n    1\n    >>> multiplicative_inverse(1, 2)\n    -1\n    >>> multiplicative_inverse(2, 4)\n    -2\n    \"\"\"\n\ndef multiplicative_inverse_fast(a: int, m: int) -> int:\n    \"\"\" Return multiplicative inverse of a modulo m\n    >>> multiplicative_inverse_fast(2, 3)\n    1\n    >>> multiplicative_inverse_fast(1, 2)\n    -1\n    >>> multiplicative_inverse_fast(2, 4)\n    -2\n    \"\"\"\n\ndef euclidean_algorithm(a: int, b: int) -> int:\n    \"\"\" Return Euclidean algorithm solution of a and b\n    >>> euclidean_algorithm(2, 4)", "\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    60\n    >>> least_common_multiple(25, 15)\n    300\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, otherwise return False\n    >>> is_prime(15)\n    True\n    >>> is_prime(16)\n    False\n    \"\"\"\n\ndef is_palindrom(s: str) -> bool:\n    \"\"\" Return True if s is palindrom, otherwise return False\n    >>> is_palindrom(\"kayak\")\n    True\n    >>> is_palindrom(\"racecar\")\n    False\n    \"\"\"\n\ndef is_armstrong(n: int) -> bool:\n    \"\"\" Return True if n is an Armstrong number, otherwise return False\n    >>> is_armstrong(153)\n    True\n    >>> is_armstrong(123456)\n    False\n    \"\"\"\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Return True if s is palindrome, otherwise return False\n    >>> is_palindrome(\"kayak\")\n    True\n    >>> is_palindrome(\"racecar\")\n    False\n    \"\"\"\n\ndef is_armstrong(n: int) -> bool:\n    \"\"\" Return True if n is an Armstrong number, otherwise return False\n    >>> is_armstrong(153)\n    True\n    >>> is_armstrong(123456)\n    False\n    \"\"\"\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Return True if s is palindrome, otherwise return False\n    >>> is_palindrome(\"kayak\")\n    True\n    >>> is_palindrome(\"racecar\")\n    False\n    \"\"\"\n\ndef is_armstrong(n: int) -> bool:\n    \"\"\" Return True if n is an Armstrong number, otherwise return False\n   ", "\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return Least Common Multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    75\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if integer n is prime, otherwise False\n    >>> is_prime(3)\n    True\n    >>> is_prime(5)\n    False\n    >>> is_prime(13)\n    True\n    \"\"\"\n\ndef next_prime(n: int) -> int:\n    \"\"\" Return the next prime number after integer n\n    >>> next_prime(3)\n    5\n    >>> next_prime(5)\n    7\n    >>> next_prime(13)\n    17\n    \"\"\"\n\ndef prime_factors(n: int) -> list:\n    \"\"\" Return list of prime factors of integer n\n    >>> prime_factors(3)\n    [3]\n    >>> prime_factors(19)\n    [3, 3, 2]\n    >>> prime_factors(15)\n    [3, 5]\n    \"\"\"\n\ndef prime_factorization(n: int) -> dict:\n    \"\"\" Return a dictionary of prime factorization of integer n\n    >>> prime_factorization(3)\n    {3: 1}\n    >>> prime_factorization(19)\n    {2: 1, 3: 2}\n    >>> prime_factorization(15)\n    {3: 1, 5: 1}\n    \"\"\"\n\ndef divisors(n: int) -> list:\n    \"\"\" Return list of divisors of integer n\n    >>> divisors(3)\n    [1, 3]\n    >>> divisors(19)\n    [1, 3, 9, 19]\n    >>> divisors(15)\n    [1, 3, 5, 15]\n    \"\"\"\n\ndef divisors_count(n: int)", "# Your code goes here\n\nif __name__ == \"__main__\":\n    print(greatest_common_divisor(12, 24))\n"], ["", "", "", "", ""], ["\ndef string_sequence_of_length(n: int, length: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive. The length of the string is length.\n    >>> string_sequence_of_length(5, 5)\n    '0 1 2 3 4'\n    >>> string_sequence_of_length(5, 3)\n    '0 1 2'\n    \"\"\"\n\ndef string_sequence_from_list(l: list) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto the length of l inclusive.\n    >>> string_sequence_from_list([1,2,3])\n    '0 1 2 3'\n    \"\"\"\n\ndef string_sequence_from_list_of_length(l: list, length: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto the length of l inclusive. The length of the string is length.\n    >>> string_sequence_from_list_of_length([1,2,3], 3)\n    '0 1 2'\n    \"\"\"\n\ndef string_sequence_from_tuple(t: tuple) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto the length of l inclusive.\n    >>> string_sequence_from_tuple((1,2,3))\n    '0 1 2 3'\n    \"\"\"\n\ndef string_sequence_from_tuple_of_length(t: tuple, length: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto the length of l inclusive. The length of the string is length.\n    >>> string_sequence_from_tuple_of_length((1,2,3), 3)\n    '0 1 2'\n    \"\"\"\n\ndef string_sequence_from_dict(d: dict) -> str:\n    \"\"\" Return a", "\n# string_sequence(5)\n\ndef string_permutations(s: str) -> List[str]:\n    \"\"\" Return a list of all permutations of the string s.\n    >>> string_permutations('abc')\n    ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n    \"\"\"\n\n# string_permutations('abc')\n\ndef string_rotation(s: str, k: int) -> str:\n    \"\"\" Return a string that is the result of rotating the string s by k characters.\n    >>> string_rotation('abcdef', 3)\n    'defabc'\n    >>> string_rotation('abcdef', -2)\n    'cdefab'\n    >>> string_rotation('abcdef', 0)\n    'abcdef'\n    \"\"\"\n\n# string_rotation('abcdef', 3)\n\ndef string_is_palindrome(s: str) -> bool:\n    \"\"\" Return True if the string s is a palindrome, else False.\n    >>> string_is_palindrome('abba')\n    True\n    >>> string_is_palindrome('abcba')\n    False\n    \"\"\"\n\n# string_is_palindrome('abba')\n\ndef string_longest_common_prefix(strings: List[str]) -> str:\n    \"\"\" Return the longest common prefix of the strings in the list.\n    >>> string_longest_common_prefix(['flower', 'flurry', 'flower', 'fluff'])\n    'fl'\n    >>> string_longest_common_prefix([])\n    ''\n    >>> string_longest_common_prefix(['flower', 'flower', 'flower', 'flower', 'flower'])\n    'flower'\n    \"\"\"\n\n# string_longest_common_prefix(['flower', 'flurry', 'flower', 'fluff'])\n\ndef string_first_non_repeating_character(s: str) -> str:\n    \"\"\" Return the first character that is not repeated in the string.\n    >>> string_first_non_repeating_character('aaaaabbbbbccccdddd')\n    'c'", "\ndef string_sequence_2(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence_2(0)\n    '0'\n    >>> string_sequence_2(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    sequence = []\n    for i in range(n + 1):\n        sequence.append(str(i))\n    return ' '.join(sequence)\n\ndef list_sequence(n: int) -> list:\n    \"\"\" Return a list of numbers starting from 0 upto n inclusive.\n    >>> list_sequence(0)\n    [0]\n    >>> list_sequence(5)\n    [0, 1, 2, 3, 4, 5]\n    \"\"\"\n    return [i for i in range(n + 1)]\n\ndef list_sequence_2(n: int) -> list:\n    \"\"\" Return a list of numbers starting from 0 upto n inclusive.\n    >>> list_sequence_2(0)\n    [0]\n    >>> list_sequence_2(5)\n    [0, 1, 2, 3, 4, 5]\n    \"\"\"\n    return [str(i) for i in range(n + 1)]\n\ndef list_sequence_3(n: int) -> list:\n    \"\"\" Return a list of numbers starting from 0 upto n inclusive.\n    >>> list_sequence_3(0)\n    [0]\n    >>> list_sequence_3(5)\n    [0, 1, 2, 3, 4, 5]\n    \"\"\"\n    return [f'{i}' for i in range(n + 1)]\n\ndef list_sequence_4(n: int) -> list:\n    \"\"\" Return a list of numbers starting from 0 upto n inclusive.\n    >>> list_sequence_4(0)\n    [0]\n    >>> list_sequence_4(5)\n    [0, ", "\ndef string_sequence_2(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence_2(0)\n    '0'\n    >>> string_sequence_2(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(x) for x in range(0, n + 1))\n\ndef string_sequence_3(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence_3(0)\n    '0'\n    >>> string_sequence_3(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(x) for x in range(n + 1))\n\ndef string_sequence_4(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence_4(0)\n    '0'\n    >>> string_sequence_4(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(x) for x in range(n + 1))\n\ndef string_sequence_5(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence_5(0)\n    '0'\n    >>> string_sequence_5(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(x) for x in range(n + 1))\n\ndef string_sequence_6(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence_6(0)\n    '0'\n    >>> string_sequence_", "\ndef string_sequence_with_prefix(s: str, n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence_with_prefix('1', 0)\n    '1'\n    >>> string_sequence_with_prefix('1', 5)\n    '1 2 3 4 5'\n    \"\"\"\n\ndef string_sequence_with_prefix_and_suffix(s: str, n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence_with_prefix_and_suffix('1', 0)\n    '1'\n    >>> string_sequence_with_prefix_and_suffix('1', 5)\n    '1 2 3 4 5'\n    \"\"\"\n\ndef string_sequence_with_prefix_and_suffix_and_delimiter(s: str, n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence_with_prefix_and_suffix_and_delimiter('1', 0)\n    '1'\n    >>> string_sequence_with_prefix_and_suffix_and_delimiter('1', 5)\n    '1 2 3 4 5'\n    \"\"\"\n\ndef string_sequence_with_prefix_and_suffix_and_delimiter_and_length(s: str, n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence_with_prefix_and_suffix_and_delimiter_and_length('1', 0)\n    '1'\n    >>> string_sequence_with_prefix_and_suffix_and_delimiter_and_length('1', 5)\n    '1 2 3 4 5'\n    \"\"\"\n\ndef string_sequence_with_prefix"], ["\ndef count_distinct_characters_with_set(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_with_set('xyzXYZ')\n    3\n    >>> count_distinct_characters_with_set('Jerry')\n    4\n    \"\"\"\n\ndef count_distinct_characters_with_set_and_set_intersection(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_with_set_and_set_intersection('xyzXYZ')\n    3\n    >>> count_distinct_characters_with_set_and_set_intersection('Jerry')\n    4\n    \"\"\"\n\ndef find_common_characters(string1: str, string2: str) -> str:\n    \"\"\" Given two strings, find out the common characters.\n    >>> find_common_characters('xyzXYZ', 'Jerry')\n    'xyJ'\n    \"\"\"\n\ndef find_common_characters_set_intersection(string1: str, string2: str) -> str:\n    \"\"\" Given two strings, find out the common characters.\n    >>> find_common_characters_set_intersection('xyzXYZ', 'Jerry')\n    'xyJ'\n    \"\"\"\n\ndef find_common_characters_with_two_sets(string1: str, string2: str) -> str:\n    \"\"\" Given two strings, find out the common characters.\n    >>> find_common_characters_with_two_sets('xyzXYZ', 'Jerry')\n    'xyJ'\n    \"\"\"\n\ndef find_common_characters_with_two_sets_and_set_intersection(string1: str, string2: str) -> str:\n    \"\"\" Given two strings, find out the common characters.\n    >>> find_common_characters_with_two_sets_and_set_intersection('xyzXYZ', 'Jerry')\n    'xyJ'\n    \"\"\"\n", "\ndef find_longest_substring(string: str) -> str:\n    \"\"\" Given a string, find out the longest substring that consists only of letters a-z\n    >>> find_longest_substring('Jerry')\n    'Jerry'\n    >>> find_longest_substring('xyzXYZ')\n    'xyzXYZ'\n    \"\"\"\n\ndef find_longest_substring_v2(string: str) -> str:\n    \"\"\" Given a string, find out the longest substring that consists only of letters a-z\n    >>> find_longest_substring_v2('Jerry')\n    'Jerry'\n    >>> find_longest_substring_v2('xyzXYZ')\n    'xyz'\n    \"\"\"\n\ndef find_longest_substring_v3(string: str) -> str:\n    \"\"\" Given a string, find out the longest substring that consists only of letters a-z\n    >>> find_longest_substring_v3('Jerry')\n    'Jerry'\n    >>> find_longest_substring_v3('xyzXYZ')\n    'xyz'\n    \"\"\"\n\ndef find_longest_substring_v4(string: str) -> str:\n    \"\"\" Given a string, find out the longest substring that consists only of letters a-z\n    >>> find_longest_substring_v4('Jerry')\n    'Jerry'\n    >>> find_longest_substring_v4('xyzXYZ')\n    'xyz'\n    \"\"\"\n\ndef find_longest_substring_v5(string: str) -> str:\n    \"\"\" Given a string, find out the longest substring that consists only of letters a-z\n    >>> find_longest_substring_v5('Jerry')\n    'Jerry'\n    >>> find_longest_substring_v5('xyzXYZ')\n    'xyz'\n    \"\"\"\n\ndef find_longest_substring_v6(string: str) -> str:\n    \"\"\" Given a string, find out the longest substring that consists only of letters a-z\n    >>> find_longest_substring_v6('Jerry')\n    'Jerry'\n    >>> find_longest_substring_v6('", "", "\n# Write a program that will find the longest common substring in two strings. For example, the longest common substring in \"hello\", \"world\" is \"ll\".\n\ndef longest_common_substring(string1: str, string2: str) -> str:\n    \"\"\" Given two strings, return the longest common substring\n    >>> longest_common_substring('xyzXYZ', 'Jerry')\n    'xyz'\n    >>> longest_common_substring('hello', 'world')\n    'll'\n    \"\"\"\n\ndef longest_common_substring_length(string1: str, string2: str) -> int:\n    \"\"\" Given two strings, return the length of the longest common substring\n    >>> longest_common_substring_length('xyzXYZ', 'Jerry')\n    3\n    >>> longest_common_substring_length('hello', 'world')\n    2\n    \"\"\"\n\n# Write a program that will find the longest common subsequence in two strings. For example, the longest common subsequence in \"hello\", \"world\" is \"ll\".\n\ndef longest_common_subsequence(string1: str, string2: str) -> str:\n    \"\"\" Given two strings, return the longest common subsequence\n    >>> longest_common_subsequence('xyzXYZ', 'Jerry')\n    'xyz'\n    >>> longest_common_subsequence('hello', 'world')\n    'll'\n    \"\"\"\n\ndef longest_common_subsequence_length(string1: str, string2: str) -> int:\n    \"\"\" Given two strings, return the length of the longest common subsequence\n    >>> longest_common_subsequence_length('xyzXYZ', 'Jerry')\n    3\n    >>> longest_common_subsequence_length('hello', 'world')\n    2\n    \"\"\"\n\n# Write a program that will find the longest common substring in three strings. For example, the longest common substring in \"hello\", \"world\", \"goodbye\" is \"el\".\n\ndef longest_common_substring3(string1: str, string2: str, string3: str) -> str:\n    \"\"\" Given three", "\ndef is_isogram(string: str) -> bool:\n    \"\"\" Given a string, find out if it is an isogram. An isogram is a word that has no repeating characters.\n    >>> is_isogram('isogram')\n    True\n    >>> is_isogram('eleven')\n    False\n    \"\"\"\n\ndef are_rotations(string: str, other_string: str) -> bool:\n    \"\"\" Given two strings, see if they are rotations of each other.\n    >>> are_rotations('water', 'teraw')\n    True\n    >>> are_rotations('water', 'terawee')\n    False\n    \"\"\"\n\ndef are_palindromes(string: str) -> bool:\n    \"\"\" Given a string, see if it is a palindrome. A palindrome is a string that is the same forwards and backwards.\n    >>> are_palindromes('racecar')\n    True\n    >>> are_palindromes('not a palindrome')\n    False\n    \"\"\"\n\ndef is_rotated_palindrome(string: str) -> bool:\n    \"\"\" Given a string, see if it is a palindrome but rotated one position. A palindrome is a string that is the same forwards and backwards.\n    >>> is_rotated_palindrome('racecar')\n    False\n    >>> is_rotated_palindrome('detartrated')\n    True\n    \"\"\"\n\ndef is_isogram_v2(string: str) -> bool:\n    \"\"\" Given a string, find out if it is an isogram. An isogram is a word that has no repeating characters.\n    >>> is_isogram_v2('isogram')\n    True\n    >>> is_isogram_v2('eleven')\n    False\n    \"\"\"\n\ndef is_palindrome_v2(string: str) -> bool:\n    \"\"\" Given a string, see if it is a palindrome. A palindrome is a string that is the same forwards and backwards.\n    >>> is_palindrome_v2('racecar')\n    True\n    >>> is_palindrome_v2"], ["", "", "", "", ""], ["\ndef find_longest_substring(string: str, substring: str) -> str:\n    \"\"\" Find the longest substring that is equal to given substring.\n    >>> find_longest_substring('', 'a')\n    ''\n    >>> find_longest_substring('a', 'a')\n    'a'\n    >>> find_longest_substring('aaa', 'a')\n    'aaa'\n    >>> find_longest_substring('aaa', 'aa')\n    'aa'\n    >>> find_longest_substring('aaa', 'aaa')\n    'aaa'\n    >>> find_longest_substring('aaa', 'bbb')\n    ''\n    >>> find_longest_substring('aaab', 'aaa')\n    'aaa'\n    >>> find_longest_substring('aaab', 'aa')\n    'aa'\n    >>> find_longest_substring('aaab', 'aab')\n    'aab'\n    >>> find_longest_substring('aaab', 'abb')\n    ''\n    >>> find_longest_substring('aaab', 'aab')\n    'aab'\n    >>> find_longest_substring('aaab', 'bbb')\n    ''\n    >>> find_longest_substring('aaabb', 'bbb')\n    'bbb'\n    >>> find_longest_substring('aaabb', 'bbb')\n    'bbb'\n    \"\"\"\n\ndef find_longest_substring_kmp(string: str, substring: str) -> str:\n    \"\"\" Find the longest substring that is equal to given substring using KMP.\n    >>> find_longest_substring_kmp('', 'a')\n    ''\n    >>> find_longest_substring_kmp('a', 'a')\n    'a'\n    >>> find_longest_substring_kmp('aaa', 'a')\n    'aaa'\n    >>> find_longest_substring_kmp('aaa', 'aa')\n    'aa'\n    >>> find_longest_substring_kmp('aaa', 'aaa')\n    'aaa'\n    >>> find_longest_substring_kmp('aaa', 'bbb')\n    ''\n   ", "\ndef reverse_string(string: str) -> str:\n    \"\"\" Reverse string\n    >>> reverse_string('abcdef')\n    'fedcba'\n    >>> reverse_string('hello')\n    'olleh'\n    \"\"\"\n\ndef find_and_replace(string: str, find_string: str, replace_string: str) -> str:\n    \"\"\" Find and replace substring in the string\n    >>> find_and_replace('aaa', 'a', 'b')\n    'baa'\n    >>> find_and_replace('aaa', 'a', 'aa')\n    'baa'\n    \"\"\"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Check if string is palindrome\n    >>> is_palindrome('aa')\n    True\n    >>> is_palindrome('aaa')\n    False\n    \"\"\"\n\ndef is_palindrome_optimized(string: str) -> bool:\n    \"\"\" Check if string is palindrome\n    >>> is_palindrome_optimized('aa')\n    True\n    >>> is_palindrome_optimized('aaa')\n    False\n    \"\"\"\n\ndef find_longest_substring(string: str) -> int:\n    \"\"\" Find longest substring in string\n    >>> find_longest_substring('aaaaaab')\n    4\n    >>> find_longest_substring('aaabbcc')\n    4\n    >>> find_longest_substring('aaabbccc')\n    5\n    \"\"\"\n\ndef find_longest_substring_optimized(string: str) -> int:\n    \"\"\" Find longest substring in string\n    >>> find_longest_substring_optimized('aaaaaab')\n    4\n    >>> find_longest_substring_optimized('aaabbcc')\n    4\n    >>> find_longest_substring_optimized('aaabbccc')\n    5\n    \"\"\"\n\ndef replace_words(string: str) -> str:\n    \"\"\" Replace all words in the string with its length\n    >>> replace_words('abc def')\n    '3 3'\n    >>> replace_words('aa aaa aaa aaaa aaaaaa')\n    '", "", "\ndef remove_duplicates(l: list) -> list:\n    \"\"\" Remove duplicates from a list.\n    >>> remove_duplicates([1, 2, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6])\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n\ndef remove_duplicates_2(l: list) -> list:\n    \"\"\" Remove duplicates from a list.\n    >>> remove_duplicates_2([1, 2, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6])\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n\ndef count_occurrences(l: list, item: str) -> int:\n    \"\"\" Count the occurrences of an item in a list.\n    >>> count_occurrences([1, 2, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6], 4)\n    4\n    \"\"\"\n\ndef count_occurrences_2(l: list, item: str) -> int:\n    \"\"\" Count the occurrences of an item in a list.\n    >>> count_occurrences_2([1, 2, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6], 4)\n    4\n    \"\"\"\n\ndef count_occurrences_3(l: list, item: str) -> int:\n    \"\"\" Count the occurrences of an item in a list.\n    >>> count_occurrences_3([1, 2, 3, 4, 4, 4, 5, 5,", "\ndef how_many_times_2(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count non-overlapping cases.\n    >>> how_many_times_2('', 'a')\n    0\n    >>> how_many_times_2('aaa', 'a')\n    2\n    >>> how_many_times_2('aaaa', 'aa')\n    2\n    \"\"\"\n\ndef how_many_times_3(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count non-overlapping cases.\n    >>> how_many_times_3('', 'a')\n    0\n    >>> how_many_times_3('aaa', 'a')\n    2\n    >>> how_many_times_3('aaaa', 'aa')\n    1\n    \"\"\"\n\ndef how_many_times_4(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count non-overlapping cases.\n    >>> how_many_times_4('', 'a')\n    0\n    >>> how_many_times_4('aaa', 'a')\n    2\n    >>> how_many_times_4('aaaa', 'aa')\n    1\n    \"\"\"\n\ndef how_many_times_5(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count non-overlapping cases.\n    >>> how_many_times_5('', 'a')\n    0\n    >>> how_many_times_5('aaa', 'a')\n    2\n    >>> how_many_times_5('aaaa', 'aa')\n    1\n    \"\"\"\n\ndef how_many_times_6(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original"], ["", "\tnumber_list = numbers.split(' ')\n\tnumber_list.sort()\n\treturn ' '.join(number_list)\n\ndef sort_numbers2(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers2('three one five')\n    'one three five'\n    \"\"\"\n\tnumber_list = numbers.split(' ')\n\tnumber_list.sort(key=lambda x: int(x))\n\treturn ' '.join(number_list)\n\n\ndef find_numbers(numbers: str) -> List[int]:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return a list of integers from 'zero' to 'nine'.\n    >>> find_numbers('three one five')\n    [3, 1, 5]\n    \"\"\"\n\tnumber_list = numbers.split(' ')\n\tnumber_list = [int(x) for x in number_list]\n\treturn number_list\n\n\ndef find_numbers2(numbers: str) -> List[int]:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return a list of integers from 'zero'", "#    numbers = [str(num) for num in range(10)]\n#    return \" \".join(sorted(numbers))\n    return \" \".join(sorted(numbers.split()))\n\nif __name__ == \"__main__\":\n    print(sort_numbers(input(\"Enter the numbers to sort\")))\n", "\ndef sort_words(words: str) -> str:\n    \"\"\" Input is a space-delimited string of words from 'a' to 'z'.\n    Valid choices are 'a', 'an', 'the', 'and', 'as', 'at', 'but', 'by', 'for', 'if', 'in', 'nor', 'of', 'on', 'or', 'so', 'the', 'to', 'yet'.\n    Return the string with words sorted from shortest to longest\n    >>> sort_words('by at in the a nor')\n    'a at by in nor the'\n    \"\"\"\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is a string of words from 'a' to 'z' and punctuation.\n    Valid choices are 'a', 'an', 'the', 'and', 'as', 'at', 'but', 'by', 'for', 'if', 'in', 'nor', 'of', 'on', 'or', 'so', 'the', 'to', 'yet'.\n    Return the string with words sorted from shortest to longest,\n    with the first word capitalized and the rest of the words in lower case.\n    >>> sort_sentence('The cat sat on the mat.')\n    'The Cat sat on the Mat.'\n    \"\"\"\n\ndef count_words(sentence: str) -> int:\n    \"\"\" Input is a string of words from 'a' to 'z' and punctuation.\n    Valid choices are 'a', 'an', 'the', 'and', 'as', 'at', 'but', 'by', 'for', 'if', 'in', 'nor', 'of', 'on', 'or', 'so', 'the', 'to', 'yet'.\n    Return the number of words in the sentence.\n    >>> count_words('The cat sat on the mat.')\n    5\n    \"\"\"\n\ndef count_words_v", ""], ["", "", "", "", ""], ["\ndef rescale_to_range(numbers: List[float], low: float, high: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become low and the largest will become high\n    >>> rescale_to_range([1.0, 2.0, 3.0, 4.0, 5.0], 0.0, 1.0)\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n", "", "", "", ""], ["# your code goes here\n    pass\n", "\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)\n", "", "", ""], ["\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return True if given string is palindrome, otherwise False\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('abc')\n    True\n    >>> is_palindrome('abcabc')\n    True\n    >>> is_palindrome('abccba')\n    False\n    \"\"\"\n\ndef reverse(string: str) -> str:\n    \"\"\" Return reversed string\n    >>> reverse('')\n    ''\n    >>> reverse('abc')\n    'cba'\n    \"\"\"\n\ndef to_title(string: str) -> str:\n    \"\"\" Return title cased string\n    >>> to_title('')\n    ''\n    >>> to_title('abc')\n    'Abc'\n    >>> to_title('abc def')\n    'Abc Def'\n    >>> to_title('abc def ghi')\n    'Abc Def Ghi'\n    >>> to_title('abc def ghi jkl')\n    'Abc Def Ghi Jkl'\n    \"\"\"\n\ndef capitalize(string: str) -> str:\n    \"\"\" Return capitalized string\n    >>> capitalize('')\n    ''\n    >>> capitalize('abc')\n    'Abc'\n    >>> capitalize('abc def')\n    'Abc Def'\n    >>> capitalize('abc def ghi')\n    'Abc Def Ghi'\n    >>> capitalize('abc def ghi jkl')\n    'Abc Def Ghi Jkl'\n    \"\"\"\n\ndef to_lowercase(string: str) -> str:\n    \"\"\" Return lower cased string\n    >>> to_lowercase('')\n    ''\n    >>> to_lowercase('ABC')\n    'abc'\n    >>> to_lowercase('ABC DEF')\n    'abc def'\n    >>> to_lowercase('ABC DEF GHI')\n    'abc def ghi'\n    >>> to_lowercase('ABC DEF GHI JKL')\n    'abc def ghi jkl'\n    \"\"\"\n\ndef to_uppercase(string: str) -> str:\n    \"\"\" Return upper cased string\n    >>> to_uppercase('')\n    ''\n    >>> to_uppercase('abc')\n    'ABC'\n    >>> to_uppercase('abc def')\n    'ABC DEF'\n    >>> to_uppercase('abc def ghi')\n    'ABC DEF GHI'\n    >>> to", "\ndef strcat(string1: str, string2: str) -> str:\n    \"\"\" Return the concatenation of the two strings\n    >>> strcat('abc', 'xyz')\n    'abcxyz'\n    >>> strcat('', 'xyz')\n    'xyz'\n    >>> strcat('abc', '')\n    'abc'\n    \"\"\"\n\ndef itoa(value: int, base: int) -> str:\n    \"\"\" Convert an integer value to a string using the given base\n    >>> itoa(0, 10)\n    '0'\n    >>> itoa(12345, 10)\n    '12345'\n    >>> itoa(12345, 2)\n    '10000111101'\n    >>> itoa(12345, 16)\n    '10af'\n    >>> itoa(12345, 3)\n    '100'\n    \"\"\"\n\ndef atoi(string: str, base: int) -> int:\n    \"\"\" Convert a string to an integer using the given base\n    >>> atoi('0', 10)\n    0\n    >>> atoi('12345', 10)\n    12345\n    >>> atoi('10000111101', 2)\n    12345\n    >>> atoi('10af', 16)\n    12345\n    >>> atoi('100', 3)\n    100\n    \"\"\"\n\ndef strchr(string: str, character: str) -> str:\n    \"\"\" Return a substring of string1 containing the first character\n    equal to character.\n    >>> strchr('abc', 'a')\n    'a'\n    >>> strchr('abc', 'b')\n    'b'\n    >>> strchr('abc', 'c')\n    'c'\n    >>> strchr('abc', 'd')\n    ''\n    \"\"\"\n\ndef strcmp(string1: str, string2: str) -> int:\n    \"\"\" Return the difference of the two strings\n    >>> strcmp('abc', 'abc')\n    0\n    >>> strcmp('abc', 'xyz')\n    -3\n    >>> strcmp('xyz', 'abc", "\ndef split(string: str, delimiter: str) -> List[str]:\n    \"\"\" Return list of strings that are separated by delimiter\n    >>> split('abc', '')\n    ['a', 'b', 'c']\n    >>> split('abc', 'b')\n    ['a', 'c']\n    >>> split('abc', 'd')\n    ['abc']\n    \"\"\"\n\ndef toupper(string: str) -> str:\n    \"\"\" Return uppercased string\n    >>> toupper('hello')\n    'HELLO'\n    \"\"\"\n\ndef tolower(string: str) -> str:\n    \"\"\" Return lowercased string\n    >>> tolower('HELLO')\n    'hello'\n    \"\"\"\n\ndef trim(string: str) -> str:\n    \"\"\" Return string without whitespace on left and right\n    >>> trim('  abc  ')\n    'abc'\n    \"\"\"\n\ndef replace(string: str, search: str, replace: str) -> str:\n    \"\"\" Replace search string by replace string\n    >>> replace('abc', 'a', 'x')\n    'xbc'\n    >>> replace('abc', 'c', 'x')\n    'abx'\n    \"\"\"\n\ndef count(string: str, substring: str) -> int:\n    \"\"\" Return number of times substring occurs in string\n    >>> count('abcabc', 'a')\n    2\n    >>> count('abcabc', 'c')\n    2\n    >>> count('abcabc', 'x')\n    0\n    \"\"\"\n\ndef index(string: str, substring: str) -> int:\n    \"\"\" Return index of first occurence of substring in string\n    >>> index('abcabc', 'a')\n    0\n    >>> index('abcabc', 'c')\n    2\n    >>> index('abcabc', 'x')\n    -1\n    \"\"\"\n\ndef rindex(string: str, substring: str) -> int:\n    \"\"\" Return index of last occurence of substring in string\n    >>> rindex('abcabc', 'a')\n    1\n    >>> rindex('abcabc', 'c')\n    3\n    >>> rindex('abcabc', 'x')\n    -1\n    \"\"\"\n\ndef count_words(string: str) -> int:\n    \"\"\" Return number of words in string\n    >>> count_words('abc')\n    ", "\ndef str_to_int(string: str) -> int:\n    \"\"\" Return integer representation of a string\n    >>> str_to_int('123')\n    123\n    >>> str_to_int('123abc')\n    Traceback (most recent call last):\n    ...\n    ValueError: invalid literal for int() with base 10: '123abc'\n    \"\"\"\n\ndef int_to_str(n: int) -> str:\n    \"\"\" Return string representation of an integer\n    >>> int_to_str(123)\n    '123'\n    >>> int_to_str(-123)\n    '-123'\n    \"\"\"\n\ndef str_to_float(string: str) -> float:\n    \"\"\" Return float representation of a string\n    >>> str_to_float('1.23')\n    1.23\n    >>> str_to_float('123abc')\n    Traceback (most recent call last):\n    ...\n    ValueError: could not convert string to float: '123abc'\n    \"\"\"\n\ndef float_to_str(f: float) -> str:\n    \"\"\" Return string representation of a float\n    >>> float_to_str(1.23)\n    '1.23'\n    >>> float_to_str(-1.23)\n    '-1.23'\n    \"\"\"\n\ndef str_to_bool(string: str) -> bool:\n    \"\"\" Return boolean representation of a string\n    >>> str_to_bool('True')\n    True\n    >>> str_to_bool('false')\n    False\n    >>> str_to_bool('1')\n    Traceback (most recent call last):\n    ...\n    ValueError: invalid literal for bool(): '1'\n    \"\"\"\n\ndef bool_to_str(b: bool) -> str:\n    \"\"\" Return string representation of a boolean\n    >>> bool_to_str(True)\n    'True'\n    >>> bool_to_str(False)\n    'False'\n    \"\"\"\n\ndef str_to_list(string: str) -> list:\n    \"\"\" Return list representation of a string\n    >>> str_to_list('1, 2, 3')\n    [1, 2", ""], ["\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if the given number is prime\n    >>> is_prime(11)\n    True\n    \"\"\"\n\ndef primes(n: int) -> Generator[int, None, None]:\n    \"\"\" Return an iterator of all prime numbers up to the given number (n)\n    >>> list(primes(10))\n    [2, 3, 5, 7]\n    \"\"\"\n\ndef divisors(n: int) -> Generator[int, None, None]:\n    \"\"\" Return an iterator of all divisors of the given number (n)\n    >>> list(divisors(10))\n    [1, 10, 2, 5, 2, 5]\n    \"\"\"\n\ndef sum_of_primes(n: int) -> int:\n    \"\"\" Return the sum of all prime numbers up to the given number (n)\n    >>> sum_of_primes(10)\n    17\n    \"\"\"\n\ndef sum_of_divisors(n: int) -> int:\n    \"\"\" Return the sum of all divisors of the given number (n)\n    >>> sum_of_divisors(10)\n    18\n    \"\"\"\n\ndef sum_of_proper_divisors(n: int) -> int:\n    \"\"\" Return the sum of all proper divisors of the given number (n)\n    >>> sum_of_proper_divisors(10)\n    18\n    \"\"\"\n\ndef sum_of_all_divisors(n: int) -> int:\n    \"\"\" Return the sum of all divisors of the given number (n)\n    >>> sum_of_all_divisors(10)\n    18\n    \"\"\"\n\ndef all_divisors(n: int) -> List[int]:\n    \"\"\" Return a list of all divisors of the given number (n)\n    >>> all_divisors(10)\n    [1, 10, 2, 5, 2, 5]\n    \"\"\"\n\ndef divisors", "\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)\n", "\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" For two numbers a and b, find the least common multiple of a and b\n    >>> least_common_multiple(4, 6)\n    12\n    \"\"\"\n\ndef prime_factors(n: int) -> list:\n    \"\"\" For a given number n, find all its prime factors\n    >>> prime_factors(12)\n    [2, 2, 3]\n    \"\"\"\n\ndef next_power_of_2(n: int) -> int:\n    \"\"\" Find the next power of 2 for a given number\n    >>> next_power_of_2(1)\n    1\n    >>> next_power_of_2(2)\n    2\n    >>> next_power_of_2(3)\n    4\n    >>> next_power_of_2(4)\n    4\n    \"\"\"\n\ndef is_power_of_2(n: int) -> bool:\n    \"\"\" Checks if a given number is a power of 2\n    >>> is_power_of_2(1)\n    True\n    >>> is_power_of_2(2)\n    True\n    >>> is_power_of_2(3)\n    False\n    >>> is_power_of_2(4)\n    True\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Checks if a given number is a prime number\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    \"\"\"\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\" Checks if a given number is a palindrome\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(456)\n    True\n    >>> is_palindrome(123)\n    False\n    \"\"\"\n\ndef reverse_number(n: int) -> int:\n    \"\"\" Reverse a given number\n    >>> reverse_number(123)\n    321\n    \"\"\"\n\ndef factorial(n: int", "\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n"], ["", "", "\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if the number is prime and False otherwise.\n    >>> is_prime(7)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n\ndef prime_factors(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    >>> prime_factors(8)\n    [2, 2, 2]\n    >>> prime_factors(25)\n    [5, 5]\n    >>> prime_factors(70)\n    [2, 5, 7]\n    \"\"\"\n\ndef prime_factorization(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> prime_factorization(8)\n    [2, 2, 2]\n    >>> prime_factorization(25)\n    [5, 5]\n    >>> prime_factorization(70)\n    [2, 5, 7]\n    \"\"\"\n\ndef prime_factors_multiplicity(n: int) -> List[Tuple[int, int]]:\n    \"\"\" Return list of tuples of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> prime_factors_multiplicity(8)\n    [(2, 2), (2, 1)]\n    >>> prime_factors_multiplicity(25)\n    [(5, 2)]", "", ""], ["", "", "#   return list(dict.fromkeys(numbers))\n    return list(set(numbers))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n", "", ""], ["\ndef is_palindrome(string: str) -> bool:\n    \"\"\" For a given string, check whether it is a palindrome or not.\n    >>> is_palindrome('a')\n    True\n    >>> is_palindrome('a b c d a')\n    True\n    >>> is_palindrome('a a b')\n    False\n    \"\"\"\n\ndef longest_substring(string: str) -> int:\n    \"\"\" For a given string, find the longest substring that contains only unique characters.\n    >>> longest_substring('Hello')\n    1\n    >>> longest_substring('a b c d e f')\n    5\n    >>> longest_substring('aaaaa')\n    1\n    \"\"\"\n\ndef reverse_string(string: str) -> str:\n    \"\"\" For a given string, reverse the string.\n    >>> reverse_string('Hello')\n    'olleH'\n    \"\"\"\n\ndef is_substring(string1: str, string2: str) -> bool:\n    \"\"\" For a given string, check whether string1 is a substring of string2 or not.\n    >>> is_substring('abc', 'def')\n    False\n    >>> is_substring('def', 'def')\n    True\n    \"\"\"\n\ndef is_anagram(string1: str, string2: str) -> bool:\n    \"\"\" For a given string, check whether string1 and string2 are anagrams or not.\n    >>> is_anagram('abc', 'cde')\n    False\n    >>> is_anagram('cde', 'abc')\n    False\n    >>> is_anagram('abc', 'abc')\n    True\n    \"\"\"\n\ndef longest_common_substring(string1: str, string2: str) -> str:\n    \"\"\" For two given strings, find the longest common substring.\n    >>> longest_common_substring('abc', 'def')\n    'c'\n    >>> longest_common_substring('abc', 'defgh')\n    'c'\n    >>> longest_common_substring('abc', 'defghij')\n    'c'\n    >>> longest_common_substring('abc', 'defghijabc')\n    'abc'\n    \"\"\"\n\ndef longest_palindromic_substring(string: str) -> str", "\ndef is_palindrome(string: str) -> bool:\n    \"\"\"For a given string, check if the string is a palindrome.\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('abc')\n    False\n    \"\"\"\n\ndef valid_parentheses(string: str) -> bool:\n    \"\"\"Given a string, determine if it is valid or not.\n    >>> valid_parentheses('()')\n    True\n    >>> valid_parentheses('()[]{}')\n    True\n    >>> valid_parentheses('(]')\n    False\n    >>> valid_parentheses('([)]')\n    False\n    >>> valid_parentheses('{[]}')\n    True\n    \"\"\"\n", "\ndef is_palindrome(string: str) -> bool:\n    \"\"\"For a given string, see if it is a palindrome.\n    >>> is_palindrome('radar')\n    True\n    >>> is_palindrome('radar.')\n    False\n    \"\"\"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"For a given string, see if it is a palindrome.\n    >>> is_palindrome('radar')\n    True\n    >>> is_palindrome('radar.')\n    False\n    \"\"\"\n    return string == string[::-1]\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"For a given string, see if it is a palindrome.\n    >>> is_palindrome('radar')\n    True\n    >>> is_palindrome('radar.')\n    False\n    \"\"\"\n    return string == string.lower()[::-1].lower()\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"For a given string, see if it is a palindrome.\n    >>> is_palindrome('radar')\n    True\n    >>> is_palindrome('radar.')\n    False\n    \"\"\"\n    return string.lower() == string.lower()[::-1]\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"For a given string, see if it is a palindrome.\n    >>> is_palindrome('radar')\n    True\n    >>> is_palindrome('radar.')\n    False\n    \"\"\"\n    return string.lower() == string[::-1].lower()\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"For a given string, see if it is a palindrome.\n    >>> is_palindrome('radar')\n    True\n    >>> is_palindrome('radar.')\n    False\n    \"\"\"\n    return string.lower() == string.lower()[::-1]\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"For a given string, see if it is a palindrome.\n    >>> is_palindrome('radar')\n    True\n    >>> is_palindrome('radar.')\n    False\n    \"\"\"\n    return string.lower() == string[::-1].lower()\n\ndef is_palindrome(string", "\ndef is_palindrome(string: str) -> bool:\n    \"\"\" For a given string, check whether it's a palindrome.\n\n    >>> is_palindrome('racecar')\n    True\n\n    >>> is_palindrome('taco cat')\n    True\n\n    >>> is_palindrome('abba')\n    True\n\n    >>> is_palindrome('abba')\n    False\n\n    >>> is_palindrome('1234')\n    True\n\n    >>> is_palindrome('123')\n    False\n    \"\"\"\n    if string == string[::-1]:\n        return True\n    return False\n", "\ndef reverse(string: str) -> str:\n    \"\"\" For a given string, reverse the order of the characters.\n    >>> reverse('Hello')\n    'olleH'\n    \"\"\"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" For a given string, check if it is a palindrome or not.\n    >>> is_palindrome('Hello')\n    True\n    >>> is_palindrome('Hello World')\n    True\n    >>> is_palindrome('Hello World!')\n    False\n    \"\"\"\n\ndef capitalize_words(string: str) -> str:\n    \"\"\" For a given string, capitalize the first letter of each word.\n    >>> capitalize_words('hello world')\n    'Hello World'\n    \"\"\"\n\ndef swap_case(string: str) -> str:\n    \"\"\" For a given string, swap the case of all characters.\n    >>> swap_case('Hello')\n    'hELLO'\n    \"\"\"\n\ndef rotate(string: str, n: int) -> str:\n    \"\"\" For a given string and an integer n, rotate the string n number of times.\n    >>> rotate('Hello', 3)\n    'lloHe'\n    \"\"\"\n\ndef is_subsequence(string: str, sub: str) -> bool:\n    \"\"\" For a given string and a substring, check if the substring is a subsequence of the given string.\n    >>> is_subsequence('Hello World', 'World')\n    True\n    \"\"\"\n\ndef is_permutation(string: str, other: str) -> bool:\n    \"\"\" For a given string and a string, check if the string is a permutation of the other string.\n    >>> is_permutation('Hello World', 'World Hello')\n    True\n    \"\"\"\n\ndef zero_fill(string: str, length: int) -> str:\n    \"\"\" For a given string, add zeros to the front of the string until it is of length length.\n    >>> zero_fill('123456', 10)\n    '0000123456'\n    \"\"\"\n\ndef find_index(string: str, substring: str) -> int:\n    \"\"\" For a given string"], ["", "\n#    TODO: write your code here\n", "", "", ""], ["", "", "", "", ""], ["# BEGIN SOLUTION\n    return [i for i in l if i > 0]\n# END SOLUTION\n\n# BEGIN TESTS\nimport doctest\ndoctest.testmod()\n# END TESTS\n", "\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -2, -3, -10]\n    \"\"\"\n\ndef get_even(l: list):\n    \"\"\"Return only even numbers in the list.\n    >>> get_even([-1, 2, -4, 5, 6])\n    [2, 6]\n    >>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [2, 0, 123]\n    \"\"\"\n\ndef get_odd(l: list):\n    \"\"\"Return only odd numbers in the list.\n    >>> get_odd([-1, 2, -4, 5, 6])\n    [-1, -4, 5]\n    >>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, 3, -3, -10]\n    \"\"\"\n\ndef get_positive_odd(l: list):\n    \"\"\"Return only positive odd numbers in the list.\n    >>> get_positive_odd([-1, 2, -4, 5, 6])\n    [5, 6]\n    >>> get_positive_odd([5, 3, -5, 2, -3,", "\treturn [x for x in l if x > 0]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "#%%\n    return [x for x in l if x > 0]\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n    \"\"\"\n    return [x for x in l if x < 0]\n\ndef get_zero(l: list):\n    \"\"\"Return only zero numbers in the list.\n    >>> get_zero([-1, 2, -4, 5, 6])\n    []\n    >>> get_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [0]\n    \"\"\"\n    return [x for x in l if x == 0]\n\ndef get_positive_negative(l: list):\n    \"\"\"Return only positive and negative numbers in the list.\n    >>> get_positive_negative([-1, 2, -4, 5, 6])\n    [-1, 2, -4, 5, 6]\n    >>> get_positive_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, 2, -3, 3, 9, 0, 123, 1, -10]\n    \"\"\"\n    return [x for x in l if x > 0 or x", "\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n    \"\"\"\n\ndef get_positive_negative(l: list):\n    \"\"\"Return only positive and negative numbers in the list.\n    >>> get_positive_negative([-1, 2, -4, 5, 6])\n    [-1, 2, -4, 5, 6]\n    >>> get_positive_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, 2, -10, 123, 1]\n    \"\"\"\n\ndef get_positive_negative_zeros(l: list):\n    \"\"\"Return only positive, negative and zeros in the list.\n    >>> get_positive_negative_zeros([-1, 2, -4, 5, 6])\n    [-1, 2, -4, 5, 6, 0]\n    >>> get_positive_negative_zeros([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, 2, -10, 123, 1, 0]\n    \"\"\"\n\ndef get_positive_negative_zeros_empty(l: list):\n    \"\"\""], ["\n# write your code here\ndef is_prime(n):\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    elif n % 5 == 0:\n        return False\n    elif n % 7 == 0:\n        return False\n    elif n % 11 == 0:\n        return False\n    elif n % 13 == 0:\n        return False\n    elif n % 17 == 0:\n        return False\n    elif n % 19 == 0:\n        return False\n    elif n % 23 == 0:\n        return False\n    elif n % 29 == 0:\n        return False\n    elif n % 31 == 0:\n        return False\n    elif n % 37 == 0:\n        return False\n    elif n % 41 == 0:\n        return False\n    elif n % 43 == 0:\n        return False\n    elif n % 47 == 0:\n        return False\n    elif n % 53 == 0:\n        return False\n    elif n % 59 == 0:\n        return False\n    elif n % 61 == 0:\n        return False\n    elif n % 67 == 0:\n        return False\n    elif n % 71 == 0:\n        return False\n    elif n % 73 == 0:\n        return False\n    elif n % 79 == 0:\n        return False\n    elif n % 83 == 0:\n        return False\n    elif n % 89 == 0:\n        return False\n    elif n % 97 == 0:\n        return False\n    elif n % 101 == 0:\n        return False\n    elif n % 103 == 0:", "\ndef prime_factors(n):\n    \"\"\"Return a list of prime factors of a given number.\n    >>> prime_factors(100)\n    [2, 2, 5, 5]\n    >>> prime_factors(1)\n    []\n    >>> prime_factors(6)\n    [2, 3]\n    >>> prime_factors(13441)\n    [2, 2, 2, 2, 3, 7, 13, 29, 101]\n    \"\"\"\n\ndef unique_factors(n):\n    \"\"\"Return a list of unique prime factors of a given number.\n    >>> unique_factors(100)\n    [2, 5]\n    >>> unique_factors(1)\n    []\n    >>> unique_factors(6)\n    [2, 3]\n    >>> unique_factors(13441)\n    [2, 3, 7, 13, 29, 101]\n    \"\"\"\n\ndef coprime(x, y):\n    \"\"\"Return True if two numbers are coprime, and False otherwise.\n    >>> coprime(3, 5)\n    False\n    >>> coprime(1, 1)\n    True\n    >>> coprime(1, 2)\n    True\n    >>> coprime(2, 3)\n    True\n    >>> coprime(2, 4)\n    True\n    >>> coprime(4, 5)\n    False\n    \"\"\"\n\ndef sum_proper_divisors(n):\n    \"\"\"Return sum of proper divisors of a given number.\n    >>> sum_proper_divisors(100)\n    284\n    >>> sum_proper_divisors(1)\n    0\n    >>> sum_proper_divisors(6)\n    12\n    >>> sum_proper_divisors", "# Write your code here.\n    if n==1 or n==2:\n        return True\n    elif n%2==0:\n        return False\n    elif n%3==0:\n        return False\n    else:\n        for i in range(5,int(n**0.5)+1,6):\n            if n%i==0 or n%(i+2)==0:\n                return False\n        return True\n\ndef find_first_prime(n):\n    \"\"\"Return the smallest prime number that is greater than or equal to\n    the given number.\n    >>> find_first_prime(1)\n    2\n    >>> find_first_prime(2)\n    2\n    >>> find_first_prime(3)\n    3\n    >>> find_first_prime(4)\n    5\n    >>> find_first_prime(5)\n    5\n    >>> find_first_prime(6)\n    5\n    >>> find_first_prime(7)\n    7\n    >>> find_first_prime(8)\n    11\n    >>> find_first_prime(9)\n    11\n    >>> find_first_prime(10)\n    11\n    >>> find_first_prime(11)\n    11\n    >>> find_first_prime(12)\n    11\n    >>> find_first_prime(13)\n    13\n    >>> find_first_prime(14)\n    17\n    >>> find_first_prime(15)\n    17\n    >>> find_first_prime(16)\n    17\n    >>> find_first_prime(17)\n    17\n    >>> find_first_prime(18)\n    17\n    >>> find_first_prime(19)\n    17\n    >>> find_first_prime(20)\n    17\n    >>> find_first_prime(21)\n    23\n    >>> find_first_prime(22)\n    2", "\ndef primes_in_range(start, stop):\n    \"\"\"Return a list of prime numbers between a start and stop value.\n    >>> primes_in_range(10, 20)\n    [11, 13, 17, 19]\n    >>> primes_in_range(2, 10)\n    [2, 3, 5, 7]\n    >>> primes_in_range(0, 1)\n    []\n    >>> primes_in_range(0, 2)\n    []\n    >>> primes_in_range(1, 1)\n    []\n    \"\"\"\n\ndef sum_primes(stop):\n    \"\"\"Return the sum of all prime numbers between 0 and stop.\n    >>> sum_primes(10)\n    2 + 3 + 5 + 7 + 11 + 13 = 31\n    >>> sum_primes(100)\n    2 + 3 + 5 + 7 + 11 + 13 + 17 + 19 + 23 + 29 + 31 + 37 + 41 + 43 + 47 + 53 + 59 + 61 + 67 + 71 + 73 + 79 + 83 + 89 + 97 = 1060\n    >>> sum_primes(1)\n    2\n    \"\"\"\n\ndef sum_primes_in_range(start, stop):\n    \"\"\"Return the sum of all prime numbers between start and stop.\n    >>> sum_primes_in_range(1, 10)\n    2 + 3 + 5 + 7 + 11 = 20\n    >>> sum_primes_in_range(20, 25)\n    ", "\ndef get_primes(max_num):\n    \"\"\"Return all primes less than or equal to max_num.\n    >>> get_primes(10)\n    [2, 3, 5, 7]\n    >>> get_primes(100)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \"\"\"\n\ndef get_prime_factors(n):\n    \"\"\"Return a list of prime factors of n.\n    >>> get_prime_factors(256)\n    [2, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,"], ["", "", "", "", ""], ["# YOUR CODE HERE\n\n# --------------------------------------\n# Task 4\n# --------------------------------------\n\ndef sort_fourth(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by four, while its values at the indicies that are divisible by four are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_fourth([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_fourth([5, 6, 3, 4, 8, 9, 2])\n    [2, 3, 4, 5, 6, 8, 9]\n    \"\"\"\n# YOUR CODE HERE\n\n# --------------------------------------\n# Task 5\n# --------------------------------------\n\ndef sort_fifth(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_fifth([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_fifth([5, 6, 3, 4, 8, 9, 2])\n    [2, 3, 5, 6, 8, 9, 4]\n    \"\"\"\n# YOUR CODE HERE\n\n# --------------------------------------\n# Task 6\n# --------------------------------", "", "\t#YOUR CODE HERE\n\tl_sorted = []\n\tfor i in range(len(l)):\n\t\tif i % 3 == 0:\n\t\t\tl_sorted.append(l[i])\n\t\telse:\n\t\t\tl_sorted.append(l[i])\n\treturn l_sorted\n\n\ndef sort_third_recursive(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third_recursive([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third_recursive([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\t#YOUR CODE HERE\n\tl_sorted = []\n\tfor i in range(len(l)):\n\t\tif i % 3 == 0:\n\t\t\tl_sorted.append(l[i])\n\t\telse:\n\t\t\tl_sorted.append(l[i])\n\treturn l_sorted\n\ndef is_sorted(l: list):\n    \"\"\"This function takes a list l and returns True if l is sorted in ascending order and False otherwise.\n    >>> is_sorted([1, 2, 3])\n    True\n    >>> is_sorted([5, 6, 3, 4, 8", "\ndef sort_second(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by two, while its values at the indicies that are divisible by two are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_second([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_second([5, 6, 3, 4, 8, 9, 2])\n    [5, 3, 2, 4, 8, 9, 6]\n    \"\"\"\n\ndef sort_first(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by one, while its values at the indicies that are divisible by one are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_first([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_first([5, 6, 3, 4, 8, 9, 2])\n    [5, 6, 3, 4, 8, 9, 2]\n    \"\"\"\n\ndef split_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are divisible by two, while its values at the indicies that are divisible by two are split\n    between", "\ndef is_unique_sorted(l: list):\n    \"\"\"This function takes a list l and returns True if the list l is\n    unique and sorted, and False otherwise.\n    >>> is_unique_sorted([1, 2, 3])\n    True\n    >>> is_unique_sorted([5, 6, 3, 4, 8, 9, 2])\n    False\n    \"\"\"\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n"], ["\treturn sorted(set(l))\n\ndef factorial(n):\n    \"\"\"Return n!\n    >>> factorial(5)\n    120\n    \"\"\"\n    return reduce(lambda x,y: x*y, range(1,n+1), 1)\n\ndef flatten(l):\n    \"\"\"Flatten a list of lists\n    >>> flatten([[1,2,3],[4,5,6]])\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    return [item for sublist in l for item in sublist]\n\ndef merge(l):\n    \"\"\"Merge a list of lists\n    >>> merge([[1,2,3],[4,5,6]])\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    return flatten(l)\n\ndef group(l,k):\n    \"\"\"Return groups of k from a list\n    >>> group([1,2,3,4,5,6,7,8,9],3)\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    \"\"\"\n    return [l[i:i+k] for i in range(0,len(l),k)]\n\ndef split(l,k):\n    \"\"\"Split list into k lists\n    >>> split([1,2,3,4,5,6,7,8,9],3)\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    \"\"\"\n    return group(l,k)\n\ndef zip_longest(*iterables):\n    \"\"\"Zip longest two or more iterables\n    >>> zip_longest([1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15])\n    [(1, 4, 7, 10, 13),", "\ndef group(l: list, key):\n    \"\"\"Return a dict of the unique values in l grouped by the key.\n    >>> group([{'a': 1, 'b': 2}, {'a': 1, 'b': 3}, {'a': 1, 'b': 4}], 'a')\n    {1: [{'a': 1, 'b': 2}, {'a': 1, 'b': 3}, {'a': 1, 'b': 4}]}\n    \"\"\"\n\ndef flatten(l: list):\n    \"\"\"Return a single level list.\n    >>> flatten([[1, 2], [3, 4], [5, 6]])\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n\ndef sort(l: list, key=lambda x: x):\n    \"\"\"Return a list of elements sorted by key.\n    >>> sort([4, 5, 2, 3, 6], lambda x: x%2)\n    [4, 5, 3, 6, 2]\n    \"\"\"\n\ndef sort_by(l: list, key=lambda x: x):\n    \"\"\"Return a list of elements sorted by key.\n    >>> sort_by([4, 5, 2, 3, 6], lambda x: x%2)\n    [4, 5, 3, 6, 2]\n    \"\"\"\n\ndef groupby(l: list, key=lambda x: x):\n    \"\"\"Return a dict of lists of items grouped by key.\n    >>> groupby([1, 2, 3, 4, 5, 6, 7, 8], lambda x: x%2)\n    {1: [1, 3, 5, 7, 9], 0: [2, 4, 6, 8]}\n    \"\"\"\n\ndef sum_by(l: list, key=lambda x: x):\n    \"\"\"Return a dict", "#   return sorted(list(set(l)))\n    return sorted(set(l))\n\ndef _check_valid_type(x):\n    if type(x) != list:\n        raise TypeError(\"The input must be a list\")\n\ndef is_sorted(x):\n    \"\"\"Check if the input list is sorted in increasing order\n    >>> is_sorted([1, 2, 3, 4, 5])\n    True\n    >>> is_sorted([1, 2, 3, 4])\n    False\n    \"\"\"\n    _check_valid_type(x)\n    return all(x[i] <= x[i+1] for i in range(len(x)-1))\n\ndef is_sorted_desc(x):\n    \"\"\"Check if the input list is sorted in decreasing order\n    >>> is_sorted_desc([5, 4, 3, 2, 1])\n    True\n    >>> is_sorted_desc([1, 2, 3, 4])\n    False\n    \"\"\"\n    _check_valid_type(x)\n    return all(x[i] >= x[i+1] for i in range(len(x)-1))\n\ndef is_sublist(x, y):\n    \"\"\"Check if the input list is a sublist of the second list.\n\n    >>> is_sublist([1, 2, 3, 4], [1, 2, 3])\n    True\n    >>> is_sublist([1, 2, 3], [1, 2, 3, 4])\n    False\n    \"\"\"\n    _check_valid_type(x)\n    return x in y\n\ndef is_palindrome(x):\n    \"\"\"Check if the input list is a palindrome\n\n    >>> is_palindrome([1, 2, 3, 2, 1])\n    True\n    >>> is_palindrome([1, 2, 3, 4])\n    False\n    \"\"\"\n    _check_valid_type(x)\n   ", "#    print(l)\n    return sorted(set(l))\n\ndef unique_all(l: list):\n    \"\"\"Return unique elements in a list\n    >>> unique_all([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return list(set(l))\n\ndef unique_all_no_sort(l: list):\n    \"\"\"Return unique elements in a list\n    >>> unique_all_no_sort([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return list(set(l))\n\ndef unique_sorted(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return list(set(l))\n\ndef unique_sorted_no_sort(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_sorted_no_sort([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return list(set(l))\n\ndef unique_sorted_2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_sorted_2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5", ""], ["\ndef reverse(l: list):\n    \"\"\"Return reversed copy of the list.\n    >>> reverse([1, 2, 3])\n    [3, 2, 1]\n    >>> reverse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-10, 1, 123, 0, 9, 3, -3, 2, -5, 3, 5]\n    \"\"\"\n\ndef count(l: list, item):\n    \"\"\"Return number of occurrences of the item in the list.\n    >>> count([1, 2, 3, 2], 2)\n    2\n    >>> count([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n    2\n    \"\"\"\n\ndef insert(l: list, item, index):\n    \"\"\"Insert item at the index position in the list and shift the\n    rest of the items to the right. If the index is negative, insert\n    the item at the index from the end.\n    >>> insert([1, 2, 3], 4, 2)\n    [1, 2, 4, 3]\n    >>> insert([1, 2, 3], 4, 0)\n    [4, 1, 2, 3]\n    >>> insert([1, 2, 3], 4, -1)\n    [1, 2, 4, 3]\n    \"\"\"\n\ndef remove(l: list, index):\n    \"\"\"Remove the item at the index position in the list and shift\n    the rest of the items to the left. If the index is negative,\n    remove the item at the index from the end.\n    >>> remove([1, 2, 3], 2)\n    [1, 3", "\ndef max_element_with_index(l: list):\n    \"\"\"Return maximum element and its index in the list.\n    >>> max_element_with_index([1, 2, 3])\n    (3, 2)\n    >>> max_element_with_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (123, 8)\n    \"\"\"\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n\ndef min_element_with_index(l: list):\n    \"\"\"Return minimum element and its index in the list.\n    >>> min_element_with_index([1, 2, 3])\n    (1, 0)\n    >>> min_element_with_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (-10, 7)\n    \"\"\"\n\ndef find_max_element_index(l: list):\n    \"\"\"Return index of maximum element in the list.\n    >>> find_max_element_index([1, 2, 3])\n    2\n    >>> find_max_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    8\n    \"\"\"\n\ndef find_min_element_index(l: list):\n    \"\"\"Return index of minimum element in the list.\n    >>> find_min_element_index([", "\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n\ndef sum_list(l: list):\n    \"\"\"Return sum of all elements in the list.\n    >>> sum_list([1, 2, 3])\n    6\n    >>> sum_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -4\n    \"\"\"\n\ndef count_negatives(l: list):\n    \"\"\"Return number of negative numbers in the list.\n    >>> count_negatives([1, 2, 3])\n    0\n    >>> count_negatives([-5, 2, -3, 3, 9, 0, 123, 1, -10])\n    3\n    \"\"\"\n\ndef get_middle(l: list):\n    \"\"\"Return the middle element of the list.\n    >>> get_middle([1, 2, 3])\n    2\n    >>> get_middle([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    1\n    \"\"\"\n\ndef is_empty(l: list):\n    \"\"\"Return true if the list is empty, false otherwise.\n    >>> is_empty([])\n    True\n    >>> is_empty([1, 2, 3])\n    False\n    \"\"\"\n\ndef get_length(l: list):\n    \"\"\"Return length of the list.\n    >>> get_length([])\n    0\n    >>> get_length([1, 2, 3])\n    3\n    >>> get_length([5", "\ndef sort_list(l: list):\n    \"\"\"Return a new list, sorted in ascending order.\n    >>> sort_list([1, 3, 2])\n    [1, 2, 3]\n    >>> sort_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-10, -5, 0, 1, 2, 3, 3, 5, 9, 123]\n    \"\"\"\n\ndef reverse_list(l: list):\n    \"\"\"Return a new list with elements in reverse order.\n    >>> reverse_list([1, 3, 2])\n    [2, 3, 1]\n    >>> reverse_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-10, 123, 9, 3, 3, 2, -5, 0, 1, 3, 5]\n    \"\"\"\n\ndef merge_sort(l: list):\n    \"\"\"Return a new list with elements sorted in ascending order.\n    >>> merge_sort([1, 3, 2])\n    [1, 2, 3]\n    >>> merge_sort([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-10, -5, 0, 1, 2, 3, 3, 5, 9, 123]\n    \"\"\"\n\ndef binary_search(l: list, n: int):\n    \"\"\"Return index of n in l, or -1 if not found.\n    >>> binary_search([1, 3, 2], 3)\n    2\n    >>> binary", "\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n\ndef mean(l: list):\n    \"\"\"Return average value from the list.\n    >>> mean([1, 2, 3])\n    2.0\n    >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -2.6666666666666665\n    \"\"\"\n\ndef median(l: list):\n    \"\"\"Return median value from the list.\n    >>> median([1, 2, 3])\n    2\n    >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0\n    \"\"\"\n\ndef mode(l: list):\n    \"\"\"Return mode value from the list.\n    >>> mode([1, 2, 3])\n    [2]\n    >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [3]\n    \"\"\"\n\ndef reverse(l: list):\n    \"\"\"Return reversed list.\n    >>> reverse([1, 2, 3])\n    [3, 2, 1]\n    >>> reverse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-10, 1, 123, 0, 9, 3"], ["", "\ndef fizz_buzz_2(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_2(50)\n    0\n    >>> fizz_buzz_2(78)\n    2\n    >>> fizz_buzz_2(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_3(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_3(50)\n    0\n    >>> fizz_buzz_3(78)\n    2\n    >>> fizz_buzz_3(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_4(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_4(50)\n    0\n    >>> fizz_buzz_4(78)\n    2\n    >>> fizz_buzz_4(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_5(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_5(50)\n    0\n    >>> fizz_buzz_5(78)\n    2\n    >>> fizz_buzz_5(79)\n    3\n    \"\"\"\n\ndef fizz_buzz_6(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz_6(50)\n    0\n    >>> fizz_buzz_6(78)\n    2\n    >>> fizz_buzz_6", "\ndef fibonacci(n: int):\n    \"\"\"Return the Nth Fibonacci number\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(7)\n    13\n    >>> fibonacci(10)\n    55\n    \"\"\"\n\ndef n_choose_k(n: int, k: int):\n    \"\"\"Return the number of ways to choose k items from n items without replacement.\n    >>> n_choose_k(4, 2)\n    6\n    >>> n_choose_k(10, 3)\n    35\n    >>> n_choose_k(5, 1)\n    5\n    >>> n_choose_k(5, 0)\n    1\n    \"\"\"\n\ndef n_choose_k_with_repetition(n: int, k: int):\n    \"\"\"Return the number of ways to choose k items from n items with replacement.\n    >>> n_choose_k_with_repetition(4, 2)\n    15\n    >>> n_choose_k_with_repetition(10, 3)\n    35\n    >>> n_choose_k_with_repetition(5, 1)\n    5\n    >>> n_choose_k_with_repetition(5, 0)\n    1\n    \"\"\"\n\ndef count_digits(n: int):\n    \"\"\"Return the number of digits in the given integer.\n    >>> count_digits(12)\n    2\n    >>> count_digits(92)\n    2\n    >>> count_digits(100)\n    3\n    >>> count_digits(1000)\n    4\n    \"\"\"\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(10)\n    False\n    \"\"\"\n\ndef prime_factors(n: int):\n    \"\"\"Return the prime factors of n in a list.\n    >>> prime_factors(10)\n    [2, 5]\n   ", "# Your code here\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1,n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n\n# fizz_buzz(50)\n# 0\n# fizz_buzz(78)\n# 2\n# fizz_buzz(79)\n# 3\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1,n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n\n# fizz_buzz(50)\n# 0\n# fizz_buzz(78)\n# 2\n# fizz_buzz(79)\n# 3\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1,n):", "\ndef count_digits(n: int):\n    \"\"\"Return the number of digits of n.\n    >>> count_digits(10)\n    1\n    >>> count_digits(100)\n    2\n    >>> count_digits(100000)\n    6\n    \"\"\"\n\ndef sum_digits(n: int):\n    \"\"\"Return the sum of the digits of n.\n    >>> sum_digits(12345)\n    15\n    >>> sum_digits(10000)\n    6\n    >>> sum_digits(100)\n    1\n    \"\"\"\n\ndef sum_digits_recursive(n: int):\n    \"\"\"Return the sum of the digits of n.\n    >>> sum_digits_recursive(12345)\n    15\n    >>> sum_digits_recursive(10000)\n    6\n    >>> sum_digits_recursive(100)\n    1\n    \"\"\"\n\ndef is_armstrong(n: int):\n    \"\"\"Return whether or not n is an armstrong number.\n    >>> is_armstrong(153)\n    True\n    >>> is_armstrong(370)\n    True\n    >>> is_armstrong(1)\n    False\n    \"\"\"\n\ndef is_armstrong_recursive(n: int):\n    \"\"\"Return whether or not n is an armstrong number.\n    >>> is_armstrong_recursive(153)\n    True\n    >>> is_armstrong_recursive(370)\n    True\n    >>> is_armstrong_recursive(1)\n    False\n    \"\"\"\n\ndef reverse_string(s: str):\n    \"\"\"Return the string with its characters reversed.\n    >>> reverse_string(\"Hello\")\n    olleH\n    >>> reverse_string(\"My name is <NAME>\")\n    ym si sihT eb doM\n    >>> reverse_string(\"I am Hungry\")\n    yrgnoh maI\n    \"\"\"\n\ndef reverse_string_recursive(s: str):\n    \"\"\"Return the string with its"], ["# YOUR CODE HERE\n    # create a new list of the same length\n    l1 = l[:]\n    # create a new list of the same length\n    l2 = l[:]\n    # use a while loop to loop through the list and swap the values in the correct order\n    # use the list indexes to determine if the element is even or odd, and then use the\n    # list indexes to sort the elements in the correct order\n    while len(l) > 0:\n        # get the first element\n        x = l.pop()\n        # get the second element\n        y = l.pop()\n        # if the first element is even\n        if x % 2 == 0:\n            # add it to the end of the list\n            l1.append(x)\n        # if the second element is even\n        if y % 2 == 0:\n            # add it to the end of the list\n            l1.append(y)\n        # if the first element is odd\n        else:\n            # insert it at the first element of the list\n            l2.insert(0, x)\n        # if the second element is odd\n        else:\n            # insert it at the first element of the list\n            l2.insert(0, y)\n    # return the lists\n    return l1, l2\n", "\ndef bubble_sort(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that l' is identical to l in\n    the order in which the elements appear in l.\n    >>> bubble_sort([1, 2, 3])\n    [1, 2, 3]\n    >>> bubble_sort([5, 6, 3, 4])\n    [3, 4, 5, 6]\n    \"\"\"\n\ndef count_inversions(l: list):\n    \"\"\"This function takes a list l and returns an integer n such that n is equal to the number\n    of inversions of l. Two elements a and b are considered inversions of l if a > b, and they\n    are in different indicies of l.\n    >>> count_inversions([1, 2, 3])\n    0\n    >>> count_inversions([5, 6, 3, 4])\n    2\n    \"\"\"\n\ndef merge(l1: list, l2: list):\n    \"\"\"This function takes two lists l1 and l2, and returns a single list l' such that\n    l' is identical to the concatenation of l1 and l2, but in sorted order.\n    >>> merge([1, 2, 3], [4, 5, 6])\n    [1, 2, 3, 4, 5, 6]\n    >>> merge([5, 6, 3, 4], [1, 2])\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n\ndef merge_sort(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that l' is identical to l in the\n    order in which the elements appear in l", "\t# your code here\n    i = 0\n    while i < len(l):\n        if i % 2 == 0:\n            j = i\n            while j < len(l):\n                if j % 2 == 1:\n                    j += 1\n                    continue\n                if l[j] > l[i]:\n                    l[i], l[j] = l[j], l[i]\n                j += 1\n        i += 1\n    return l\n\n\ndef test_function(test_case):\n    sorted_list = sort_even(test_case)\n    print(sorted_list)\n    if sorted_list == sorted(test_case):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n# test case 1\ntest_case = [1, 2, 3]\ntest_function(test_case)\n\n# test case 2\ntest_case = [5, 6, 3, 4]\ntest_function(test_case)\n\n# test case 3\ntest_case = [1, 3, 4, 2, 6, 5]\ntest_function(test_case)\n\n# test case 4\ntest_case = [4, 3, 1, 5, 6, 2]\ntest_function(test_case)\n\n# test case 5\ntest_case = [2, 6, 5, 1, 3, 4]\ntest_function(test_case)", "#    if len(l) < 2:\n#        return l\n#    else:\n#        return [l[0], sort_even(l[1:])]\n#\n#    if len(l) < 2:\n#        return l\n#    else:\n#        return [l[0], sort_even(l[1:])]\n    if len(l) < 2:\n        return l\n    elif len(l) % 2 == 0:\n        return [l[0], sort_even(l[1:])]\n    else:\n        return [l[0], min(l[1:], key=lambda x: x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", ""], ["", "\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n", "\n#     s = s.replace(\" \", \"\")\n#     s = s.replace(\"0\", \" \")\n#     s = s.replace(\"1\", \" \")\n#     s = s.replace(\"2\", \" \")\n#     s = s.replace(\"3\", \" \")\n#     s = s.replace(\"4\", \" \")\n#     s = s.replace(\"5\", \" \")\n#     s = s.replace(\"6\", \" \")\n#     s = s.replace(\"7\", \" \")\n#     s = s.replace(\"8\", \" \")\n#     s = s.replace(\"9\", \" \")\n#     s = s.replace(\" \", \"\")\n\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "#     print(\"decoding\")\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef encode(s: str, base: int):\n    \"\"\"\n    returns encoded string using base encoding.\n    \"\"\"\n    # get base-2 representation of number.\n    base_2_s = bin(int(s, base))[2:]\n    # encode each number to cyclic representation.\n    return encode_cyclic(base_2_s)\n\n\ndef decode(s: str, base: int):\n    \"\"\"\n    returns decoded string using base encoding.\n    \"\"\"\n    # decode each number from cyclic representation.\n    base_2_s = decode_cyclic(s)\n    # convert base-2 number to decimal number.\n    return int(base_2_s, 2)\n\n\ndef main():\n    # read file and split lines.\n    with open('input.txt', 'r') as file:\n        lines = file.readlines()\n    # split each line to list of 3 numbers.\n    numbers = [line.split(' ') for line in lines]\n    # encode each number using base 10.\n    encoded_numbers = [encode(num, 10", "#     groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n#     groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n#     return \"\".join(groups)\n    \n    groups = [s[min((3 * i + 3), len(s)) - 3 * i:min((3 * i + 6), len(s))] for i in range((len(s) + 2) // 3)]\n    return \"\".join(groups)\n\n\ndef encode_cyclic_1(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic_1(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[min((3 * i + 3), len(s)) - 3 * i:min((3 * i +"], ["", "\ndef prime_factor(n: int):\n    \"\"\"\n    prime_factor returns all prime factors of n.\n    >>> prime_factor(40)\n    [2,2,2,5]\n    >>> prime_factor(28)\n    [2,2,2,3,3]\n    >>> prime_factor(15)\n    [3,5]\n    >>> prime_factor(14)\n    [2,7]\n    \"\"\"\n\ndef max_prime_factor(n: int):\n    \"\"\"\n    max_prime_factor returns maximum prime factor of n.\n    >>> max_prime_factor(40)\n    5\n    >>> max_prime_factor(28)\n    3\n    >>> max_prime_factor(15)\n    5\n    >>> max_prime_factor(14)\n    7\n    \"\"\"\n\ndef amicable_numbers(m: int, n: int):\n    \"\"\"\n    amicable_numbers returns all amicable numbers between m and n.\n    >>> amicable_numbers(1, 500)\n    [220,284]\n    >>> amicable_numbers(1, 1000)\n    [220,284,1184,2620,5020]\n    >>> amicable_numbers(1, 100)\n    [220]\n    \"\"\"\n\ndef pythagorean_triplet(a: int, b: int, c: int):\n    \"\"\"\n    pythagorean_triplet returns the largest pythagorean triplet of form a**2 + b**2 = c**2.\n    >>> pythagorean_triplet(1,2,2)\n    3\n    >>> pythagorean_triplet(1,2,3)\n    4\n    >>> pythagorean_triplet(1,2,4)\n    5\n    >>> pythagorean_triplet(", "\ndef prime_fib_fast(n: int):\n    \"\"\"\n    prime_fib_fast returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_fast(1)\n    2\n    >>> prime_fib_fast(2)\n    3\n    >>> prime_fib_fast(3)\n    5\n    >>> prime_fib_fast(4)\n    13\n    >>> prime_fib_fast(5)\n    89\n    \"\"\"\n", "\ndef prime_fib_2(n: int):\n    \"\"\"\n    prime_fib_2 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_2(1)\n    2\n    >>> prime_fib_2(2)\n    3\n    >>> prime_fib_2(3)\n    5\n    >>> prime_fib_2(4)\n    13\n    >>> prime_fib_2(5)\n    89\n    \"\"\"\n\ndef prime_fib_3(n: int):\n    \"\"\"\n    prime_fib_3 returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib_3(1)\n    2\n    >>> prime_fib_3(2)\n    3\n    >>> prime_fib_3(3)\n    5\n    >>> prime_fib_3(4)\n    13\n    >>> prime_fib_3(5)\n    89\n    \"\"\"\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    print(prime_fib(5))\n    print(prime_fib_2(5))\n    print(prime_fib_3(5))\n\nif __name__ == '__main__':\n    main()\n", ""], ["\n# your code goes here\n\n# end of your code\n\n# the following line executes the tests\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n# write your answer here\n\n# test cases\n\nprint(triples_sum_to_zero([1, 3, 5, 0]))\nprint(triples_sum_to_zero([1, 3, -2, 1]))\nprint(triples_sum_to_zero([1, 2, 3, 7]))\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))\nprint(triples_sum_to_zero([1]))", "", "\ndef get_second_largest(l: list):\n    \"\"\"\n    get_second_largest takes a list of integers as an input.\n    it returns the second largest number in the list.\n\n    >>> get_second_largest([1, 2, 3])\n    2\n    >>> get_second_largest([1, 1, 1])\n    1\n    >>> get_second_largest([1, 2, 3, 4, 5, 6])\n    5\n    >>> get_second_largest([1])\n    Traceback (most recent call last):\n    ...\n    ValueError: The list must contain at least two elements.\n    \"\"\"\n\ndef get_sum_of_divisors(n: int):\n    \"\"\"\n    get_sum_of_divisors takes an integer as an input.\n    it returns the sum of all the divisors of the integer.\n\n    >>> get_sum_of_divisors(1)\n    1\n    >>> get_sum_of_divisors(10)\n    1 + 2 + 5 + 10\n    >>> get_sum_of_divisors(20)\n    1 + 2 + 4 + 5 + 10 + 20\n    >>> get_sum_of_divisors(1000)\n    1 + 2 + 3 + 5 + 6 + 10 + 20 + 25 + 50 + 1000\n    \"\"\"\n\ndef get_primes_sum_below_n", "\ndef palindrome_permutation(s: str):\n    \"\"\"\n    palindrome_permutation takes a string as an input.\n    It returns True if the string is a palindrome and False otherwise.\n\n    >>> palindrome_permutation('taco cat')\n    True\n    >>> palindrome_permutation('taco tac')\n    False\n    >>> palindrome_permutation('Taco cat')\n    True\n    >>> palindrome_permutation('taco')\n    True\n    >>> palindrome_permutation('tacocat')\n    False\n    >>> palindrome_permutation('tacocat  ')\n    True\n    >>> palindrome_permutation('')\n    True\n    >>> palindrome_permutation(' ')\n    True\n    >>> palindrome_permutation('a')\n    True\n    >>> palindrome_permutation('aa')\n    True\n    \"\"\"\n\ndef string_compression(s: str):\n    \"\"\"\n    string_compression takes a string as an input.\n    It returns the string after removing all consecutive duplicates of\n    characters.\n\n    >>> string_compression('aabcccccaaa')\n    'a2b1c5a3'\n    >>> string_compression('abbb')\n    'abbb'\n    >>> string_compression('a')\n    'a'\n    >>> string_compression('aa')\n    'aa'\n    >>> string_compression('aaaaaa')\n    'a5'\n    \"\"\"\n\ndef string_compression2(s: str):\n    \"\"\"\n    string_compression2 takes a string as an input.\n    It returns the string after removing all consecutive duplicates of\n    characters.\n\n    >>> string_compression2('aabcccccaaa')\n    'a2b"], ["", "", "\ndef print_primes(n: int):\n    \"\"\"\n    Prints all the primes up to and including n.\n    \"\"\"\n\ndef prime_count(n: int):\n    \"\"\"\n    Returns the number of primes up to and including n.\n    \"\"\"\n\ndef is_prime(n: int):\n    \"\"\"\n    Returns True if n is prime, False otherwise.\n    \"\"\"\n\ndef print_divisors(n: int):\n    \"\"\"\n    Prints all the divisors of n.\n    \"\"\"\n\ndef divisors(n: int):\n    \"\"\"\n    Returns all the divisors of n.\n    \"\"\"\n\ndef is_pandigital(n: int):\n    \"\"\"\n    Returns True if n is a pandigital number, False otherwise.\n    \"\"\"\n\ndef is_pandigital_prime(n: int):\n    \"\"\"\n    Returns True if n is a pandigital prime, False otherwise.\n    \"\"\"\n\ndef pandigital_primes(n: int):\n    \"\"\"\n    Returns all the pandigital primes up to and including n.\n    \"\"\"\n\ndef largest_pandigital_prime(n: int):\n    \"\"\"\n    Returns the largest pandigital prime that is less than or equal to n.\n    \"\"\"\n\ndef print_fibonacci_under(n: int):\n    \"\"\"\n    Prints the fibonacci numbers up to and including n.\n    \"\"\"\n\ndef fibonacci_under(n: int):\n    \"\"\"\n    Returns the fibonacci numbers up to and including n.\n    \"\"\"\n\ndef print_fibonacci_under_n(n: int):\n    \"\"\"\n    Prints the fibonacci numbers up to", "\ndef test_car_race_collision():\n    assert car_race_collision(2) == 1\n    assert car_race_collision(5) == 1\n    assert car_race_collision(10) == 1\n    assert car_race_collision(20) == 2\n    assert car_race_collision(30) == 3\n    assert car_race_collision(40) == 4\n    assert car_race_collision(100) == 23\n\nif __name__ == '__main__':\n    test_car_race_collision()\n", "\nprint(car_race_collision(3))\n"], ["\ndef get_sum(nums: list):\n    \"\"\"Return sum of all elements in a list.\n    >>> get_sum([1, 2, 3])\n    6\n    >>> get_sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    194\n    \"\"\"\n", "\ndef incr_list_by(l: list, by: int):\n    \"\"\"Return list with elements incremented by 'by'.\n    >>> incr_list_by([1, 2, 3], 3)\n    [4, 5, 6]\n    >>> incr_list_by([5, 3, 5, 2, 3, 3, 9, 0, 123], 10)\n    [15, 13, 15, 17, 14, 14, 29, 11, 133]\n    \"\"\"\n\ndef incr_list_by_max(l: list, max_value: int):\n    \"\"\"Return list with elements incremented by max_value.\n    >>> incr_list_by_max([1, 2, 3], 3)\n    [4, 5, 6]\n    >>> incr_list_by_max([5, 3, 5, 2, 3, 3, 9, 0, 123], 10)\n    [15, 13, 15, 17, 14, 14, 29, 11, 133]\n    \"\"\"\n\ndef incr_list_by_min(l: list, min_value: int):\n    \"\"\"Return list with elements incremented by min_value.\n    >>> incr_list_by_min([1, 2, 3], 3)\n    [4, 5, 6]\n    >>> incr_list_by_min([5, 3, 5, 2, 3, 3, 9, 0, 123], 10)\n    [15, ", "\treturn [i+1 for i in l]\n\ndef decr_list(l: list):\n    \"\"\"Return list with elements decremented by 1.\n    >>> decr_list([1, 2, 3])\n    [0, 1, 2]\n    >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [4, 2, 4, 1, 2, 2, 8, -1, 122]\n    \"\"\"\n\treturn [i-1 for i in l]\n\ndef is_palindrome(l: list):\n    \"\"\"Return True if list is a palindrome.\n    >>> is_palindrome([1, 2, 3])\n    True\n    >>> is_palindrome([1, 2, 3, 3, 2, 1])\n    True\n    >>> is_palindrome([1, 2, 3, 5, 4, 5, 3, 2, 1])\n    True\n    >>> is_palindrome([1, 2, 3, 5, 4, 5, 3])\n    False\n    \"\"\"\n\tif not l:\n\t\treturn True\n\telif l[0] == l[-1]:\n\t\treturn is_palindrome(l[1:-1])\n\telse:\n\t\treturn False\n\ndef is_palindrome_reverse(l: list):\n    \"\"\"Return True if list is a palindrome.\n    >>> is_palindrome_reverse([1, 2, 3])\n    True\n    >>> is_palindrome_reverse([1, 2, 3, 3, 2, 1])\n    True\n    >>> is_palindrome_reverse([1", "\ndef incr_list_recursive(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list_recursive([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_recursive([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\ndef is_sorted(l: list):\n    \"\"\"Return True if list is sorted.\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    True\n    >>> is_sorted([7, 6, 5, 4, 3, 2, 1])\n    False\n    >>> is_sorted([])\n    True\n    \"\"\"\n\ndef is_sorted_recursive(l: list):\n    \"\"\"Return True if list is sorted.\n    >>> is_sorted_recursive([1, 2, 3, 4, 5, 6, 7])\n    True\n    >>> is_sorted_recursive([7, 6, 5, 4, 3, 2, 1])\n    False\n    >>> is_sorted_recursive([])\n    True\n    \"\"\"\n\ndef is_sorted_lambda(l: list):\n    \"\"\"Return True if list is sorted.\n    >>> is_sorted_lambda([1, 2, 3, 4, 5, 6, 7])\n    True\n    >>> is_sorted_lambda([7, 6, 5, 4, 3, 2, 1])\n    False\n    >>> is_sorted_lambda([])\n    True\n    \"\"\"\n\ndef is", "#    return [i+1 for i in l]\n    return [i+1 for i in l]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"], ["# your code here\n\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\n", "\ndef max_range(l):\n    \"\"\"\n    max_range takes a list of integers as an input.\n    it returns the maximum difference between any two integers in the list.\n    >>> max_range([1, 3, 5, 7])\n    6\n    >>> max_range([1, 3, 5, -7])\n    14\n    >>> max_range([1, 3, 5, -7, 1])\n    14\n    >>> max_range([1])\n    0\n    \"\"\"\n\ndef max_range_pairs(l):\n    \"\"\"\n    max_range_pairs takes a list of integers as an input.\n    it returns the maximum difference between any two integers that are\n    adjacent in the list.\n    >>> max_range_pairs([1, 3, 5, 7])\n    6\n    >>> max_range_pairs([1, 3, 5, -7])\n    14\n    >>> max_range_pairs([1, 3, 5, -7, 1])\n    14\n    >>> max_range_pairs([1])\n    0\n    \"\"\"\n\ndef max_range_pairs_2(l):\n    \"\"\"\n    max_range_pairs_2 takes a list of integers as an input.\n    it returns the maximum difference between any two integers that are\n    adjacent in the list, but also considers the integers in the list as a\n    single group.\n    >>> max_range_pairs_2([1, 3, 5, 7])\n    6\n    >>> max_range_pairs_2([1, 3,", "#     pairs_sum_to_zero = False\n#     for i in range(len(l)):\n#         if i+1 < len(l):\n#             if l[i] + l[i+1] == 0:\n#                 pairs_sum_to_zero = True\n#                 return pairs_sum_to_zero\n#     return pairs_sum_to_zero\n\n    pairs_sum_to_zero = True\n    for i in range(len(l)):\n        if l[i] in l[i+1:]:\n            pairs_sum_to_zero = False\n            return pairs_sum_to_zero\n    return pairs_sum_to_zero\n\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])\n\ndef has_duplicate_letters(word):\n    \"\"\"\n    has_duplicate_letters takes a string as an input.\n    It returns True if the string contains duplicate letters, and False otherwise.\n    >>> has_duplicate_letters('aa')\n    True\n    >>> has_duplicate_letters('aaa')\n    True\n    >>> has_duplicate_letters('abba')\n    True\n    >>> has_duplicate_letters('aba')\n    False\n    \"\"\"\n    return", "\n# TODO: \n# 1. Make it work\n# 2. Make it pretty\n# 3. Add a test\n\ndef pairs_sum_to_zero(l):\n    return True\n\npairs_sum_to_zero([1, 3, 5, 0])\npairs_sum_to_zero([1, 3, -2, 1])\npairs_sum_to_zero([1, 2, 3, 7])\npairs_sum_to_zero([2, 4, -5, 3, 5, 7])\npairs_sum_to_zero([1])", "\ndef pairs_sum_to_zero_v2(l):\n    \"\"\"\n    pairs_sum_to_zero_v2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_v2([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_v2([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_v2([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_v2([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_v2([1])\n    False\n    \"\"\"\n\ndef pairs_sum_to_zero_v3(l):\n    \"\"\"\n    pairs_sum_to_zero_v3 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_v3([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_v3([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_v3([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_v3([2"], ["\ndef change_base_2(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_2(8, 3)\n    '22'\n    >>> change_base_2(8, 2)\n    '1000'\n    >>> change_base_2(7, 2)\n    '111'\n    \"\"\"\n    result = ''\n    digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    while x != 0:\n        result = digits[x % base] + result\n        x //= base\n    return result\n\ndef change_base_3(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base_3(8, 3)\n    '22'\n    >>> change_base_3(8, 2)\n    '1000'\n    >>> change_base_3(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    elif base > 10 or base < 2:\n        raise ValueError(\"base must be between 2 and 10\")\n\n    digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = ''\n\n    while x != 0:\n        result = digits[x % base] + result\n        x //= base\n    return result\n\ndef change_base_4(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change", "\ndef reverse_string(s: str):\n    \"\"\"Reverse string and return reversed string.\n    >>> reverse_string(\"hello\")\n    'olleh'\n    \"\"\"\n\ndef reverse_list(l: list):\n    \"\"\"Reverse list and return reversed list.\n    >>> reverse_list([1,2,3,4])\n    [4, 3, 2, 1]\n    \"\"\"\n\ndef reverse_tuple(t: tuple):\n    \"\"\"Reverse tuple and return reversed tuple.\n    >>> reverse_tuple((1,2,3,4))\n    (4, 3, 2, 1)\n    \"\"\"\n\ndef is_palindrome(s: str):\n    \"\"\"Return true if string s is a palindrome, otherwise return false.\n    >>> is_palindrome(\"hello\")\n    False\n    >>> is_palindrome(\"racecar\")\n    True\n    \"\"\"\n\ndef is_anagram(s1: str, s2: str):\n    \"\"\"Return true if s1 is an anagram of s2, otherwise return false.\n    >>> is_anagram(\"cat\", \"act\")\n    True\n    >>> is_anagram(\"hello\", \"holl\")\n    False\n    \"\"\"\n\ndef longest_palindromic_substring(s: str):\n    \"\"\"Find longest palindromic substring in string and return the substring.\n    >>> longest_palindromic_substring(\"abacaba\")\n    'aba'\n    >>> longest_palindromic_substring(\"abacab\")\n    'abacaba'\n    >>> longest_palindromic_substring(\"abac\")\n    'aba'\n    \"\"\"\n\ndef longest_common_prefix(strs: list):\n    \"\"\"Find longest common prefix of a list of strings and return it.\n    >>> longest_common_prefix([\"a\", \"ab\", \"abc\"])\n    'a'\n    >>> longest_common_prefix([\"ab\", \"abc\"])\n    'ab'\n    >>>", "\ndef count_ones(n):\n    \"\"\"Count number of ones in binary representation of n.\n    >>> count_ones(0b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "\ndef get_primes(n: int):\n    \"\"\"Return a list of all prime numbers up to n.\n    >>> get_primes(10)\n    [2, 3, 5, 7]\n    >>> get_primes(8)\n    [2, 3, 5, 7]\n    >>> get_primes(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    \"\"\"\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number, otherwise False.\n    >>> is_prime(8)\n    True\n    >>> is_prime(4)\n    False\n    \"\"\"\n\ndef prime_factorize(n: int):\n    \"\"\"Return a list of prime factors of n.\n    >>> prime_factorize(8)\n    [2, 2, 2]\n    >>> prime_factorize(24)\n    [2, 2, 3]\n    \"\"\"\n\ndef is_palindrome(n: int):\n    \"\"\"Return True if n is a palindrome, otherwise False.\n    >>> is_palindrome(888)\n    True\n    >>> is_palindrome(999)\n    False\n    \"\"\"\n\ndef is_armstrong(n: int):\n    \"\"\"Return True if n is an Armstrong number, otherwise False.\n    >>> is_armstrong(153)\n    True\n    >>> is_armstrong(123)\n    False\n    \"\"\"\n\ndef is_armstrong_iterative(n: int):\n    \"\"\"Return True if n is an Armstrong number, otherwise False.\n    >>> is_armstrong_iterative(153)\n    True\n    >>> is_armstrong_iterative(123)\n    False\n    \"\"\"\n\ndef is_armstrong_recursive(n: int):\n    \"\"\"Return True if", "\ndef is_number_in_range(n: int, range_start: int, range_end: int):\n    \"\"\"Return True if n is in range [range_start, range_end].\n    >>> is_number_in_range(1, 1, 2)\n    True\n    >>> is_number_in_range(3, 1, 2)\n    False\n    \"\"\"\n\ndef is_valid_phone_number(phone_number: str):\n    \"\"\"Return True if phone_number is valid.\n    >>> is_valid_phone_number(\"0123456789\")\n    True\n    >>> is_valid_phone_number(\"012345678\")\n    False\n    >>> is_valid_phone_number(\"01234567890\")\n    False\n    \"\"\"\n\ndef is_valid_credit_card_number(credit_card_number: str):\n    \"\"\"Return True if credit_card_number is valid.\n    >>> is_valid_credit_card_number(\"4111111111111111\")\n    True\n    >>> is_valid_credit_card_number(\"4111111111111112\")\n    False\n    \"\"\"\n\ndef is_palindrome(word: str):\n    \"\"\"Return True if word is a palindrome.\n    >>> is_palindrome(\"radar\")\n    True\n    >>> is_palindrome(\"radarcar\")\n    False\n    \"\"\"\n\ndef is_palindrome_v2(word: str):\n    \"\"\"Return True if word is a palindrome.\n    >>> is_palindrome_v2(\"radar\")\n    True\n    >>> is_palindrome_v2(\"radarcar\")\n    False\n    \"\"\"\n\ndef is_palindrome_v3(word: str):\n    \"\"\"Return True if word is a palindrome"], ["\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\ndef rectangle_area(l, w):\n    \"\"\"Given length and width of a rectangle return the area.\n    >>> rectangle_area(5, 3)\n    15\n    \"\"\"\n\ndef circle_area(r):\n    \"\"\"Given radius of a circle return the area.\n    >>> circle_area(3)\n    28.274333882308138\n    \"\"\"\n\ndef is_leap_year(year):\n    \"\"\"Given a year, return True if it is a leap year, False otherwise.\n    >>> is_leap_year(2004)\n    True\n    >>> is_leap_year(1996)\n    False\n    \"\"\"\n\ndef average_grade(grades):\n    \"\"\"Given a list of integers representing the grades of a class,\n    return the average of the class.\n    >>> average_grade([10, 20, 30, 40])\n    25.0\n    \"\"\"\n\ndef average_grade_using_list(grades):\n    \"\"\"Given a list of integers representing the grades of a class,\n    return the average of the class.\n    >>> average_grade_using_list([10, 20, 30, 40])\n    25.0\n    \"\"\"\n\ndef average_grade_using_dict(grades):\n    \"\"\"Given a list of integers representing the grades of a class,\n    return the average of the class.\n    >>> average_grade_using_dict([10, 20, 30, 40])\n    25.0\n    \"\"\"\n\ndef average_grade_using_dict_with_default(grades):\n    \"\"\"Given a list of integers representing the grades of a class,\n    return the average of the class.\n    >>> average_grade_using_dict_with_default([10, 20, 30, 40])\n    25.0\n    \"\"\"\n\ndef get_number_of_days_in_month(year, month):\n    \"\"\"Given a year and a month, return the number of days in that month.\n    >>>", "\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\ndef rectangle_area(l, w):\n    \"\"\"Given length and width return area for a rectangle.\n    >>> rectangle_area(4, 5)\n    20\n    \"\"\"\n\ndef circle_area(r):\n    \"\"\"Given radius return area for a circle.\n    >>> circle_area(2)\n    12.566370614359172\n    \"\"\"\n\ndef trapezoid_area(b1, b2, h):\n    \"\"\"Given base 1, base 2, height return area for a trapezoid.\n    >>> trapezoid_area(2, 4, 3)\n    3.0\n    \"\"\"\n\ndef quadratic_area(a, b, c):\n    \"\"\"Given coefficients of a quadratic return area.\n    >>> quadratic_area(1, 2, 3)\n    17.320508075688772\n    \"\"\"\n\ndef polygon_area(n, s):\n    \"\"\"Given number of sides and side length return the area of a polygon.\n    >>> polygon_area(3, 2)\n    12.0\n    \"\"\"\n\ndef rectangle_perimeter(l, w):\n    \"\"\"Given length and width return perimeter for a rectangle.\n    >>> rectangle_perimeter(4, 5)\n    24\n    \"\"\"\n\ndef circle_perimeter(r):\n    \"\"\"Given radius return perimeter for a circle.\n    >>> circle_perimeter(2)\n    12.566370614359172\n    \"\"\"\n\ndef trapezoid_perimeter(b1, b2, h):\n    \"\"\"Given base 1, base 2, height return perimeter for a trapezoid.\n    >>> trapezoid_perimeter(2, 4, 3)\n    14.0\n    \"\"\"\n\ndef quadratic_perimeter(a, b, c):\n    \"\"\"Given coefficients of a quadratic return perimeter.\n    >>> quadratic_perimeter(1, 2, 3)\n    20.0\n    \"\"\"\n\ndef polygon_", "\n# Write tests for triangle_area function\n\n# Write a function that will return the area of a circle\n# You can use math library to calculate the area\n\ndef circle_area(r):\n    \"\"\"Given radius return the area of a circle.\n    >>> circle_area(3)\n    28.274333882308138\n    \"\"\"\n\n# Write tests for circle_area function\n\n# Write a function that will return the area of a rectangle\n# You can use math library to calculate the area\n\ndef rectangle_area(l, w):\n    \"\"\"Given length and width return the area of a rectangle.\n    >>> rectangle_area(10, 3)\n    30\n    \"\"\"\n\n# Write tests for rectangle_area function\n\n# Write a function that will return the volume of a cylinder\n# You can use math library to calculate the volume\n\ndef cylinder_volume(r, h):\n    \"\"\"Given radius and height return the volume of a cylinder.\n    >>> cylinder_volume(3, 5)\n    144.5\n    \"\"\"\n\n# Write tests for cylinder_volume function\n\n# Write a function that will return the volume of a sphere\n# You can use math library to calculate the volume\n\ndef sphere_volume(r):\n    \"\"\"Given radius return the volume of a sphere.\n    >>> sphere_volume(4)\n    254.8866099853227\n    \"\"\"\n\n# Write tests for sphere_volume function\n\n# Write a function that will return the surface area of a cone\n# You can use math library to calculate the surface area\n\ndef cone_surface_area(r, h):\n    \"\"\"Given radius and height return the surface area of a cone.\n    >>> cone_surface_area(3, 5)\n    25.448067867007546\n    \"\"\"\n\n# Write tests for cone_surface_area function\n\n# Write a function that will return the volume of a cone\n# You can use math library to calculate the volume\n\n"], ["\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 1\n    fib5(3) -> 1\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    4\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    14\n    \"\"\"\n\ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 1\n    fib6(3) -> 1\n    fib6(4) -> 2\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n    Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n    >>> fib6(5)\n    4\n    >>>", "\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    4\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    14\n    \"\"\"\n\ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 2\n    fib6(3) -> 0\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n    Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n    >>> fib6(5)\n    4\n    >>> fib6(6)\n    8\n    >>>", "\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    5\n    >>> fib5(6)\n    13\n    >>> fib5(7)\n    29\n    \"\"\"", "\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 1\n    fib5(2) -> 1\n    fib5(3) -> 2\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    4\n    >>> fib5(6)\n    10\n    >>> fib5(7)\n    20\n    \"\"\"\n\ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 1\n    fib6(2) -> 1\n    fib6(3) -> 2\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n    Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n    >>> fib6(5)\n    4\n    >>> fib6(6)\n    13", "\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(4) -> 1\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    4\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    14\n    \"\"\"\n\ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 2\n    fib6(3) -> 0\n    fib6(4) -> 1\n    fib6(5) -> 0\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n    Please write a function to efficiently compute the n-th element of the fib6 number sequence"], ["\ndef sum(l: list):\n    \"\"\"Return sum of all elements in the list l.\n    >>> sum([1, 2, 3, 4, 5])\n    15\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    55\n    \"\"\"\n\ndef product(l: list):\n    \"\"\"Return product of all elements in the list l.\n    >>> product([1, 2, 3, 4, 5])\n    120\n    >>> product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    3628800\n    \"\"\"\n\ndef mean(l: list):\n    \"\"\"Return mean of all elements in the list l.\n    >>> mean([1, 2, 3, 4, 5])\n    3\n    >>> mean([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    5.5\n    \"\"\"\n\ndef stddev(l: list):\n    \"\"\"Return standard deviation of all elements in the list l.\n    >>> stddev([1, 2, 3, 4, 5])\n    1.4142135623730951\n    >>> stddev([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    2.949736281772851\n    \"\"\"\n\ndef quantile(l: list, q: float):\n    \"\"\"Return q-th quantile of the list l.\n    >>> quantile([1, 2, 3, 4, 5], 0.25)\n    1.5\n    >>> quantile([1, 2, 3, 4, ", "\ndef mode(l: list):\n    \"\"\"Return the most frequent value in the list l.\n    >>> mode([3, 1, 2, 4, 5])\n    1\n    >>> mode([1, 2, 1, 2, 3])\n    1\n    \"\"\"\n\ndef mean(l: list):\n    \"\"\"Return mean of the elements in the list l.\n    >>> mean([1, 2, 3])\n    2.0\n    >>> mean([-10, 4, 6, 1000, 10, 20])\n    49.125\n    \"\"\"\n\ndef variance(l: list):\n    \"\"\"Return variance of the elements in the list l.\n    >>> variance([1, 2, 3])\n    0.6666666666666666\n    >>> variance([-10, 4, 6, 1000, 10, 20])\n    1521.0\n    \"\"\"\n\ndef standard_deviation(l: list):\n    \"\"\"Return standard deviation of the elements in the list l.\n    >>> standard_deviation([1, 2, 3])\n    0.816496580927726\n    >>> standard_deviation([-10, 4, 6, 1000, 10, 20])\n    122.0\n    \"\"\"\n\ndef pearson_correlation(l1: list, l2: list):\n    \"\"\"Return pearson correlation coefficient for two lists of numbers.\n    >>> pearson_correlation([1, 2, 3], [4, 5, 6])\n    0.9999999999999999\n    >>> pearson_correlation([1, 2, 3], [10, 20, 30])\n    0.8660254037", "\ndef mode(l: list):\n    \"\"\"Return the mode of the elements in the list l.\n    >>> mode([1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> mode([])\n    []\n    >>> mode([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ", "\ndef mean(l: list):\n    \"\"\"Return mean of elements in the list l.\n    >>> mean([3, 1, 2, 4, 5])\n    3.0\n    >>> mean([-10, 4, 6, 1000, 10, 20])\n    143.33333333333334\n    \"\"\"\n\ndef mode(l: list):\n    \"\"\"Return most frequent element in the list l.\n    >>> mode([3, 1, 2, 4, 5, 1, 2, 4, 1, 3, 5])\n    1\n    >>> mode([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6])\n    3\n    \"\"\"\n\ndef n_less(l: list, n: int):\n    \"\"\"Return the number of elements in the list l that are strictly less than n.\n    >>> n_less([3, 1, 2, 4, 5], 4)\n    2\n    >>> n_less([1, 2, 3, 4, 5, 6], 4)\n    3\n    \"\"\"\n\ndef n_greater(l: list, n: int):\n    \"\"\"Return the number of elements in the list l that are strictly greater than n.\n    >>> n_greater([3, 1, 2, 4, 5], 4)\n    2\n    >>> n_greater([1, 2, 3, 4, 5, 6], 4)\n    2\n    \"\"\"\n\ndef n_equal(l: list, n: int):\n    \"\"\"Return the number of elements in the list l that are equal to n.\n    >>> n_equal([3, 1, 2, 4, 5], 4)\n    1\n    >>> n_equal([1, 2,", "\ndef mode(l: list):\n    \"\"\"Return mode of elements in the list l.\n    >>> mode([3, 1, 2, 4, 5])\n    2\n    >>> mode([10, 4, 6, 10, 10, 20])\n    10\n    \"\"\"\n\ndef zscore(x: float, mu: float, sigma: float):\n    \"\"\"Return zscore of x based on mean mu and stddev sigma.\n    >>> zscore(100, 100, 10)\n    1.0\n    >>> zscore(20, 100, 10)\n    -2.0\n    \"\"\"\n\ndef zscore_list(l: list, mu: float, sigma: float):\n    \"\"\"Return zscore of each element in the list l based on mean mu and stddev sigma.\n    >>> zscore_list([100, 20], 100, 10)\n    [1.0, -2.0]\n    \"\"\"\n\ndef zscore_array(a: np.ndarray, mu: float, sigma: float):\n    \"\"\"Return zscore of each element in the array a based on mean mu and stddev sigma.\n    >>> zscore_array(np.array([100, 20]), 100, 10)\n    array([1., -2.])\n    \"\"\"\n"], ["\n# %%\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n# %%\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n# %%\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n# %%\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n# %%\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n# %%\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is", "\ndef is_palindrome_1(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_1('')\n    True\n    >>> is_palindrome_1('aba')\n    True\n    >>> is_palindrome_1('aaaaa')\n    True\n    >>> is_palindrome_1('zbcd')\n    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome_1(text[1:-1])\n\ndef is_palindrome_2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_2('')\n    True\n    >>> is_palindrome_2('aba')\n    True\n    >>> is_palindrome_2('aaaaa')\n    True\n    >>> is_palindrome_2('zbcd')\n    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    else:\n        left, right = 0, len(text) - 1\n        while left < right:\n            if text[left] != text[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n\ndef is_palindrome_3(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_3('')\n    True\n    >>> is_palindrome_3('aba')\n    True\n    >>> is_palindrome_3('aaaaa')\n    True\n    >>> is_palindrome_3('zbcd')\n    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    else:\n        left, right = 0, len(text) - 1\n        while left < right:\n            if text[left] != text[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n\ndef is_palindrome_4(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_4('')\n    True\n   ", "\n# Write a program that will print the numbers from 1 to 100\n# that are divisible by 3 and 5.\n# For example, if the user input is:\n# 3\n# 15\n# 100\n# The program should print:\n# 3\n# 5\n# 90\n# 100\n# 120\n# 150\n# 180\n# 200\n# 210\n# 240\n# 270\n# 300\n# 330\n# 360\n# 390\n# 405\n# 425\n# 455\n# 485\n# 500\n# 520\n# 550\n# 580\n# 600\n# 630\n# 660\n# 690\n# 705\n# 725\n# 755\n# 785\n# 800\n# 820\n# 850\n# 880\n# 900\n# 930\n# 960\n# 990\n\ndef print_divisible_by_3_and_5(num):\n    \"\"\"\n    >>> print_divisible_by_3_and_5(3)\n    3\n    5\n    90\n    100\n    120\n    150\n    180\n    200\n    210\n    240\n    270\n    300\n    330\n    360\n    390\n    405\n    425\n    455\n    485\n    500\n    520\n    550\n    580\n    600\n    630\n    660\n    690\n    705\n    725\n    ", "\ndef find_palindrome(text: str):\n    \"\"\"\n    Finds palindrome in given string.\n\n    >>> find_palindrome('abcaba')\n    'aba'\n    >>> find_palindrome('zbcd')\n    >>> find_palindrome('zzzzzzzz')\n    \"\"\"\n\ndef find_all_palindromes(text: str):\n    \"\"\"\n    Finds all palindromes in given string.\n\n    >>> find_all_palindromes('abcaba')\n    ['aba']\n    >>> find_all_palindromes('zbcd')\n    []\n    >>> find_all_palindromes('zzzzzzzz')\n    ['zzzzzzzz']\n    \"\"\"\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\ndef is_palindrome_iterative(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_iterative('')\n    True\n    >>> is_palindrome_iterative('aba')\n    True\n    >>> is_palindrome_iterative('aaaaa')\n    True\n    >>> is_palindrome_iterative('zbcd')\n    False\n    \"\"\"\n\ndef reverse_words(text: str):\n    \"\"\"\n    Reverses words in given string\n    >>> reverse_words('')\n    ''\n    >>> reverse_words('text')\n    'text'\n    >>> reverse_words('text text')\n    'text text'\n    >>> reverse_words('text text text')\n    'text text text'\n    >>> reverse_words(' text text text ')\n    ' text text text '\n    >>> reverse_words('text  text text')\n    'text  text text'\n    >>> reverse_words('text  text text  ')\n    'text  text text  '\n    >>> reverse_words('  text  text  text  ')\n    '  text  text  text  '\n    \"\"\"\n    # write your code here\n\ndef reverse_words_iterative(text: str):\n    \"\"\"\n    Reverses words in given string\n    >>> reverse_words_iterative('')\n    ''\n    >>> reverse_words_iterative('text')\n    'text'\n    >>> reverse_words_iterative('text text')\n    'text text'\n    >>> reverse_words_iterative('text text text')\n    'text text text'\n    >>> reverse_words_iterative(' text text text ')\n    ' text text text '\n    >>> reverse_words_iterative('text  text text')\n    'text  text text'\n    >>> reverse_words_iterative('text  text text  ')\n    'text  text text  '\n    >>> reverse_words_iterative('  text  text  text  ')\n    '  text  text  text  '\n    \"\"\"\n    # write your code here\n\ndef reverse_string(text: str):\n    \"\"\"\n    Reverses given"], ["\ndef power_mod(x: int, n: int, p: int):\n    \"\"\"Return x^n modulo p (be aware of numerics).\n    >>> power_mod(5, 3, 11)\n    8\n    >>> power_mod(5, 0, 11)\n    1\n    >>> power_mod(5, 1, 11)\n    5\n    >>> power_mod(5, 2, 11)\n    2\n    \"\"\"\n\ndef primality(n: int, a: int = 0):\n    \"\"\"Return True if n is prime.\n    >>> primality(1)\n    False\n    >>> primality(2)\n    True\n    >>> primality(17)\n    False\n    >>> primality(19)\n    True\n    >>> primality(29)\n    True\n    >>> primality(31)\n    True\n    >>> primality(37)\n    True\n    >>> primality(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the modular inverse of n modulo p.\n    >>> modp_inv(3, 5)\n    1\n    >>> modp_inv(1101, 101)\n    2\n    >>> modp_inv(0, 101)\n    1\n    >>> modp_inv(3, 11)\n    10\n    >>> modp_inv(100, 101)\n    9\n    \"\"\"\n\ndef modp_inv_all(p: int):\n    \"\"\"Return all modular inverses modulo p.\n    >>> modp_inv_all(5)\n    {1, 2, 3, 4}\n    \"\"\"\n\ndef modp_mul(a: int, b: int, p: int):\n    \"\"\"Return a * b modulo p.\n    >>> modp_mul(3, 5, 11)\n    3\n    >>> modp_mul(1101, 101, 101)\n    2\n    >>> modp_mul(0, 101, 101)\n    1\n    >>> modp_mul(3, 11, 11)\n    8\n    >>> modp_mul(100, 101, 101)\n    1\n    \"\"\"\n\ndef modp_add(a: int, b: int, p: int):\n    \"\"\"Return a + b modulo p.\n    >>> modp_add(3, 5, 11)\n    8\n    >>> modp_add(1101, 101, 101)\n    2\n    >>> modp_add(0, 101, 101)\n    0\n    >>> modp_add(3, 11, 11)", "\ndef galois_field(p: int, x: int, g: int):\n    \"\"\"Compute the Galois field exponentiation.\n    >>> galois_field(11, 11, 1000)\n    1001\n    >>> galois_field(11, 101, 1000)\n    2\n    >>> galois_field(1001, 2, 11)\n    101\n    \"\"\"\n\ndef modinv(a: int, m: int):\n    \"\"\"Return the modular inverse of a modulo m.\n    >>> modinv(2, 101)\n    98\n    >>> modinv(100, 101)\n    10\n    >>> modinv(0, 101)\n    0\n    \"\"\"\n\ndef legendre_symbol(a: int, p: int):\n    \"\"\"Return the Legendre symbol.\n    >>> legendre_symbol(100, 101)\n    -1\n    >>> legendre_symbol(101, 101)\n    1\n    >>> legendre_symbol(1, 101)\n    1\n    \"\"\"\n\ndef jacobi(a: int, n: int):\n    \"\"\"Return the Jacobi symbol.\n    >>> jacobi(100, 101)\n    1\n    >>> jacobi(101, 101)\n    -1\n    >>> jacobi(1, 101)\n    -1\n    \"\"\"\n\ndef kronecker(a: int, n: int):\n    \"\"\"Return the Kronecker symbol.\n    >>> kronecker(2, 101)\n    1\n    >>> kronecker(3, 101)\n    -1\n    >>> kronecker(0, 101)\n    0\n   ", "\ndef isprime(n: int):\n    \"\"\"Return True if n is prime.\n    >>> isprime(5)\n    True\n    >>> isprime(11)\n    False\n    \"\"\"\n\ndef nextprime(n: int):\n    \"\"\"Return the next prime after n.\n    >>> nextprime(7)\n    11\n    >>> nextprime(9)\n    11\n    >>> nextprime(10)\n    13\n    >>> nextprime(11)\n    13\n    \"\"\"\n\ndef fermat(n: int, k: int):\n    \"\"\"Return the k-th Fermat number modulo n.\n    >>> fermat(5, 0)\n    1\n    >>> fermat(5, 1)\n    4\n    >>> fermat(5, 2)\n    1\n    >>> fermat(5, 3)\n    1\n    >>> fermat(5, 4)\n    4\n    \"\"\"\n\ndef gcf(a, b):\n    \"\"\"Return the greatest common factor of a and b.\n    >>> gcf(11, 7)\n    1\n    \"\"\"\n\ndef lcm(a, b):\n    \"\"\"Return the least common multiple of a and b.\n    >>> lcm(11, 7)\n    77\n    \"\"\"\n\ndef is_perfect(n: int):\n    \"\"\"Return True if n is a perfect number.\n    >>> is_perfect(28)\n    True\n    >>> is_perfect(6)\n    False\n    \"\"\"\n\ndef is_abundant(n: int):\n    \"\"\"Return True if n is an abundant number.\n    >>> is_abundant(12)\n    True\n    >>> is_abundant(18)\n    False\n    \"\"\"\n\ndef is_deficient(n: int):\n    \"\"\"Return True if n is a deficient number.\n    >>> is_deficient(4)\n    True\n    >>> is_deficient(6)\n   ", "\ndef modpow(a: int, b: int, m: int) -> int:\n    \"\"\"Return a^b modulo m.\n    >>> modpow(4, 5, 13)\n    1\n    >>> modpow(11, 11, 13)\n    1\n    >>> modpow(4, 5, 7)\n    2\n    \"\"\"\n\ndef prime(k: int) -> int:\n    \"\"\"Return the k-th prime number.\n    >>> prime(20)\n    199\n    \"\"\"\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return true if n is prime.\n    >>> is_prime(1)\n    True\n    >>> is_prime(101)\n    False\n    >>> is_prime(11)\n    True\n    \"\"\"\n\ndef random_prime(bits: int) -> int:\n    \"\"\"Return a random prime number with bits bits.\n    >>> random_prime(2)\n    11\n    >>> random_prime(3)\n    2\n    >>> random_prime(4)\n    11\n    \"\"\"\n\ndef random_prime_ge(bits: int) -> int:\n    \"\"\"Return a random prime number >= bits bits.\n    >>> random_prime_ge(2)\n    2\n    >>> random_prime_ge(3)\n    3\n    >>> random_prime_ge(4)\n    11\n    \"\"\"\n\ndef random_prime_le(bits: int) -> int:\n    \"\"\"Return a random prime number <= bits bits.\n    >>> random_prime_le(2)\n    1\n    >>> random_prime_le(3)\n    1\n    >>> random_prime_le(4)\n    2\n    \"\"\"\n\ndef is_prime_ge(n: int, bits: int) -> bool:\n    \"\"\"Return true if n is a prime >= bits bits.\n    >>> is_prime_ge(1, "], ["", "#    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26 + ord(\"a\")) for ch in s])\n    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26 + ord(\"a\")) if ch in ascii_letters else ch for ch in s])\n\n\nif __name__ == \"__main__\":\n    print(\"Enter string to encode: \")\n    message = input()\n    print(encode_shift(message))\n\n    print(\"Enter string to decode: \")\n    message = input()\n    print(decode_shift(message))\n", "\n#    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n    return \"\".join([chr(((ord(ch) - 5) % 26) + ord(\"a\")) for ch in s])\n\ndef main():\n    if len(sys.argv) == 1:\n        print(\"Error: missing argument\")\n        sys.exit(1)\n\n    s = sys.argv[1]\n\n    print(encode_shift(s))\n    print(decode_shift(encode_shift(s)))\n\nif __name__ == \"__main__\":\n    main()\n", "#    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26 + ord(\"a\")) for ch in s])\n    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26 + ord(\"a\")) for ch in s]).encode(\"ascii\", \"ignore\").decode()\n\n\ndef main():\n    encoded = encode_shift(input(\"Enter your message: \"))\n    decoded = decode_shift(encoded)\n    print(\"Encoded: \", encoded)\n    print(\"Decoded: \", decoded)\n\n\nif __name__ == \"__main__\":\n    main()\n", ""], ["#Your code goes here\ndef remove_vowels(text):\n    vowels = ['a','e','i','o','u']\n    res = \"\"\n    for i in text:\n        if i not in vowels:\n            res += i\n    return res\n\ndef remove_vowels(text):\n    vowels = ['a','e','i','o','u']\n    res = \"\"\n    for i in text:\n        if i not in vowels:\n            res += i\n    return res\n\ndef remove_vowels(text):\n    vowels = ['a','e','i','o','u']\n    res = \"\"\n    for i in text:\n        if i not in vowels:\n            res += i\n    return res\n\ndef remove_vowels(text):\n    vowels = ['a','e','i','o','u']\n    res = \"\"\n    for i in text:\n        if i not in vowels:\n            res += i\n    return res\n\ndef remove_vowels(text):\n    vowels = ['a','e','i','o','u']\n    res = \"\"\n    for i in text:\n        if i not in vowels:\n            res += i\n    return res\n\ndef remove_vowels(text):\n    vowels = ['a','e','i','o','u']\n    res = \"\"\n    for i in text:\n        if i not in vowels:\n            res += i\n    return res\n\ndef remove_vowels(text):\n    vowels = ['a','e','i','o','u']\n    res = \"\"\n    for i in text:\n        if i not in vowels:\n            res += i\n    return res\n\ndef remove_", "\ndef remove_vowels_v2(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels_v2('')\n    ''\n    >>> remove_vowels_v2(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels_v2('abcdef')\n    'bcdf'\n    >>> remove_vowels_v2('aaaaa')\n    ''\n    >>> remove_vowels_v2('aaBAA')\n    'B'\n    >>> remove_vowels_v2('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([c for c in text if c not in vowels])\n\ndef is_palindrome(text):\n    \"\"\"\n    is_palindrome is a function that takes string and returns boolean if string is palindrome or not.\n    >>> is_palindrome('abcdef')\n    True\n    >>> is_palindrome('abcdefg')\n    False\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abbc')\n    False\n    \"\"\"\n    # remove vowels from text\n    text = remove_vowels(text)\n    # split text into list of characters\n    text = list(text)\n    # reverse text\n    text = text[::-1]\n    # check if characters in text are the same\n    if text == text:\n        return True\n    else:\n        return False\n\ndef is_palindrome_v2(text):\n    \"\"\"\n    is_palindrome is a function that takes string and returns boolean if string is palindrome or not.\n    >>> is_palindrome('abcdef", "#your code here\n    vowels = set(\"aeiou\")\n    text = text.lower()\n    return text.replace(vowels,\"\")\n\ndef remove_vowels_new(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n#your code here\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return ''.join([c for c in text if c not in vowels])\n\ndef remove_vowels_set(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n#your code here\n    return ''.join(c for c in text if c not in 'aeiou')\n\ndef remove_vowels_list(text):\n    \"\"\"\n   ", "\ndef remove_duplicates(text):\n    \"\"\"\n    remove_duplicates is a function that takes string and returns string without duplicates.\n    >>> remove_duplicates('')\n    ''\n    >>> remove_duplicates('abcdef\\nghijklm')\n    'abcdef\\nghijklm'\n    >>> remove_duplicates('abcdef')\n    'abcdef'\n    >>> remove_duplicates('aaaaa')\n    'aaaaa'\n    >>> remove_duplicates('aaBAA')\n    'Baa'\n    >>> remove_duplicates('zbcd')\n    'zbcd'\n    \"\"\"\n\ndef remove_punctuations(text):\n    \"\"\"\n    remove_punctuations is a function that takes string and returns string without punctuations.\n    >>> remove_punctuations('')\n    ''\n    >>> remove_punctuations('abcdef\\nghijklm')\n    'abcdef\\nghijklm'\n    >>> remove_punctuations('abcdef')\n    'abcdef'\n    >>> remove_punctuations('aaaaa')\n    'aaaaa'\n    >>> remove_punctuations('aaBAA')\n    'aa'\n    >>> remove_punctuations('zbcd')\n    'zbcd'\n    \"\"\"\n\ndef is_palindrome(text):\n    \"\"\"\n    is_palindrome is a function that takes string and returns if it is palindrome or not.\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('abcdef\\nghijklm')\n    False\n    >>> is_palindrome('abcdef')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('aaBAA')\n    False\n    >>> is_palindrome('zbcd')\n    True\n    \"\"\"\n\ndef reverse_text(text):\n    \"\"\"\n    reverse_", "\n# remove_vowels(\"\")\n# remove_vowels(\"abcdef\\nghijklm\")\n# remove_vowels(\"abcdef\")\n# remove_vowels(\"aaaaa\")\n# remove_vowels(\"aaBAA\")\n# remove_vowels(\"zbcd\")\n\n\ndef is_palindrome(word):\n    \"\"\"\n    is_palindrome is a function that takes string and returns a boolean that\n    represents whether the string is a palindrome or not.\n    >>> is_palindrome(\"\")\n    True\n    >>> is_palindrome(\"abcdef\\nghijklm\")\n    False\n    >>> is_palindrome(\"abcdef\")\n    True\n    >>> is_palindrome(\"aaaaa\")\n    True\n    >>> is_palindrome(\"aaBAA\")\n    False\n    >>> is_palindrome(\"zbcd\")\n    False\n    \"\"\"\n\n# is_palindrome(\"\")\n# is_palindrome(\"abcdef\\nghijklm\")\n# is_palindrome(\"abcdef\")\n# is_palindrome(\"aaaaa\")\n# is_palindrome(\"aaBAA\")\n# is_palindrome(\"zbcd\")\n\n\ndef remove_non_alphanum(word):\n    \"\"\"\n    remove_non_alphanum is a function that takes string and returns string with\n    only alphanumerical characters.\n    >>> remove_non_alphanum(\"\")\n    ''\n    >>> remove_non_alphanum(\"abcdef\\nghijklm\")\n    'abcdefghijklm'\n    >>> remove_non_alphanum(\"abcdef\")\n    'abcdef'\n    >>> remove_non_alphanum(\"aaaaa\")\n    'aaaaa'\n    >>> remove_non_alphanum(\"aaBAA\")\n    'BAA'\n    >>> remove_non_alphanum(\"zbcd"], ["\ndef find_smallest_item(l: list, value):\n    \"\"\"Return the smallest item in list l that is equal to value.\n    >>> find_smallest_item([1, 2, 4, 10], 1)\n    1\n    >>> find_smallest_item([1, 2, 4, 10], 10)\n    10\n    \"\"\"\n\ndef find_largest_item(l: list, value):\n    \"\"\"Return the largest item in list l that is equal to value.\n    >>> find_largest_item([1, 2, 4, 10], 10)\n    10\n    >>> find_largest_item([1, 2, 4, 10], 4)\n    4\n    \"\"\"\n\ndef remove_from_list(l: list, value):\n    \"\"\"Remove the item from list l that is equal to value.\n    >>> remove_from_list([1, 2, 4, 10], 10)\n    [1, 2, 4]\n    >>> remove_from_list([1, 2, 4, 10], 2)\n    [1, 4, 10]\n    \"\"\"\n\ndef remove_from_list_2(l: list, value):\n    \"\"\"Remove the item from list l that is equal to value.\n    >>> remove_from_list_2([1, 2, 4, 10], 10)\n    [1, 2, 4]\n    >>> remove_from_list_2([1, 2, 4, 10], 2)\n    [1, 4, 10]\n    \"\"\"\n\ndef insert_into_list(l: list, value, position):\n    \"\"\"Insert the value into the list at the position.\n    >>> insert_into_list([1, 2, 4], 3, 0)\n    [3,", "\ndef get_input(prompt: str,\n               type_check: Callable[[str], object]=None,\n               validate: Callable[[object], object]=None,\n               default: object=None,\n               transform: Callable[[object], object]=None,\n               required: bool=True):\n    \"\"\"Get input from the user.\n    :param prompt: a string to prompt the user.\n    :param type_check: a function that performs a type check on the user input.\n                       If type_check returns False, the user will be prompted\n                       to re-enter the input. If type_check returns True, the\n                       input will be returned.\n    :param validate: a function that performs a validation check on the user\n                     input. If validate returns False, the user will be\n                     prompted to re-enter the input. If validate returns\n                     True, the input will be returned.\n    :param default: a default value for the user input.\n    :param transform: a function that transforms the input value into a new\n                       value. If transform returns False, the user will be\n                       prompted to re-enter the input. If transform returns\n                       True, the new value will be returned.\n    :param required: True if a required value is required, False otherwise.\n    :return: the validated input from the user.\n    \"\"\"\n    while True:\n        # Get input from the user\n        val = input(prompt)\n        # If no value has been entered, and a default is not available,\n        # raise an error\n        if val == '':\n            if default is None:\n                raise ValueError('Input is required.')\n            else:\n                val = default\n        # If the input is not a string, raise an error\n        if not isinstance(val, str):\n            raise TypeError('Input must be a string.')\n        # If the input string is empty and required is True, raise an error\n        if val == '' and required:\n            raise ValueError('Input is required.')\n        # If type checking is required, and type checking fails, prompt the\n        # user to re-enter the input\n       ", "\ndef is_sorted(l: list):\n    \"\"\"Return True if the list is sorted.\n    >>> is_sorted([1, 2, 3, 4, 5])\n    True\n    >>> is_sorted([5, 4, 3, 2, 1])\n    False\n    \"\"\"\n\ndef is_sorted_with_comp(l: list, comp):\n    \"\"\"Return True if the list is sorted.\n    >>> is_sorted_with_comp([1, 2, 3, 4, 5], lambda x, y: x < y)\n    True\n    >>> is_sorted_with_comp([5, 4, 3, 2, 1], lambda x, y: x < y)\n    False\n    \"\"\"\n\ndef is_sorted_by_key(l: list, key: callable):\n    \"\"\"Return True if the list is sorted by the given key.\n    >>> is_sorted_by_key([1, 2, 3, 4, 5], lambda x: x)\n    True\n    >>> is_sorted_by_key([5, 4, 3, 2, 1], lambda x: x)\n    False\n    \"\"\"\n\ndef reverse(l: list):\n    \"\"\"Return a reversed copy of the list.\n    >>> reverse([1, 2, 3, 4, 5])\n    [5, 4, 3, 2, 1]\n    \"\"\"\n\ndef merge(l1: list, l2: list):\n    \"\"\"Merge two sorted lists.\n    >>> merge([1, 3, 5], [2, 4, 6])\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n\ndef merge_sort(l: list):\n    \"\"\"Sort a list with merge sort.\n    >>> merge_sort([1, 3, 5])\n    [1, 3, 5]\n    \"\"\"\n\n", "\ndef sum_of_square(l: list):\n    \"\"\"Return the sum of the squares of the numbers in list l.\n    >>> sum_of_square([1, 2, 3, 4])\n    50\n    >>> sum_of_square([1, 2, 4, 10])\n    500\n    \"\"\"\n\ndef sum_of_squares(l: list):\n    \"\"\"Return the sum of the squares of the numbers in list l.\n    >>> sum_of_squares([1, 2, 3, 4])\n    30\n    >>> sum_of_squares([1, 2, 4, 10])\n    450\n    \"\"\"\n\ndef sum_of_squares_pythag(l: list):\n    \"\"\"Return the sum of the squares of the numbers in list l.\n    >>> sum_of_squares_pythag([1, 2, 3, 4])\n    30\n    >>> sum_of_squares_pythag([1, 2, 4, 10])\n    450\n    \"\"\"\n\ndef sum_of_cubes(l: list):\n    \"\"\"Return the sum of the cubes of the numbers in list l.\n    >>> sum_of_cubes([1, 2, 3, 4])\n    14\n    >>> sum_of_cubes([1, 2, 4, 10])\n    1000\n    \"\"\"\n\ndef sum_of_cubes_pythag(l: list):\n    \"\"\"Return the sum of the cubes of the numbers in list l.\n    >>> sum_of_cubes_pythag([1, 2, 3, 4])\n    14\n    >>> sum_of_cubes_pythag([1, 2, 4, 10])\n    1000\n    \"\"\"\n\ndef sum_of_powers(l: list, power:", "\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1, 2, 4, 10], 10)\n    False\n    >>> above_threshold([1, 20, 4, 10], 100)\n    True\n    \"\"\"\n\ndef split_by_value(l: list, t: int):\n    \"\"\"Return list of lists, each containing numbers that are above or below\n    threshold t.\n    >>> split_by_value([1, 2, 4, 10], 100)\n    [[4, 10]]\n    >>> split_by_value([1, 20, 4, 10], 5)\n    [[1, 20], [4, 10]]\n    \"\"\"\n\ndef median(l: list):\n    \"\"\"Return median of list.\n    >>> median([1, 2, 4, 10])\n    4\n    >>> median([1, 20, 4, 10])\n    10\n    \"\"\"\n\ndef mode(l: list):\n    \"\"\"Return mode of list.\n    >>> mode([1, 2, 4, 4, 4, 10])\n    4\n    >>> mode([1, 20, 4, 10])\n    20\n    \"\"\"\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"], ["\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "", "\ndef add_with_name(x: int, y: int, name: str):\n    \"\"\"Add two numbers x and y\n    >>> add_with_name(2, 3, 'A')\n    5\n    >>> add_with_name(5, 7, 'B')\n    12\n    \"\"\"\n\ndef add_two_numbers(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_two_numbers(2, 3)\n    5\n    >>> add_two_numbers(5, 7)\n    12\n    \"\"\"\n\ndef add_two_numbers_with_name(x: int, y: int, name: str):\n    \"\"\"Add two numbers x and y\n    >>> add_two_numbers_with_name(2, 3, 'A')\n    5\n    >>> add_two_numbers_with_name(5, 7, 'B')\n    12\n    \"\"\"\n\ndef add_two_numbers(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_two_numbers(2, 3)\n    5\n    >>> add_two_numbers(5, 7)\n    12\n    \"\"\"\n\ndef add_two_numbers_with_name(x: int, y: int, name: str):\n    \"\"\"Add two numbers x and y\n    >>> add_two_numbers_with_name(2, 3, 'A')\n    5\n    >>> add_two_numbers_with_name(5, 7, 'B')\n    12\n    \"\"\"\n\ndef add_two_numbers(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add_two_numbers(2, 3)\n    5\n    >>> add_two_numbers(5, 7)\n    12\n    \"\"\"\n\ndef add_two_numbers_with_name(x: int, y: int, name: str):\n    \"\"\"Add two numbers x and y\n    >>> add_two_numbers_with_name(2, 3, 'A')\n    5\n    >>> add_two_numbers_with", "\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    2\n    \"\"\"\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    \"\"\"\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\ndef factorial(n: int):\n    \"\"\"Returns the factorial of the number n\n    >>> factorial(4)\n    24\n    >>> factorial(5)\n    120\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef square_root(n: int):\n    \"\"\"Returns the square root of the number n\n    >>> square_root(4)\n    2.0\n    >>> square_root(25)\n    5.0\n    \"\"\"\n    return n**(1/2)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"], ["\ndef remove_chars(s0: str, s1: str):\n    \"\"\"\n    Removes characters in s1 from s0.\n    >>> remove_chars('eabcdzzzz', 'dddddddabc')\n    'eabczzzz'\n    >>> remove_chars('abcd', 'dddddddabc')\n    'ab'\n    >>> remove_chars('dddddddabc', 'abcd')\n    'ddddddd'\n    >>> remove_chars('eabcd', 'dddddddabc')\n    'eabcd'\n    >>> remove_chars('abcd', 'dddddddabce')\n    'abcd'\n    >>> remove_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    'eabcdzzzz'\n    \"\"\"\n\ndef add_chars(s0: str, s1: str):\n    \"\"\"\n    Returns the string formed by adding characters from s1 to s0.\n    >>> add_chars('eabcdzzzz', 'dddddddabc')\n    'eabcdzzzzdddddabc'\n    >>> add_chars('abcd', 'dddddddabc')\n    'abdddddddabc'\n    >>> add_chars('dddddddabc', 'abcd')\n    'abcddddddddabc'\n    >>> add_chars('eabcd', 'dddddddabc')\n    'eabcddddddddabc'\n    >>> add_chars('abcd', 'dddddddabce')\n    'abdddddddabce'\n    >>> add_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    'eabcdzzzzdddzzzzzzzddddabc'\n    \"\"\"\n\ndef has_doubles(s0: str):\n    \"\"\"\n    Checks if a string has doubles.\n    >>> has_doubles('abcd')\n    False\n    >>> has_doubles('ddddd')\n    True\n    >>> has_doubles('eeeeeeee", "\ndef same_chars_2(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars_2('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars_2('abcd', 'dddddddabc')\n    True\n    >>> same_chars_2('dddddddabc', 'abcd')\n    True\n    >>> same_chars_2('eabcd', 'dddddddabc')\n    False\n    >>> same_chars_2('abcd', 'dddddddabce')\n    False\n    >>> same_chars_2('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    c0 = list(s0)\n    c1 = list(s1)\n    return c0 == c1\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()", "\n# Write a function that takes a string and returns the character after the last\n# occurrence of a character.\n\n# For example, if the input string is 'abcdefg', the function should return 'f'.\n\n# If the string doesn't contain a character that appears after the last occurrence\n# of a character, then the function should return None.\n\n# If the string is empty, the function should return None.\n\n# You can assume that the string will contain only characters from the\n# alphabet.\n\ndef last_char(s: str):\n    \"\"\"\n    >>> last_char('abcdefg')\n    'f'\n    >>> last_char('ab')\n    None\n    >>> last_char('')\n    None\n    >>> last_char('efg')\n    None\n    >>> last_char('f')\n    'f'\n    >>> last_char('d')\n    'd'\n    \"\"\"\n\n# Write a function that takes a string and returns the character after the last\n# occurrence of a character that appears only once in the string.\n\n# For example, if the input string is 'abcdabcdab', the function should return\n# 'd'.\n\n# If the string doesn't contain a character that appears only once, then the\n# function should return None.\n\n# If the string is empty, the function should return None.\n\n# You can assume that the string will contain only characters from the\n# alphabet.\n\ndef last_char_once(s: str):\n    \"\"\"\n    >>> last_char_once('abcdefg')\n    'f'\n    >>> last_char_once('ab')\n    None\n    >>> last_char_once('')\n    None\n    >>> last_char_once('efg')\n    None\n    >>> last_char_once", "", "\ndef find_words(filename: str) -> List[str]:\n    \"\"\"\n    Find all the words in the given file.\n    >>> find_words('words.txt')\n    ['hello', 'world', 'how', 'are', 'you', 'today']\n    \"\"\"\n\ndef word_count(filename: str) -> Dict[str, int]:\n    \"\"\"\n    Count the number of times each word occurs in the given file.\n    >>> word_count('words.txt')\n    {'hello': 1, 'world': 1, 'how': 1, 'are': 1, 'you': 2, 'today': 1}\n    \"\"\"\n\ndef words_of_length_three(filename: str) -> List[str]:\n    \"\"\"\n    Find all the words of length 3 in the given file.\n    >>> words_of_length_three('words.txt')\n    ['hello', 'world', 'are']\n    \"\"\"\n\ndef words_of_length_four(filename: str) -> List[str]:\n    \"\"\"\n    Find all the words of length 4 in the given file.\n    >>> words_of_length_four('words.txt')\n    ['hello', 'world']\n    \"\"\"\n\ndef words_ending_in_s(filename: str) -> List[str]:\n    \"\"\"\n    Find all the words ending in 's' in the given file.\n    >>> words_ending_in_s('words.txt')\n    ['hello', 'world', 'are', 'today']\n    \"\"\"\n\ndef words_that_contain_e(filename: str) -> List[str]:\n    \"\"\"\n    Find all the words that contain the letter 'e' in the given file.\n    >>> words_that_contain_e('"], ["\ndef factorial(n: int):\n    \"\"\"Return n-th factorial number.\n    >>> factorial(5)\n    120\n    >>> factorial(1)\n    1\n    >>> factorial(0)\n    1\n    \"\"\"\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime.\n    >>> is_prime(3)\n    True\n    >>> is_prime(2)\n    False\n    \"\"\"\n\ndef is_palindrome(word: str):\n    \"\"\"Return True if word is a palindrome.\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('hello')\n    False\n    \"\"\"\n\ndef get_word_occurrence(text: str, word: str):\n    \"\"\"Return the number of occurrences of word in text.\n    >>> get_word_occurrence('The quick brown fox jumps over the lazy dog.', 'the')\n    3\n    >>> get_word_occurrence('The quick brown fox jumps over the lazy dog.', 'lazy')\n    1\n    >>> get_word_occurrence('The quick brown fox jumps over the lazy dog.', 'horse')\n    0\n    \"\"\"\n\ndef get_words_occurrence(text: str, words: list[str]):\n    \"\"\"Return a list of words occurrence in text.\n    >>> get_words_occurrence('The quick brown fox jumps over the lazy dog.', ['the', 'fox', 'over'])\n    [3, 1, 1]\n    >>> get_words_occurrence('The quick brown fox jumps over the lazy dog.', ['the', 'lazy', 'horse'])\n    [3, 1, 0]\n    \"\"\"\n\ndef is_substring(text: str, substring: str):\n    \"\"\"Return True if substring is a substring of text.\n    >>> is_substring('The quick brown fox jumps over the lazy dog.', 'the')\n    True\n    >>> is_substring('The quick brown fox jumps over the lazy dog.', 'lazy')\n    True\n    >>> is_substring('The quick brown fox jumps over the lazy dog.', 'horse')\n    False\n    \"\"\"\n\ndef get_substring", "\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "", "\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"], ["\ndef is_unique_chars(s: str):\n    \"\"\" s is a string of unique characters.\n    return True if it is a permutation of \"abcdefghijklmnopqrstuvwxyz\".\n\n    >>> is_unique_chars(\"abc\")\n    True\n    >>> is_unique_chars(\"abac\")\n    False\n    >>> is_unique_chars(\"ab\")\n    True\n    \"\"\"\n\ndef count_vowels(s: str):\n    \"\"\" s is a string of letters.\n    return the number of vowels in it.\n\n    >>> count_vowels(\"abc\")\n    0\n    >>> count_vowels(\"abac\")\n    2\n    >>> count_vowels(\"ab\")\n    1\n    \"\"\"\n\ndef remove_spaces(s: str):\n    \"\"\" s is a string of letters.\n    return the string without spaces.\n\n    >>> remove_spaces(\"abc\")\n    'abc'\n    >>> remove_spaces(\"abc \")\n    'abc'\n    >>> remove_spaces(\" abc \")\n    'abc'\n    >>> remove_spaces(\"a b c\")\n    'abc'\n    \"\"\"\n\ndef remove_punctuation(s: str):\n    \"\"\" s is a string of letters.\n    return the string without punctuation.\n\n    >>> remove_punctuation(\"abc\")\n    'abc'\n    >>> remove_punctuation(\"abc!\")\n    'abc'\n    >>> remove_punctuation(\"abc?\")\n    'abc'\n    >>> remove_punctuation(\"abc:)\")\n    'abc'\n    \"\"\"\n\ndef is_palindrome(s: str):\n    \"\"\" s is a string.\n    return True if it is a palindrome.\n\n    >>> is_palindrome(\"abc\")\n    False\n    >>> is_palindrome(\"abccba\")\n    True\n    >>> is_palindrome(\"abcba\")\n    True\n    >>> is_palindrome(\"aba\")\n    True\n    >>> is_palindrome(\"abac\")\n    False\n    \"\"\"\n\ndef make_palindrome(s: str):\n    \"\"\" s is a string.\n    return a palindrome made", "\ndef is_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if brackets are correctly bracketed.\n\n    >>> is_bracketing(\"<>\")\n    True\n    >>> is_bracketing(\"<<><>>\")\n    True\n    >>> is_bracketing(\"><<>\")\n    False\n    \"\"\"\n\ndef max_balanced_pair_length(text: str):\n    \"\"\" text is a string of characters.\n    return the length of the longest pair of balanced brackets.\n\n    >>> max_balanced_pair_length(\"<<>\")\n    2\n    >>> max_balanced_pair_length(\"<<><>>\")\n    4\n    >>> max_balanced_pair_length(\"<<<><><>\")\n    5\n    >>> max_balanced_pair_length(\"<<<<><><<>>>\")\n    7\n    \"\"\"\n\ndef longest_pair_of_brackets(text: str):\n    \"\"\" text is a string of characters.\n    return a tuple of the longest pair of balanced brackets.\n\n    >>> longest_pair_of_brackets(\"<<>\")\n    ('<>', 2)\n    >>> longest_pair_of_brackets(\"<<><>>\")\n    ('<><>', 4)\n    >>> longest_pair_of_brackets(\"<<<><><>\")\n    ('<><><>', 5)\n    >>> longest_pair_of_brackets(\"<<<<><><<>>>\")\n    ('<><><><><>', 7)\n    \"\"\"\n\ndef max_balanced_bracket_pair_length(text: str):\n    \"\"\" text is a string of characters.\n    return the length of the longest pair of balanced brackets.\n\n    >>> max_balanced_bracket_pair_length(\"<<>\")\n    2\n    >>> max_balanced_bracket_pair_length(\"<<><>>\")\n    4\n    >>> max_balanced_bracket_pair_length(\"<<<><><>\")\n    5\n    >>> max_balanced_bracket_pair_length(\"<<<<><><<>>>\")\n    7\n    \"\"\"\n\ndef longest", "\ndef read_from_file(filename: str):\n    \"\"\" read a text file from filename.\n\n    >>> read_from_file('data/test_data.txt')\n    'abc\\nde\\n\\n'\n    >>> read_from_file('data/test_data_2.txt')\n    'abc\\nde\\n\\n'\n    \"\"\"\n\ndef write_to_file(filename: str, text: str):\n    \"\"\" write text to filename.\n\n    >>> write_to_file('data/test_data_3.txt', 'xyz')\n    \"\"\"\n\ndef read_from_file_line_by_line(filename: str):\n    \"\"\" return a list of strings, one for each line in filename.\n\n    >>> read_from_file_line_by_line('data/test_data.txt')\n    ['abc', 'de', '']\n    >>> read_from_file_line_by_line('data/test_data_2.txt')\n    ['abc', 'de', '']\n    \"\"\"\n\ndef read_from_file_word_by_word(filename: str):\n    \"\"\" return a list of strings, one for each word in filename.\n\n    >>> read_from_file_word_by_word('data/test_data.txt')\n    ['abc', 'de']\n    >>> read_from_file_word_by_word('data/test_data_2.txt')\n    ['abc', 'de']\n    \"\"\"\n\ndef read_from_file_word_by_word_ignore_newlines(filename: str):\n    \"\"\" return a list of strings, one for each word in filename, ignore newlines.\n\n    >>> read_from_file_word_by_word_ignore_newlines('data/test_data.txt')\n    ['abc', 'de']\n    >>> read_from_file_word_by_word_ignore_newlines('data/test_data_2.", "\ndef check_brackets(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> check_brackets(\"<\")\n    False\n    >>> check_brackets(\"<>\")\n    True\n    >>> check_brackets(\"<<><>>\")\n    True\n    >>> check_brackets(\"><<>\")\n    False\n    \"\"\"\n    if len(brackets) == 0:\n        return True\n\n    opening_bracket = brackets[0]\n\n    if opening_bracket == \"<\":\n        closing_bracket = \">\"\n    else:\n        closing_bracket = \"<\"\n\n    return check_brackets(brackets[1:]) and closing_bracket == brackets[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "\ndef is_balanced(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if the string has balanced parentheses or brackets.\n\n    >>> is_balanced('()')\n    True\n    >>> is_balanced('(())')\n    True\n    >>> is_balanced('(())()')\n    True\n    >>> is_balanced('()()')\n    True\n    >>> is_balanced('()(()()())()()')\n    True\n    >>> is_balanced('()()()())')\n    True\n    >>> is_balanced('(())())')\n    True\n    >>> is_balanced('()()()()()()')\n    True\n    >>> is_balanced('(()')\n    False\n    >>> is_balanced('(()())')\n    False\n    >>> is_balanced(')(())')\n    False\n    >>> is_balanced(')(')\n    False\n    >>> is_balanced('()())')\n    False\n    >>> is_balanced('()()(')\n    False\n    >>> is_balanced('()())(')\n    False\n    >>> is_balanced('()()())')\n    False\n    >>> is_balanced('(()()())')\n    False\n    >>> is_balanced('(()()))')\n    False\n    >>> is_balanced('()(()())')\n    False\n    >>> is_balanced('()(()()')\n    False\n    >>> is_balanced('()(()())')\n    False\n    >>> is_balanced('()(()())()')\n    False\n    >>> is_balanced('()(()())()()')\n    False\n    >>> is_balanced('()(()())())()')\n    False\n    >>> is_balanced('()(()())()())')\n    False\n    >>> is_balanced('()(()())())())')\n    False\n    >>> is_balanced('(()()())()())')\n    False\n    >>> is_balanced('(()()())())())')\n    False\n    >>> is_balanced('(()()))()())')\n    False\n    >>> is_balanced('(()()))())())')\n    False\n    >>> is_balanced('(()()))())()())')\n    False\n    >>> is_balanced"], ["\ndef merge(a: list, b: list):\n    \"\"\"Merge 2 sorted lists into a new list.\n    >>> merge([1, 2, 4], [1, 3, 10])\n    [1, 1, 2, 3, 4, 10]\n    \"\"\"\n\ndef merge_sort(l: list):\n    \"\"\"Sort a list of integers using merge sort.\n    >>> merge_sort([1, 2, 4, 20])\n    [1, 2, 4, 20]\n    \"\"\"\n\ndef max_list(l: list):\n    \"\"\"Return the maximum element in a list.\n    >>> max_list([1, 2, 4, 20])\n    20\n    \"\"\"\n\ndef max_min(l: list):\n    \"\"\"Return a tuple of the maximum and minimum values in a list.\n    >>> max_min([1, 2, 4, 20])\n    (20, 1)\n    \"\"\"\n\ndef max_min_length(l: list):\n    \"\"\"Return a tuple of the maximum, minimum and length of a list.\n    >>> max_min_length([1, 2, 4, 20])\n    (20, 1, 5)\n    \"\"\"\n\ndef max_min_length_index(l: list):\n    \"\"\"Return a tuple of the maximum, minimum, length and index of a list.\n    >>> max_min_length_index([1, 2, 4, 20])\n    (20, 1, 5, 3)\n    \"\"\"\n\ndef max_subarray(l: list):\n    \"\"\"Return the maximum subarray in a list of integers.\n    >>> max_subarray([1, 2, 4, 20, 10, 15])\n    [15, 20]\n    \"\"\"\n\ndef max_sum_", "\ndef is_increasing(l: list):\n    \"\"\"Return True if l is monotonically increasing.\n    >>> is_increasing([1, 2, 4, 20])\n    True\n    >>> is_increasing([1, 20, 4, 10])\n    False\n    >>> is_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef is_decreasing(l: list):\n    \"\"\"Return True if l is monotonically decreasing.\n    >>> is_decreasing([1, 2, 4, 20])\n    False\n    >>> is_decreasing([1, 20, 4, 10])\n    True\n    >>> is_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n\ndef get_max_diff(l: list):\n    \"\"\"Return maximum difference between elements of l.\n    >>> get_max_diff([1, 2, 4, 20])\n    19\n    >>> get_max_diff([1, 20, 4, 10])\n    20\n    >>> get_max_diff([4, 1, 0, -10])\n    10\n    \"\"\"\n\ndef get_min_diff(l: list):\n    \"\"\"Return minimum difference between elements of l.\n    >>> get_min_diff([1, 2, 4, 20])\n    3\n    >>> get_min_diff([1, 20, 4, 10])\n    10\n    >>> get_min_diff([4, 1, 0, -10])\n    -10\n    \"\"\"\n\ndef get_max_diff2(l: list):\n    \"\"\"Return maximum difference between elements of l.\n    >>> get_max_diff2([1, 2, 4, 20])\n    19\n    >>> get_max_diff", "\ndef count_words(s: str):\n    \"\"\"Count the number of words in a string.\n    >>> count_words(\"the quick brown fox jumped over the lazy dog\")\n    7\n    \"\"\"\n\ndef is_palindrome(s: str):\n    \"\"\"Return True if string s is a palindrome.\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('abcd')\n    False\n    >>> is_palindrome('A man, a plan, a canal: Panama')\n    True\n    \"\"\"\n\ndef longest_palindrome(s: str):\n    \"\"\"Return longest palindrome in string s.\n    >>> longest_palindrome('abcdcba')\n    'abcdcba'\n    >>> longest_palindrome('abccccba')\n    'ccccba'\n    >>> longest_palindrome('abcddcba')\n    'ddcba'\n    \"\"\"\n\ndef sort_by_length(l: list):\n    \"\"\"Return list sorted by length.\n    >>> sort_by_length(['aa', 'a', 'aaa', 'aa'])\n    ['a', 'aa', 'aaa', 'aa']\n    >>> sort_by_length(['a', 'aa', 'aaa', 'aa'])\n    ['aa', 'aaa', 'aa', 'a']\n    >>> sort_by_length(['a'])\n    ['a']\n    \"\"\"\n\ndef remove_chars(s: str, bad_chars: list):\n    \"\"\"Remove characters in string s that are in list bad_chars.\n    >>> remove_chars('abc', ['c', 'a'])\n    'b'\n    >>> remove_chars('abcd', ['b', 'd'])\n    'acd'\n    \"\"\"\n\ndef is_vowel(c: str):\n    \"\"\"Return True if character is a vowel.\n    >>> is_vowel('a')\n    True\n    >>> is_vowel('y')\n    True\n    >>> is_vowel('e')\n    True\n    >>> is_vowel('q')\n    False\n    >>>", "\n# The problem can be solved with the help of a stack\ndef monotonic(l):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    stack = []\n    for i in l:\n        if stack and stack[-1] > i:\n            return False\n        stack.append(i)\n    return True\n\n# The problem can be solved with a stack.\ndef monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    stack = []\n    for i in l:\n        if stack and stack[-1] > i:\n            return False\n        while stack and stack[-1] < i:\n            stack.pop()\n        stack.append(i)\n    return True\n\n\ndef test_monotonic():\n    assert monotonic([1, 2, 4, 20]) == True\n    assert monotonic([1, 20, 4, 10]) == False\n    assert monotonic([4, 1, 0, -10]) == True\n", "\ndef contains(l: list, x: object):\n    \"\"\"Return True is x is in l.\n    >>> contains([1, 2, 4, 20], 20)\n    True\n    >>> contains([1, 2, 4, 20], 0)\n    False\n    \"\"\"\n\ndef remove(l: list, x: object):\n    \"\"\"Remove first occurrence of x from l, if present.\n    >>> l = [1, 2, 3, 4, 20]\n    >>> remove(l, 2)\n    >>> l\n    [1, 3, 4, 20]\n    >>> remove(l, 100)\n    >>> l\n    [1, 3, 4, 20]\n    \"\"\"\n\ndef remove_all(l: list, x: object):\n    \"\"\"Remove all occurrences of x from l, if present.\n    >>> l = [1, 2, 3, 4, 20]\n    >>> remove_all(l, 2)\n    >>> l\n    [1, 3, 4, 20]\n    >>> remove_all(l, 100)\n    >>> l\n    [1, 2, 3, 4, 20]\n    \"\"\"\n\ndef remove_duplicates(l: list):\n    \"\"\"Remove duplicates in l, preserving order.\n    >>> l = [1, 2, 3, 2, 4, 20]\n    >>> remove_duplicates(l)\n    >>> l\n    [1, 2, 3, 4, 20]\n    \"\"\"\n\ndef reverse(l: list):\n    \"\"\"Reverse the order of elements in l.\n    >>> l = [1, 2, 3, 4, 20]\n    >>> reverse(l)\n    >>> l\n    [20, 4, 3, 2, 1]\n    \"\"\"\n\ndef"], ["# BEGIN SOLUTION\n    return sorted(set(l1) & set(l2))\n# END SOLUTION\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "", "#    return list(set(l1) & set(l2))\n\n    return [x for x in l1 if x in l2]\n\ndef get_common_elements(l1: list, l2: list):\n    \"\"\"Return common elements for two lists.\n    >>> get_common_elements([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> get_common_elements([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return [x for x in l1 if x in l2]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\t# your code here\n    #return [x for x in l1 if x in l2 and l1.count(x) == l2.count(x)]\n    return list(set(l1) & set(l2))\n\ndef longest_increasing_subsequence(sequence):\n    \"\"\"Return the longest increasing subsequence of a sequence.\n    >>> longest_increasing_subsequence([5, 2, 7, 8, 3, 10, 1, 6])\n    [5, 2, 7, 8, 10]\n    >>> longest_increasing_subsequence([5, 2, 7, 8, 3, 10, 1, 6, 4])\n    [5, 2, 7, 8, 10, 6, 4]\n    >>> longest_increasing_subsequence([1, 2, 3])\n    [1, 2, 3]\n    >>> longest_increasing_subsequence([1, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> longest_increasing_subsequence([2, 1, 3, 4])\n    [2, 1, 3, 4]\n    >>> longest_increasing_subsequence([2, 3, 4, 1])\n    [2, 3, 4, 1]\n    >>> longest_increasing_subsequence([4, 3, 2, 1])\n    [4, 3, 2, 1]\n\n    \"\"\"\n    # your code here\n    length = len(sequence)\n    longest = [0] * length\n    longest_index = [0] * length\n    for i in range(length):", "#    if l1 == l2:\n#        return l1\n#    l1.sort()\n#    l2.sort()\n#    return list(set(l1).intersection(l2))\n\ndef common_2(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n\n    >>> common_2([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common_2([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    if l1 == l2:\n        return l1\n    l1.sort()\n    l2.sort()\n    i, j = 0, 0\n    l3 = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] < l2[j]:\n            i += 1\n        elif l2[j] < l1[i]:\n            j += 1\n        else:\n            l3.append(l1[i])\n            i += 1\n            j += 1\n    return l3\n\ndef common_3(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n\n    >>> common_3([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common_"], ["\ndef prime_factors(n: int):\n    \"\"\"Return the prime factors of n in sorted order. Assume n > 1 and is not a prime.\n    >>> prime_factors(13195)\n    [3, 3, 5, 7, 3, 23]\n    >>> prime_factors(2048)\n    [2, 2, 2, 2]\n    \"\"\"\n\ndef prime_factors_improved(n: int):\n    \"\"\"Return the prime factors of n in sorted order. Assume n > 1 and is not a prime.\n    >>> prime_factors_improved(13195)\n    [3, 3, 5, 7, 3, 23]\n    >>> prime_factors_improved(2048)\n    [2, 2, 2, 2]\n    \"\"\"\n\ndef prime_factors_improved2(n: int):\n    \"\"\"Return the prime factors of n in sorted order. Assume n > 1 and is not a prime.\n    >>> prime_factors_improved2(13195)\n    [3, 3, 5, 7, 3, 23]\n    >>> prime_factors_improved2(2048)\n    [2, 2, 2, 2]\n    \"\"\"\n\ndef square_digit_sum(n: int):\n    \"\"\"Return the sum of the squares of the digits of n. Assume n is a positive number.\n    >>> square_digit_sum(321)\n    51\n    >>> square_digit_sum(2)\n    5\n    >>> square_digit_sum(1024)\n    308\n    \"\"\"\n\ndef sum_square_digits(n: int):\n    \"\"\"Return the sum of the squares of the digits of n. Assume n is a positive number.\n    >>> sum_square_digits(321)\n    51\n    >>> sum_square_digits(2)\n    5\n    >>> sum_square_", "\ndef smallest_multiple(n: int):\n    \"\"\"Return the smallest multiple of n that is greater than 1 and not a\n    multiple of any of the numbers 2 through n-1. Assume n > 1.\n    >>> smallest_multiple(6)\n    6\n    >>> smallest_multiple(5)\n    60\n    \"\"\"\n\ndef sum_primes(n: int):\n    \"\"\"Return the sum of all the primes below n. Assume n > 1.\n    >>> sum_primes(20)\n    17\n    >>> sum_primes(2)\n    1\n    \"\"\"\n\ndef sum_even_fibonacci_numbers(n: int):\n    \"\"\"Return the sum of all the even-valued Fibonacci numbers below n. Assume\n    n > 1.\n    >>> sum_even_fibonacci_numbers(1000)\n    44\n    >>> sum_even_fibonacci_numbers(10)\n    8\n    \"\"\"\n\ndef sum_odd_fibonacci_numbers(n: int):\n    \"\"\"Return the sum of all the odd-valued Fibonacci numbers below n. Assume\n    n > 1.\n    >>> sum_odd_fibonacci_numbers(1000)\n    50\n    >>> sum_odd_fibonacci_numbers(10)\n    8\n    \"\"\"\n\ndef sum_primes_below_n_squared(n: int):\n    \"\"\"Return the sum of all primes below n^2. Assume n > 1.\n    >>> sum_primes_below_n_squared(100)\n    1060\n    >>> sum_primes_below_n_squared(10)\n    30\n    \"\"\"\n\ndef sum_primes_below_n_cubed(n: int):\n    \"\"\"Return the sum of all primes below n^3. Assume n > 1.\n    >>> sum_primes_below_n_cubed(100)\n    16531\n    >>> sum_primes_below_n_cubed(", "\ndef prime_factors(n: int):\n    \"\"\"Return the prime factors of n in a list. Assume n > 1 and is not a\n    prime.\n    >>> prime_factors(13195)\n    [5, 7, 13, 29]\n    >>> prime_factors(2048)\n    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    \"\"\"\n\ndef sum_primes(n: int):\n    \"\"\"Return the sum of all primes less than n. Assume n >= 2.\n    >>> sum_primes(99)\n    17\n    \"\"\"\n", "\ndef prime_factors(n: int):\n    \"\"\"Return a list of prime factors of n. Assume n > 1 and is not a prime.\n    >>> prime_factors(13195)\n    [3, 3, 5, 7]\n    >>> prime_factors(2048)\n    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    \"\"\"\n\ndef prime_factors_improved(n: int):\n    \"\"\"Return a list of prime factors of n. Assume n > 1 and is not a prime.\n    >>> prime_factors_improved(13195)\n    [3, 3, 5, 7]\n    >>> prime_factors_improved(2048)\n    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    \"\"\"\n\ndef sum_primes(n: int):\n    \"\"\"Return the sum of all prime numbers up to n.\n    >>> sum_primes(10)\n    17\n    \"\"\"\n\ndef find_largest_palindrome_from_number(n: int):\n    \"\"\"Return the largest palindrome made from the product of two n-digit numbers.\n    >>> find_largest_palindrome_from_number(3)\n    9\n    \"\"\"\n\ndef find_largest_palindrome_from_factors(n: int):\n    \"\"\"Return the largest palindrome made from the product of two n-digit numbers.\n    >>> find_largest_palindrome_from_factors(3)\n    9\n    \"\"\"\n\ndef find_largest_palindrome_from_sqrt(n: int):\n    \"\"\"Return the largest palindrome made from the product of two n-digit numbers.\n    >>> find_largest_palindrome_from_sqrt(3)\n    9\n    \"\"\"\n\ndef find_largest_palindrome_from_sqrt_sqrt(n: int):", "\ndef prime_factors(n: int):\n    \"\"\"Return the prime factors of n. Assume n > 1 and is not a prime.\n    >>> prime_factors(13195)\n    [5, 7, 13, 29]\n    >>> prime_factors(2048)\n    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    \"\"\"\n\ndef test_largest_prime_factor():\n    assert largest_prime_factor(13195) == 29\n    assert largest_prime_factor(2048) == 2\n\ndef test_prime_factors():\n    assert prime_factors(13195) == [5, 7, 13, 29]\n    assert prime_factors(2048) == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n\ndef test_factorial():\n    assert factorial(5) == 120\n    assert factorial(1) == 1\n    assert factorial(0) == 1\n\ndef test_fibonacci():\n    assert fibonacci(5) == 5\n    assert fibonacci(1) == 1\n    assert fibonacci(0) == 0\n\ndef test_largest_product_in_a_series():\n    assert largest_product_in_a_series(13195) == 29\n    assert largest_product_in_a_series(2048) == 2\n\ndef test_count_digits():\n    assert count_digits(10) == 2\n    assert count_digits(100) == 3\n    assert count_digits(1000) == 4\n    assert count_digits(10000) == 5\n    assert count_digits(100000) == 6\n\ndef test_"], ["\ndef sum_to_n_2(n: int):\n    \"\"\"sum_to_n_2 is a function that sums numbers from 1 to n.\n    >>> sum_to_n_2(30)\n    465\n    >>> sum_to_n_2(100)\n    5050\n    >>> sum_to_n_2(5)\n    15\n    >>> sum_to_n_2(10)\n    55\n    >>> sum_to_n_2(1)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        total = total + i\n    return total\n\ndef sum_to_n_3(n: int):\n    \"\"\"sum_to_n_3 is a function that sums numbers from 1 to n.\n    >>> sum_to_n_3(30)\n    465\n    >>> sum_to_n_3(100)\n    5050\n    >>> sum_to_n_3(5)\n    15\n    >>> sum_to_n_3(10)\n    55\n    >>> sum_to_n_3(1)\n    1\n    \"\"\"\n    total = 0\n    i = 1\n    while i <= n:\n        total = total + i\n        i = i + 1\n    return total\n\ndef sum_to_n_4(n: int):\n    \"\"\"sum_to_n_4 is a function that sums numbers from 1 to n.\n    >>> sum_to_n_4(30)\n    465\n    >>> sum_to_n_4(100)\n    5050\n    >>> sum_to_n_4(5)\n    15\n    >>> sum_to_n_4(10)\n    55\n    >>> sum_to_n", "\ndef sum_to_n_using_while(n: int):\n    \"\"\"sum_to_n_using_while is a function that sums numbers from 1 to n.\n    >>> sum_to_n_using_while(30)\n    465\n    >>> sum_to_n_using_while(100)\n    5050\n    >>> sum_to_n_using_while(5)\n    15\n    >>> sum_to_n_using_while(10)\n    55\n    >>> sum_to_n_using_while(1)\n    1\n    \"\"\"\n\ndef sum_to_n_using_for(n: int):\n    \"\"\"sum_to_n_using_for is a function that sums numbers from 1 to n.\n    >>> sum_to_n_using_for(30)\n    465\n    >>> sum_to_n_using_for(100)\n    5050\n    >>> sum_to_n_using_for(5)\n    15\n    >>> sum_to_n_using_for(10)\n    55\n    >>> sum_to_n_using_for(1)\n    1\n    \"\"\"\n\ndef sum_to_n_using_list(n: int):\n    \"\"\"sum_to_n_using_list is a function that sums numbers from 1 to n.\n    >>> sum_to_n_using_list(30)\n    465\n    >>> sum_to_n_using_list(100)\n    5050\n    >>> sum_to_n_using_list(5)\n    15\n    >>> sum_to_n_using_list(10)\n    55\n    >>> sum_to_n_using_list(1)\n    1\n    \"\"\"\n\ndef sum_to_n", "\ndef sum_to_n_2(n: int) -> int:\n    \"\"\"sum_to_n_2 is a function that sums numbers from 1 to n.\n    >>> sum_to_n_2(30)\n    465\n    >>> sum_to_n_2(100)\n    5050\n    >>> sum_to_n_2(5)\n    15\n    >>> sum_to_n_2(10)\n    55\n    >>> sum_to_n_2(1)\n    1\n    \"\"\"\n    return n * (n+1) // 2\n\ndef main():\n    \"\"\"main calls the sum_to_n function.\n    >>> main()\n    sum_to_n(100) = 5050\n    sum_to_n(5) = 15\n    sum_to_n(10) = 55\n    sum_to_n(1) = 1\n    \"\"\"\n    print(f\"sum_to_n(100) = {sum_to_n(100)}\")\n    print(f\"sum_to_n(5) = {sum_to_n(5)}\")\n    print(f\"sum_to_n(10) = {sum_to_n(10)}\")\n    print(f\"sum_to_n(1) = {sum_to_n(1)}\")\n    print(f\"sum_to_n_2(100) = {sum_to_n_2(100)}\")\n    print(f\"sum_to_n_2(5) = {sum_to_n_2(5)}\")\n    print(f\"sum_to_n_2(10) = {sum_to_n_2(10)}\")\n    print", "\ndef sum_to_n2(n: int) -> int:\n    \"\"\"sum_to_n2 is a function that sums numbers from 1 to n.\n    >>> sum_to_n2(30)\n    465\n    >>> sum_to_n2(100)\n    5050\n    >>> sum_to_n2(5)\n    15\n    >>> sum_to_n2(10)\n    55\n    >>> sum_to_n2(1)\n    1\n    \"\"\"\n\ndef sum_to_n3(n: int):\n    \"\"\"sum_to_n3 is a function that sums numbers from 1 to n.\n    >>> sum_to_n3(30)\n    465\n    >>> sum_to_n3(100)\n    5050\n    >>> sum_to_n3(5)\n    15\n    >>> sum_to_n3(10)\n    55\n    >>> sum_to_n3(1)\n    1\n    \"\"\"\n\ndef sum_to_n4(n: int):\n    \"\"\"sum_to_n4 is a function that sums numbers from 1 to n.\n    >>> sum_to_n4(30)\n    465\n    >>> sum_to_n4(100)\n    5050\n    >>> sum_to_n4(5)\n    15\n    >>> sum_to_n4(10)\n    55\n    >>> sum_to_n4(1)\n    1\n    \"\"\"\n\ndef sum_to_n5(n: int):\n    \"\"\"sum_to_n5 is a function that sums numbers from 1 to n.\n    >>> sum_to_n5(30)\n    465\n    >>> sum_to_n5(100)\n    5050", "\ndef sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n\n\ndef sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n"], ["\ndef balanced_parentheses(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    but only if the closing brackets are also nested inside the opening brackets.\n\n    >>> balanced_parentheses(\"(\")\n    False\n    >>> balanced_parentheses(\"()\")\n    True\n    >>> balanced_parentheses(\"(()())\")\n    True\n    >>> balanced_parentheses(\")(()\")\n    False\n    >>> balanced_parentheses(\"(()\")\n    False\n    \"\"\"\n\nif __name__ == \"__main__\":\n    print(correct_bracketing(\"()\"))\n    print(balanced_parentheses(\"()\"))\n    print(balanced_parentheses(\"(()())\"))\n    print(balanced_parentheses(\")(()\"))\n    print(balanced_parentheses(\"(()\"))\n", "\ndef is_valid_paranthesis(paranthesis: str):\n    \"\"\" paranthesis is a string of \"()\" and \"{}\" and \"[]\"\n    return True if the string has valid paranthesis and False otherwise.\n\n    >>> is_valid_paranthesis(\"()\")\n    True\n    >>> is_valid_paranthesis(\"{}\")\n    True\n    >>> is_valid_paranthesis(\"[]\")\n    True\n    >>> is_valid_paranthesis(\"()[]\")\n    True\n    >>> is_valid_paranthesis(\"()()\")\n    True\n    >>> is_valid_paranthesis(\"()[\")\n    False\n    >>> is_valid_paranthesis(\"({[()]}\")\n    True\n    \"\"\"\n", "\ndef check_brackets(s: str):\n    \"\"\" Check if string s has balanced brackets.\n\n    >>> check_brackets(\")\")\n    False\n    >>> check_brackets(\"()\")\n    True\n    >>> check_brackets(\"()()\")\n    True\n    >>> check_brackets(\"(()()())\")\n    True\n    >>> check_brackets(\")(\")\n    False\n    >>> check_brackets(\")()\")\n    False\n    >>> check_brackets(\")(\")\n    False\n    >>> check_brackets(\"()()()\")\n    True\n    >>> check_brackets(\")(())\")\n    False\n    >>> check_brackets(\"(()())(\")\n    False\n    >>> check_brackets(\"(())\")\n    False\n    \"\"\"\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\ndef remove_duplicates(s: str):\n    \"\"\" Remove all duplicates from string s.\n\n    >>> remove_duplicates(\"a\")\n    'a'\n    >>> remove_duplicates(\"aa\")\n    'aa'\n    >>> remove_duplicates(\"abc\")\n    'abc'\n    >>> remove_duplicates(\"abcc\")\n    'abc'\n    >>> remove_duplicates(\"aabcc\")\n    'abcc'\n    >>> remove_duplicates(\"abccba\")\n    'abc'\n    \"\"\"\n    return ''.join(sorted(set(s)))\n\ndef has_duplicates(s: str):\n    \"\"\" Return True if string s contains duplicates.\n\n    >>> has_duplicates(\"a\")\n    False\n    >>> has_duplicates(\"aa\")\n    True\n    >>> has_duplicates(\"abc\")\n    False\n    >>> has_duplicates(\"abcc\")\n    True\n    >>> has_duplicates(\"aabcc\")\n    True\n    >>> has_duplicates(\"abccba\")\n    True\n    \"\"\"\n    return len(set(s)) != len(s)\n\ndef is_palindrome(", "\ndef correct_bracketing_2(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_2(\"(\")\n    False\n    >>> correct_bracketing_2(\"()\")\n    True\n    >>> correct_bracketing_2(\"(()())\")\n    True\n    >>> correct_bracketing_2(\")(()\")\n    False\n    \"\"\"\n\ndef correct_bracketing_3(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_3(\"(\")\n    False\n    >>> correct_bracketing_3(\"()\")\n    True\n    >>> correct_bracketing_3(\"(()())\")\n    True\n    >>> correct_bracketing_3(\")(()\")\n    False\n    \"\"\"\n\ndef correct_bracketing_4(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_4(\"(\")\n    False\n    >>> correct_bracketing_4(\"()\")\n    True\n    >>> correct_bracketing_4(\"(()())\")\n    True\n    >>> correct_bracketing_4(\")(()\")\n    False\n    \"\"\"\n\ndef correct_bracketing_5(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_5(\"(\")\n    False\n    >>> correct_bracketing_5(\"()\")\n    True\n    >>> correct_bracketing_5(\"(()())\")\n    True\n    >>> correct_bracketing_5(\")(()\")\n    False\n    \"\"\"\n\ndef correct_bracketing_6(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_6", ""], ["\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\ndef eval_polynomial(xs: list, x: float):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>> eval_polynomial([3, 1, 2, 4, 5], 10)\n    205\n    >>> eval_polynomial([1, 2, 3], 5)\n    35\n    \"\"\"\n\ndef main():\n    \"\"\" Tests the functions defined in this file.\n    \"\"\"\n    print(derivative([3, 1, 2, 4, 5]))\n    print(eval_polynomial([3, 1, 2, 4, 5], 10))\n\nif __name__ == \"__main__\":\n    main()\n", "\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\ndef polynomial(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return polynomial in the same form.\n    >>> polynomial([3, 1, 2, 4, 5])\n    [3, 1, 2, 4, 5]\n    >>> polynomial([1, 2, 3])\n    [1, 2, 3]\n    \"\"\"\n\ndef quadratic(a, b, c):\n    \"\"\" Given a, b, c returns the coefficients of the quadratic.\n    >>> quadratic(1, 2, 3)\n    [1, 2, 3]\n    >>> quadratic(2, 3, 4)\n    [0, 1, 3]\n    \"\"\"\n\ndef cubic(a, b, c, d):\n    \"\"\" Given a, b, c, d returns the coefficients of the cubic.\n    >>> cubic(1, 2, 3, 4)\n    [1, 2, 3, 4]\n    >>> cubic(2, 3, 4, 5)\n    [0, 1, 3, 5]\n    \"\"\"\n\ndef cubic_roots(a, b, c, d):\n    \"\"\" Given a, b, c, d returns the coefficients of the cubic.\n    >>> cubic_roots(1, 2, 3, 4)\n    [-0.5, -0.5, 0.5, 0.5]\n    >>> cubic_roots(2, 3, 4, 5)\n    [0.5, -0.5, -0.5, 0.5]\n    \"\"\"\n\ndef cubic_roots_alternative(a, b, c, d):\n    \"\"\" Given a, b, c", "\ndef polynomial_from_string(s: str):\n    \"\"\" s represents a polynomial in the form of string.\n    s should be in the form of:\n    x + 2x^2 + 4x^3 + 5x^4\n    Return the coefficients of the polynomial.\n    >>> polynomial_from_string('x + 2x^2 + 4x^3 + 5x^4')\n    [1, 2, 4, 5]\n    \"\"\"\n\ndef polynomial_from_list(l: list):\n    \"\"\" l represent coefficients of a polynomial.\n    Return a polynomial in the form of string.\n    >>> polynomial_from_list([1, 2, 4, 5])\n    'x + 2x^2 + 4x^3 + 5x^4'\n    \"\"\"\n\ndef polynomial_division(a: list, b: list):\n    \"\"\" a represents coefficients of a polynomial.\n    b represents coefficients of a polynomial.\n    Return a tuple of a and b such that a * b = 1.\n    >>> polynomial_division([1, 2, 3], [2, 1])\n    ([1, 1], [3, 2])\n    >>> polynomial_division([2, 4, 6], [2, 2])\n    ([1, 2], [4, 3])\n    \"\"\"\n\ndef polynomial_multiplication(a: list, b: list):\n    \"\"\" a represents coefficients of a polynomial.\n    b represents coefficients of a polynomial.\n    Return the coefficients of the product of polynomials a * b.\n    >>> polynomial_multiplication([1, 2, 3], [2, 1])\n    [2, 3, 3, 6]\n    >>> polynomial_multiplication([2, 4, 6], [2, 2])\n    [4, 8,"], ["\ndef main():\n    print(fibfib(8))\n\nif __name__ == '__main__':\n    main()", "\ndef main():\n    print(fibfib(1))\n    print(fibfib(5))\n    print(fibfib(8))\n\nif __name__ == \"__main__\":\n    main()\n", "", "\ndef fibfib_recursive(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_recursive(1)\n    0\n    >>> fibfib_recursive(5)\n    4\n    >>> fibfib_recursive(8)\n    24\n    \"\"\"\n\ndef fibfib_dp(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib_dp(1)\n    0\n    >>> fibfib_dp(5)\n    4\n    >>> fibfib_dp(8)\n    24\n    \"\"\"\n\ndef fibfib_memo(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fib", "\ndef fibfib_recursive(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\ndef fibfib_iterative(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"], ["\ndef vowels_count(s):\n    return s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u') + s.count('y')\n\n\n# def vowels_count(s):\n#     vowels = 'aeiouy'\n#     count = 0\n#     for char in s:\n#         if char in vowels:\n#             count += 1\n#     return count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\ndef vowels_count_1(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for c in s:\n        if c in vowels:\n            count += 1\n    if s[-1] == 'y' and s[-2] in vowels:\n        count += 1\n    return count\n\ndef vowels_count_2(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return s.lower().count(vowels) + s.lower().endswith('y') * 1\n\ndef vowels_count_3(", "\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\ndef vowels_count(s):\n    count = 0\n    vowels = \"aeiou\"\n    for char in s:\n        if char in vowels:\n            count = count + 1\n        elif char == \"y\" and count > 0:\n            count = count + 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    #print(vowels_count(\"abcde\"))\n    #print(vowels_count(\"ACEDY\"))\n", "\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    #return 0\n    total = 0\n    for letter in s:\n        if letter in \"aeiou\":\n            total += 1\n\n    return total\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    #return 0\n    total = 0\n    for letter in s:\n        if letter == \"a\":\n            total += 1\n        elif letter == \"e\":\n            total += 1\n        elif letter == \"i\":\n            total += 1\n        elif letter == \"o\":\n            total += 1\n        elif letter == \"u\":\n            total += 1\n    if len(s) > 1 and s[len(s)-1] == \"y\":\n       "], ["\ndef get_factors(n):\n    \"\"\"Return all prime factors of n as a list.\n    >>> get_factors(12)\n    [2, 2, 3]\n    \"\"\"\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\ndef get_next_number(n):\n    \"\"\"Return the next natural number n.\n\n    >>> get_next_number(11)\n    12\n    \"\"\"\n    next_number = 1\n    while True:\n        next_number += 1\n        factors = get_factors(next_number)\n        if len(factors) == 4:\n            return next_number\n\ndef is_palindrome(n):\n    \"\"\"Return True if n is a palindrome.\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Return True if n is a prime number, otherwise return False.\n    >>> is_prime(11)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_fast(n):\n    \"\"\"Return True if n is a prime number, otherwise return False.\n    >>> is_prime_fast(11)\n    True\n    \"\"\"\n\ndef is_prime_fast(n):\n    \"\"\"Return True if n is a prime number, otherwise return False.\n    >>> is_prime_fast(11)\n    True\n    \"\"\"\n\ndef is_prime_slow(n):\n    \"\"\"Return True if n is a prime number, otherwise return False.\n    >>> is_prime_slow(11)\n    True\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"Return True if n is a palindrome, otherwise return False.\n   ", "\ndef is_palindrome(x):\n    \"\"\"Returns true if the integer x is a palindrome,\n    i.e. if the digits of x are the same when read from right to left\n    as when reading from left to right.\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(1221)\n    True\n    >>> is_palindrome(123)\n    False\n    >>> is_palindrome(12321)\n    True\n    \"\"\"\n\ndef num_digits(x):\n    \"\"\"Returns the number of digits of the integer x.\n    >>> num_digits(1234)\n    4\n    >>> num_digits(1234567890)\n    10\n    >>> num_digits(0)\n    1\n    \"\"\"\n\ndef sum_digits(x):\n    \"\"\"Returns the sum of the digits of the integer x.\n    >>> sum_digits(1234)\n    10\n    >>> sum_digits(1234567890)\n    45\n    >>> sum_digits(0)\n    0\n    \"\"\"\n\ndef reverse(x):\n    \"\"\"Returns the integer x reversed.\n    >>> reverse(1234)\n    4321\n    >>> reverse(1234567890)\n    0987654321\n    >>> reverse(0)\n    0\n    \"\"\"\n\ndef is_armstrong(x):\n    \"\"\"Returns true if the integer x is a Armstrong number.\n    An Armstrong number is a number such that\n    the sum of the cube of the digits is equal to the number itself.\n    >>> is_armstrong(153)\n    True\n    >>> is_armstrong(370)\n    True\n    >>> is_armstrong(1)\n    True\n    >>> is_armstrong(4)\n    False\n    \"\"\"\n\ndef is_prime(x):\n    \"\"\"Returns true if the integer x is a prime number", "\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()", "\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\ndef number_of_digits(x):\n    \"\"\"Return the number of digits in the integer x.\n    >>> number_of_digits(12)\n    2\n    >>> number_of_digits(345)\n    3\n    \"\"\"\n\ndef is_palindromic(x):\n    \"\"\"Return True if the integer x is a palindromic integer.\n    >>> is_palindromic(121)\n    True\n    >>> is_palindromic(2234)\n    True\n    \"\"\"\n\ndef is_perfect(x):\n    \"\"\"Return True if the integer x is a perfect number, otherwise return False.\n    >>> is_perfect(10)\n    True\n    >>> is_perfect(12)\n    False\n    \"\"\"\n\ndef is_prime(x):\n    \"\"\"Return True if the integer x is a prime number, otherwise return False.\n    >>> is_prime(10)\n    True\n    >>> is_prime(12)\n    False\n    \"\"\"\n\ndef divisors(x):\n    \"\"\"Return the list of the divisors of the integer x.\n    >>> divisors(10)\n    [1, 2, 5, 10]\n    >>> divisors(30)\n    [1, 2, 3, 5, 6, 10, 15, 30]\n    \"\"\"\n\ndef sum_digits(x):\n    \"\"\"Return the sum of the digits of the integer x.\n    >>> sum_digits(12)\n    3\n    >>> sum_digits(1000)\n    1\n    \"\"\"\n\ndef sum_divisors(x):\n    \"\"\"Return the sum of the divisors of the integer x.\n    >>> sum_divisors(100)\n    106\n    >>> sum_divisors(9000)\n    10000\n    \"\"\"\n\ndef sum_square_digits(x):\n    \"\"\"Return the sum of the"], ["\ndef palindrome(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns True if it is a palindrome.\n\n    Examples:\n        palindrome(\"\") => True\n        palindrome(\"a\") => True\n        palindrome(\"aa\") => True\n        palindrome(\"aba\") => False\n        palindrome(\"redivider\") => True\n        palindrome(\"radar\") => False\n        palindrome(\"neveroddoreven\") => True\n        palindrome(\"neveroddoreven!\") => False\n    \"\"\"\n\ndef validIP(ip):\n    \"\"\"Task\n    Write a function that takes a string as input and returns True if it is a valid IP address.\n\n    Examples:\n        validIP(\"127.0.0.1\") => True\n        validIP(\"255.100.50.0\") => True\n        validIP(\"255.100.256.0\") => False\n        validIP(\"100.50.255.0\") => False\n        validIP(\"100.50.255.100\") => False\n        validIP(\"100.50.255.256\") => False\n        validIP(\"255.255.255.255\") => True\n        validIP(\"255.255.255.256\") => False\n        validIP(\"127.0.0.256\") => False\n        validIP(\"127.0.0.0.1\") => False\n    \"\"\"\n\ndef validParentheses(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns True if it is a balanced parentheses string.\n\n    Examples:\n        validParentheses(\"\") => True\n        validParentheses(\"(\") => False\n        validParentheses(\"()\") => True\n        validParentheses", "", "", "", ""], ["\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\",3))\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"100 apples and 1 oranges\",120))\n\n# # 12\n\ndef fruit_distribution_2(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", ", "\ndef remove_duplicates(s):\n    \"\"\"\n    In this task, you will be given a string s and a character c.\n    Your task is to remove all occurrences of the character c from s.\n    You can assume that the character c is unique and it is present in the string s.\n    You can assume that the string s does not have any leading or trailing spaces.\n\n    for example:\n    remove_duplicates(\"aAbbccdA\", \"c\") -> \"aAbbccdA\"\n    remove_duplicates(\"aAbbccdA\", \"d\") -> \"aAbbccA\"\n    remove_duplicates(\"aAbbccdA\", \"A\") -> \"bccd\"\n    remove_duplicates(\"aAbbccdA\", \"a\") -> \"bccd\"\n    remove_duplicates(\"aAbbccdA\", \"b\") -> \"bccd\"\n    remove_duplicates(\"aAbbccdA\", \"z\") -> \"aAbbccdA\"\n    \"\"\"\n\ndef find_char_in_string(s,c):\n    \"\"\"\n    In this task, you will be given a string s and a character c.\n    Your task is to return the first index of the first occurrence of the character c in the string s.\n    If the character c is not present in the", "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    apples,oranges,mango = s.split()\n    apples,oranges,mango = int(apples),int(oranges", "\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    \n    fruit_list = s.split()\n    apples = int(fruit_list[0])\n    oranges = int(fruit_list[2])"], ["", "", "\n# Solution\ndef pluck(arr):\n    result = []\n    if len(arr) == 0:\n        return result\n    for i, item in enumerate(arr):\n        if item % 2 == 0:\n            result.append([item, i])\n    if len(result) == 0:\n        return result\n    else:\n        result.sort()\n        return result[0]\n\n# Tests\nprint(pluck([4,2,3]))\nprint(pluck([1,2,3]))\nprint(pluck([]))\nprint(pluck([5, 0, 3, 0, 4, 2]))", "", ""], ["\ndef search_2(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    counter = {}\n    for element in lst:\n        counter[element] = counter.get(element,0) + 1\n        if counter[element] >= element:\n            return element\n    return -1\n\ndef search_3(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4,", "\ndef search_linear(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    if len(lst) == 0:\n        return -1\n\n    max_val = -1\n    max_count = 0\n\n    for val in lst:\n        if val > 0 and val >= max_count:\n            max_count = val\n            max_val = val\n\n    return max_val\n\ndef search_linear_space(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4,", "\nif __name__ == \"__main__\":\n    print(search([4, 1, 2, 2, 3, 1]))\n    print(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\n    print(search([5, 5, 4, 4, 4]))", "\ndef max_subarray(arr):\n    '''\n    You are given an array of integers, return the maximum sum of any contiguous subarray within the array.\n    Subarray can be defined as the set of elements between two indices l and r (both inclusive) \n    i.e. subarray = arr[l:r+1]\n    Examples:\n        max_subarray([1, 2, 3, 4, 5]) == 15\n        max_subarray([1, -2, 3, -4, 5]) == 6\n        max_subarray([1, 2, -3, 4, 5]) == 11\n        max_subarray([1, 2, 3, 4, 5, 6]) == 21\n    '''\n\ndef max_sum_path(graph):\n    '''\n    Given a graph, return the maximum sum of the path that can be taken through the graph.\n    A path is a sequence of vertices connected by edges. \n    The sum of a path is the sum of the weights of the edges that it consists of.\n    Examples:\n        max_sum_path([[0, 1, 3],\n                       [1, 2, 1],\n                       [0, 3, 1],\n                       [1, 4, 2],\n                       [2, 3, 4],\n                       [2, 5, 1],\n                       [4, 5, 2],\n                       [3, 5, 3]]) == 5\n        max_sum_path([[0, 1, 2],\n                       [1, 2, 3],", ""], ["<comm\n    pass\n\ndef list_ends(lst):\n    '''\n    Given a list, return a list of the first and last elements of the list.\n\n    Examples:\n    list_ends([1, 2, 3, 4]) == [4, 2]\n    list_ends([1, 2, 3]) == [3, 1]\n    list_ends([1, 2]) == [2, 1]\n    list_ends([]) == []\n    '''<comm\n    pass\n\ndef remove_duplicates(lst):\n    '''\n    Given a list, remove all the duplicates.\n\n    Examples:\n    remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]\n    remove_duplicates([5, 5, 5, 5]) == [5]\n    remove_duplicates([]) == []\n    '''\n    # Your code here\n    pass\n\ndef make_sentence(words):\n    '''\n    Given a list of words, return a sentence made by joining them together,\n    with spaces between them.\n\n    Examples:\n    make_sentence([\"hello\", \"there\"]) == \"hello there\"\n    make_sentence([\"hello\"]) == \"hello\"\n    make_sentence([]) == \"\"\n    '''\n    # Your code here\n    pass\n\ndef make_sentence2(words):\n    '''\n    Given a list of words, return a sentence made by joining them together,\n    with spaces between them.\n\n    Examples:\n    make_sentence2([\"hello\", \"there\"]) == \"hello there\"\n    make_sentence2([\"hello\"]) == \"hello\"\n    make_sentence2([]) == \"\"\n    '''\n    # Your code here\n    pass\n\ndef make_sentence3(words):\n    '''\n    Given a list of words, return a sentence made by joining", "#\n    pass\n\ndef strange_sort_list(lst):\n    if lst == []:\n        return lst\n    else:\n        min_value = min(lst)\n        max_value = max(lst)\n        lst.remove(min_value)\n        lst.remove(max_value)\n        lst.append(max_value)\n        lst.append(min_value)\n        return strange_sort_list(lst)\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))\n", "username_1: I want to work on this one.\nusername_2: @username_1 Go ahead :)\nusername_2: @username_0 I'm on it!\nusername_2: @username_0 I'm on it!", "{\n    if len(lst) == 0:\n        return lst\n\n    min_index = 0\n    max_index = 0\n\n    for index in range(len(lst)):\n        if lst[min_index] > lst[index]:\n            min_index = index\n\n    for index in range(len(lst)):\n        if lst[max_index] < lst[index]:\n            max_index = index\n\n    lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n    lst.remove(max(lst))\n    lst.remove(min(lst))\n    return strange_sort_list(lst)\n", "}\n\n    pass\n\ndef strange_sort_list_v2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list_v2([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list_v2([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list_v2([]) == []\n    '''}\n\n    pass\n"], ["\ndef is_palindrome(s):\n    '''\n    Given a string, return True if the string is a palindrome. Otherwise, return False.\n    A palindrome is a word or phrase that is the same forwards and backwards. \n    A phrase is a palindrome when it is equal to the reverse of itself. \n    The phrase \"A man, a plan, a canal: Panama\" is an example of a palindrome.\n    Example:\n    is_palindrome('civic') == True\n    is_palindrome('radar') == False\n    is_palindrome('noon') == True\n    is_palindrome('noon, noon, noon') == False\n    is_palindrome('racecar') == True\n    '''\n\ndef is_palindrome2(s):\n    '''\n    Given a string, return True if the string is a palindrome. Otherwise, return False.\n    A palindrome is a word or phrase that is the same forwards and backwards. \n    A phrase is a palindrome when it is equal to the reverse of itself. \n    The phrase \"A man, a plan, a canal: Panama\" is an example of a palindrome.\n    Example:\n    is_palindrome('civic') == True\n    is_palindrome('radar') == False\n    is_palindrome('noon') == True\n    is_palindrome('noon, noon, noon') == False\n    is_palindrome('racecar') == True\n    '''\n\ndef count_occurrences(s, sub):\n    '''\n    Given a string and a sub-string, count the number of times that the sub-string\n    appears in the string. Return 0 if the sub-string is not found.\n    Example:\n    count_occurrences('aabaabaa', 'aa') == 7\n    count_occurrences('mississippi',", "", "\ndef find_max_value(arr):\n    '''\n    Given an array, return the largest integer in the array.\n    Example:\n    find_max_value([3, 6, 2, 5]) == 6\n    find_max_value([-2, 2, 3, -4]) == 3\n    find_max_value([1, 2, 3, -4]) == 3\n    '''\n\ndef remove_duplicates(arr):\n    '''\n    Given an array of integers, remove any integer that appears more than once.\n    Do not create a new array or change the original array. Return the new array.\n    Example:\n    remove_duplicates([3, 6, 2, 5, 6, 3]) == [3, 6, 2, 5]\n    remove_duplicates([-2, 2, 3, -4, 2]) == [-2, 2, 3, -4]\n    remove_duplicates([1, 2, 3, -4, 2]) == [1, 2, 3, -4]\n    '''\n\ndef remove_duplicates_from_list(arr):\n    '''\n    Given an array of integers, remove any integer that appears more than once.\n    Create a new array and return it.\n    Example:\n    remove_duplicates_from_list([3, 6, 2, 5, 6, 3]) == [3, 6, 2, 5]\n    remove_duplicates_from_list([-2, 2, 3, -4, 2]) == [-2, 2, 3, -4]\n    remove_duplicates_from_list([1, 2, 3, -4, 2]) == [1, 2, 3, -4", "\ndef area(l, w, h):\n    '''\n    Given the dimensions of a rectangle, return the area of the rectangle.\n    Example:\n    area(1, 2, 3) == 6\n    area(3, 2, 1) == 6\n    '''\n    return l * w + w * h + h * l\n\ndef area_of_a_rectangle_with_a_rounded_corner(l, w, h, r):\n    '''\n    Given the dimensions of a rectangle, return the area of the rectangle with a rounded corner.\n    Example:\n    area_of_a_rectangle_with_a_rounded_corner(1, 2, 3, 0) == 6\n    area_of_a_rectangle_with_a_rounded_corner(1, 2, 3, 1) == 12.25\n    '''\n\ndef find_second_largest(numbers):\n    '''\n    Given a list of numbers, return the second largest number in the list. If there is no second largest, return -1\n    Example:\n    find_second_largest([1, 3, 5, 2]) == 3\n    find_second_largest([4, 1, 3, 2]) == -1\n    '''\n\ndef find_second_largest_using_sorting(numbers):\n    '''\n    Given a list of numbers, return the second largest number in the list. If there is no second largest, return -1\n    Example:\n    find_second_largest_using_sorting([1, 3, 5, 2]) == 3\n    find_second_largest_using_sorting([4, 1, 3, 2]) == -1\n    '''\n\ndef find_second_largest_using_list_comprehension(numbers):", "\ndef area_of_the_house(length, width, height):\n    '''\n    Given the length, width and height of a house in centimeters return the \n    area of the house in square centimeters rounded to 2 decimal points. \n    Example:\n    area_of_the_house(10, 15, 20) == 250.00\n    area_of_the_house(2, 2, 3) == 12.00\n    '''\n\ndef area_of_the_house_v2(length, width, height):\n    '''\n    Given the length, width and height of a house in centimeters return the \n    area of the house in square centimeters rounded to 2 decimal points. \n    Example:\n    area_of_the_house_v2(10, 15, 20) == 250.00\n    area_of_the_house_v2(2, 2, 3) == 12.00\n    '''\n\ndef area_of_the_house_v3(length, width, height):\n    '''\n    Given the length, width and height of a house in centimeters return the \n    area of the house in square centimeters rounded to 2 decimal points. \n    Example:\n    area_of_the_house_v3(10, 15, 20) == 250.00\n    area_of_the_house_v3(2, 2, 3) == 12.00\n    '''\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a valid triangle. Otherwise return False\n    Three sides make a valid"], ["\ndef will_it_fly(q,w):\n    return sum(q)<=w and q==q[::-1]\n\nprint(will_it_fly([1, 2], 5))\nprint(will_it_fly([3, 2, 3], 1))\nprint(will_it_fly([3, 2, 3], 9))\nprint(will_it_fly([3], 5))", "\ndef will_it_fly(q,w):\n    if sum(q)==w:\n        if len(str(q))==len(str(q[::-1])):\n            return True\n        else:\n            return False\n    else:\n        return False\n\nwill_it_fly([1,2,3,4,5],15)", "\ndef balanced_sum(a, b):\n    return a + b == sum([int(i) for i in str(a)]) + sum([int(i) for i in str(b)])\n\ndef will_it_fly(q,w):\n    if len(q) == 0:\n        return True\n    elif balanced_sum(q,q) and q <= w:\n        return True\n    else:\n        return will_it_fly(q[1:],w)\n\nq = [3, 2, 3]\nw = 9\nprint(will_it_fly(q,w))", "\ndef will_it_fly(q,w):\n    if len(q)==1:\n        if q[0]<=w:\n            return True\n        else:\n            return False\n    if q[0]==q[-1]:\n        return will_it_fly(q[1:-1],w)\n    else:\n        return will_it_fly(q[1:],w)\n\n\nprint(will_it_fly([1,2],5))\nprint(will_it_fly([3,2,3],1))\nprint(will_it_fly([3,2,3],9))\nprint(will_it_fly([3],5))", "#     q=list(map(int,q))\n#     q=q[::-1]\n#     for i in range(len(q)-1):\n#         if q[i]!=q[i+1]:\n#             return False\n#     return True\n#     if q==q[::-1]:\n#         if sum(q)<w:\n#             return True\n#         else:\n#             return False\n#     else:\n#         return False\n#     q=list(map(int,q))\n#     return sum(q)<w\n\nq=input().split()\nq=list(map(int,q))\nw=int(input())\nprint(will_it_fly(q,w))\n"], ["", "\n# Test cases:\nprint(smallest_change([1,2,3,5,4,7,9,6])) # 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2])) # 1\nprint(smallest_change([1, 2, 3, 2, 1])) # 0\n\n# +\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # TODO\n    return\n\n# Test cases:\nprint(smallest_change([1,2,3,5,4,7,9,6])) # 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2])) # 1\nprint(smallest_change([1, 2, 3, 2, 1])) # 0\n", "", "", "\ndef smallest_change_v2(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        if i > 0 and arr[i] == arr[i-1]:\n            count += 1\n    return count\n"], ["#     lst1=sorted(lst1)\n#     lst2=sorted(lst2)\n#     if len(lst1)==len(lst2):\n#         if lst1==lst2:\n#             return lst1\n#         else:\n#             return lst1\n#     if len(lst1)<len(lst2):\n#         return lst1\n#     if len(lst1)>len(lst2):\n#         return lst2\n\n    lst1=sorted(lst1)\n    lst2=sorted(lst2)\n    i=0\n    while i<len(lst1) and i<len(lst2):\n        if lst1[i]!=lst2[i]:\n            break\n        i+=1\n    return lst1[:i]\n\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))\n", "\ndef main():\n    print(\"Example:\")\n    print(total_match(['4'], ['1', '2', '3', '4', '5']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert total_match([], []) == [], \"Empty lists\"\n    assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi'], \"Two lists with same length\"\n    assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin'], \"Two lists with same length\"\n    assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi'], \"Two lists with same length\"\n    assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4'], \"Two lists with same length\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n\nif __name__ == '__main__':\n    main()\n", "", "\n# Code goes here\ndef total_match(lst1, lst2):\n    if len(lst1) == len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst2\n    else:\n        return lst1\n\n# Driver code\nprint(total_match([], []))\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))", "\n# Solution\n\ndef total_match(lst1, lst2):\n    lst = []\n    for i in lst1:\n        for j in lst2:\n            if len(i) < len(j):\n                lst.append(i)\n    return lst"], ["", "\nif __name__ == '__main__':\n    print(is_multiply_prime(30))\n    print(is_multiply_prime(1))\n    print(is_multiply_prime(2))\n    print(is_multiply_prime(3))\n    print(is_multiply_prime(4))\n    print(is_multiply_prime(5))\n    print(is_multiply_prime(6))\n    print(is_multiply_prime(7))\n    print(is_multiply_prime(8))\n    print(is_multiply_prime(9))\n    print(is_multiply_prime(10))\n    print(is_multiply_prime(11))\n    print(is_multiply_prime(12))\n    print(is_multiply_prime(13))\n    print(is_multiply_prime(14))\n    print(is_multiply_prime(15))\n    print(is_multiply_prime(16))\n    print(is_multiply_prime(17))\n    print(is_multiply_prime(18))\n    print(is_multiply_prime(19))\n    print(is_multiply_prime(20))\n    print(is_multiply_prime(21))\n    print(is_multiply_prime(22))\n    print(is_multiply_prime(23))\n    print(is_multiply_prime(24))\n    print(is_multiply_prime(25))\n    print(is_multiply_prime(26))\n    print(is_multiply_prime(27))\n    print(is_multiply_prime(28))\n    print(is_multiply_prime(29))\n    print(is_multiply_prime(30))\n    print(is_multiply_prime(31))\n    print(is_multiply_prime(32))\n    print(is_multiply_prime(33))\n    print(is_multiply_prime(34))\n    print(is_multiply_prime(35", "\ndef is_palindrome(num):\n    \"\"\"Write a function that returns True if given number is a palindrome and False otherwise.\n    Example:\n    is_palindrome(121) == True\n    is_palindrome(123) == False\n    \"\"\"\n\ndef reverse_digits(num):\n    \"\"\"Write a function that reverses the digits of a given number.\n    Example:\n    reverse_digits(123) == 321\n    \"\"\"\n\ndef is_palindrome_v2(num):\n    \"\"\"Write a function that returns True if given number is a palindrome and False otherwise.\n    Example:\n    is_palindrome_v2(121) == True\n    is_palindrome_v2(123) == False\n    \"\"\"\n\ndef is_prime(num):\n    \"\"\"Write a function that returns True if given number is prime and False otherwise.\n    Example:\n    is_prime(30) == True\n    is_prime(123) == False\n    \"\"\"\n\ndef is_prime_v2(num):\n    \"\"\"Write a function that returns True if given number is prime and False otherwise.\n    Example:\n    is_prime_v2(30) == True\n    is_prime_v2(123) == False\n    \"\"\"\n\ndef is_prime_v3(num):\n    \"\"\"Write a function that returns True if given number is prime and False otherwise.\n    Example:\n    is_prime_v3(30) == True\n    is_prime_v3(123) == False\n    \"\"\"\n\ndef is_prime_v4(num):\n    \"\"\"Write a function that returns True if given number is prime and False otherwise.\n    Example:\n    is_prime_v4(30) == True\n    is_prime_v4(123) == False\n    \"\"\"\n\ndef is_prime_v5(num):\n    \"\"\"Write a function that returns True if given number is prime and False otherwise", "\nprint(is_multiply_prime(230))\n\ndef is_multiply_prime_2(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    is_prime = lambda x: len(list(x)) == 2 and x % 2 == 1\n\n    primes = [x for x in range(3,a//3) if is_prime(x)]\n\n    for p in primes:\n        if a % p == 0:\n            if a/p % 3 == 0:\n                return True\n    return False\n\n\nprint(is_multiply_prime_2(230))\n\n\ndef is_multiply_prime_3(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    is_prime = lambda x: len(list(x)) == 2 and x % 2 == 1\n\n    primes = [x for x in range(3,a//3) if is_prime(x)]\n\n    for p in primes:\n        if a % p == 0:\n            if a/p % 3 == 0:\n                return True\n    return False\n\n\nprint(is_multiply_prime_3(230))\n\n\ndef is_multiply_prime_4(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.", "\n# Problem 3\ndef number_of_digits(a):\n    \"\"\"Write a function that returns the number of digits of a positive integer.\n    For example:\n    number_of_digits(56) == 2\n    56 = 5 * 10 + 6\n    \"\"\"\n\n# Problem 4\ndef is_palindrome(a):\n    \"\"\"Write a function that returns true if the given number is palindrome and false otherwise.\n    For example:\n    is_palindrome(30) == True\n    30 = 3 * 10 + 0\n    \"\"\"\n\n# Problem 5\ndef is_armstrong(a):\n    \"\"\"Write a function that returns true if the given number is armstrong number and false otherwise.\n    An Armstrong number is a number that is equal to the sum of its own digits raised to the third power.\n    For example:\n    is_armstrong(153) == True\n    153 = 1 + 5 + 3\n    153 = 1^3 + 5^3 + 3^3\n    \"\"\"\n\n# Problem 6\ndef is_fibonacci(a):\n    \"\"\"Write a function that returns true if the given number is a fibonacci number and false otherwise.\n    Fibonacci numbers are numbers in sequence that are calculated by adding the previous two numbers.\n    The first two numbers in the sequence are 1 and 1.\n    For example:\n    is_fibonacci(144) == True\n    144 = 1 + 143\n    144 = 143 + 1\n    \"\"\"\n\n# Problem 7\ndef count_char(a, b):\n    \"\"\"Write a function that returns the number of times the given character appears in a string.\n    For example:\n    count_char('Hello, how are you?', 'H') == 2\n    \"\"\"\n\n# Problem 8\ndef max_char(a, b):\n    \"\"\"Write a function that returns the largest"], ["\n# is_simple_power(1, 4) => true\n# is_simple_power(2, 2) => true\n# is_simple_power(8, 2) => true\n# is_simple_power(3, 2) => false\n# is_simple_power(3, 1) => false\n# is_simple_power(5, 3) => false\n", "", "\ndef simple_power(n):\n    \"\"\"Your task is to write a function that returns a list of all simple powers of\n    n in the form of a dictionary.\n    For example:\n    simple_power(3) => {2: 9, 3: 27}\n    \"\"\"\n\ndef is_palindrome(string):\n    \"\"\"Your task is to write a function that returns true if a string is palindrome and\n    false in other cases.\n    For example:\n    is_palindrome('abba') => true\n    is_palindrome('abccba') => false\n    \"\"\"\n\ndef palindrome(string):\n    \"\"\"Your task is to write a function that returns a dictionary of palindromic\n    substrings of the string.\n    For example:\n    palindrome('abba') => {'abba': 1}\n    palindrome('abccba') => {'ab': 2, 'cba': 2}\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Your task is to write a function that returns true if a number is prime and\n    false in other cases.\n    For example:\n    is_prime(7) => true\n    is_prime(17) => true\n    is_prime(11) => false\n    \"\"\"\n\ndef prime(n):\n    \"\"\"Your task is to write a function that returns a list of all primes up to n in\n    the form of a dictionary.\n    For example:\n    prime(10) => {2: 3, 3: 5, 5: 7}\n    \"\"\"\n\ndef is_square(n):\n    \"\"\"Your task is to write a function that returns true if a number is a square and\n    false in", "\ndef is_simple_power_2(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n", "\ndef is_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a power\n    of n and false in other cases.\n    x is a power of n if n**int=x\n    For example:\n    is_power(1, 4) => true\n    is_power(2, 2) => true\n    is_power(8, 2) => true\n    is_power(3, 2) => false\n    is_power(3, 1) => false\n    is_power(5, 3) => true\n    \"\"\"\n\ndef is_perfect(n):\n    \"\"\"Your task is to write a function that returns true if a number is a perfect\n    square and false in other cases.\n    For example:\n    is_perfect(25) => true\n    is_perfect(36) => true\n    is_perfect(49) => false\n    is_perfect(16) => false\n    \"\"\"\n\ndef is_amicable(x, y):\n    \"\"\"Your task is to write a function that returns true if two numbers are amicable\n    and false in other cases.\n    Two numbers are amicable if the sum of the proper divisors of each is equal to the\n    other.\n    For example:\n    is_amicable(220,284) => true\n    is_amicable(220,6) => false\n    \"\"\"\n\ndef is_armstrong(n):\n    \"\"\"Your task is to write a function that returns true if a number is an Armstrong\n    number and false in other cases.\n    An Armstrong number is a number that is the sum of the cubes of"], ["\ndef isprime(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(1) ==> False\n    isprime(2) ==> True\n    isprime(-1) ==> False\n    isprime(64) ==> False\n    isprime(0) ==> False\n    isprime(180) ==> True\n    '''\n\ndef ispalindrome(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a palindrome.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispalindrome(1) ==> True\n    ispalindrome(2) ==> False\n    ispalindrome(-1) ==> True\n    ispalindrome(64) ==> False\n    ispalindrome(0) ==> True\n    ispalindrome(180) ==> False\n    '''\n\ndef find_index_value(a,b):\n    '''\n    Write a function that takes a list a and a value b.\n    The function should return the index of the first \n    occurrence of the value b in the list a or -1 if the value is not found.\n    Note: you may assume the input is always valid.\n    Examples:\n    find_index_value([1,2,3],1) ==> 0\n    find_index_value([1,2,3],2) ==> 1\n    find_index_value([1,2,3],3) ==> 2\n    find_index_value([1,2,3],4) ==> -1\n    '''\n\ndef count_vowels(a):\n    '''\n    Write a function that takes a string a and returns the number of vowels in this string.\n    Note: you may assume the input is always valid.\n    Examples:\n    count_vowels('", "", "\ndef is_palindrome(s):\n    '''\n    Write a function that takes a string s and returns True \n    if this string is a palindrome.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_palindrome('a') ==> True\n    is_palindrome('abccba') ==> True\n    is_palindrome('abcdefg') ==> False\n    '''\n\ndef is_reverse(a,b):\n    '''\n    Write a function that takes two integers a and b and returns True \n    if the first is the reverse of the second.\n    Note: you may assume the input is always valid.\n    Examples:\n    is_reverse(121,121) ==> True\n    is_reverse(122,121) ==> False\n    is_reverse(121,122) ==> False\n    is_reverse(121,211) ==> True\n    is_reverse(121,2111) ==> False\n    '''\n\ndef reverse_int(x):\n    '''\n    Write a function that takes an integer x and returns its reverse.\n    Examples:\n    reverse_int(121) ==> 121\n    reverse_int(-121) ==> -121\n    reverse_int(120) ==> 21\n    reverse_int(0) ==> 0\n    reverse_int(-2147483648) ==> 0\n    '''\n\ndef reverse_str(s):\n    '''\n    Write a function that takes a string s and returns its reverse.\n    Examples:\n    reverse_str('hello') ==> 'olleh'\n    reverse_str('how are you') ==> 'you si erw'\n    reverse_str('1234') ==> '4321'\n    reverse_str('this is a test') ==> 'tset a si siht'\n    '''", "\ndef isprime(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(1) ==> False\n    isprime(2) ==> True\n    isprime(3) ==> True\n    isprime(4) ==> False\n    isprime(5) ==> True\n    isprime(6) ==> False\n    isprime(7) ==> True\n    '''\n\ndef ispalindrome(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a palindrome.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispalindrome(121) ==> True\n    ispalindrome(123) ==> False\n    ispalindrome(0) ==> True\n    ispalindrome(234) ==> False\n    '''\n\ndef isodd(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is odd.\n    Note: you may assume the input is always valid.\n    Examples:\n    isodd(1) ==> True\n    isodd(2) ==> False\n    isodd(-1) ==> True\n    isodd(64) ==> True\n    isodd(0) ==> True\n    isodd(180) ==> False\n    '''\n\ndef ispowerof2(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a power of two.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispowerof2(1) ==> True\n    ispowerof2(2) ==> True\n    ispowerof2(-1) ==> False\n    ispowerof2(64) ==> True\n    ispowerof2(0) ==> True\n    ispowerof2(180) ==> False\n    '''\n\ndef", ""], ["", "\ndef check_prime(num):\n    \"\"\"You have been tasked to write a function that checks if a number is a \n    prime number.\n    A prime number is a natural number greater than 1 that is not a product \n    of two smaller natural numbers.\n    So you have to determine if the number is a prime number or not.\n    Note: you may assume the input is always correct or empty string.\n    Examples:\n    For num = 2 the output should be check_prime(num) = true;\n    For num = 3 the output should be check_prime(num) = true;\n    For num = 4 the output should be check_prime(num) = false;\n    For num = 5 the output should be check_prime(num) = true;\n    For num = 6 the output should be check_prime(num) = false;\n    For num = 7 the output should be check_prime(num", "", "\n# 1st solution:\ndef hex_key(num):\n    num = num.upper()\n    counter = 0\n    for char in num:\n        if char == \"0\" or char == \"1\" or char == \"2\" or char == \"3\" or char == \"4\" or char == \"5\" or char == \"6\" or char == \"7\" or char == \"8\" or char == \"9\" or char == \"A\" or char == \"B\" or char == \"C\" or char == \"D\" or char == \"E\" or char == \"F\":\n            if int(char, 16) == 2 or int(char, 16) == 3 or int(char, 16) == 5 or int(char, 16) == 7 or int(char, 16) == 11 or int(char, ", "\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))\n"], ["\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a number in binary form and your task is to convert it to\n    decimal format. The function should return a number, representing the decimal value of the binary\n    number.\n\n    The function will be given a string, with each character representing a binary number. Each character\n    in the string will be '0' or '1'.\n\n    Examples:\n    binary_to_decimal(\"db1111db\")   # returns 15\n    binary_to_decimal(\"db100000db\")   # returns 32\n    \"\"\"\n", "", "", "\nif __name__ == \"__main__\":\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"", "\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a string with a binary representation of a number. Your task is to convert\n    this string to a decimal number. The string will have 'db' characters at the beginning and at the\n    end, but you should ignore them. The function should return an integer.\n\n    Examples:\n    binary_to_decimal(\"db1111db\")  # returns 15\n    binary_to_decimal(\"db100000db\")  # returns 32\n    \"\"\"\n\ndef string_to_decimal(string):\n    \"\"\"You will be given a string, and your task is to convert it to a decimal number. The string\n    will only contain characters from the set [0-9, a-z, A-Z].\n\n    Examples:\n    string_to_decimal(\"123\")   # returns 123\n    string_to_decimal(\"12a\")   # returns 12\n    string_to_decimal(\"123a\")  # returns 123\n    \"\"\"\n\ndef decimal_to_string(decimal):\n    \"\"\"You will be given a decimal number and your task is to convert it to a string. The function\n    should return a string, with each character representing a number from the set [0-9, a-z, A-Z].\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_string(15)   # returns \"db1111db\"\n    decimal_to_string(32)   # returns \""], ["", "\n# O(n) time | O(1) space\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    happy = 1\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            happy = 0\n            break\n\n    if happy == 1:\n        return True\n\n    while happy == 0:\n        if len(s) < 3:\n            return False\n\n        new_str = \"\"\n        for i in range(len(s) - 2):\n            if s[i] == s[i + 1] == s[i + 2]:\n                happy = 1\n                new_str = s[i]\n        s = new_str\n\n    return True\n\n# O(n) time | O(1) space\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    happy = 1\n    for i in range", "", "", "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return len(s) > 2 and (s[::3] == s[1::3]).all()\n"], ["\n# TODO: Write your code here!", "", "\n# -\n\n# # 2.2\n#\n# Write a program that asks the user to enter the base and height of a triangle, and then prints the area.\n#\n#\n\n# +\n# 2.2\n\n# +\n# 2.3\n\n# +\n# 2.4\n# -\n\n# # 2.5\n#\n# Write a program that asks the user for the amount of money they have in their bank account, the annual interest rate in percentage, and the number of years they want to save for. The program then calculates how much they will have in their bank account after the given number of years.\n#\n# Example:\n#\n# If the interest rate is 10% and the number of years is 3, the user\u2019s account balance after 3 years will be $25,600.\n#\n#\n\n# +\n# 2.5\n\n# +\n# 2.6\n\n# +\n# 2.7\n# -\n\n# # 2.8\n#\n# Write a program that asks the user to", "\ndef check_for_palindrome(s):\n    \"\"\"Palindromes are strings that are spelled the same way both ways.\n    For example: \"racecar\", \"radar\", \"mom\", \"A man, a plan, a canal: Panama\"\n\n    Examples:\n    check_for_palindrome(\"racecar\") == True\n    check_for_palindrome(\"radar\") == True\n    check_for_palindrome(\"mom\") == True\n    check_for_palindrome(\"A man, a plan, a canal: Panama\") == True\n    check_for_palindrome(\"A man, a plan, a canal: Pamama\") == False\n    check_for_palindrome(\"A man, a plan, a canal: Panam\") == False\n    check_for_palindrome(\"A man, a plan, a canal: Panama!\") == False\n    \"\"\"\n\ndef longest_substring_without_repeating_characters(s):\n    \"\"\"Given a string s, find the length of the longest substring without repeating characters.\n\n    Examples:\n    longest_substring_without_repeating_characters(\"abcabcbb\") ==", "\ndef main():\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\n\nif __name__ == \"__main__\":\n    main()"], ["", "\ndef is_palindrome(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    is a palindrome or False otherwise\n    Examples\n    is_palindrome('Hello') == False\n    is_palindrome('abcdcba') == True\n    is_palindrome('kittens') == False\n    is_palindrome('orange') == False\n    \"\"\"\n\ndef find_longest_substring(string):\n    \"\"\"Write a function that takes a string and returns the longest substring\n    Examples\n    find_longest_substring('Hello') == 'llo'\n    find_longest_substring('abcdcba') == 'cba'\n    find_longest_substring('kittens') == 'itens'\n    find_longest_substring('orange') == 'orange'\n    \"\"\"\n\ndef longest_substring(string):\n    \"\"\"Write a function that takes a string and returns the longest substring\n    Examples\n    longest_substring('Hello') == 'llo'\n    longest_substring('abcdcba') == 'cba'\n    longest_substring('kittens') == 'itens'\n    longest_substring('orange') == 'orange'\n    \"\"\"\n\ndef find_longest_substring_no_repeats(string):\n    \"\"\"Write a function that takes a string and returns the longest substring\n    Examples\n    find_longest_substring_no_repeats('Hello') == 'llo'\n    find_longest_substring_no_repeats('abcdcba') == 'cba'\n    find_longest_substring_no_repeats('kittens') == 'itens'\n    find_longest_substring_no_repeats('orange') == 'orange'\n    \"\"\"\n\ndef longest_substring_no_repeats(string):\n    \"\"\"Write a function that takes a string and returns the longest substring\n    Examples\n    longest_substring_no_repeats('Hello') == 'llo'\n    longest_substring_no_repeats('abcdcba') == 'cba'\n    longest_substring_no_repeats('kittens') == 'itens'\n   ", "\n#%%\ndef is_palindrome(word):\n    \"\"\"Write a function that returns True if the word is a palindrome,\n    False otherwise.\n    Examples\n    is_palindrome('civic') == True\n    is_palindrome('radar') == True\n    is_palindrome('kayak') == False\n    \"\"\"\n    # word = word.lower()\n    # word = word.replace(' ','')\n    # word = word.replace(',','')\n    # word = word.replace('.','')\n    # word = word.replace('?','')\n    # word = word.replace('!','')\n    # word = word.replace(':','')\n    # word = word.replace(';','')\n    # word = word.replace('\\'','')\n    # word = word.replace('\\\"','')\n    # word = word.replace('(','')\n    # word = word.replace(')','')\n    # word = word.replace('{','')\n    # word = word.replace('}','')\n    # word = word.replace('[','')\n    # word = word.replace(']','')\n    # word = word.replace('<','')\n    # word = word.replace('>','')\n    # word = word.replace('/','')\n    # word = word.replace('\\\\','')\n    # word = word.replace('=','')\n    # word = word.replace('+','')\n    # word = word.replace('-','')\n    # word = word.replace('*','')\n    # word = word.replace('&','')\n    # word = word.replace('%','')\n    # word = word.replace('#','')\n    # word = word.replace('$','')\n    # word = word.replace('@','')\n    # word = word.replace('^','')\n    # word = word.replace('~','')\n    # word = word.replace('`','')\n    # word = word.replace('|','')\n    # word = word.replace(';','')\n    # word = word.replace('\\'','')\n    # word = word.", "\nprint(prime_length('Hello'))\nprint(prime_length('abcdcba'))\nprint(prime_length('kittens'))\nprint(prime_length('orange'))\n\n# +\n# Write a function that takes a string and returns True if the string is a\n# palindrome or False otherwise.\n\ndef palindrome(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\nprint(palindrome('Hello'))\nprint(palindrome('abcdcba'))\nprint(palindrome('kittens'))\nprint(palindrome('orange'))\n\n# +\n# Write a function that takes two lists and returns True if they have any\n# common elements or False otherwise.\n\ndef common_elements(list1, list2):\n    \"\"\"Write a function that takes two lists and returns True if they have any\n    common elements or False otherwise.\n    Examples\n    common_elements(['a', 'b'], ['c', 'd']) == True\n    common_elements(['a', 'b', 'c'], ['d']) == False\n    common_elements(['a'], ['c', 'd']) == False\n    \"\"\"\n\nprint(common_elements(['a', 'b'], ['c', 'd']))\nprint(common_elements(['a', 'b', 'c'], ['d']))\nprint(common_elements(['a'], ['c', 'd']))\n\n# +\n# Write a function that takes a list and returns the sum of all the numbers\n# in the list.\n\ndef sum_list(list):\n    \"\"\"Write a function that takes a list and returns the sum of all the\n    numbers in the list.\n    Examples\n    sum_list([1, 2, 3]) == 6\n    sum_list([4, 5,", ""], ["\ndef starts_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start and end with 1.\n    \"\"\"\n\ndef starts_ends_1(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start, end with 1, and do not have exactly two\n    1's between them.\n    \"\"\"\n\ndef starts_ends_1_prime(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start, end with 1, and do not have exactly two\n    1's between them.\n    \"\"\"\n\ndef starts_ends_2(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start, end with 1, and have exactly two 1's between\n    them.\n    \"\"\"\n\ndef starts_ends_2_prime(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start, end with 1, and have exactly two 1's between\n    them.\n    \"\"\"\n\ndef starts_ends_3(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start, end with 1, and have exactly three 1's\n    between them.\n    \"\"\"\n\ndef starts_ends_3_prime(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start, end with 1, and have exactly three 1's\n    between them.\n    \"\"\"\n\ndef starts_ends_4(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start, end with 1, and have exactly four 1's\n    between them.\n    \"\"\"\n\ndef starts_ends_4_prime(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start, end with 1,", "", "\ndef starts_ends_1(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return starts_ends(n - 1) + starts_ends(n - 2) + starts_ends(n - 3)\n\nif __name__ == \"__main__\":\n    print(starts_ends_1(1))\n    print(starts_ends_1(2))\n    print(starts_ends_1(3))\n    print(starts_ends_1(4))\n    print(starts_ends_1(5))\n    print(starts_ends_1(6))\n    print(starts_ends_1(7))\n    print(starts_ends_1(8))\n    print(starts_ends_1(9))\n    print(starts_ends_1(10))\n    print(starts_ends_1(11))\n    print(starts_ends_1(12))\n    print(starts_ends_1(13))\n    print(starts_ends_1(14))\n    print(starts_ends_1(15))\n    print(starts_ends_1(16))\n    print(starts_ends_1(17))\n    print(starts_ends_1(18))\n    print(starts_ends_1(19))\n    print(starts_ends_1(20))\n    print(starts_ends_1(21))\n    print(starts_ends_1(22))\n    print(starts_ends_1(23))\n    print(starts_ends_1(24))\n    print(starts_ends_1(25))\n    print(starts_ends_1(26))\n    print(starts_ends_1(27))\n    print(starts_ends_1(28))\n    print(starts_ends_1(29))\n    print(starts_ends_1(30))\n    print(starts_ends_1(3", "", "\n# Start and ends with 1\n"], ["", "# YOUR CODE HERE\nraise NotImplementedError()\n\ndef test_function(test_case):\n    N = test_case[0]\n    solution = test_case[1]\n    output = solve(N)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[1000, \"1\"], [150, \"110\"], [147, \"1100\"]])\n\n# +\n\"\"\"\n\n\"\"\"\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n# YOUR CODE HERE\nraise NotImplementedError()\n\ndef test_function(test_case):\n    N = test_case[0]\n    solution = test_case[1]\n    output = solve(N)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[1000, \"1\"], [150, \"110\"], [147, \"1100\"]])\n# -\n\n\"\"\"\n\n\"\"\"\ndef solve(N):\n    \"\"\"Given a positive integer N,", "\n#     return sum(int(i) for i in str(N))\n    return bin(N)[2:]\n\n\ndef main():\n    N = int(input())\n    print(solve(N))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef test_function(test_case):\n    output = solve(test_case[0])\n    if output == test_case[1]:\n        print(\"Pass\")\n        return True\n    else:\n        print(\"Fail\")\n        print(\"output:\", output)\n        print(\"expected:\", test_case[1])\n        return False\n\nprint(test_function([1000, \"1\"]))\nprint(test_function([150, \"110\"]))\nprint(test_function([147, \"1100\"]))\n\n# -\n\n# #### 6.3.1.7\n#\n# Write a program that returns the digits in a given integer as a list.\n\n# +\ndef solve(N):\n    \"\"\"Given a positive integer N, return the digits in N as a list.\n    \n    Example\n        For N = 12345, the output should be [1, 2, 3, 4, 5].\n        For N = 123456, the output should be [1, 2, 3, 4, 5, 6].\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n        a list of integers\n    \"\"\"\n\ndef test_function(test_case):\n    output = solve(test_case[0])\n    if output == test_case[1]:\n        print(\"Pass\")\n        return True\n    else:\n        print(\"Fail\")\n        print(\"output:\", output)\n        print(\"expected:\", test_case[1])\n        return False\n\nprint(test_function([12345, [1, 2, 3,", ""], ["\n#     even_elements = [i for i in lst if i % 2 == 0]\n#     odd_elements = [i for i in lst if i % 2 != 0]\n#     for i in range(len(even_elements)):\n#         if i % 2 != 0:\n#             return even_elements[i]\n#     return 0\n\n# print(add([4, 2, 6, 7]))", "\ndef add_two(a,b):\n    \"\"\"Given two non-negative integers a and b. Return their sum.\n    Examples:\n        add_two(2,2) ==> 4\n        add_two(1,1) ==> 2\n    \"\"\"\n\ndef add_three(a,b,c):\n    \"\"\"Given three non-negative integers a, b, c. Return their sum.\n    Examples:\n        add_three(1,2,3) ==> 6\n        add_three(1,2,3) ==> 6\n    \"\"\"\n\ndef sum_two(a,b):\n    \"\"\"Given two non-negative integers a and b. Return their sum.\n    Examples:\n        sum_two(2,2) ==> 4\n        sum_two(1,1) ==> 2\n    \"\"\"\n\ndef add_five(a,b,c,d,e):\n    \"\"\"Given five non-negative integers a, b, c, d, e. Return their sum.\n    Examples:\n        add_five(1,2,3,4,5) ==> 15\n        add_five(1,2,3,4,5) ==> 15\n    \"\"\"\n\ndef add_seven(a,b,c,d,e,f,g):\n    \"\"\"Given seven non-negative integers a, b, c, d, e, f, g. Return their sum.\n    Examples:\n        add_seven(1,2,3,4,5,6,7) ==> 21\n        add_seven(1,2,3,4,5,6,7) ==> 21\n    \"\"\"\n\ndef add_ten(a,b,c,d,e,f,g,h,i,j):\n    \"\"\"Given ten non-negative integers a, b, c, d, e, f, g, h, i, j. Return their sum.\n    Examples:\n        add_ten(1,2,3,4,5,6,7,8,9,10) ==> 55\n        add_ten(1,2,3,", "", "", "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 10\n    \"\"\"\n"], ["", "\nif __name__ == \"__main__\":\n    s = \"Hello World!!!\";\n    print anti_shuffle(s);\n", "\ndef anti_shuffle(s):\n    return ' '.join([sorted(w) for w in s.split()])\n", "", "\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(anti_shuffle('Hi'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert anti_shuffle('Hi') == 'Hi'\n    assert anti_shuffle('hello') == 'ehllo'\n    assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"], ["\n# O(n^2) time | O(n) space\ndef get_row(lst, x):\n    row_idx = 0\n    for row in lst:\n        for col_idx in range(len(row)):\n            if row[col_idx] == x:\n                yield row_idx, col_idx\n        row_idx += 1\n\n# O(n^2) time | O(1) space\ndef get_row(lst, x):\n    for row in lst:\n        for col_idx, col in enumerate(row):\n            if col == x:\n                yield row_idx, col_idx\n\n# O(n^2) time | O(n) space\ndef get_row(lst, x):\n    for row_idx, row in enumerate(lst):\n        for col_idx, col in enumerate(row):\n            if col == x:\n                yield row_idx, col_idx", "\n# get_row([[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]], 1)\n# # [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n# get_row([[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]], 2)\n# # [(0, 1), (1, 5), (1, 1), (2, 4), (2, 1)]\n\n# get_row([[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]], 3)\n# # [(0, 2), (1, 3), (1, 2), (2, 3), (2, 2)]\n\n# get_row([], 1)\n# # []\n\n# get", "", "\nif __name__ == \"__main__\":\n    assert get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert get_row([], 1) == []\n    assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n", "\n#     for i in lst:\n#         if x in i:\n#             return [(lst.index(i), i.index(x))]\n\n    if len(lst) == 0:\n        return []\n\n    row = 0\n    for i in lst:\n        if x in i:\n            return [(row, i.index(x))]\n        row += 1\n    return []\n\nprint(get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1))\n# [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([[], [1], [1, 2, 3]], 3))\n# [(2, 2)]\n\nprint(get_row([[], [1], [1, 2, 3]], 4))\n# []"], ["", "", "\ndef remove_duplicates(array):\n    \"\"\"\n    Given an array of integers, remove all the duplicates from it.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * remove_duplicates([]) => []\n    * remove_duplicates([1, 2, 3, 2, 1]) => [1, 2, 3]\n    * remove_duplicates([1, 2, 3, 2, 1, 4, 5, 6]) => [1, 2, 3, 4, 5, 6]\n    \"\"\"\n\ndef reverse_array(array):\n    \"\"\"\n    Given an array of integers, reverse it.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * reverse_array([]) => []\n    * reverse_array([1, 2, 3]) => [3, 2, 1]\n    * reverse_array([1, 2, 3, 4, 5]) => [5, 4, 3, 2, 1]\n    \"\"\"\n\ndef merge_sort(array):\n    \"\"\"\n    Given an array of integers, merge sort it.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * merge_sort([]) => []\n    * merge_sort([1, 2, 3, 4, 5]) => [1, 2, 3", "", "\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))\n"], ["\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n", "\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n\ndef main():\n    s = 'asdfghjkl'\n    print(encrypt(s))\n    print(decrypt(s))\n\nif __name__ == \"__main__\":\n    main()\n", "", "", "\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n"], ["\n# This is the test.\n# Make sure to run this code to check your solution.\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    print('Done! Great job!')\n", "", "\ndef next_biggest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_biggest() that returns the 2nd biggest element of the list.\n    Return None if there is no such element.\n    \n    next_biggest([1, 2, 3, 4, 5]) == 3\n    next_biggest([5, 1, 4, 3, 2]) == 5\n    next_biggest([]) == None\n    next_biggest([1, 1]) == None\n    \"\"\"\n\ndef next_biggest_recursive(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_biggest_recursive() that returns the 2nd biggest element of the list.\n    Return None if there is no such element.\n    \n    next_biggest_recursive([1, 2, 3, 4, 5]) == 3\n    next_biggest_recursive([5, 1, 4, 3, 2]) == 5\n    next_biggest_recursive([]) == None\n    next_biggest_recursive([1, 1]) == None\n    \"\"\"\n\ndef next_biggest_iterative(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_biggest_iterative() that returns the 2nd biggest element of the list.\n    Return None if there is no such element.\n    \n    next_biggest_iterative([1, 2, 3, 4, 5]) == 3\n    next_biggest_iterative([5, 1, 4, 3, 2]) == 5\n    next_biggest_iterative([]) == None\n    next_biggest_iterative([1, 1]) == None\n   ", "", ""], ["\ndef is_bored_v2(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_v2(\"Hello world\")\n    0\n    >>> is_bored_v2(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredoms = 0\n    while S:\n        if S.startswith(\"I\"):\n            boredoms += 1\n        i = S.find(\".\")\n        if i == -1:\n            break\n        i2 = S.find(\"?\")\n        if i2 == -1:\n            i2 = S.find(\"!\")\n        if i2 == -1:\n            i2 = len(S)\n        S = S[i+1:i2]\n    return boredoms\n\ndef is_bored_v3(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored_v3(\"Hello world\")\n    0\n    >>> is_bored_v3(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    boredoms = 0\n    i = 0\n    while i < len(S):\n        if S[i] == \"I\":\n            boredoms += 1\n        i += 1\n        while i < len(S) and S[i] not in \".!?\":\n            i += 1\n    return", "\ndef is_bored2(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored2(\"Hello world\")\n    0\n    >>> is_bored2(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\ndef is_bored3(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored3(\"Hello world\")\n    0\n    >>> is_bored3(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\ndef is_bored4(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored4(\"Hello world\")\n    0\n    >>> is_bored4(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\ndef is_bored5(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored5", "\n# Your code here.\n\n# For testing purposes\nif __name__ == \"__main__\":\n    print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n", "\ndef is_bored_2(S):\n    \"\"\"\n    The same as the previous function, but this time you should use a regex\n    and avoid using the in operator.\n   \n    For example:\n    >>> is_bored_2(\"Hello world\")\n    0\n    >>> is_bored_2(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n", "\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()\n"], ["#     return x==y+z or y==x+z or z==x+y\n#     return (x==y+z or y==x+z or z==x+y) and (type(x)==int and type(y)==int and type(z)==int)\n\n#     return (x==y+z or y==x+z or z==x+y) and x.is_integer() and y.is_integer() and z.is_integer()\n\n    return x==y+z or y==x+z or z==x+y and x.is_integer() and y.is_integer() and z.is_integer()", "\ndef any_int(x, y, z):\n    return x == (x + y + z) or y == (x + y + z) or z == (x + y + z) and x.is_integer() and y.is_integer() and z.is_integer()\n", "\n# Code starts here\ndef any_int(x, y, z):\n    if type(x) == int and type(y) == int and type(z) == int:\n        if x == z + y or y == z + x or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# Code ends here\n\n\n# Task 3: \ndef check_fib(num):\n    '''\n    Check whether the given number is Fibonacci number or not.\n    Fibonacci numbers are series of numbers starting from 1 and 2. \n    The next number is the sum of the previous two. \n    The series terminates with the number 1.\n    Examples\n    check_fib(1) \u279e False\n\n    check_fib(2) \u279e True\n\n    check_fib(3) \u279e False\n\n    check_fib(8) \u279e True\n\n    check_fib(55) \u279e False\n\n    check_fib(34) \u279e True\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        n1 = 1\n        n2 = 2\n        while True:\n            if n2 > num:\n                return False\n            else:\n                if n2 == num:\n                    return True\n                else:\n                    n2 = n1 + n2\n                    n1 = n2 - n1\n\n\n# Task 4:\ndef is_leap_year(year):\n    '''\n    Check whether the given year is a leap year or not.\n    A leap year is a year that is divisible by 4, except for century years that are divisible by 400.\n    Examples\n    is_leap_year(1996)", "\n#Write your code here.\ndef any_int(x, y, z):\n    return (x+y == z or x == z+y or y == z+x) and isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n#any_int(5, 2, 7)\n#any_int(3, 2, 2)\n#any_int(3, -2, 1)\n#any_int(3.6, -2.2, 2)", "\n# Code\ndef any_int(x, y, z):\n    return type(x) is int and type(y) is int and type(z) is int and \\\n    ((x + y == z) or (x + z == y) or (y + z == x))\n\n# Tests\nprint(any_int(5, 2, 7)) # True\nprint(any_int(3, 2, 2)) # False\nprint(any_int(3, -2, 1)) # True\nprint(any_int(3.6, -2.2, 2)) # False\n\nprint(\"Test Completed\")"], ["\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message that is encoded in the \n    format described in the previous exercise, and returns the \n    original message.\n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it by \n    swapping the case of all letters, and replacing the 2 places \n    ahead of each vowel with the vowel. \n    Assume only letters. \n\n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n\ndef main():\n    \"\"\"\n    This is the main function. \n    \"\"\"\n    print('Welcome to the vowel swapper!')\n\n    message = input('Enter a message: ')\n    print('Message: {}'.format(message))\n    print('Encoded Message: {}'.format(encode(message)))\n    print('Decoded Message: {}'.format(decode(message)))\n\nif __name__ == '__main__':\n    main()\n", "\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places behind that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()", "\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it in the \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n\ndef decode_word(word):\n    \"\"\"\n    Write a function that takes a word, and returns the same word \n    with the vowels swapped. Assume that the word is only made up \n    of letters. \n    \n    Examples:\n    >>> decode_word('This')\n    'thIs'\n    \"\"\"\n    \ndef add(a,b):\n    \"\"\"\n    Write a function that takes two numbers and adds them together. \n    \n    Examples:\n    >>> add(1,2)\n    3\n    >>> add(10,11)\n    21\n    >>> add(100,99)\n    299\n    \"\"\"\n\ndef subtract(a,b):\n    \"\"\"\n    Write a function that takes two numbers and subtracts the second \n    number from the first. \n    \n    Examples:\n    >>> subtract(1,2)\n    -1\n    >>> subtract(10,11)\n    -1\n    >>> subtract(100,99)\n    1\n    \"\"\"\n\ndef multiply(a,b):\n    \"\"\"\n    Write a function that takes two numbers and multiplies them together. \n    \n    Examples:\n    >>> multiply(1,2)\n    2\n    >>> multiply(10,11)\n    120\n    >>> multiply(100,99)\n    9900\n    \"\"\"\n\ndef divide(a,b):\n    \"\"\"\n    Write a function that takes two numbers and divides the first \n    number by the second. \n    \n    Examples:\n    >>> divide(1,", "\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it by \n    swapping case of all letters, and replacing all vowels in the \n    message with the letter that appears 2 places before that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n"], ["#     return max(lst)\n#     return sum([int(i) for i in str(max(lst))])\n#     return sum([int(i) for i in str(max(lst))])\n#     return int(str(max(lst)).replace(\"0\", \"\"))\n#     return int(str(max(lst)).replace(\"0\", \"\"))\n#     return sum(filter(lambda x: x != 0, lst))\n#     return sum(filter(lambda x: x != 0, lst))\n#     return sum(lst)\n#     return sum(lst)\n#     return int(str(max(lst)).replace(\"0\", \"\"))\n#     return max(lst)\n#     return sum([int(i) for i in str(max(lst))])\n#     return int(str(max(lst)).replace(\"0", "\n# Your code goes here\n\nif __name__ == \"__main__\":\n    lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\n    print(skjkasdkd(lst))", "\n#     for num in lst:\n#         if isprime(num):\n#             print(num)\n#         else:\n#             print(num)\n\n#     for num in lst:\n#         if isprime(num):\n#             sum = 0\n#             for digit in str(num):\n#                 sum += int(digit)\n#             print(sum)\n\n#     sum = 0\n#     for num in lst:\n#         sum = sum + num\n\n#     return sum\n\ndef isprime(num):\n    \"\"\"Returns True if the input is a prime number. Otherwise, returns False.\n    \"\"\"\n    if num == 1:\n        return False\n\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n\n    return True\n\ndef is_prime(num):\n    \"\"\"Returns True if", "\ndef sum_digits_of_string(s):\n    \"\"\"You are given a string.\n    You need to return the sum of the digits of the string.\n\n    Examples:\n    For s = '123456' the output should be sum_digits_of_string(s) = 21\n    For s = '1111' the output should be sum_digits_of_string(s) = 4\n    For s = '23456789' the output should be sum_digits_of_string(s) = 39\n    For s = '1234567890' the output should be sum_digits_of_string(s) = 145\n    \"\"\"\n\ndef reverse_string(s):\n    \"\"\"You are given a string.\n    You need to return a string with reversed order of characters.", "\nlst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\nprint(skjkasdkd(lst))\n"], ["\ndef check_dict_values(dict):\n    \"\"\"\n    Given a dictionary, return True if all values are integers and\n    False if otherwise.\n    The function should return False if the given dictionary is empty.\n    Examples:\n    check_dict_values({\"a\":1, \"b\":2}) should return True.\n    check_dict_values({\"a\":1, \"b\":2, \"c\":3}) should return False.\n    check_dict_values({\"a\":1, \"b\":2, \"c\":\"3\"}) should return False.\n    \"\"\"\n\ndef check_dict_keys(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings, otherwise \n    return False.\n    The function should return False if the given dictionary is empty.\n    Examples:\n    check_dict_keys({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_keys({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    \"\"\"\n\ndef check_dict_lengths(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys and values are strings of the\n    same length, otherwise return False.\n    The function should return False if the given dictionary is empty.\n    Examples:\n    check_dict_lengths({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_lengths({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"cat\"}) should return False.\n    \"\"\"\n\ndef check_dict_type(", "def check_dict_keys(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_keys({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_keys({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_keys({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_keys({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_keys({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\ndef check_dict_values(dict):\n    \"\"\"\n    Given a dictionary, return True if all values are strings in lower \n    case or all values are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_values({\"a\":\"apple\", \"b\":\"banana\"}) should return False.\n    check_dict_values({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return True.\n    check_dict_values({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_values({\"Name\":\"", "\ndef check_dict_case_alt(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    elif len(dict) == 1:\n        return all(k.islower() or k.isupper() for k in dict.keys())\n    else:\n        return all(k.islower() == dict[k.upper()].islower() for k in dict)\n\ndef check_dict_case_alt2(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict", "\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n\n    # Tests\n    print(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})) # should return False\n    print(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"b\":\"banana\"})) # should return True\n    print(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})) # should return False\n    print(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})) # should return False\n    print(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })) # should return True\n    print(check_dict_case({})) # should return False\n\nif __name__ == '__main__':\n    main()\n", "\ndef check_dict_values(dict):\n    \"\"\"\n    Given a dictionary, return True if all values are integers or all \n    values are strings. Otherwise return False. The function should return \n    False is the given dictionary is empty.\n    Examples:\n    check_dict_values({\"a\":1, \"b\":\"2\"}) should return False.\n    check_dict_values({\"a\":1, \"b\":2}) should return True.\n    check_dict_values({\"a\":1, \"b\":2, \"c\":3}) should return False.\n    check_dict_values({\"a\":1, \"b\":2, \"c\":\"3\"}) should return True.\n    \"\"\"\n\ndef check_dict_keys_values(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are integers and all \n    values are integers or all keys are strings and all values are strings.\n    Otherwise return False. The function should return False is the given \n    dictionary is empty.\n    Examples:\n    check_dict_keys_values({\"a\":1, \"b\":\"2\"}) should return False.\n    check_dict_keys_values({\"a\":1, \"b\":2}) should return False.\n    check_dict_keys_values({\"a\":1, \"b\":2, \"c\":3}) should return False.\n    check_dict_keys_values({\"a\":1, \"b\":2, \"c\":\"3\"}) should return False.\n    check_dict_keys_values({\"a\":\"apple\", \"b\":\"banana\"})"], ["\nif __name__ == '__main__':\n    count_up_to(5)\n    count_up_to(11)\n    count_up_to(0)\n    count_up_to(20)\n    count_up_to(1)\n    count_up_to(18)\n", "\nif __name__ == \"__main__\":\n    print(count_up_to(5))\n    print(count_up_to(11))\n    print(count_up_to(0))\n    print(count_up_to(20))\n    print(count_up_to(1))\n    print(count_up_to(18))\n", "", "\ndef find_prime_factors(n):\n    \"\"\"Given a positive integer, return an array of all prime factors of the number.\n    for example:\n    find_prime_factors(16) => [2,2,2,2,2]\n    find_prime_factors(10) => [2,5]\n    find_prime_factors(8) => [2,2,2]\n    find_prime_factors(30) => [2,2,3,5,5]\n    \"\"\"\n\ndef find_highest_prime_factor(n):\n    \"\"\"Given a positive integer, return the largest prime factor of the number.\n    for example:\n    find_highest_prime_factor(16) => 2\n    find_highest_prime_factor(10) => 5\n    find_highest_prime_factor(8) => 2\n    find_highest_prime_factor(30) => 5\n    \"\"\"\n\ndef find_largest_prime_factor_in_array(arr):\n    \"\"\"Given an array of positive integers, return the largest prime factor of any of the integers.\n    for example:\n    find_largest_prime_factor_in_array([1, 2, 3, 4, 5]) => 5\n    find_largest_prime_factor_in_array([1, 2, 3, 4, 10]) => 10\n    find_largest_prime_factor_in_array([1, 2, 3, 4, 6]) => 2\n    \"\"\"\n\ndef find_sm", "\ndef sum_digits(num):\n    \"\"\"Implement a function that takes a positive integer and returns the sum of the\n    digits in the integer.\n    for example:\n    sum_digits(123) => 6\n    sum_digits(67) => 13\n    sum_digits(200) => 6\n    sum_digits(1000) => 1\n    sum_digits(3000) => 6\n    \"\"\"\n\ndef is_palindrome(num):\n    \"\"\"Implement a function that checks if a positive integer is a palindrome\n    for example:\n    is_palindrome(121) => True\n    is_palindrome(848) => True\n    is_palindrome(1234) => False\n    is_palindrome(3000) => False\n    \"\"\"\n\ndef is_palindrome_reverse(num):\n    \"\"\"Implement a function that checks if a positive integer is a palindrome\n    by reversing the number and comparing it to the original number.\n    for example:\n    is_palindrome_reverse(121) => True\n    is_palindrome_reverse(848) => True\n    is_palindrome_reverse(1234) => False\n    is_palindrome_reverse(3000) => False\n    \"\"\"\n\ndef reverse(num):\n    \"\"\"Implement a function that takes a positive integer and returns the\n    integer with its digits reversed.\n    for example:\n    reverse(123) => 321\n    reverse(67) => 76\n    reverse(200) =>"], ["\ndef multiply_recurse(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    print(multiply(148, 412))\n    print(multiply(19, 28))\n    print(multiply(2020, 1851))\n    print(multiply(14, -15))\n    print(multiply_recurse(148, 412))\n    print(multiply_recurse(19, 28))\n    print(multiply_recurse(2020, 1851))\n    print(multiply_recurse(14, -15))\n", "\nif __name__ == \"__main__\":\n    print(multiply(148, 412))\n    print(multiply(19, 28))\n    print(multiply(2020, 1851))\n    print(multiply(14,-15))", "", "", ""], ["\ndef count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in odd indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 2\n    count_lower('abcdefg') returns 0\n    count_lower('dBBE') returns 0\n    \"\"\"\n\ndef count_consonants(s):\n    \"\"\"\n    Given a string s, count the number of consonants in odd indices.\n    \n    For example:\n    count_consonants('aBCdEf') returns 3\n    count_consonants('abcdefg') returns 6\n    count_consonants('dBBE') returns 0\n    \"\"\"\n\ndef count_vowels(s):\n    \"\"\"\n    Given a string s, count the number of vowels in even indices.\n    \n    For example:\n    count_vowels('aBCdEf') returns 3\n    count_vowels('abcdefg') returns 3\n    count_vowels('dBBE') returns 2\n    \"\"\"\n\ndef count_odd_vowels(s):\n    \"\"\"\n    Given a string s, count the number of odd vowels in even indices.\n    \n    For example:\n    count_odd_vowels('aBCdEf') returns 1\n    count_odd_vowels('abcdefg') returns 0\n    count_odd_vowels('dBBE') returns 1\n    \"\"\"\n\ndef count_even_vowels(s):\n    \"\"\"\n    Given a string s, count the number of even vowels in odd indices.\n    \n    For example:\n    count_even_vowels('aBCdEf') returns 2\n    count_even_vowels('abcdefg') returns 0\n    count_even_vowels('dBBE') returns 2\n    \"\"\"\n\ndef count_x(s):\n    \"\"\"\n    Given a string s, count the number of 'x' in s.\n    \n    For example:\n    count_x('aBCdEf') returns 1\n    count_", "\ndef count_vowels(s):\n    \"\"\"\n    Given a string s, count the number of vowels in even indices.\n    \n    For example:\n    count_vowels('aBCdEf') returns 2\n    count_vowels('abcdefg') returns 3\n    count_vowels('dBBE') returns 1\n    \"\"\"\n\ndef count_consonants(s):\n    \"\"\"\n    Given a string s, count the number of consonants in odd indices.\n    \n    For example:\n    count_consonants('aBCdEf') returns 1\n    count_consonants('abcdefg') returns 3\n    count_consonants('dBBE') returns 2\n    \"\"\"\n\ndef find_longest_substring(s):\n    \"\"\"\n    Given a string s, return the longest substring with at most 1 different character.\n\n    Example:\n    find_longest_substring('aBCdEf') returns 'BCdEf'\n    find_longest_substring('abcdefg') returns 'cdefg'\n    find_longest_substring('dBBE') returns 'BBE'\n    \"\"\"", "", "\ndef count_vowels(s):\n    \"\"\"\n    Given a string s, count the number of vowels in s.\n    \n    For example:\n    count_vowels('aBCdEf') returns 3\n    count_vowels('abcdefg') returns 5\n    count_vowels('dBBE') returns 2\n    \"\"\"\n\ndef count_vowels_v2(s):\n    \"\"\"\n    Given a string s, count the number of vowels in s.\n    \n    For example:\n    count_vowels('aBCdEf') returns 3\n    count_vowels('abcdefg') returns 5\n    count_vowels('dBBE') returns 2\n    \"\"\"\n\ndef is_palindrome(s):\n    \"\"\"\n    Given a string s, determine if it is a palindrome.\n    \n    For example:\n    is_palindrome('aBCdEf') returns True\n    is_palindrome('abcdefg') returns False\n    is_palindrome('dBBE') returns True\n    \"\"\"\n\ndef is_palindrome_v2(s):\n    \"\"\"\n    Given a string s, determine if it is a palindrome.\n    \n    For example:\n    is_palindrome('aBCdEf') returns True\n    is_palindrome('abcdefg') returns False\n    is_palindrome('dBBE') returns True\n    \"\"\"\n\ndef count_odd_numbers(s):\n    \"\"\"\n    Given a string s, count the number of odd numbers in s.\n    \n    For example:\n    count_odd_numbers('aBCdEf') returns 1\n    count_odd_numbers('abcdefg') returns 1\n    count_odd_numbers('dBBE') returns 0\n    \"\"\"\n\ndef count_odd_numbers_v2(s):\n    \"\"\"\n    Given a string s, count the number of odd numbers in s.\n    \n    For example:\n    count_odd_numbers('aBCdEf') returns 1\n    count_odd_numbers('abcdefg') returns 1\n    count_odd_numbers('dBBE') returns 0", "\nif __name__ == '__main__':\n    print(count_upper('aBCdEf'))\n    print(count_upper('abcdefg'))\n    print(count_upper('dBBE'))"], ["", "\ndef find_average(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the average of the digits in that number.\n\n    Examples\n    >>> find_average(\"10\")\n    1\n    >>> find_average(\"15.3\")\n    3.5\n    '''\n\ndef reverse_list(value):\n    '''\n    Create a function that takes a list of values (strings) and returns\n    the list in reverse order.\n\n    Examples\n    >>> reverse_list([\"10\", \"15.3\"])\n    ['15.3', '10']\n    '''\n\ndef find_longest_word(value):\n    '''\n    Create a function that takes a string of words (a sentence) and returns\n    the longest word in the sentence.\n\n    Examples\n    >>> find_longest_word(\"The quick brown fox jumped over the lazy dog.\")\n    'jumped'\n    >>> find_longest_word(\"A long time ago in a galaxy far far away.\")\n    'far far away'\n    '''\n\ndef count_consonants(value):\n    '''\n    Create a function that takes a string of characters (a word) and returns\n    the number of consonants in the word.\n\n    Examples\n    >>> count_consonants(\"The quick brown fox jumped over the lazy dog.\")\n    12\n    >>> count_consonants(\"A long time ago in a galaxy far far away.\")\n    13\n    '''\n\ndef palindrome(value):\n    '''\n    Create a function that takes a string of characters (a word) and returns\n    True if the word is a palindrome, False if it is not.\n\n    Examples\n    >>>", "\ndef is_divisible(x, y):\n    '''\n    Create a function that takes two integers as arguments and returns True\n    if the first number is divisible by the second. Otherwise, return False.\n\n    Examples\n    >>> is_divisible(10, 5)\n    False\n    >>> is_divisible(25, 10)\n    True\n    >>> is_divisible(12, 12)\n    True\n    '''\n\ndef is_palindrome(string):\n    '''\n    Create a function that takes a string as an argument and returns True\n    if the string is a palindrome. Otherwise, return False.\n\n    Examples\n    >>> is_palindrome(\"abba\")\n    True\n    >>> is_palindrome(\"aba\")\n    False\n    >>> is_palindrome(\"abaab\")\n    True\n    '''\n\ndef count_vowels(sentence):\n    '''\n    Create a function that takes a string as an argument and returns the\n    number of vowels in the string.\n\n    Examples\n    >>> count_vowels(\"Hello\")\n    2\n    >>> count_vowels(\"My name is John\")\n    3\n    >>> count_vowels(\"I love Python!\")\n    5\n    '''\n\ndef find_longest_word(sentence):\n    '''\n    Create a function that takes a string as an argument and returns the\n    longest word in the string.\n\n    Examples\n    >>> find_longest_word(\"Hello World!\")\n    'World!'\n    >>> find_longest_word(\"Python is a great language\")\n    'language'\n    >>> find_longest_word(\"Don't worry, be happy\")\n    'worry'\n    '''\n\ndef is_prime(number):", "\ndef is_odd(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns True if it is odd, False otherwise.\n\n    Examples\n    >>> is_odd(\"1\")\n    True\n    >>> is_odd(\"9\")\n    False\n\n    Note:\n    - Remember to convert the given string to a number before you compare it.\n    '''\n\ndef is_even(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns True if it is even, False otherwise.\n\n    Examples\n    >>> is_even(\"2\")\n    True\n    >>> is_even(\"9\")\n    False\n\n    Note:\n    - Remember to convert the given string to a number before you compare it.\n    '''\n\ndef is_positive(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns True if it is positive, False otherwise.\n\n    Examples\n    >>> is_positive(\"1\")\n    True\n    >>> is_positive(\"-1\")\n    False\n\n    Note:\n    - Remember to convert the given string to a number before you compare it.\n    '''\n\ndef is_negative(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns True if it is negative, False otherwise.\n\n    Examples\n    >>> is_negative(\"1\")\n    False\n    >>> is_negative(\"-1\")\n    True\n\n    Note:\n    - Remember to convert the given string to a number before you compare it.\n    '''\n\ndef is_prime(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns True if it is a prime number,", "\ndef closest_to_zero(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest to zero integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_to_zero(\"10\")\n    10\n    >>> closest_to_zero(\"15.3\")\n    -15\n    >>> closest_to_zero(\"14.5\")\n    15\n    >>> closest_to_zero(\"-14.5\")\n    -15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_to_zero(\"14.5\") should\n    return 15 and closest_to_zero(\"-14.5\") should return -15.\n    '''\n\ndef negative_to_zero(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest to zero integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> negative_to_zero(\"10\")\n    10\n    >>> negative_to_zero(\"15.3\")\n    -15\n    >>> negative_to_zero(\"14.5\")\n    15\n    >>> negative_to_zero(\"-14.5\")\n    -15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the"], ["\ndef count_stairs(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the total number of stones in the pile.\n\n    Examples:\n    >>> count_stairs(10)\n    210\n    \"\"\"\n\ndef make_a_tower(n):\n    \"\"\"\n    Given a positive integer n, you have to make a tower of n levels.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_tower(3)\n    [1, 1, 3, 5, 7]\n    \"\"\"\n\ndef count_stones(n):\n    \"\"\"\n    Given a positive integer n, you have to make a tower of n levels.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the total number of stones in the tower.\n\n    Examples:\n    >>> count_stones(10)\n    210\n    \"\"\"\n", "\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()", "", "\n# TODO: Write a function that takes a positive integer n, and returns the number of stones in the n-th level of the pile.\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "\n# make_a_pile(3)\n# [3, 5, 7]\n# make_a_pile(5)\n# [5, 11, 19, 23, 29]\n# make_a_pile(7)\n# [7, 15, 21, 25, 27, 29, 31]\n"], ["", "\n# def words_string(s):\n#     return s.split(\",\")\n", "\ndef words_string_2(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = s.split()\n    return words", "\ndef words_array(s):\n    \"\"\"\n    You will be given an array of strings. Your task is to return a string with all the words in the\n    array separated by commas and spaces.\n    \n    For example:\n    words_array([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == \"Hi, my, name, is, John\"\n    words_array([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"One, two, three, four, five, six\"\n    \"\"\"\n\ndef words_string2(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string2(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string2(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    s = s.replace(' ', '')\n    s = s.replace(',', '')\n    return s.split()\n\ndef words_array2(s):\n    \"\"\"\n    You will be given an array of strings. Your task is to return a string with all the words in the\n    array separated by commas and spaces.\n    \n    For example:\n    words_array2([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == \"Hi, my, name, is, John\"\n    words_array2([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == \"One, two, three, four, five, six\"\n    \"\"\"\n    s = s.replace(' ', '')\n    s = s.replace(',', '')\n    return s.split()\n\ndef", ""], ["\ndef choose_num_v2(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num_v2(12, 15) = 14\n    choose_num_v2(13, 12) = -1\n    \"\"\"\n\nif __name__ == \"__main__\":\n    print(choose_num(12, 15))\n    print(choose_num(13, 12))\n    print(choose_num_v2(12, 15))\n    print(choose_num_v2(13, 12))", "\nprint(choose_num(12, 15))\nprint(choose_num(13, 12))", "", "\ndef prime_sum(n):\n    \"\"\"This function takes a positive integer number n and returns the\n    sum of all its prime factors.\n\n    For example:\n    prime_sum(20) = 4 + 2 + 2 + 2 = 8\n    prime_sum(4) = 2 + 2 = 4\n    prime_sum(10) = 5 + 2 + 2 = 9\n    prime_sum(7) = 7\n    prime_sum(1) = 1\n    \"\"\"\n\ndef max_sum(n):\n    \"\"\"This function takes a positive integer number n and returns the\n    maximum sum of two adjacent integers in a list of length n.\n\n    For example:\n    max_sum(20) = 39\n    max_sum(4) = 6\n    max_sum(10) = 30\n    max_sum(7) = 21\n    max_sum(1) = 1\n    \"\"\"\n", "\n# Test\nchoose_num(12, 15) == 14\nchoose_num(13, 12) == -1\nchoose_num(1, 1) == 1\nchoose_num(1, 2) == 2\nchoose_num(2, 3) == 2\nchoose_num(2, 2) == 2\nchoose_num(2, 4) == 4\nchoose_num(1, 1000000) == 1000000\nchoose_num(1, 1000001) == -1\nchoose_num(1000000, 1000001) == 1000000\nchoose_num(1000000, 1000000) == 1000000\nchoose_num(1000000, 1000002) == 1000000\n\n# -\n\n# # Exercise 3\n#\n# ## Bubble sort\n#\n# Implement the bubble sort algorithm.\n#\n# Here is the pseudocode:\n#\n# ```\n# for i = 1 to N\n#     for j = N downto i\n#         if A[j] < A[j-1] then swap A[j] and A[j-1]\n# ```\n#\n# Hint: use a variable to keep track of the index of the largest element in the previous iteration.\n#\n# For example:\n#\n# ```python\n# A = [2, 4, 6, 3, 7]\n#\n# i = 0\n# while i < len(A):\n#     j = len(A)-i-1\n#    "], ["def is_integer_palindrome(n):\n    \"\"\"You are given an integer n, and your task is to determine whether it is a palindrome.\n    An integer is a palindrome when it reads the same backward as forward. \n    Example:\n    is_integer_palindrome(121) => True\n    is_integer_palindrome(1221) => True\n    is_integer_palindrome(123) => False\n    \"\"\"\ndef is_integer_palindrome_iterative(n):\n    \"\"\"You are given an integer n, and your task is to determine whether it is a palindrome.\n    An integer is a palindrome when it reads the same backward as forward. \n    Example:\n    is_integer_palindrome_iterative(121) => True\n    is_integer_palindrome_iterative(1221) => True\n    is_integer_palindrome_iterative(123) => False\n    \"\"\"\ndef is_integer_palindrome_recursive(n):\n    \"\"\"You are given an integer n, and your task is to determine whether it is a palindrome.\n    An integer is a palindrome when it reads the same backward as forward. \n    Example:\n    is_integer_palindrome_recursive(121) => True\n    is_integer_palindrome_recursive(1221) => True\n    is_integer_palindrome_recursive(123) => False\n    \"\"\"\ndef is_integer_palindrome_recursive_helper(n, first_index, last_index):\n    \"\"\"You are given an integer n, and your task is to determine whether it is a palindrome.\n    An integer is a palindrome when", "\ndef main():\n    \"\"\"Read and process the input file\"\"\"\n    f = open('input.txt', 'r')\n    for line in f:\n        n, m = line.split()\n        print(rounded_avg(int(n), int(m)))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef rounded_avg_binary(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg_binary(1, 5) => \"0b11\"\n    rounded_avg_binary(7, 5) => -1\n    rounded_avg_binary(10, 20) => \"0b1111\"\n    rounded_avg_binary(20, 33) => \"0b11010\"\n    \"\"\"\n\ndef solution(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    solution(1, 5) => \"0b11\"\n    solution(7, 5) => -1\n    solution(10, 20) => \"0b1111\"\n    solution(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return int(bin(round((n + m)/2))[2:])\n", "\ndef solution():\n    return rounded_avg(1, 5)\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n    assert rounded_avg(111, 222) == \"0b110110110111\"\n    assert rounded_avg(1, 2) == -1\n\nif __name__ == \"__main__\":\n    test_rounded_avg()\n    print(solution())\n", "\ndef get_max_of_3(a, b, c):\n    \"\"\"Given three integers, a, b, and c, return the largest integer.\n    Examples\n    get_max_of_3(4, 6, 2) => 6\n    get_max_of_3(5, 2, 10) => 10\n    get_max_of_3(3, 1, 10) => 10\n    get_max_of_3(1, 2, 3) => 3\n    get_max_of_3(4, 6, 9) => 9\n    get_max_of_3(5, 5, 5) => 5\n    get_max_of_3(10, 20, 30) => 30\n    get_max_of_3(10, 20, 10) => 20\n    get_max_of_3(10, 10, 10) => 10\n    get_max_of_3(2, 1, 3) => 3\n    \"\"\"\n\ndef get_max_of_5(a, b, c, d, e):\n    \"\"\"Given five integers, a, b, c, d, and e, return the largest integer.\n    Examples\n    get_max_of_5(1, 2, 3, 4, 5) => 5\n    get_max_of_5(5, 4, 3, 2, 1) => 5\n    get_max_of_5(10,"], ["\n# ---------------------------------------------------\n# 2. Find the first non-repeated character in a string\n# ---------------------------------------------------\n\ndef first_non_repeated_char(x):\n    \"\"\"Given a string, return the first non-repeated character.\n\n    For example:\n    >>> first_non_repeated_char('banana')\n    'a'\n    >>> first_non_repeated_char('abcd')\n    'a'\n    \"\"\"\n\n# ---------------------------------------------------\n# 3. Create a dictionary with the following properties:\n#      - Keys: the digits of a number\n#      - Values: the number of times that digit occurs in the number\n# ---------------------------------------------------\n\ndef count_digits(x):\n    \"\"\"Given a positive integer, return a dictionary with the \n    number of times each digit occurs in the integer.\n\n    For example:\n    >>> count_digits(1234)\n    {'1': 1, '2': 1, '3': 1, '4': 1}\n    >>> count_digits(1231)\n    {'1': 2, '2': 2, '3': 1}\n    \"\"\"\n\n# ---------------------------------------------------\n# 4. Find the longest sub-string that has the same number of \n#    0s and 1s.\n# ---------------------------------------------------\n\ndef longest_string_0s_and_1s(x):\n    \"\"\"Given a list of strings x. return the longest sub-string \n    that has the same number of 0s and 1s.\n\n    For example:\n    >>> longest_string_0s_and_1s(['0001', '0111011', '0000'])\n    '0111011'\n    \"\"\"\n\n# ---------------------------------------------------\n# 5. Find the longest sub-string that has the same number of ", "", "\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)\n", "\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"], ["\n# Write your code below!\n\n\ndef by_length(arr):\n    if not arr:\n        return []\n    arr.sort()\n    arr.reverse()\n    return [get_letter(num) for num in arr if 1 <= num <= 9]\n\n\ndef get_letter(num):\n    return {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}[num]\n\n\ndef main():\n    print(by_length([2, 1, 1, 4, 5, 8, 2, 3]))\n    print(by_length([1, -1, 55]))\n\n\nmain()\n", "\ndef count_letters(s):\n    \"\"\"\n    Given a string, count the number of letters that appear in the string.\n\n    For example:\n      s = 'hello'\n            -> 'e', 'h', 'l', 'o'\n      return 4\n\n      If the string is empty, return 0\n      s = ''\n      return 0\n    \"\"\"\n\ndef sum_digits(n):\n    \"\"\"\n    Given a positive integer, return the sum of the digits that make up the number.\n\n    For example:\n      n = 4536\n            -> 4 + 5 + 3 + 6 = 21\n      return 21\n\n      If the integer is 0, return 0\n      n = 0\n      return 0\n\n      If the integer is negative, return 0\n      n = -1\n      return 0\n    \"\"\"\n", "", "", "\n# 1st Solution\ndef by_length(arr):\n    arr_new = []\n    for i in arr:\n        if (i >= 1 and i <= 9):\n            arr_new.append(chr(i + 49))\n    arr_new = arr_new[::-1]\n    return arr_new\n\n\n# 2nd Solution\ndef by_length(arr):\n    result = []\n    for i in arr:\n        if 1 <= i <= 9:\n            result.append(chr(i + 49))\n    result = result[::-1]\n    return result\n\n\n# 3rd Solution\ndef by_length(arr):\n    result = []\n    for i in arr:\n        if i >= 1 and i <= 9:\n            result.append(chr(i + 49))\n    result.reverse()\n    return result\n\n# 4th Solution\ndef by_length(arr):\n    result = []\n    for i in arr:\n        if (i >= 1 and i <= 9):\n            result.append(chr(i + 4"], ["\ndef fibonacci(n):\n    \"\"\" Implement the function fibonacci that takes n as a parameter,\n    and returns the nth number in the Fibonacci sequence.\n    Example:\n    fibonacci(10) == 55\n    \"\"\"\n\ndef is_palindrome(s):\n    \"\"\" Implement the function is_palindrome that takes s as a parameter,\n    and returns True if the string s is a palindrome.\n    Otherwise, return False.\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\" Implement the function is_prime that takes n as a parameter,\n    and returns True if n is a prime number, otherwise False.\n    \"\"\"\n\ndef longest_common_prefix(strs):\n    \"\"\" Implement the function longest_common_prefix that takes a list of strings as a parameter,\n    and returns the longest common prefix of all of them.\n    If there is no common prefix, return an empty string.\n    Example:\n    longest_common_prefix(['abc', 'abcd']) == 'ab'\n    \"\"\"\n\ndef longest_palindrome(s):\n    \"\"\" Implement the function longest_palindrome that takes s as a parameter,\n    and returns the longest palindrome of s.\n    If there is no palindrome, return an empty string.\n    Example:\n    longest_palindrome('aaaabb') == 'aabb'\n    \"\"\"\n\ndef longest_word(words):\n    \"\"\" Implement the function longest_word that takes a list of words as a parameter,\n    and returns the longest word of words.\n    If there is no word, return an empty string.\n    Example:\n    longest_word(['abc', 'abcd', 'ab']) == 'ab'\n    \"\"\"\n\ndef merge_sorted(list1, list2):\n    \"\"\" Implement the function merge_sorted that takes two lists of integers as parameters,\n    and returns a single list containing", "\ndef is_palindrome(n):\n    \"\"\" Implement the function is_palindrome that takes n as a parameter and returns True if it is a palindrome,\n    False otherwise.\n\n    Example:\n    is_palindrome(1234321) == True\n    is_palindrome(1234322) == False\n    \"\"\"\n\ndef is_palindrome2(n):\n    \"\"\" Implement the function is_palindrome2 that takes n as a parameter and returns True if it is a palindrome,\n    False otherwise.\n\n    Example:\n    is_palindrome2(1234321) == True\n    is_palindrome2(1234322) == False\n    \"\"\"\n\ndef fibonacci(n):\n    \"\"\" Implement the function fibonacci that takes n as a parameter and returns the nth Fibonacci number,\n    where the first two Fibonacci numbers are 1 and 1.\n\n    Example:\n    fibonacci(4) == 3\n    \"\"\"\n\ndef reverse(s):\n    \"\"\" Implement the function reverse that takes s as a parameter and returns the reversed string.\n\n    Example:\n    reverse('hello world') == 'dlrow olleh'\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\" Implement the function is_prime that takes n as a parameter and returns True if it is a prime number,\n    False otherwise.\n\n    Example:\n    is_prime(13) == True\n    is_prime(16) == False\n    \"\"\"\n\ndef all_primes(n):\n    \"\"\" Implement the function all_primes that takes n as a parameter and returns the list of all prime numbers smaller than n.\n\n    Example:\n    all_primes(10) == [2, 3, 5, 7]\n    \"\"\"\n\ndef", "", "\nif __name__ == '__main__':\n    print(f(5))\n", "\ndef f2(n):\n    \"\"\" Implement the function f2 that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the sum of numbers from 1 to i.\n    i starts from 1.\n    Example:\n    f(5) == [1, 3, 6, 10, 15]\n    \"\"\"\n\ndef f3(n):\n    \"\"\" Implement the function f3 that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the sum of numbers from 1 to i and\n    the number of divisors of i.\n    i starts from 1.\n    Example:\n    f(5) == [1, 4, 10, 19, 34]\n    \"\"\"\n\ndef f4(n):\n    \"\"\" Implement the function f4 that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the sum of numbers from 1 to i and\n    the number of divisors of i and the number of primes less than or equal to i.\n    i starts from 1.\n    Example:\n    f4(5) == [1, 5, 16, 27, 44]\n    \"\"\"\n\ndef f5(n):\n    \"\"\" Implement the function f5 that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the sum of numbers from 1 to i and\n    the number of divisors of i and the number of primes less than or equal to i.\n    i starts from 1.\n    Example:\n    f5(5) == [1"], ["", "\ndef even_odd_palindrome_2(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"", "", "\n# def even_odd_palindrome(n):\n#     \"\"\"\n#     Given a positive integer n, return a tuple that has the number of even and odd\n#     integer palindromes that fall within the range(1, n), inclusive.\n\n#     Example 1:\n\n#         Input: 3\n#         Output: (1, 2)\n#         Explanation:\n#         Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n#     Example 2:\n\n#         Input: 12\n#         Output: (4, 6)\n#         Explanation:\n#         Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n#     Note:\n#         1. 1 <= n <= 10^3\n#         2. returned tuple has the number of even and odd integer palindromes respectively.\n#     \"\"\"\n#     count_even = 0\n#     count_odd = 0\n\n#     # count the number of odd palindromes\n#     for i in range(1, n+1):\n#         if i % 2 != ", ""], ["\ndef is_prime(n):\n    \"\"\"\n    Write a function is_prime which takes a number n and returns True if\n    n is prime, and False otherwise.\n    >>> is_prime(1) == True\n    >>> is_prime(2) == True\n    >>> is_prime(3) == True\n    >>> is_prime(4) == False\n    >>> is_prime(5) == True\n    >>> is_prime(6) == False\n    >>> is_prime(7) == True\n    >>> is_prime(100) == False\n    >>> is_prime(21) == True\n    \"\"\"\n\ndef all_primes(n):\n    \"\"\"\n    Write a function all_primes which takes a number n and returns the\n    number of primes up to n.\n    >>> all_primes(1) == 0\n    >>> all_primes(2) == 1\n    >>> all_primes(3) == 2\n    >>> all_primes(4) == 2\n    >>> all_primes(5) == 3\n    >>> all_primes(6) == 3\n    >>> all_primes(7) == 3\n    >>> all_primes(8) == 4\n    >>> all_primes(9) == 4\n    >>> all_primes(10) == 4\n    >>> all_primes(21) == 6\n    \"\"\"\n\ndef longest_palindrome(s):\n    \"\"\"\n    Write a function longest_palindrome which takes a string s and returns\n    the longest palindrome of s.\n    >>> longest_palindrome(\"abcdcba\") == \"abcdcba\"\n    >>> longest_palindrome(\"abcba\") == \"abcba\"\n    >>> longest_palindrome(\"aaabaaa\") == \"aaaa\"\n    >>> longest", "\ndef count_negative_nums(arr):\n    \"\"\"\n    Write a function count_negative_nums which takes an array of integers and\n    returns the number of elements which has a sum of digits < 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_negative_nums([]) == 0\n    >>> count_negative_nums([-1, 11, -11]) == 2\n    >>> count_negative_nums([1, 1, 2]) == 0\n    \"\"\"\n\ndef count_odd_nums(arr):\n    \"\"\"\n    Write a function count_odd_nums which takes an array of integers and\n    returns the number of elements which has a sum of digits % 2 == 1.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_odd_nums([]) == 0\n    >>> count_odd_nums([-1, 11, -11]) == 0\n    >>> count_odd_nums([1, 1, 2]) == 2\n    \"\"\"\n\ndef count_even_nums(arr):\n    \"\"\"\n    Write a function count_even_nums which takes an array of integers and\n    returns the number of elements which has a sum of digits % 2 == 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_even_nums([]) == 0\n    >>> count_even_nums([-1, 11, -", "\ndef find_biggest(arr):\n    \"\"\"\n    Write a function find_biggest which takes an array of integers\n    and returns the biggest number. If there are several numbers with the\n    same biggest, return the biggest one (in case of a tie, return any one).\n    >>> find_biggest([]) == None\n    >>> find_biggest([1]) == 1\n    >>> find_biggest([5, 7, 1, 1, 1]) == 7\n    \"\"\"\n\ndef count_evens(arr):\n    \"\"\"\n    Write a function count_evens which takes an array of integers\n    and returns the number of even numbers in the array.\n    >>> count_evens([]) == 0\n    >>> count_evens([1, 2, 3]) == 2\n    >>> count_evens([1, 2, 3, 4, 5]) == 3\n    \"\"\"\n\ndef count_positives(arr):\n    \"\"\"\n    Write a function count_positives which takes an array of integers\n    and returns the number of positive numbers in the array.\n    >>> count_positives([]) == 0\n    >>> count_positives([-1, -2, -3]) == 0\n    >>> count_positives([1, 2, 3, 4, 5]) == 5\n    \"\"\"\n\ndef count_negatives(arr):\n    \"\"\"\n    Write a function count_negatives which takes an array of integers\n    and returns the number of negative numbers in the array.\n    >>> count_negatives([]) == 0\n    >>> count_negatives([1, 2, 3]) == 0\n    >>> count_negatives([-1, -2, -3]) == 3\n    \"\"\"\n\ndef count_pairs(arr):\n    \"\"\"", "\ndef make_array(n, x):\n    \"\"\"\n    Write a function make_array which returns an array with n elements of the\n    value x.\n    >>> make_array(3, 1) == [1, 1, 1]\n    \"\"\"\n\ndef reverse(array):\n    \"\"\"\n    Write a function reverse which takes an array and returns an array where the\n    elements are in the reverse order of the input array.\n    >>> reverse([]) == []\n    >>> reverse([-1, 11, -11]) == [-11, 11, -1]\n    >>> reverse([1, 1, 2]) == [2, 1, 1]\n    \"\"\"\n\ndef reverse_words(sentence):\n    \"\"\"\n    Write a function reverse_words which takes a string as an input and returns\n    a string with the words in the reverse order.\n    >>> reverse_words(\"a\") == \"a\"\n    >>> reverse_words(\"a b c\") == \"c b a\"\n    \"\"\"\n\ndef reverse_words2(sentence):\n    \"\"\"\n    Write a function reverse_words2 which takes a string as an input and returns\n    a string with the words in the reverse order.\n    >>> reverse_words2(\"a\") == \"a\"\n    >>> reverse_words2(\"a b c\") == \"c b a\"\n    \"\"\"\n\ndef reverse_words3(sentence):\n    \"\"\"\n    Write a function reverse_words3 which takes a string as an input and returns\n    a string with the words in the reverse order.\n    >>> reverse_words3(\"a\") == \"a\"\n    >>> reverse_words3(\"a b c\") == \"c b a\"\n    \"\"\"\n\ndef reverse_words4(sentence):\n    \"\"\"\n    Write a function reverse_words4 which takes a string as an input", "\ndef count_nums2(arr):\n    \"\"\"\n    >>> count_nums2([]) == 0\n    >>> count_nums2([-1, 11, -11]) == 1\n    >>> count_nums2([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums3(arr):\n    \"\"\"\n    >>> count_nums3([]) == 0\n    >>> count_nums3([-1, 11, -11]) == 1\n    >>> count_nums3([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums4(arr):\n    \"\"\"\n    >>> count_nums4([]) == 0\n    >>> count_nums4([-1, 11, -11]) == 1\n    >>> count_nums4([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums5(arr):\n    \"\"\"\n    >>> count_nums5([]) == 0\n    >>> count_nums5([-1, 11, -11]) == 1\n    >>> count_nums5([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums6(arr):\n    \"\"\"\n    >>> count_nums6([]) == 0\n    >>> count_nums6([-1, 11, -11]) == 1\n    >>> count_nums6([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums7(arr):\n    \"\"\"\n    >>> count_nums7([]) == 0\n    >>> count_nums7([-1, 11, -11]) == 1\n    >>> count_nums7([1, 1, 2]) == 3\n    \"\"\"\n\ndef count_nums8(arr):\n    \"\"\"\n    >>> count"], ["", "", "\ndef move_one_ball_dp(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>", "", ""], ["\n# test case 1\nlst1 = [1, 2, 3, 4]\nlst2 = [1, 2, 3, 4]\nprint(exchange(lst1, lst2))\n\n# test case 2\nlst1 = [1, 2, 3, 4]\nlst2 = [1, 5, 3, 4]\nprint(exchange(lst1, lst2))\n", "", "", "\ndef main():\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2, 3, 4]\n    result = exchange(lst1, lst2)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n", ""], ["\ndef reverse(test):\n    \"\"\"Reverse the words in a string.\n    \n    Example:\n    reverse('Hello World!') == '!dlroW olleH'\n    reverse('Hello World!') == '!dlroW olleH'\n    reverse('') == ''\n\n    \"\"\"\n\ndef reverse_words(test):\n    \"\"\"Reverse the words in a string.\n    \n    Example:\n    reverse_words('Hello World!') == 'World! Hello'\n    reverse_words('Hello World!') == 'World! Hello'\n    reverse_words('') == ''\n\n    \"\"\"\n\ndef reverse_chars(test):\n    \"\"\"Reverse the characters in a string.\n    \n    Example:\n    reverse_chars('Hello World!') == '!olleH dlroW'\n    reverse_chars('Hello World!') == '!olleH dlroW'\n    reverse_chars('') == ''\n\n    \"\"\"\n\ndef is_palindrome(test):\n    \"\"\"Return True if the given string is a palindrome, False otherwise.\n    \n    Example:\n    is_palindrome('a man, a plan, a canal: Panama') == True\n    is_palindrome('racecar') == True\n    is_palindrome('nope') == False\n    is_palindrome('a man, a plan, a canal: Panama') == True\n\n    \"\"\"\n\ndef is_palindrome_chars(test):\n    \"\"\"Return True if the given string is a palindrome, False otherwise.\n    \n    Example:\n    is_palindrome_chars('a man, a plan, a canal: Panama') == True\n    is_palindrome_chars('racecar') == True\n    is_palindrome_chars('nope') == False\n    is_palindrome_chars('a man, a plan,", "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if not test:\n        return {}\n    count = {}\n    for char in test.split():\n        count[char] = count.get(char, 0) + 1\n    return count\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if not test:\n        return {}\n    count = {}\n    for char in test.split():\n        count[char] = count.get(char, 0", "#     letters = test.split()\n#     d = {}\n#     for l in letters:\n#         if l not in d:\n#             d[l] = 1\n#         else:\n#             d[l] += 1\n#     return d\n    \n    letters = {}\n    for l in test:\n        letters[l] = letters.get(l, 0) + 1\n    return letters\n\nif __name__ == '__main__':\n    print histogram('a b c')\n    print histogram('a b b a')\n    print histogram('a b c a b')\n    print histogram('b b b b a')\n    print histogram('')", "\ndef read_file(filename):\n    \"\"\"Given a filename, read all its lines and return them as a list of lines.\n    The lines can be empty.\n\n    \"\"\"\n\ndef read_file_by_line(filename):\n    \"\"\"Given a filename, read all its lines and return them as a list of lines.\n    The lines can be empty.\n\n    \"\"\"\n\ndef read_file_by_word(filename):\n    \"\"\"Given a filename, read all its lines and return them as a list of words.\n    The words can be empty.\n    \n    The lines can contain whitespace characters.\n\n    \"\"\"\n\ndef read_file_by_word_by_line(filename):\n    \"\"\"Given a filename, read all its lines and return them as a list of words.\n    The words can be empty.\n    \n    The lines can contain whitespace characters.\n\n    \"\"\"\n\ndef read_file_by_word_by_line_by_character(filename):\n    \"\"\"Given a filename, read all its lines and return them as a list of words.\n    The words can be empty.\n    \n    The lines can contain whitespace characters.\n\n    \"\"\"\n\ndef count_characters(text):\n    \"\"\"Given a text, count the number of characters in it, ignoring whitespace.\n\n    \"\"\"\n\ndef count_words(text):\n    \"\"\"Given a text, count the number of words in it, ignoring whitespace.\n\n    \"\"\"\n\ndef count_lines(text):\n    \"\"\"Given a text, count the number of lines in it, ignoring whitespace.\n\n    \"\"\"\n\ndef count_paragraphs(text):\n    \"\"\"Given a text, count the number of paragraphs in it, ignoring whitespace.\n\n    \"\"\"\n\ndef count_sentences(text):\n    \"\"\"Given a text, count the", "\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()"], ["", "def reverse_delete_alt(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if len(c) == 0:\n        return (s, True)\n    elif s == \"\":\n        return (s, True)\n    elif len(s) == 1:\n        if s in c:\n            return (\"\", True)\n        else:\n            return (s, False)\n    elif s[0] in c:\n        return reverse_delete_alt(s[1:],c)\n    elif s[-1] in c:\n        return reverse_delete_alt(s[:-1],c)\n    else:\n        return reverse_delete_alt(s[1:-1],c)\n\ndef reverse_delete_alt2(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the", "", "\n# 1. Create a new variable to hold the palindrome string\n# 2. Loop through the original string\n# 3. If the char in the string is not in the palindrome string, append it to the string\n# 4. When you reach the end of the string, check if the string is palindrome\n# 5. If not palindrome, set the result to the original string and the result to False\n# 6. If palindrome, set the result to the palindrome string and the result to True\n# 7. Return the result\ndef reverse_delete(s,c):\n    new = \"\"\n    for x in s:\n        if x not in c:\n            new += x\n    if new == new[::-1]:\n        result = (new, True)\n    else:\n        result = (new, False)\n    return result\n\nprint(reverse_delete(\"abcdedcba\", \"ab\"))\n\n# 1. Create a new variable to hold the palindrome string\n# 2. Loop through the original string\n# 3. If the char in the string is not in the palindrome string, append it to the string\n# 4. When you reach the end of the string, check if the string is palindrome\n# 5. If not palindrome, set the result to the original string and the result to False\n# 6. If palindrome, set the result to the palindrome string and the result to True\n# 7. Return the result\ndef reverse_delete(s,c):\n    new = \"\"\n    for x in s:\n        if x not in c:\n            new +=", ""], ["\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()", "#write your code here\n", "\ndef _make_result_list(lst, odd_count_lst):\n    \"\"\"Given a list of strings, a list of integers of odd counts for the\n    strings, and a string, return a list. Each element of the output\n    should be the string, followed by the number of odd digits in the\n    string, followed by the corresponding element of the odd_count_lst.\n\n    >>> _make_result_list(['1234567'], [4])\n    ['1234567 4 4']\n    >>> _make_result_list(['1234567'], [1,2,3,4,5,6,7,8,9])\n    ['1234567 1 1', '1234567 2 2', '1234567 3 3', '1234567 4 4',\n     '1234567 5 5', '1234567 6 6', '1234567 7 7', '1234567 8 8',\n     '1234567 9 9']\n    \"\"\"\n\ndef str_list_to_str(lst):\n    \"\"\"Given a list of strings, return a string consisting of all the\n    strings in the list, separated by spaces.\n\n    >>> str_list_to_str(['a','b','c'])\n    'a b c", "\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\n# Your code here.\n# %load test_odd_count.py\nfrom nose.tools import assert_equal\n\nclass TestOddCount(object):\n\n    def test(self, func):\n        assert_equal(func(['1234567']),\n                     ['the number of odd elements 4n the str4ng 4 of the 4nput.'])\n        assert_equal(func(['3',\"11111111\"]),\n                     ['the number of odd elements 1n the str1ng 1 of the 1nput.',\n                      'the number of odd elements 8n the str8ng 8 of the 8nput.'])\n\n    def test_odd_count(self):\n        f = odd_count\n        self.test(f)\n\n# %load test_odd_count.py\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the "], ["", "", "", "\n```\n\n[Source](https://www.interviewbit.com/problems/min-subarray-sum/)\n", ""], ["#     time = 0\n#     for row in range(len(grid)):\n#         time += math.ceil(len(grid[row])/capacity)\n\n#     return time\n    time = 0\n    for row in range(len(grid)):\n        for i in range(len(grid[row])):\n            if grid[row][i] == 1:\n                time += 1\n                grid[row][i] = 0\n                if i < len(grid[row])-1:\n                    if grid[row][i+1] == 1:\n                        time += max_fill(grid, capacity)\n                        grid[row][i+1] = 0\n                if row > 0:\n                    if grid[row-1][i] == 1:\n                        time += max_fill(grid, capacity)\n                        grid[row-1][i] = 0\n\n    return time", "\ndef max_fill_dp(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1", "", "\ndef max_fill_2(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,", "\ndef max_fill_brute_force(grid, capacity):\n    \"\"\"\n    Naive solution\n    \"\"\"\n    ans = 0\n    for i in range(len(grid)):\n        # Check if filling up this row is possible\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                # Check if the bucket can be filled\n                if (len(grid[i]) - j) * (capacity - 1) < len(grid[i]):\n                    ans += 1\n    return ans\n\ndef max_fill_dp(grid, capacity):\n    \"\"\"\n    Dynamic programming approach\n\n    Time complexity: O(n^2)\n    Space complexity: O(n^2)\n    \"\"\"\n    ans = 0\n    dp = [0 for _ in range(len(grid))]\n    for i in range(len(grid)):\n        for j in range(len(grid"], ["\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "", "\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "\ndef test_sort_array():\n    assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n", ""], ["\nif __name__ == '__main__':\n    print('Example:')\n    print(select_words('Mary had a little lamb', 4))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert select_words('Mary had a little lamb', 4) == ['little']\n    assert select_words('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert select_words('simple white space', 2) == []\n    assert select_words('Hello world', 4) == ['world']\n    assert select_words('Uncle sam', 3) == ['Uncle']\n    print('Done! Happy coding!')", "", "\ndef main():\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nprint(select_words(\"Mary had a little lamb\", 4))\nprint(select_words(\"Mary had a little lamb\", 3))\nprint(select_words(\"simple white space\", 2))\nprint(select_words(\"Hello world\", 4))\nprint(select_words(\"Uncle sam\", 3))\n"], ["\ndef get_vowel_index(word):\n    \"\"\"You are given a word. Your task is to find the index of the closest vowel \n    from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return -1 if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_vowel_index(\"yogurt\") ==> 4\n    get_vowel_index(\"FULL\") ==> 0\n    get_vowel_index(\"quick\") ==> -1\n    get_vowel_index(\"ab\") ==> -1\n    \"\"\"\n\ndef get_vowel_count(word):\n    \"\"\"You are given a word. Your task is to find the number of vowels\n    that stands between two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_vowel_count(\"yogurt\") ==> 3\n    get_vowel_count(\"FULL\") ==> 1\n    get_vowel_count(\"quick\") ==> 0\n    get_vowel_count(\"ab\") ==> 0\n    \"\"\"\n\ndef get_vowel_position(word):\n    \"\"\"You are given a word. Your task is to find the position of the closest vowel\n    from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_vowel_position(\"y", "\ndef is_palindrome(word):\n    \"\"\"You are given a word. Your task is to check if the word is palindrome.\n\n    A word is palindrome if the reverse of the word is equal to the word.\n\n    Example:\n    is_palindrome(\"1234321\") ==> True\n    is_palindrome(\"1234322\") ==> False\n    is_palindrome(\"kayak\") ==> True\n    is_palindrome(\"madam\") ==> False\n    is_palindrome(\"malayalam\") ==> True\n    is_palindrome(\"123432\") ==> False\n    \"\"\"\n\ndef get_largest_digit(n):\n    \"\"\"You are given a positive integer. Your task is to find the largest digit of the\n    given number.\n\n    Example:\n    get_largest_digit(123456789) ==> 9\n    get_largest_digit(987654321) ==> 9\n    get_largest_digit(1234567890) ==> 0\n    \"\"\"\n\ndef get_least_common_multiple(a, b):\n    \"\"\"You are given two integers. Your task is to find the least common multiple (LCM)\n    of the given integers.\n\n    LCM of two integers a and b is the smallest positive integer that is divisible by both\n    a and b.\n\n    Example:\n    get_least_common_multiple(12, 18) ==> 36\n    get_least_common_multiple(2, 4) ==> 8\n    get_least_common_multiple(1, 2) ==> 2\n    \"\"\"\n\n", "\ndef get_longest_substring(string, max_length):\n    \"\"\"You are given a string and a number n. You task is to find the longest substring \n    in the string having at most n distinct characters.\n\n    Example:\n    get_longest_substring(\"abacaba\", 3) ==> \"aba\"\n    get_longest_substring(\"abacaba\", 2) ==> \"ab\"\n    get_longest_substring(\"abacaba\", 4) ==> \"abac\"\n    \"\"\"\n\ndef get_max_product_of_3(arr):\n    \"\"\"You are given an array of integers. You task is to find the maximum product \n    of 3 elements in the array.\n\n    Example:\n    get_max_product_of_3([1, 2, 3, 4]) ==> 24\n    get_max_product_of_3([1, 2, 3, 4, 5]) ==> 60\n    get_max_product_of_3([2, 3, 4, 5, 6, 7, 8, 9, 10]) ==> 5832\n    \"\"\"\n\ndef get_nth_largest(arr, n):\n    \"\"\"You are given an array of integers and an integer n. You task is to find the n-th \n    largest element of the array.\n\n    Example:\n    get_nth_largest([1, 2, 3, 4, 5], 1) ==> 5\n    get_nth_largest([1, 2, 3, 4, 5], 2) ==> 4\n    get_nth_largest([1, 2", "\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))", "\ndef get_common_letters(word):\n    \"\"\"You are given a word. Your task is to find all the common letters between\n    the first and the last character of the word.\n\n    Example:\n    get_common_letters(\"yogurt\") ==> \"ogr\"\n    get_common_letters(\"FULL\") ==> \"FU\"\n    get_common_letters(\"quick\") ==> \"\"\n    get_common_letters(\"ab\") ==> \"a\"\n    \"\"\"\n\ndef get_longest_word(words):\n    \"\"\"You are given a list of words. Your task is to find the longest word in this list.\n    Return None if list is empty.\n\n    Example:\n    get_longest_word([\"yogurt\", \"cheese\", \"wine\"]) ==> \"yogurt\"\n    get_longest_word([]) ==> None\n    \"\"\"\n\ndef get_longest_word_with_vowels(words):\n    \"\"\"You are given a list of words. Your task is to find the longest word in this list\n    that has at least one vowel. Return None if list is empty.\n\n    Example:\n    get_longest_word_with_vowels([\"yogurt\", \"cheese\", \"wine\"]) ==> \"cheese\"\n    get_longest_word_with_vowels([]) ==> None\n    \"\"\"\n\ndef get_word_index(words, word):\n    \"\"\"You are given a list of words and a word. Your task is to find the index of the\n    given word in the list. Return -1 if the word is not in the list.\n\n    Example:\n    get_word_index([\"yogurt\", \"cheese\", \"wine\"], \"cheese\") ==> 1\n   "], ["", "", "", "\nif __name__ == '__main__':\n    print(match_parens(['()(', ')']))\n    print(match_parens([')', ')']))\n", "\ndef remove_duplicates(lst):\n    '''\n    You are given a list of strings.\n    Your task is to remove all duplicates from the list.\n    The order of the elements in the list doesn't matter.\n\n    Examples:\n    remove_duplicates(['a', 'b', 'a', 'c']) == ['a', 'b', 'c']\n    remove_duplicates(['a', 'a', 'a', 'a']) == ['a']\n    '''\n\ndef remove_duplicates_v2(lst):\n    '''\n    You are given a list of strings.\n    Your task is to remove all duplicates from the list.\n    The order of the elements in the list doesn't matter.\n\n    Examples:\n    remove_duplicates(['a', 'b', 'a', 'c']) == ['a', 'b', 'c']\n    remove_duplicates(['a', 'a', 'a', 'a']) == ['a']\n    '''\n\ndef remove_duplicates_v3(lst):\n    '''\n    You are given a list of strings.\n    Your task is to remove all duplicates from the list.\n    The order of the elements in the list doesn't matter.\n\n    Examples:\n    remove_duplicates(['a', 'b', 'a', 'c']) == ['a', 'b', 'c']\n    remove_duplicates(['a', 'a', 'a', 'a']) == ['a']\n    '''\n\ndef remove_duplicates_v4(lst):\n    '''\n    You are given a list of strings.\n    Your task is to remove all duplicates from the list.\n    The order of the elements in the list doesn't matter.\n\n    Examples:\n    remove_duplicates(['"], ["\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n", "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return heapq.nlargest(k, arr)\n", "", "", "\n#     sorted_array = []\n#     for i in range(k):\n#         max_element = max(arr)\n#         arr.remove(max_element)\n#         sorted_array.append(max_element)\n#     return sorted_array\n\n\n#     if k < len(arr):\n#         arr.sort()\n#         return arr[-k:]\n#     else:\n#         return arr\n\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3"], ["\nif __name__ == \"__main__\":\n    print(solution([5, 8, 7, 1]))\n", "\tif lst[0]%2!=0:\n\t\tlst[0]=lst[0]+1\n\t\treturn sum(lst[1:])\n\telse:\n\t\treturn sum(lst[1:])\n\nif __name__ == \"__main__\":\n\tprint(solution([3, 3, 3, 3, 3]))", "\n#solution([5, 8, 7, 1]) ==> 12\n\nif __name__ == \"__main__\":\n    print(solution([3, 3, 3, 3, 3]))", "#     print(lst)\n    sum_even = 0\n    sum_odd = 0\n    for num in lst:\n        if num % 2 == 0:\n            sum_even += num\n        else:\n            sum_odd += num\n    return sum_even - sum_odd\n\nif __name__ == \"__main__\":\n    print(solution([5, 8, 7, 1]))\n    print(solution([3, 3, 3, 3, 3]))\n    print(solution([30, 13, 24, 321]))", "#     for x in range(len(lst)):\n#         if x % 2 == 0:\n#             lst[x] = 0\n#     return sum(lst)\n\n    # Alternate Solution\n    # return sum(lst[::2])\n\n    # Elegant Solution\n    return sum([x for x in lst[::2] if x % 2 == 0])\n\ndef test_solution():\n    assert solution([5, 8, 7, 1]) == 12\n    assert solution([3, 3, 3, 3, 3]) == 9\n    assert solution([30, 13, 24, 321]) ==0\n\nif __name__ == \"__main__\":\n    test_solution()\n"], ["", "", "\ndef main():\n    arr = [111,21,3,4000,5,6,7,8,9]\n    k = 4\n    print(f\"Sum of elements with at most two digits from the first {k} elements of arr: {add_elements(arr, k)}\")\n\n\nif __name__ == \"__main__\":\n    main()", "", ""], ["\nprint(get_odd_collatz(5))", "\n# write your code here\n", "\n#     Your code here\n    odd_collatz = [1]\n    i = 1\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n            odd_collatz.append(n)\n        else:\n            n = 3*n + 1\n            odd_collatz.append(n)\n            i += 1\n    return odd_collatz\n\n\ndef test_get_odd_collatz():\n    \"\"\"\n    Some sanity checks for get_odd_collatz.\n    \"\"\"\n    assert get_odd_collatz(1) == [1]\n    assert get_odd_collatz(5) == [1, 5]\n    assert get_odd_collatz(10) == [1, 5, 10]\n    assert get_odd_collatz(16) == [1, 5, 16]\n    assert get_odd_collatz(25) == [1, 5, 16, 25]\n    assert get_odd_collatz(28) == [1, 5, 16, 25, 44, 28]\n    assert get_odd_collatz(2000) == [1, 5,", "\n#     TODO: Write your solution here.\n\ndef get_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has all the numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_collatz(5) returns [1, 5, 8, 16, 32, 64] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are 1, 5, 8, 16, 32, 64.\n    \"\"\"\n\n#     TODO: Write your solution here", ""], ["", "# write your code here\n\n# checking for empty date string\ndef check_empty_date_string(date):\n    if date.isspace():\n        return False\n    else:\n        return True\n\n# checking for date format\ndef check_date_format(date):\n    if len(date.split(\"-\")) == 3:\n        return True\n    else:\n        return False\n\n# checking for date range\ndef check_date_range(date):\n    month, day, year = date.split(\"-\")\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month in [1,3,5,7,8,10,12] and day in range(1,32):\n        return True\n    elif month in [4,6,9,11] and day in range(1,31):\n        return True\n    elif month == 2 and day in range(1,29):\n        return True\n    else:\n        return False\n\n\ndef valid_date_1(date):\n    date =", "", "", "\n# Write a function to calculate the hypotenuse of a right triangle, which has sides a and b.\ndef hypotenuse(a, b):\n    \"\"\"You have to write a function which calculates the hypotenuse of a right\n    triangle, which has sides a and b.\n\n    for example:\n    hypotenuse(3, 4) => 5.0\n\n    hypotenuse(5, 12) => 13.0\n\n    hypotenuse(1, 1) => 1.0\n    \"\"\"\n\n# Write a function to get the sum of numbers up to n.\ndef sum_of_numbers(n):\n    \"\"\"You have to write a function which calculates the sum of numbers up to n.\n\n    for example:\n    sum_of_numbers(1) => 1\n\n    sum_of_numbers(3) => 6\n\n    sum_of_numbers(5) => 15\n    \"\"\"\n\n# Write a function which can take a string and return the characters in reverse order.\ndef reverse_string"], ["\nif __name__ == \"__main__\":\n    print(split_words(\"Hello world!\"))\n    print(split_words(\"Hello,world!\"))\n    print(split_words(\"abcdef\"))", "#     txt = txt.replace(\" \", \",\")\n#     txt = txt.replace(\",\", \" \")\n#     txt = txt.split(\",\")\n#     txt = txt.split(\" \")\n    txt = txt.replace(\" \", \"\")\n    txt = txt.replace(\",\", \"\")\n    txt = txt.replace(\"\\n\", \"\")\n    txt = txt.replace(\".\", \"\")\n    txt = txt.replace(\":\", \"\")\n    txt = txt.replace(\";\", \"\")\n    txt = txt.replace(\"!\", \"\")\n    txt = txt.replace(\"?\", \"\")\n    txt = txt.replace(\"(\", \"\")\n    txt = txt.replace(\")\", \"\")\n    txt = txt.replace(\"[\", \"\")\n    txt = txt.replace(\"]\", \"\")\n    txt = txt.replace(\"{\", \"\")\n    txt = txt.replace(\"}\", \"\")\n    txt = txt.replace(\"'\", \"\")\n    txt = txt.replace(\"`\", \"\")\n    txt = txt.replace(\"/\", \"\")\n    txt = txt.replace(\"\\\"\", \"\")\n    txt = txt.replace(\"]\", \"\")\n    txt = txt.replace(\"}\", \"\")\n    txt = txt.replace(\"(\", \"\")\n    txt = txt.replace(\")\", \"\")\n    txt = txt.replace(\"?\", \"\")\n    txt = txt.replace(\"-\", \"\")\n    txt = txt.replace(\"#\", \"\")\n    txt = txt.replace(\"=\", \"\")\n    txt = txt.replace(\"%\", \"\")\n    txt = txt.replace(\"&\", \"\")\n    txt = txt.replace(\"$\", \"\")\n    txt = txt.replace(\"@\", \"\")\n    txt = txt.replace(\"~\", \"\")\n    txt = txt.replace(\"^\", \"\")\n    txt = txt.replace(\"_\", \"\")\n    txt = txt.replace(\"+\", \"\")\n    txt = txt.replace(\"*\", \"\")\n    txt = txt.replace(\"(\", \"\")\n    txt = txt.replace(\"", "\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()", "\ndef count_words(txt):\n    '''\n    Given a string of words, return the total number of words in the string.\n    Examples\n    count_words(\"Hello world!\") \u279e 2\n    count_words(\"Hello,world!\") \u279e 2\n    count_words(\"abcdef\") \u279e 1 \n    '''\n\ndef remove_punct(txt):\n    '''\n    Given a string of words, return the string without any punctuation.\n    Examples\n    remove_punct(\"Hello world!\") \u279e \"Hello world\"\n    remove_punct(\"Hello,world!\") \u279e \"Hello world\"\n    remove_punct(\"abcdef\") == \"abcdef\"\n    '''\n\ndef remove_whitespace(txt):\n    '''\n    Given a string of words, return the string without any whitespace.\n    Examples\n    remove_whitespace(\"Hello world!\") \u279e \"HelloWorld\"\n    remove_whitespace(\"Hello,world!\") \u279e \"Hello,world\"\n    remove_whitespace(\"abcdef\") == \"abcdef\"\n    '''\n\ndef count_vowels(txt):\n    '''\n    Given a string of words, return the number of vowels in the string.\n    Examples\n    count_vowels(\"Hello world!\") \u279e 2\n    count_vowels(\"Hello,world!\") \u279e 3\n    count_vowels(\"abcdef\") == 1 \n    '''\n\ndef count_consonants(txt):\n    '''\n    Given a string of words, return the number of consonants in the string.\n    Examples\n    count_consonants(\"Hello world!\") \u279e 4\n    count_consonants(\"Hello,world!\") \u279e 4\n    count_consonants(\"abcdef\") == 5 \n    '''\n\ndef count_words_with_vow", "\n# split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n# split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n# split_words(\"abcdef\") == 3 "], ["", "#   if len(lst) <= 1:\n#       return True\n#   elif lst[0] > lst[1]:\n#       return False\n#   else:\n#       return is_sorted(lst[1:])\n#   return True\n\n#   return lst[0] <= lst[1] and is_sorted(lst[1:])\n#   return lst[0] <= lst[1] and is_sorted(lst[1:])\n#   return lst[0] <= lst[1] and is_sorted(lst[1:])\n#   return lst[0] <= lst[1] and is_sorted(lst[1:])\n#   return lst[0] <= lst[1] and is_sorted(lst[1:])\n#   return lst[0] <= lst[1] and is_sorted(lst[1:])\n#   return lst[0] <= lst[1] and is_sorted(lst[1:])\n#   return lst[0] <= lst[1] and is_sorted(lst[1:])\n#   return lst[0] <= lst[1] and is_sorted(lst[1:])\n#   return lst[0] <= lst[1]", "\ndef is_sorted_by_length(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order by length. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted_by_length([5]) \u279e True\n    is_sorted_by_length([1, 2, 3, 4, 5]) \u279e True\n    is_sorted_by_length([1, 3, 2, 4, 5]) \u279e False\n    is_sorted_by_length([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted_by_length([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted_by_length([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted_by_length([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted_by_length([1, 2, 2, ", "\ndef is_sorted_v2(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    for i in range(len(lst) - 1):\n        if lst[i] > lst", "\ndef is_sorted_v2(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # get length of list\n    length = len(lst)\n\n    # check if list has length of "], ["", "", "\nif __name__ == \"__main__\":\n    print(intersection((1, 2), (2, 3)))\n    print(intersection((-1, 1), (0, 4)))\n    print(intersection((-3, -1), (-5, 5)))", "\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", ""], ["\ndef prod_signs2(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs2([1, 2, 2, -4]) == -9\n    >>> prod_signs2([0, 1]) == 0\n    >>> prod_signs2([]) == None\n    \"\"\"\n", "", "\ndef find_max_sum_subarray(arr):\n    \"\"\"\n    You are given an array of integers.\n    You have to find the sum of contiguous subarray having maximum sum.\n\n    Example:\n    >>> find_max_sum_subarray([-2, -3, 4, -1, -2, 1, 5, -3]) == 9\n    >>> find_max_sum_subarray([1, -2, 3, 4, -1, 2, 1, -5, 4]) == 6\n    \"\"\"\n\ndef max_product_subarray(arr):\n    \"\"\"\n    You are given an array of integers. You need to find the maximum product subarray in it.\n\n    Example:\n    >>> max_product_subarray([1, 2, 3, -1, -2]) == 6\n    >>> max_product_subarray([1, -2, 3, 4, -1, 2, 1, -5, 4]) == 24\n    \"\"\"\n\ndef max_product_subarray_dp(arr):\n    \"\"\"\n    You are given an array of integers. You need to find the maximum product subarray in it.\n\n    Example:\n    >>> max_product_subarray_dp([1, 2, 3, -1, -2]) == 6\n    >>> max_product_subarray_dp([1, -2, 3, 4, -1, 2, 1, -5, 4]) == 24\n    \"\"\"\n\ndef max_product_subarray_2(arr):\n    \"\"\"\n    You are given an array of integers. You need to find the maximum product subarray in it.\n\n    Example:\n    >>> max_product_subarray_2([1, 2, ", "", "\ndef get_longest_word(s):\n    \"\"\"\n    You are given a string s. You have to find the longest word made of\n    consecutive letters. If there are several such words, return the\n    lexicographically first one.\n\n    Example:\n    >>> get_longest_word(\"word\") == \"word\"\n    >>> get_longest_word(\"wordy\") == \"word\"\n    >>> get_longest_word(\"wordyword\") == \"word\"\n    \"\"\"\n\ndef longest_subsequence(s):\n    \"\"\"\n    You are given a string s. You have to find the longest subsequence of\n    s that is palindrome. If there are several such subsequences, return\n    the lexicographically first one.\n\n    Example:\n    >>> longest_subsequence(\"abba\") == \"abba\"\n    >>> longest_subsequence(\"aaaa\") == \"aaaa\"\n    >>> longest_subsequence(\"abcaba\") == \"aba\"\n    \"\"\"\n\ndef get_num_in_row(arr, k):\n    \"\"\"\n    You are given a matrix arr and a positive integer k. You have to\n    find the number of rows in the matrix where the number of elements\n    in the row is equal to k.\n\n    Example:\n    >>> get_num_in_row([[1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1]], 1) == 1\n    >>> get_num_in_row([[1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1]], 2) == 2\n    >>> get_num_in_row([[1, 1, 1, 1"], ["\ndef main():\n    print(\"Minimum path sum.\")\n\n    grid = [ [5,9,3], [4,1,6], [7,8,2]]\n    k = 1\n    print(minPath(grid, k))\n\nif __name__ == \"__main__\":\n    main()\n", "", "\n#     Time complexity: O(N^2)\n#     Space complexity: O(N^2)\ndef minPath_optimal(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell", "\ndef print_matrix(matrix):\n    for i in matrix:\n        print(i)\n    print()\n\nif __name__ == '__main__':\n    grid = [ [1,2,3], [4,5,6], [7,8,9]]\n    k = 3\n    print_matrix(minPath(grid, k))\n\n    grid = [ [5,9,3], [4,1,6], [7,8,2]]\n    k = 1\n    print_matrix(minPath(grid, k", ""], ["\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert tri(1) == [1], \"First element should be 1\"\n    assert tri(2) == [1, 3], \"Second element should be 3\"\n    assert tri(3) == [1, 3, 2], \"Third element should be 2\"\n    assert tri(4) == [1, 3, 2, 8], \"Fourth element should be 8\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n", "\ndef main():\n    print(tri(3))\n\nif __name__ == \"__main__\":\n    main()", "", "", ""], ["", "\ndef test_digits(fn):\n    assert fn(1) == 1\n    assert fn(4) == 0\n    assert fn(235) == 15\n\ndef main():\n    test_digits(digits)\n    print(\"All tests passed.\")\n\nif __name__ == '__main__':\n    main()", "\ndef reverse(n):\n    \"\"\"Given a positive integer n, return the reversed number.\n    For example:\n    reverse(1234) == 4321\n    reverse(1230) == 321\n    \"\"\"\n\ndef largest_product(n):\n    \"\"\"Given a positive integer n, return the largest product of n adjacent\n    digits.\n    For example:\n    largest_product(1)  == 1\n    largest_product(2)  == 9\n    largest_product(3)  == 27\n    largest_product(4)  == 180\n    largest_product(5)  == 21000\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"Given a positive integer n, return True if n is prime, False otherwise.\n    For example:\n    is_prime(1)  == True\n    is_prime(2)  == True\n    is_prime(3)  == True\n    is_prime(4)  == False\n    is_prime(5)  == True\n    is_prime(6)  == False\n    is_prime(7)  == True\n    \"\"\"\n\ndef longest_word(words):\n    \"\"\"Given a list of words, return the longest word.\n    For example:\n    longest_word(['a', 'b', 'cde', 'fgh', 'i']) == 'cde'\n    \"\"\"\n\ndef longest_word_length(words):\n    \"\"\"Given a list of words, return the length of the longest word.\n    For example:\n    longest_word_length(['a', 'b', 'cde', 'fgh', 'i']) == 4\n    \"\"\"\n\ndef longest_word_starting_with(words, letter):\n    \"\"\"Given a list of words and a letter, return the longest word that starts\n    with the given letter.\n    For example:\n    longest_word_starting_with(['a', 'b', 'cde', 'fgh', 'i'], 'a') == 'a'\n    longest_word_starting_with(['a',", "\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))\n", "#     if n <= 0:\n#         return 0\n#     elif n == 1:\n#         return 1\n#     elif n % 2 == 0:\n#         return 0\n#     elif n % 2 == 1:\n#         return n\n#     else:\n#         return 0\n\ndef digits(n):\n    if n <= 0:\n        return 0\n    else:\n        return sum([int(i) for i in str(n) if i.isdigit()])\n\ndef digits(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sum([int(i) for i in str(n) if i.isdigit()])\n\ndef digits(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sum([int(i) for i in str(n) if i.isdigit()])\n\ndef digits(n):\n    if n == 0:\n        return 0\n    else:\n        return sum([int(i) for i in str(n) if i.isdigit()])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"], ["\n#Code\ndef is_nested(string):\n    stack = []\n    for i in string:\n        if i == '[':\n            stack.append(i)\n        elif i == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return stack == []", "\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append('[' + stack[-1])\n        elif char == ']':\n            if stack[-1][0] == '[':\n                stack.pop()\n            else:\n                stack.append(']' + stack[-1])\n    return stack[-1] == '['\n\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "\n#solution\n    if '[' in string:\n        return True\n    if ']'.join(string.split(']')) in string:\n        return True\n    return False", "", ""], ["\ndef sum_square_digits(n):\n    \"\"\"Given a non-negative integer n,\n    return the sum of the squares of its digits.\n    Examples:\n    For n = 123 the output should be 1 + 4 + 9 + 81 = 193;\n    For n = 0 the output should be 0;\n    For n = 911 the output should be 123 + 92 + 12 + 121 = 984;\n    For n = 54 the output should be 1 + 81 + 64 = 113.\n\n    \"\"\"\n\ndef reverse_string(text):\n    \"\"\"You are given a string, you need to return a reversed string.\n    Examples:\n    For text = \"hello\" the output should be reverse_string(text) = \"olleh\";\n    For text = \"how are you?\" the output should be reverse_string(text) = \"? yreu hacow\";\n    For text = \"Greetings!\" the output should be reverse_string(text) = \"!sgniteerG\";\n\n    \"\"\"\n\ndef is_unique(text):\n    \"\"\"You are given a string.\n    You need to return True if the string is a palindrome.\n    A palindrome is a word or sentence that is the same way both forward and backward, ignoring special characters, is read.\n    Examples:\n    For text = \"abba\" the output should be is_unique(text) = True;\n    For text = \"abcd\" the output should be is_unique(text) = False;\n    For text = \"a\" the", "\n#     lst = [1.4,4.2,0]\n#     lst = [-2.4,1,1]\n    return sum(int(round(x**2)) for x in lst)\n\nsum_squares([1,2,3])\n\nsum_squares([1,4,9])\n\nsum_squares([1,3,5,7])\n\nsum_squares([1.4,4.2,0])\n\nsum_squares([-2.4,1,1])\n", "\nprint(sum_squares([1, 2, 3]))\n# 14\nprint(sum_squares([1, 4, 9]))\n# 98\nprint(sum_squares([1, 3, 5, 7]))\n# 84\nprint(sum_squares([1.4, 4.2, 0]))\n# 29\nprint(sum_squares([-2.4, 1, 1]))\n# 6\n", "\ndef sum_numbers(lst):\n    \"\"\"\n    You are given a list of numbers.\n    You need to return the sum of all the numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = [1,4,9] the output should be 13\n    For lst = [1,3,5,7] the output should be 16\n    For lst = [1.4,4.2,0] the output should be 6.6\n    For lst = [-2.4,1,1] the output should be 2.4\n\n    \"\"\"\n\ndef sum_digits(lst):\n    \"\"\"\n    You are given a list of numbers.\n    You need to return the sum of all the digits in the given list.\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = [1,4,9] the output should be 13\n    For lst = [1,3,5,7] the output should be 16\n    For lst = [1.4,4.2,0] the output should be 6.6\n    For lst = [-2.4,1,1] the output should be 4.4\n\n    \"\"\"\n\ndef is_in_range(lst, min_range, max_range):\n    \"\"\"\n    You are given a list of numbers and a range [min_range, max_range].\n    You need to check whether the given numbers are in the range.\n    If any of the numbers are", "\ndef sum_of_digits(n):\n    \"\"\"You are given a positive integer number.\n    You need to return the sum of all its digits.\n    Examples:\n    For n = 12345 the output should be 15\n    For n = 0 the output should be 0\n    For n = 987 the output should be 25\n    For n = 2000000001 the output should be 1\n    \"\"\"\n    return sum(int(x) for x in str(n))\n\ndef sum_digits(n):\n    \"\"\"You are given a positive integer number.\n    You need to return the sum of all its digits.\n    Examples:\n    For n = 12345 the output should be 15\n    For n = 0 the output should be 0\n    For n = 987 the output should be 25\n    For n = 2000000001 the output should be 1\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total\n\ndef digit_occurrence(n):\n    \"\"\"You are given a positive integer number.\n    You need to return the number of times each digit appears in it.\n    For example: 213 has the following digits: 1, 2, 3.\n    The digit 1 appears twice. The digit 2 appears once. The digit 3 appears once.\n    Examples:\n    For n = 12345 the output should be [1,2,3,4,5].\n    For"], ["\ndef check_if_last_char_is_a_letter(txt):\n    txt = txt.split()\n    if not txt:\n        return False\n    else:\n        txt = txt[-1]\n        return (bool(re.search(r'[a-z]', txt)) and not bool(re.search(r'\\W', txt)))\n\ncheck_if_last_char_is_a_letter(\"apple pie\")\ncheck_if_last_char_is_a_letter(\"apple pi e\")\ncheck_if_last_char_is_a_letter(\"apple pi e \")\ncheck_if_last_char_is_a_letter(\"\")\n# check_if_last_char_is_a_letter(\"apple pi e\") # False\n# check_if_last_char_is_a_letter(\"apple pi e \") # False\n# check_if_last_char_is_a_letter(\"\") # False\n\ndef check_if_last_char_is_a_letter(txt):\n    txt = txt.split()\n    if not txt:\n        return False\n    else:\n        txt = txt[-1]\n        return bool(re.search(r'[a-z]', txt)) and not bool(re.search(r'\\W', txt))\n\ncheck_if_last_char_is_a_letter(\"apple pie\")\ncheck_if_last_char_is_a_letter(\"apple pi e\")\ncheck_if_last_char_is_a_letter(\"apple pi e \")\ncheck_if_last_char_is_a_letter", "\ndef check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    return txt[-1].isalpha() and not txt[-1].isalnum()\n\nprint(check_if_last_char_is_a_letter(\"apple pie\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))\nprint(check_if_last_char_is_a_letter(\"\"))", "\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and not txt[-1].isalnum()\n\nprint(check_if_last_char_is_a_letter(\"apple pie\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))\nprint(check_if_last_char_is_a_letter(\"\"))\n", "# Solution using regex\n# import re\n# def check_if_last_char_is_a_letter(txt):\n#     if re.search('[a-zA-Z]$', txt):\n#         return False\n#     else:\n#         return True\n\n# Solution using for loop\ndef check_if_last_char_is_a_letter(txt):\n    # Check if last character is alphabetical\n    for char in txt[-1:]:\n        if not char.isalpha():\n            return False\n\n    # Check if last character is not part of a word\n    for char in txt[-1:]:\n        if char.isspace() or char == \" \":\n            return False\n\n    return True", "\ndef check_if_last_char_is_a_letter(txt):\n    return txt and txt[-1].isalpha() and not txt.strip().endswith(' ')\n\nprint(check_if_last_char_is_a_letter(\"apple pie\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))\nprint(check_if_last_char_is_a_letter(\"\"))"], ["", "\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\ndef can_arrange_sorted(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will contain\n    duplicate values.\n\n    Examples:\n    can_arrange_sorted([1,2,4,3,5]) = 3\n    can_arrange_sorted([1,2,3]) = 1\n    \"\"\"\n\ndef can_arrange_unsorted(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange_unsorted([1,2,4,3,5]) = 3\n    can_arrange_unsorted([1,2,3]) = -1\n    \"\"\"\n\ndef can_arrange_sorted_unsorted(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will contain\n    duplicate values.\n\n    Examples:\n    can_arrange_sorted_unsorted([1,2,4,3,5]) = 3\n    can_arrange_sorted_unsorted([1,2,3]) = 1\n    \"\"\"\n\ndef can_arrange_unsorted_sorted(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange_unsorted_sorted([1,2,4,3,5]) = 3\n    can_arrange_unsorted_sorted([1,2,3])", "\n# Write a function which will return the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given array will not contain\n# duplicate values.\n#\n# Examples:\n# can_arrange([1,2,4,3,5]) = 3\n# can_arrange([1,2,3]) = -1\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    # Check for empty list\n    if len(arr) == 0:\n        return -1\n\n    # Check for single value\n    if len(arr) == 1:\n        return 0\n\n    # Check for list of length 2\n    if len(arr) == 2:\n        if arr[0] <= arr[1]:\n            return 0\n        else:\n            return -1\n\n    # Check for list of length 3\n    if len(arr) == 3:\n        if arr[0] <= arr[1]:\n            if arr[1] <= arr[2]:\n                return 0\n            else:\n                return 1\n        else:\n            if arr[1] <= arr[2]:\n                return 1\n            else:\n                return 2\n\n    # Check for list of length 4\n    if len(arr) == 4:\n        if arr[0] <= arr[1]:\n            if arr[1] <= arr[2]:\n                if arr[2] <= arr[3]:\n                    return 0\n                else:\n                    return 1\n            else:\n                if arr[2", ""], ["", "\n# Tests\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\nprint(largest_smallest_integers([]))\nprint(largest_smallest_integers([0]))\n", "\n#     return max(lst, key=abs), min(lst, key=abs)\n\ndef largest_smallest_integers2(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    lst_abs = [abs(i) for i in lst]\n    max_num = max(lst_abs)\n    min_num = min(lst_abs)\n    if max_num < 0 and min_num < 0:\n        return (None, None)\n    elif max_num < 0:\n        return (None, min_num)\n    elif min_num < 0:\n        return (max_num, None)\n    else:\n        return (max_num, min_num)\n\ndef largest_smallest_integers3(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) ==", "\n# +\n# Tests\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7])) # should be (None, 1)\nprint(largest_smallest_integers([])) # should be (None, None)\nprint(largest_smallest_integers([0])) # should be (None, None)\n# -\n\n# ## 5.5\n#\n# Write a function that takes a string and returns the string, with the first and last characters removed. If the string is empty, return an empty string.\n#\n# Examples:\n#\n# ```\n# string_trim('Chocolate') # should return 'holoate'\n# string_trim('abc') # should return 'bc'\n# string_trim('') # should return ''\n# ```\n\n# +\n# Your implementation\n\ndef string_trim(string):\n    '''\n    Create a function that takes a string and returns the string, with the first and last characters removed. If the string is empty, return an empty string.\n\n    Examples:\n    string_trim('Chocolate') # should return 'holoate'\n    string_trim('abc') # should return 'bc'\n    string_trim('') # should return ''\n    '''\n\n# +\n# Tests\n\nprint(string_trim('Chocolate')) # should be 'holoate'\nprint(string_trim('abc')) # should be 'bc'\nprint(string_trim('')) # should be ''\n# -\n\n# ## 5.6\n#\n# Write a function that takes a list of strings and returns the number of strings in the list that are of length 2", "\ndef check_all_values_in_list(lst):\n    '''\n    Create a function that returns True if all values in a list are equal.\n    Otherwise, return False.\n\n    Examples:\n    check_all_values_in_list([1, 2, 3, 4, 5]) == False\n    check_all_values_in_list([1, 2, 3, 3, 3]) == True\n    check_all_values_in_list([]) == True\n    '''\n\ndef add_new_items_to_list(lst, new_items):\n    '''\n    Create a function that adds new items to a list.\n\n    Examples:\n    add_new_items_to_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    add_new_items_to_list([1, 2, 3], [4]) == [1, 2, 3, 4]\n    add_new_items_to_list([], [4]) == [4]\n    '''\n\ndef remove_items_from_list(lst, items):\n    '''\n    Create a function that removes items from a list.\n\n    Examples:\n    remove_items_from_list([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]\n    remove_items_from_list([1, 2, 3], [4]) == [1, 2, 3]\n    remove_items_from_list([], [4]) == []\n    '''\n\ndef find_length_of"], ["\ndef compare_one(a, b):\n    try:\n        if float(a) == float(b):\n            return None\n    except ValueError:\n        if a == b:\n            return None\n        else:\n            if float(a) > float(b):\n                return a\n            else:\n                return b\n", "\ndef compare_one(a, b):\n    if isinstance(a, float) or isinstance(a, int):\n        if isinstance(b, float) or isinstance(b, int):\n            if a == b:\n                return None\n            elif a > b:\n                return a\n            else:\n                return b\n        else:\n            return a\n    else:\n        return a\n\nprint(compare_one(1, 2.5))\nprint(compare_one(1, \"2,3\"))\nprint(compare_one(\"5,1\", \"6\"))\nprint(compare_one(\"1\", 1))\n\n# Question 2:\n# Create a function that takes two integer values and returns the sum\n# of those numbers. However, if the sum is between 15 and 20 it should\n# return 20. Write at least three test cases for your function.\n\ndef sum_of_two(a, b):\n    \"\"\"\n    Create a function that takes two integer values and returns the sum\n    of those numbers. However, if the sum is between 15 and 20 it should\n    return 20. Write at least three test cases for your function.\n\n    Examples:\n    sum_of_two(2, 3) \u279e 5\n    sum_of_two(1, 2) \u279e 3\n    sum_of_two(2, 1) \u279e 3\n    \"\"\"\n    sum = a + b\n    if sum > 15 and sum < 20:\n        return 20\n    else:\n        return sum\n\nprint(sum_of_two(2, 3))\nprint(sum_of_two(1, 2))\nprint(", "", "\ndef compare_one(a, b):\n    return b if a != b else None\n\nprint(compare_one(1, 2.5))\nprint(compare_one(1, \"2,3\"))\nprint(compare_one(\"5,1\", \"6\"))\nprint(compare_one(\"1\", 1))\n", "\ndef compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        return b if float(a) > float(b) else a\n    elif isinstance(a, str) and not isinstance(b, str):\n        return b if float(a) > b else a\n    elif not isinstance(a, str) and isinstance(b, str):\n        return a if a > float(b) else b\n    else:\n        return b if a > b else a"], ["\nif __name__ == \"__main__\":\n    print(is_equal_to_sum_even(4))\n    print(is_equal_to_sum_even(6))\n    print(is_equal_to_sum_even(8))\n", "\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    is_equal_to_sum_odd(4) == False\n    is_equal_to_sum_odd(6) == True\n    is_equal_to_sum_odd(8) == False\n    \"\"\"\n\ndef is_equal_to_sum_prime(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive prime numbers\n    Example\n    is_equal_to_sum_prime(4) == False\n    is_equal_to_sum_prime(6) == True\n    is_equal_to_sum_prime(8) == False\n    \"\"\"\n\ndef is_equal_to_sum_all(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive numbers\n    Example\n    is_equal_to_sum_all(4) == True\n    is_equal_to_sum_all(6) == True\n    is_equal_to_sum_all(8) == True\n    \"\"\"\n\ndef sum_of_numbers(n):\n    \"\"\"Calculate the sum of the given number n\n    Example\n    sum_of_numbers(4) == 10\n    sum_of_numbers(6) == 16\n    sum_of_numbers(8) == 24\n    \"\"\"\n\ndef sum_of_primes(n):\n    \"\"\"Calculate the sum of the given number n\n    Example\n    sum_of_primes(4) == 14\n    sum_of_primes(6) == 22\n    sum_of_primes(8) == 30\n    \"\"\"\n\ndef sum_of_all_numbers(n):\n    \"\"\"Calculate the sum of the given number n\n    Example\n    sum_of_all_numbers(4) == 20\n    sum", "\ndef is_sum_of_3_squares(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of three square numbers\n    Example\n    is_sum_of_3_squares(3) == True\n    is_sum_of_3_squares(10) == False\n    is_sum_of_3_squares(25) == True\n    \"\"\"\n\ndef is_sum_of_4_cubes(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of four cube numbers\n    Example\n    is_sum_of_4_cubes(4) == True\n    is_sum_of_4_cubes(10) == False\n    is_sum_of_4_cubes(25) == True\n    \"\"\"\n\ndef is_sum_of_5_fourths(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of five fourths\n    Example\n    is_sum_of_5_fourths(5) == True\n    is_sum_of_5_fourths(10) == False\n    is_sum_of_5_fourths(25) == True\n    \"\"\"\n\ndef is_sum_of_6_sixths(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of six sixths\n    Example\n    is_sum_of_6_sixths(6) == True\n    is_sum_of_6_sixths(10) == False\n    is_sum_of_6_sixths(25) == True\n    \"\"\"\n\ndef is_sum_of_7_sevenths(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of seven sevenths\n    Example\n    is_sum_of_7_sevenths(7) == True\n    is_sum_of_7_sevenths(10) == False\n    is_sum_of_", "\ndef is_sum_of_squares(n):\n    \"\"\"\n    Evaluate whether the given number n is equal to the sum of the squares of its digits.\n    Example\n    is_sum_of_squares(225) == True\n    is_sum_of_squares(911) == True\n    is_sum_of_squares(95) == False\n    \"\"\"\n\ndef is_palindrome(n):\n    \"\"\"\n    Evaluate whether the given number n is a palindrome.\n    Example\n    is_palindrome(123) == True\n    is_palindrome(124) == False\n    is_palindrome(1221) == True\n    \"\"\"\n\ndef is_armstrong(n):\n    \"\"\"\n    Evaluate whether the given number n is an Armstrong number.\n    An Armstrong number is a number that is equal to the sum of its own digits to the power of the number of digits.\n    Example\n    is_armstrong(153) == True\n    is_armstrong(370) == True\n    is_armstrong(10) == False\n    \"\"\"\n\ndef is_palindrome_permutation(n):\n    \"\"\"\n    Evaluate whether the given number n is a permutation of a palindrome.\n    Example\n    is_palindrome_permutation(1221) == True\n    is_palindrome_permutation(123) == False\n    is_palindrome_permutation(1222) == False\n    \"\"\"\n\ndef is_prime(n):\n    \"\"\"\n    Evaluate whether the given number n is a prime.\n    Example\n    is_prime(13) == True\n    is_prime(4) == False\n    \"\"\"\n\ndef is_palindrome_prime(n):\n    \"\"\"\n    Evaluate whether the given number n is a palindromic prime.\n    A palindromic prime is a prime that reads the same forward and backward.\n    Example\n    is_palindrome_prime(21) == True\n    is_palindrome_", "#     return False\n    if n == 0:\n        return False\n    elif n < 0:\n        return False\n    elif n % 2 == 1:\n        return False\n    else:\n        evens = []\n        while n > 0:\n            evens.append(n % 2)\n            n = n // 2\n        return (sum(evens) == 4)\n\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    is_equal_to_sum_odd(5) == False\n    is_equal_to_sum_odd(7) == False\n    is_equal_to_sum_odd(9) == True\n    \"\"\"\n#     return False\n    if n == 0:\n        return False\n    elif n < 0:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        odds = []\n        while n > 0:\n            odds.append(n % 2)\n            n = n // 2\n        return (sum(odds) == 4)\n\n\ndef is_palindrome(n):\n    \"\"\"Evaluate whether the given number n is a palindrome\n    Examples\n    is_palindrome(12321) == True\n    is_palindrome(1221) == False\n    is_palindrome(121) == True\n    \"\"\"\n#     return False\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        s = str(n)\n        return (s == s[::-1])\n\n\ndef is_palindrome_v2(n):\n    \"\"\"Evaluate whether the given number n is a palindrome\n    Examples\n    is_palindrome_v2(12321) == True\n    is_palindrome_v2(1221) == False\n    is_palindrome_v"], ["", "\nif __name__ == \"__main__\":\n    print(special_factorial(4))", "", "\ndef special_factorial_sum(n):\n    \"\"\"The Brazilian special factorial sum is defined as:\n    special_factorial_sum(n) = n! * (n+1)! * (n+2)! * ... * (n+n)!\n    where n >= 0\n\n    For example:\n    >>> special_factorial_sum(4)\n    2610\n\n    The function will receive an integer as input and should return the special\n    factorial sum of this integer.\n    \"\"\"\n", "\ndef fibonacci(n):\n    \"\"\"The Fibonacci sequence is a series of numbers where each number is the sum\n    of the previous two numbers in the sequence.\n\n    For example:\n    >>> fibonacci(10)\n    55\n\n    The function will receive an integer as input and should return the Fibonacci\n    sequence of this integer.\n    \"\"\"\n\ndef fibonacci_number(n):\n    \"\"\"The Fibonacci number is the number in the Fibonacci sequence that is equal\n    to the sum of the previous two numbers in the sequence.\n\n    For example:\n    >>> fibonacci_number(10)\n    55\n\n    The function will receive an integer as input and should return the Fibonacci\n    number of this integer.\n    \"\"\"\n\ndef tribonacci(n):\n    \"\"\"The Tribonacci sequence is a series of numbers where each number is the\n    sum of the previous three numbers in the sequence.\n\n    For example:\n    >>> tribonacci(10)\n    1389537\n\n    The function will receive an integer as input and should return the Tribonacci\n    sequence of this integer.\n    \"\"\"\n\ndef tribonacci_number(n):\n    \"\"\"The Tribonacci number is the number in the Tribonacci sequence that is equal\n    to the sum of the previous three numbers in the sequence.\n\n    For example:\n    >>> tribonacci_number(10)\n    1389537\n\n    The function will receive an integer as input and should return the Tribonacci\n    number of this integer.\n    \"\"\"\n\ndef tribonacci_index(n):\n    \"\"\"The Tribonacci index is the number of times that the Tribonacci number\n    equals the index number of the Tribonacci sequence.\n\n    For example:\n    >>> tribonacci_index(10)\n    1389537\n\n    The function will receive an integer as input and should return the Tribonacci\n    index of this"], ["\ndef fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\")\n\ndef fix_spaces(text):\n    return text.replace(\" \", \"_\")\n\ndef is_palindrome(word):\n    \"\"\"\n    Given a word, return True if it is a palindrome. Otherwise, return False.\n\n    Examples:\n    is_palindrome('taco cat') == True\n    is_palindrome('radar') == False\n    \"\"\"\n\ndef is_palindrome(word):\n    return word == word[::-1]\n\ndef is_palindrome(word):\n    return word == word.lower()[::-1].lower()\n\ndef is_palindrome(word):\n    return word == word.lower() == word[::-1].lower()\n\ndef is_palindrome(word):\n    return word == word[::-1]\n\ndef is_palindrome(word):\n    if len(word) == 0:\n        return True\n    if word[0] != word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n\ndef is_palindrome(word):\n    if len(word) == 0:\n        return True\n    if word[0] != word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n\ndef is_palindrome(word):\n    if len(word) == 0:\n        return True\n    if word[0] != word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n\ndef is_palindrome(word):\n    if len(word) == 0:\n        return True\n    if word[0] != word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n\ndef is_palindrome(word):\n    if len(word) == 0:\n        return", "\ndef fix_spaces2(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces2(\"Example\") == \"Example\"\n    fix_spaces2(\"Example 1\") == \"Example_1\"\n    fix_spaces2(\" Example 2\") == \"_Example_2\"\n    fix_spaces2(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return re.sub(r\"\\s+\", \"_\", text).replace(\"  \", \"-\")\n\ndef fix_spaces3(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces3(\"Example\") == \"Example\"\n    fix_spaces3(\"Example 1\") == \"Example_1\"\n    fix_spaces3(\" Example 2\") == \"_Example_2\"\n    fix_spaces3(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return re.sub(r\"\\s+\", \"_\", text).replace(\"  \", \"-\")\n\nif __name__ == \"__main__\":\n    print(fix_spaces(\"Example\"))\n    print(fix_spaces2(\"Example\"))\n    print(fix_spaces3(\"Example\"))\n    print(fix_spaces(\"Example 1\"))\n    print(fix_spaces2(\"Example 1\"))\n    print(fix_spaces3(\"Example 1\"))\n    print(fix_spaces(\" Example 2\"))\n    print(fix_spaces2(\" Example 2\"))\n    print(fix_spaces3(\" Example 2\"))\n    print(fix_spaces(\" Example   3\"))\n    print(fix_spaces2(\" Example   3\"))\n    print(fix_spaces3(\" Example   3\"))\n", "\ndef sum_two_smallest_numbers(nums):\n    \"\"\"\n    Given an array of integers nums, return the sum of the two \n    smallest integers in the array. \n    You may assume that the array always has at least two elements.\n\n    sum_two_smallest_numbers([4, 5, 1, 6]) == 11\n    sum_two_smallest_numbers([13, 3, 19, 26, 15]) == 31\n    sum_two_smallest_numbers([5, 1, 3, 2]) == 9\n    \"\"\"\n\ndef sum_three(nums):\n    \"\"\"\n    Given an array nums of n integers, are there elements a, b, c in nums \n    such that a + b + c = 0? Find all unique triplets in the array which \n    gives the sum of zero.\n\n    Notice that the solution set must not contain duplicate triplets.\n\n    Example 1:\n    Input: nums = [-1,0,1,2,-1,-4]\n    Output: [[-1,-1,2],[-1,0,1]]\n\n    Example 2:\n    Input: nums = []\n    Output: []\n\n    Example 3:\n    Input: nums = [0]\n    Output: []\n\n    Constraints:\n        - 0 <= nums.length <= 3000\n        - -105 <= nums[i] <= 105\n\n    >>> sum_three([0, 1, 2, -1, -4])\n    [[-1, -1, 2], [-1, 0, 1]]\n    >>> sum_three([-1, 0, 1, 2, -1, -4])\n    [[-1, -1, 2], [-1, 0, 1]]\n    >>> sum_three([])\n    []\n    >>> sum_three([0", "\t...\n\n# Test case\nprint(fix_spaces(\"Example\"))\nprint(fix_spaces(\"Example 1\"))\nprint(fix_spaces(\" Example 2\"))\nprint(fix_spaces(\" Example   3\"))\n", "\ndef reverse_words(text):\n    \"\"\"\n    Given a string, reverse each word in the string\n    \"\"\"\n\ndef reverse_words_inplace(text):\n    \"\"\"\n    Given a string, reverse each word in the string\n    \"\"\"\n\ndef reverse_words_inplace_v2(text):\n    \"\"\"\n    Given a string, reverse each word in the string\n    \"\"\"\n\ndef reverse_words_inplace_v3(text):\n    \"\"\"\n    Given a string, reverse each word in the string\n    \"\"\"\n\ndef reverse_words_inplace_v4(text):\n    \"\"\"\n    Given a string, reverse each word in the string\n    \"\"\"\n\ndef reverse_words_inplace_v5(text):\n    \"\"\"\n    Given a string, reverse each word in the string\n    \"\"\"\n\ndef reverse_words_inplace_v6(text):\n    \"\"\"\n    Given a string, reverse each word in the string\n    \"\"\"\n\ndef reverse_words_inplace_v7(text):\n    \"\"\"\n    Given a string, reverse each word in the string\n    \"\"\"\n\ndef reverse_words_inplace_v8(text):\n    \"\"\"\n    Given a string, reverse each word in the string\n    \"\"\"\n\ndef reverse_words_inplace_v9(text):\n    \"\"\"\n    Given a string, reverse each word in the string\n    \"\"\"\n\ndef reverse_words_inplace_v10(text):\n    \"\"\"\n    Given a string, reverse each word in the string\n    \"\"\"\n\ndef reverse_words_inplace_v11(text):\n    \"\"\"\n    Given a string, reverse each word in the string\n    \"\"\"\n\ndef reverse_words_inplace_v12(text):\n    \"\"\"\n    Given a string, reverse each word in the string\n    \"\"\"\n\ndef reverse_words_inplace_v13(text):\n    \"\"\"\n    Given a string, reverse each word in the string\n    \"\"\"\n\ndef reverse_words"], ["\ndef file_name_check_2(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n", "", "", "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # your code here\n    import re\n    file_name = file_name.lower()\n    if file_name.find('.') != -1:\n        if len(file_name.split('.')[0]) > 3:\n            return \"No\"\n        elif len(file_name.split('.')[0]) == 0:\n            return \"No\"\n        elif", "\n#     # YOUR CODE HERE\n#     return ''\n# \n#     return file_name[0].isalpha() and file_name[1].isalpha() and file_name[2].isdigit() and file_name[3] == \".\" and (file_name[4:6] in ['txt', 'exe', 'dll']) and len(file_name) <= 7\n\n\ndef file_name_check(file_name):\n    \"\"\"\n    >>> file_name_check(\"example.txt\")\n    'Yes'\n    >>> file_name_check(\"1example.dll\")\n    'No'\n    >>> file_name_check(\"example.exe\")\n    'Yes'\n    >>> file_name_check(\"example.dll\")\n    'Yes'\n    >>> file_name_check(\"example.bat\")\n    'No'\n    \"\"\"\n    import re\n    pattern = r'^[a-zA-Z]+[0-9]{0,3}\\.[a-z]{3}$'\n    return 'Yes' if re.match(pattern, file_name) else 'No'\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"], ["\nlst = [1,2,3]\nlst2 = [-1,-5,2,-1,-5]\nlst3 = []\n\nsum_squares(lst)\nsum_squares(lst2)\nsum_squares(lst3)", "\tsum = 0\n    for num in lst:\n        if num%4==0:\n            sum += num**3\n        elif num%3==0 and num%4!=0:\n            sum += num**2\n        else:\n            sum += num\n    return sum\n", "", "\nif __name__ == \"__main__\":\n    lst = [-1,-5,2,-1,-5]\n    print(sum_squares(lst))", ""], ["", "\ndef prime_words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\nif __name__ == \"__main__\":\n    assert words_in_sentence(\"This is a test\") == \"is\"\n    assert words_in_sentence(\"lets go for swimming\") == \"go for\"\n    assert words_in_sentence(\"Hello World\") == \"\"\n    assert prime_words_in_sentence(\"This is a test\") == \"is\"\n    assert prime_words_in_sentence(\"lets go for swimming\") == \"go for\"\n    assert prime_words_in_sentence(\"Hello World\") == \"\"\n", "", "", ""], ["\n# Tests\nassert simplify(\"1/5\", \"5/1\") == True\nassert simplify(\"1/6\", \"2/1\") == False\nassert simplify(\"7/10\", \"10/2\") == False\nassert simplify(\"1/1\", \"1/1\") == True\nassert simplify(\"2/1\", \"1/1\") == True\nassert simplify(\"1/1\", \"2/1\") == True\nassert simplify(\"1/1\", \"1/2\") == False\nassert simplify(\"1/3\", \"1/6\") == True\nassert simplify(\"1/3\", \"2/3\") == False\nassert simplify(\"1/3\", \"3/2\") == False\nassert simplify(\"1/5\", \"2/5\") == True\nassert simplify(\"1/5\", \"3/5\") == True\nassert simplify(\"1/5\", \"4/5\") == False\nassert simplify(\"1/5\", \"5/5\") == True\nassert simplify(\"1/5\", \"6/5\") == False\nassert simplify(\"1/5\", \"7/5\") == False\nassert simplify(\"1/5\", \"8/5\") == False\nassert simplify(\"1/5\", \"9/5\") == False\nassert simplify(\"1/5\", \"10/5\") == False\nassert simplify(\"1/5\", \"11/5\") == False\nassert simplify(\"1/5\", \"12/5\") == False\nassert simplify(\"1/5\", \"13/5\") == False\nassert simplify(\"1/5\", \"14/5\") == False\nassert simplify(\"1/", "\ndef simplify(x, n):\n    if x == \"0\" or n == \"0\":\n        return False\n    x = Fraction(x)\n    n = Fraction(n)\n    a, b = x.numerator, x.denominator\n    c, d = n.numerator, n.denominator\n    if a/b == c/d:\n        return True\n    else:\n        return False\n\nprint(simplify(\"1/5\", \"5/1\"))\nprint(simplify(\"1/6\", \"2/1\"))\nprint(simplify(\"7/10\", \"10/2\"))\n", "\ndef test_simplify():\n    assert simplify(\"1/5\", \"5/1\") == True\n    assert simplify(\"1/6\", \"2/1\") == False\n    assert simplify(\"7/10\", \"10/2\") == False\n\nif __name__ == \"__main__\":\n    test_simplify()\n", "", ""], ["\ndef main():\n    import doctest\n    doctest.testmod(verbose=True)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef is_square(number):\n    \"\"\"\n    Write a function that returns whether the given number is a square.\n    A square number is an integer that is the square of any integer.\n\n    For example:\n    >>> is_square(100) == True\n    >>> is_square(101) == False\n    \"\"\"\n\ndef is_palindrome(number):\n    \"\"\"\n    Write a function that returns whether the given number is a palindrome.\n    A palindrome is a number that is the same as its reverse.\n\n    For example:\n    >>> is_palindrome(121) == True\n    >>> is_palindrome(-121) == False\n    >>> is_palindrome(100021) == True\n    \"\"\"\n\ndef is_palindrome_recursive(number):\n    \"\"\"\n    Write a function that returns whether the given number is a palindrome.\n    A palindrome is a number that is the same as its reverse.\n\n    For example:\n    >>> is_palindrome_recursive(121) == True\n    >>> is_palindrome_recursive(-121) == False\n    >>> is_palindrome_recursive(100021) == True\n    \"\"\"\n\ndef sum_digits(number):\n    \"\"\"\n    Write a function that returns the sum of the digits of the given number.\n\n    For example:\n    >>> sum_digits(1234) == 10\n    \"\"\"\n\ndef get_digits(number):\n    \"\"\"\n    Write a function that returns the digits of the given number.\n\n    For example:\n    >>> get_digits(1234) == [1, 2, 3, 4]\n    \"\"\"\n\ndef get_digits_recursive(number):\n    \"\"\"\n    Write a function that returns the digits of the given number.\n\n    For example:\n   ", "\ndef count_evens(nums):\n    \"\"\"\n    Write a function which counts the number of even numbers in the given list.\n\n    >>> count_evens([1, 2, 3, 4, 5, 6]) == 3\n    \"\"\"\n\ndef remove_consecutive_repeating_chars(s):\n    \"\"\"\n    Write a function which removes all consecutive repetitive characters from the given string.\n\n    >>> remove_consecutive_repeating_chars(\"abccba\") == \"abc\"\n    >>> remove_consecutive_repeating_chars(\"abccbaab\") == \"abcba\"\n    \"\"\"\n\ndef check_palindrome(s):\n    \"\"\"\n    Write a function which checks if the given string is a palindrome.\n    A palindrome is a word or phrase that is spelled the same way both forward and backward, ignoring punctuation.\n    For example:\n    >>> check_palindrome(\"abcba\")\n    True\n    >>> check_palindrome(\"abccbaab\")\n    True\n    >>> check_palindrome(\"abccbaab\")\n    True\n    >>> check_palindrome(\"abccba\")\n    False\n    \"\"\"\n\ndef is_subsequence(s1, s2):\n    \"\"\"\n    Write a function which checks if the given string is a subsequence of the given string.\n    The subsequence is a sequence that appears in the given string but not necessarily contiguous.\n    For example:\n    >>> is_subsequence(\"abccba\", \"abccba\")\n    True\n    >>> is_subsequence(\"abccba\", \"abcba\")\n    True\n    >>> is_subsequence(\"abccba\", \"acb\")\n    False\n    >>> is_subsequence(\"abccba\", \"abccbaab\")\n    False\n    \"\"\"\n\ndef find_largest_sum_subarray(nums):\n    \"\"\"\n   ", "", ""], ["\n# This function takes an array of numbers as input and returns the number of\n# elements in the array that are greater than 10 and both first and last\n# digits of a number are odd (1, 3, 5, 7, 9).\ndef specialFilter(nums):\n    # Create a variable to store the number of elements in the array that are\n    # greater than 10 and both first and last digits of a number are odd.\n    result = 0\n    # Loop through the array.\n    for num in nums:\n        # If the number is greater than 10 and both the first and last digits\n        # of the number are odd, then add 1 to the result.\n        if num > 10 and num % 10 > 0 and num % 10 % 2 == 1:\n            result += 1\n    # Return the number of elements in the array that are greater than 10 and\n    # both first and last digits of a number are odd.\n    return result\n", "\ndef findMax(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the largest number of the array.\n    For example:\n    findMax([1, 2, 3, 4, 5]) => 5\n    findMax([21, 2, 10, 15, 24, 30]) => 30\n    \"\"\"\n\ndef findMin(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the smallest number of the array.\n    For example:\n    findMin([1, 2, 3, 4, 5]) => 1\n    findMin([21, 2, 10, 15, 24, 30]) => 2\n    \"\"\"\n\ndef makeNegative(nums):\n    \"\"\"Write a function that takes an array of numbers as input and \n    returns an array of numbers where each negative number is replaced by \n    its positive equivalent.\n    For example:\n    makeNegative([-1, -2, -3]) => [1, 2, 3]\n    makeNegative([1, -2, -3, 4]) => [1, 2, 3, 4]\n    \"\"\"\n\ndef multiply(nums):\n    \"\"\"Write a function that takes an array of numbers as input and \n    returns the product of all the numbers.\n    For example:\n    multiply([1, 2, 3]) => 6\n    multiply([1, 2, 3, 4, 5]) => 120\n    \"\"\"\n\ndef sumArray(nums):\n    \"\"\"Write a function that takes an array of numbers as input and \n    returns the sum of all the numbers.\n    For example:\n    sumArray([1, 2, 3]) =>", "", "\ndef removeKFromList(nums, k):\n    \"\"\"Write a function that takes an array of numbers as input and a number k \n    as an input and returns a new array that contains all the numbers in the \n    input array except for the kth element.\n    For example:\n    removeKFromList([3, 4, 5, 6, 7], 2) => [3, 4, 6, 7]\n    removeKFromList([3, 4, 5, 6, 7], 4) => [3, 4, 5, 6]\n    \"\"\"\n\ndef isPalindrome(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    true if the numbers in the input array form a palindrome and false if not. \n    A palindrome is a word, number or other sequence of characters which \n    reads the same backward as forward, e.g. 12321.\n    For example:\n    isPalindrome([1, 2, 3, 2, 1]) => True\n    isPalindrome([1, 2, 3, 4]) => False\n    \"\"\"\n\ndef isPrime(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    true if all the numbers in the input array are prime and false if not. \n    A prime number is a number that is only divisible by itself and 1. \n    For example:\n    isPrime([2, 3, 5, 7, 11]) => True\n    isPrime([11, 13, 17, 19]) => False\n    \"\"\"\n\ndef getKthLargest(nums, k):\n    \"\"\"Write a function that takes an array of numbers and a number k as an input", "\ndef sumOfDigits(n):\n    \"\"\"Write a function that returns the sum of the digits of a positive \n    integer. For example:\n    sumOfDigits(5) => 15\n    sumOfDigits(10) => 21\n    sumOfDigits(99) => 187\n    \"\"\"\n\ndef sumOfDivisors(n):\n    \"\"\"Write a function that returns the sum of all positive divisors of a \n    number. For example:\n    sumOfDivisors(10) => 45\n    sumOfDivisors(1) => 1\n    sumOfDivisors(9) => 36\n    \"\"\"\n\ndef sumOfEvenFibonacciNumbers(n):\n    \"\"\"Write a function that returns the sum of the even numbers in the Fibonacci \n    sequence that are less than or equal to a given number. For example:\n    sumOfEvenFibonacciNumbers(10) => 10\n    sumOfEvenFibonacciNumbers(15) => 28\n    sumOfEvenFibonacciNumbers(100) => 182\n    \"\"\"\n\ndef sumOfPrimes(n):\n    \"\"\"Write a function that returns the sum of the primes less than or equal to a \n    given number. For example:\n    sumOfPrimes(10) => 17\n    sumOfPrimes(100) => 1060\n    \"\"\"\n\ndef sumOfMultiplesOf3And5(n):\n    \"\"\"Write a function that returns the sum of all multiples of 3 or 5 \n    (larger than 0) that are less than or equal to a given number. For example:\n    sumOfMultiplesOf3And5(10) => 23\n    sumOfMultiplesOf3And5(1000"], ["", "", "#     n = 5\n#     n = 2\n#     n = 1\n#     n = 4\n#     n = 10\n#     n = 100\n#     n = 1000\n    arr = []\n    for i in range(1, n+1):\n        arr.append(i*i-i+1)\n    max_triples = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if arr[i]+arr[j]+arr[k] % 3 == 0:\n                    max_triples += 1\n    return max_triples\n\nif __name__ == '__main__':\n    for i in range(1000, 10000):\n        print(get_max_triples(i))", "\nif __name__ == \"__main__\":\n    print(get_max_triples(5))", "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n"], ["\nif __name__ == \"__main__\":\n    print(bf(\"Jupiter\", \"Neptune\"))\n    print(bf(\"Earth\", \"Mercury\"))\n    print(bf(\"Mercury\", \"Uranus\"))\n", "\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))\n", "\n# Tests\n\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Pluto\", \"Jupiter\"))", "", "\ndef find_path(graph, start, end):\n    '''\n    A graph is a data structure that represents a collection of connected objects,\n    or nodes. Each node is represented by an object. An edge is a connection\n    between two nodes.\n    Write a function that takes in a graph and two nodes as arguments, and returns\n    a tuple containing the shortest path from the first node to the second node.\n    The first item of the tuple should be the node that the path starts at, \n    and the second item should be the node that the path ends at. \n    The second item in the tuple should be the distance of the path.\n    If there is no path between the two nodes, the function should return a\n    tuple with the first item being the start node and the second item being the \n    end node.\n    Examples\n    find_path(graph, \"B\", \"C\") ==> (\"B\", \"C\", 2)\n    find_path(graph, \"B\", \"D\") ==> (\"B\", \"C\", 2)\n    find_path(graph, \"A\", \"C\") ==> (\"A\", \"B\", 1)\n    '''\n\ndef is_cyclic(graph):\n    '''\n    Write a function that takes a graph as argument and returns True if it contains\n    a cycle, or False if it does not. A cycle is defined as a path that starts and\n    ends at the same node. \n    Examples\n    is"], ["", "\ndef count_letters(string):\n    \"\"\"Write a function that accepts a string as a parameter\n    and returns a dictionary with the letters as keys\n    and the number of times that letter appears as a value.\n    For example:\n    assert count_letters(\"Hello\") => {\"H\": 1, \"e\": 1, \"l\": 3, \"o\": 1}\n    \"\"\"\n\ndef longest_word(words):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    returns the longest word from the list.\n    If there are multiple words of the same length, return the last one.\n    You may assume that all words will have the same length.\n    For example:\n    assert longest_word([\"abc\", \"bb\", \"aba\", \"aaaa\"]) => \"aaaa\"\n    \"\"\"\n\ndef common_letters(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    and returns a dictionary with the letters as keys\n    and the number of times that letter appears in all of the strings as a value.\n    For example:\n    assert common_letters([\"abc\", \"ab\", \"aab\", \"aaa\", \"aab\"]) => {\"a\": 4}\n    \"\"\"\n\ndef find_even_numbers(lst):\n    \"\"\"Write a function that accepts a list of integers as a parameter,\n    and returns a list of all the even numbers in the list.\n    For example:\n    assert find_even_numbers([1, 2, 3, 4, 5, 6,", "", "", "\ndef sum_numbers(n):\n    \"\"\"Write a function that accepts an integer,\n    returns the sum of all the numbers from 0 to the number.\n    For example:\n    assert sum_numbers(2) => 3\n    assert sum_numbers(6) => 15\n    \"\"\"\n\ndef multiply_list(lst):\n    \"\"\"Write a function that accepts a list of integers as a parameter,\n    and multiplies all the integers in the list.\n    For example:\n    assert multiply_list([1, 2, 3]) => 6\n    assert multiply_list([5, 6, 7]) => 210\n    \"\"\"\n\ndef remove_duplicates(lst):\n    \"\"\"Write a function that accepts a list of integers as a parameter,\n    and removes all the duplicates from the list.\n    For example:\n    assert remove_duplicates([1, 2, 3]) => [1, 2, 3]\n    assert remove_duplicates([1, 1, 2, 2, 2, 3, 3, 3]) => [1, 2, 3]\n    \"\"\"\n\ndef sum_digits(n):\n    \"\"\"Write a function that accepts an integer as a parameter,\n    and returns the sum of all the digits in the number.\n    For example:\n    assert sum_digits(123) => 6\n    assert sum_digits(987654) => 21\n    \"\"\"\n\ndef sum_numbers_and_digits(n"], ["\ndef main():\n    \"\"\"Main method of the program.\"\"\"\n    n, x, y = get_values()\n    print(x_or_y(n, x, y))\n\nif __name__ == '__main__':\n    main()\n", "", "\ndef main():\n    \"\"\"Run sample x_or_y functions. Do not try to understand it\n    without trying it yourself first.\"\"\"\n    print(x_or_y(7, 34, 12))\n    print(x_or_y(15, 8, 5))\n\n\nif __name__ == \"__main__\":\n    main()\n", "", "#%%\n    if n < 2:\n        return \"The number must be positive!\"\n    elif n == 2 or n == 3:\n        return x\n    elif n % 2 == 0 or n % 3 == 0:\n        return y\n    else:\n        for i in range(5, int(n ** 0.5) + 1, 6):\n            if n % i == 0 or n % (i + 2) == 0:\n                return y\n        return x"], ["\ndef is_palindrome(word):\n    '''\n    Given a word, return true if it is a palindrome, false otherwise.\n\n    is_palindrome('kayak') == True\n    is_palindrome('radar') == False\n    is_palindrome('tacocat') == True\n    is_palindrome('123454321') == True\n    is_palindrome('123454322') == False\n    is_palindrome('madam') == False\n    is_palindrome('palindrome') == True\n    is_palindrome('not a palindrome') == False\n    is_palindrome('') == True\n    '''\n\ndef is_vowel(letter):\n    '''\n    Given a letter, return True if it is a vowel, False otherwise.\n\n    is_vowel('a') == True\n    is_vowel('b') == False\n    is_vowel('A') == True\n    is_vowel('1') == False\n    '''\n\ndef longest_word(sentence):\n    '''\n    Given a sentence, return the longest word.\n\n    longest_word('a b c d e') == 'e'\n    longest_word('a b c') == 'c'\n    longest_word('a b c d e f g') == 'g'\n    '''\n\ndef palindrome_index(sentence):\n    '''\n    Given a sentence, return the index of the first character that is not a\n    palindrome.\n\n    palindrome_index('a b c d e') == 0\n    palindrome_index('a b c d e f') == 1\n    palindrome_index('a b c d e f g') == 2\n    palindrome_index('abcde') ==", "\ndef find_the_odd_int(lst):\n    '''\n    Given a list, find the int that appears an odd number of times.\n    Return None if there are no odd numbers in the list.\n\n    find_the_odd_int([20, 1, -1, 2, -2, 3, 3, 5, 5, -5]) == -1\n    find_the_odd_int([20, 1, 1, 2, 3, 3, 5, 5]) == 1\n    find_the_odd_int([2, 2, 2, -2, 3, 3]) == 2\n    find_the_odd_int([0]) == None\n    find_the_odd_int([-9, -9, -9, 1, 2, 2, 3]) == None\n    '''\n\ndef make_out_word(lst):\n    '''\n    Given a list of ints, return the same list ordered so that all\n    the even ints appear before all the odd ints.\n\n    make_out_word([1, 2, 3, 4, 5, 6]) == [1, 3, 5, 2, 4, 6]\n    make_out_word([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == [2, 4, 6, 8, 10, 12, 14, 16, 18", "#    print(lst)\n#    print(type(lst))\n#    print(lst[0])\n#    print(type(lst[0]))\n#    print(lst[1])\n#    print(type(lst[1]))\n#    print(lst[2])\n#    print(type(lst[2]))\n#    print(lst[3])\n#    print(type(lst[3]))\n    sum=0\n    if lst == []:\n        return sum\n    for x in lst:\n        if (x%2 == 1) and (x > 0):\n            sum=sum+x*x\n    return sum\n\nprint(double_the_difference([]))\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\nprint(double_the_difference([1, 4, 5, 9, 6, 3, 10, 1, 1]))\n\n#print(double_the_difference([1, 4, 5, 9, 6, 3, 10, 1, 1]))", "#     return sum(x**2 for x in lst if x%2 != 0) if lst else 0\n    return sum(x for x in lst if x%2 != 0) if lst else 0\n\n\n# +\n# Test cases:\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\n\n# -\n\n# ## Problem 4\n#\n#\n# The **collatz conjecture** is a conjecture in mathematics that concerns a sequence defined as follows:\n#\n#     start with any positive integer n\n#     if n is even, divide by 2\n#     if n is odd, multiply by 3 and add 1\n#\n# The conjecture is that no matter how many times you repeat the above steps, you will always eventually reach 1.\n#\n# For example, starting with 13, you could repeat the above steps six times to get to 1:\n#\n#     13 -> 40 -> 20 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1\n#\n# It can be shown that for every starting number, eventually it will reach 1.\n#\n# Given an integer n, return the number of steps required to reach 1.\n#\n# If n is <= 0, return 0.\n#\n#\n#\n\n# +\ndef collatz_sequence(n):\n    '''\n   ", "\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))10\n0\n81\n0"], ["\n#     return [abs(guess[i] - game[i]) for i in range(len(guess))]\n    \n    return list(map(lambda x,y:abs(x-y),guess,game))", "", "\ndef compare_with_tails(game,guess):\n    \"\"\"This is a great example of a problem that is often solved with a \"tail recurse\" approach.\n    The idea is to reduce the problem into a smaller subproblem that can be solved iteratively.\n    The smaller problem is then solved recursively.\n    If the smaller problem is solved recursively, then we can use that solution for the larger problem.\n    \n    The main idea is that for each guess, we need to look at the results of all the matches that were\n    previously made. We can do this by iterating backwards through the guess array and keeping track\n    of the current score we are looking at.\n    \n    The algorithm will be as follows:\n    1) Create a new array with the same length as the guess array\n    2) Iterate backwards through the guess array, keeping track of the current score\n    3) Start a for loop that iterates through the previous scores, starting at the next score (i+1)\n    4) If the current score is the same as the previous score, increment the counter by 1\n    5) If the current score is different from the previous score, set the counter to 0\n    6) Add the counter to the new array at the current index\n    7) If we've reached the beginning of the guess array, return the new array\n    \n    You can find more information on tail recursion", "", ""], ["", "", "\nStrongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n", "", "\ndef Print_Sorted_Words(text):\n    \"\"\"You will be given a text with words separated by spaces, where each word\n    is at least 3 characters long. You have to sort the words in alphabetical order\n    and print the sorted words one by one.\n    Example:\n    for Print_Sorted_Words(\"aa bb cc dd ee ff gg hh ii jj kk\") == \"aa bb cc dd ee ff gg hh ii jj kk\"\n    \"\"\"\n\ndef Count_Digits(n):\n    \"\"\"You will be given an integer. You have to count the number of digits in it.\n    For example, if you are given 123, the answer is 3. If you are given 1230,\n    the answer is 4.\n    Example:\n    for Count_Digits(123) == 3\n    for Count_Digits(1230) == 4\n    \"\"\"\n\ndef Count_Words(text):\n    \"\"\"You will be given a text with words separated by spaces. You have to count\n    the number of words in it.\n    Example:\n    for Count_Words(\""], ["", "#     if len(a) != len(b):\n#         return False\n#     a = a.lower()\n#     b = b.lower()\n#     for i in range(len(a)):\n#         if a[i] == b[0]:\n#             for j in range(len(b)):\n#                 if a[(i+j)%len(a)] != b[j]:\n#                     break\n#             else:\n#                 return True\n#     return False\n    if len(a) != len(b):\n        return False\n    a = a.lower()\n    b = b.lower()\n    for i in range(len(a)):\n        if a[i] == b[0]:\n            if a.find(b[1:]) != -1:\n                return True\n    return False\n\n\ncycpattern_check(\"abcd\",\"abd\")\ncycpattern_check(\"hello\",\"ell\")\ncycpattern_check(\"whassup\",\"psus\")\ncycpattern_check(\"abab\",\"baa\")\ncycpattern_check(\"efef\",\"eeff\")\ncycpattern_check(\"himenss\",\"simen\")\n", "\n# Solution\n\ndef cycpattern_check(a, b):\n    if len(a) != len(b):\n        return False\n    for i in range(len(a)):\n        if b[i] == a[i] or b[i] == a[len(a)-i-1]:\n            return True\n    return False\n\n# Tests\n\nprint(cycpattern_check(\"abcd\", \"abd\"))\nprint(cycpattern_check(\"hello\", \"ell\"))\nprint(cycpattern_check(\"whassup\", \"psus\"))\nprint(cycpattern_check(\"abab\", \"baa\"))\nprint(cycpattern_check(\"efef\", \"eeff\"))\nprint(cycpattern_check(\"himenss\", \"simen\"))", "", "\ndef knapsack(w,v,W):\n    \"\"\"You are given a knapsack capacity W and a list of items (value,weight). Find out the maximum value you can put in the knapsack.\n\n    knapsack([1,2,3,5,6], [2,4,6,8,10], 10) => 22\n    knapsack([2,3,4,5,7], [3,6,8,9,12], 10) => 32\n    knapsack([3,4,5,7,8], [1,2,3,4,5], 10) => 13\n    knapsack([5,6,7,8,9], [1,2,3,4,5], 10) => 22\n    knapsack([1,2,3,4,5], [1,2,3,4,5], 10) => 15\n\n    \"\"\"\n\ndef knapsack_with_unlimited_weight(w,v,W):\n    \"\"\"You are given a knapsack capacity W and a list of items (value,weight). Find out the maximum value you can put in the knapsack.\n\n    knapsack([1,2,3,5,6], [2,4,6,8,10], 10) => 22\n    knapsack([2,3,4,5,7], [3,6,8,9,12], 10) => 32\n    knapsack([3,4,5,7,8], [1,2,"], ["\n# The following function is used in the next problem\ndef get_digit(n, digit):\n    \"\"\"Given a number and a digit. return the digit\n\n    Example:\n        get_digit(35231, 0) ==> 3\n        get_digit(35231, 1) ==> 5\n    \"\"\"\n\n\ndef find_lucky_number(lst):\n    \"\"\"Given a list of integers. return the lucky number. A lucky number is a number that has the same digits as the next number, but in a different order.\n\n     Example:\n        find_lucky_number([123, 456, 789, 111]) ==> 111\n\n    Hint:\n        Use the function get_digit from above to find the digit at a position in a number.\n\n    \"\"\"\n\n\n# The following function is used in the next problem\ndef get_digit_count(n):\n    \"\"\"Given an integer. return the number of digits in the integer.\n\n     Example:\n        get_digit_count(123) ==> 3\n        get_digit_count(99999) ==> 5\n    \"\"\"\n\n\ndef get_digits(n):\n    \"\"\"Given an integer. return a list of the digits in the integer.\n\n    Hint:\n        Use the function get_digit from above to find the digit at a position in a number.\n    \"\"\"\n\n\ndef is_armstrong_number(n):\n    \"\"\"Given an integer. return True if it is an armstrong number, False otherwise. An armstrong number is a number that is the sum of it's own digits raised to the power of the number of digits.\n\n    Example:\n        is_armstrong_number(153) ==> True\n        is_armstrong_number(1234) ==> False\n    \"\"\"\n\n\ndef is_palindrome(num):\n    \"\"\"Given an integer. return True if it is a palindrome, False otherwise.\n\n    Example:\n        is_palindrome(123) ==> True\n        is_pal", "# YOUR CODE GOES HERE\n\n\nprint(even_odd_count(123))\nprint(even_odd_count(-12))\n", "", "", "\ndef is_palindrome(word):\n    \"\"\"Return True if word is a palindrome, False otherwise.\n\n     Example:\n        is_palindrome('racecar') ==> True\n        is_palindrome('racecar') ==> False\n    \"\"\"\n\ndef check_for_palindromes(sentence):\n    \"\"\"Return True if there is a palindrome in the sentence.\n\n     Example:\n        check_for_palindromes('Never Odd Or Even') ==> True\n        check_for_palindromes('Never Odd Or Even') ==> False\n    \"\"\"\n\ndef word_count(sentence):\n    \"\"\"Return a dictionary of words in the sentence with the count of each word.\n\n     Example:\n        word_count('Never Odd Or Even') ==> {'odd': 1, 'even': 1, 'never': 1}\n    \"\"\"\n\ndef most_common_word(sentence):\n    \"\"\"Return the most common word in the sentence.\n\n     Example:\n        most_common_word('Never Odd Or Even') ==> 'even'\n    \"\"\"\n\ndef letter_frequency(sentence):\n    \"\"\"Return a dictionary of each letter with the count of that letter.\n\n     Example:\n        letter_frequency('Never Odd Or Even') ==> {'e': 2, 'n': 1, 'r': 1, 'o': 3, 't': 1, 'v': 1}\n    \"\"\"\n\ndef longest_word(sentence):\n    \"\"\"Return the longest word in the sentence.\n\n     Example:\n        longest_word('Never Odd Or Even') ==> 'Odd'\n    \"\"\"\n\ndef reverse_word(word):\n    \"\"\"Return a string that is the reverse of the input word.\n\n     Example:\n        reverse_word('never') ==> 'never'\n    \"\"\"\n\ndef reverse_sentence(sentence):\n    \"\"\"Return a string that is the reverse of the input sentence.\n\n     Example:\n        reverse_sentence('never odd or even') ==> 'sien dna odd nve'\n    \"\"\"\n\ndef is_pangram(sentence):\n    \"\"\"Return True if the"], ["", "", "\n# O(N^2)\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3999\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n\n# O(N)\ndef int_to_roman_v2(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3999\n\n    Examples:\n    >>> int_to_roman_v2(19) == 'xix'\n    >>> int_to_roman_v2(152) == 'clii'\n    >>> int_to_roman_v2(426) == 'cdxxvi'\n    \"\"\"\n\n# O(N)\ndef int_to_roman_v3(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3999\n\n    Examples:\n    >>> int_to_roman_v3(19) == 'xix'\n    >>> int_to_roman_v3(152) == 'clii'\n    >>> int_to_roman_v3(426) == 'cdxxvi'\n    \"\"\"\n\n# O(N)\ndef int_to_roman_v4(number):\n    \"\"\"\n    Given a positive integer, obtain its roman num", "\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral, return the integer equivalent.\n    Restrictions: 'i', 'x', 'c', 'm', each occur exactly once, in order.\n\n    Examples:\n    >>> mini_roman_to_int('xx') == 20\n    >>> mini_roman_to_int('iii') == 3\n    >>> mini_roman_to_int('mmmm') == 3000\n    \"\"\"\n\ndef is_palindrome(string):\n    \"\"\"\n    Given a string, return True if it is a palindrome.\n    Restriction: Ignore the spaces in the string.\n\n    Examples:\n    >>> is_palindrome('123456789') == True\n    >>> is_palindrome('123456788') == False\n    >>> is_palindrome('1234 56789') == False\n    >>> is_palindrome('123456789 ') == False\n    \"\"\"\n\ndef list_to_string(my_list):\n    \"\"\"\n    Given a list of integers, return the string that would be printed\n    if it was printed out.\n\n    Examples:\n    >>> list_to_string([1, 2, 3]) == '1 2 3'\n    >>> list_to_string([]) == ''\n    \"\"\"\n\ndef string_to_list(string):\n    \"\"\"\n    Given a string, return a list of integers that would be printed\n    if it was printed out.\n\n    Examples:\n    >>> string_to_list('1 2 3') == [1, 2, 3]\n    >>> string_to_list('1 2') == [1, 2]\n    >>> string_to_list('1') == [1]\n    \"\"\"\n", "\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, return the integer value of it.\n    Restrictions: 1 <= len(roman_numeral) <= 400\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3999\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n\ndef roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, return the integer value of it.\n    Restrictions: 1 <= len(roman_numeral) <= 400\n\n    Examples:\n    >>> roman_to_int('xix') == 19\n    >>> roman_to_int('clii') == 152\n    >>> roman_to_int('cdxxvi') == 426\n    \"\"\"\n"], ["\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a closed figure formed by connecting a finite number of\n    line segments to form a loop.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n\ndef is_right_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right triangle, False otherwise.\n    A right triangle is a triangle with all angles at right angles.\n    Example:\n    is_right_triangle(3, 4, 5) == False\n    is_right_triangle(1, 2, 3) == False\n    '''\n\ndef is_equilateral(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an equilateral triangle, False otherwise.\n    An equilateral triangle is a triangle with all three sides being equal.\n    Example:\n    is_equilateral(3, 4, 5) == False\n    is_equilateral(1, 2, 3) == False\n    '''\n\ndef is_isosceles(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an isosceles triangle, False otherwise.\n    An isosceles triangle is a triangle with at least two sides being equal.\n    Example:\n    is_isosceles(3, 4, 5) == False\n    is_isosceles(1, 2, 3) == True\n    '''\n\ndef", "\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    A triangle is a polygon with three edges meeting at vertices.\n    The sum of the lengths of any two sides of a triangle is always greater than\n    the length of the third side.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n\ndef is_equilateral_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an equilateral triangle, False otherwise.\n    An equilateral triangle is a triangle in which all three sides are equal.\n    Example:\n    is_equilateral_triangle(3, 3, 3) == True\n    is_equilateral_triangle(1, 2, 3) == False\n    '''\n\ndef is_isosceles_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an isosceles triangle, False otherwise.\n    An isosceles triangle is a triangle in which exactly two sides are equal.\n    Example:\n    is_isosceles_triangle(3, 4, 4) == True\n    is_isosceles_triangle(1, 2, 3) == False\n    '''\n\ndef is_scalene_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a scalene triangle, False otherwise.\n    A scalene triangle is a triangle in which all three sides are different.\n    Example:\n    is_scalene_", "\ndef prime(n):\n    '''\n    Given a number, return True if it is prime, False otherwise.\n    A prime number is a number that is only divisible by 1 and itself.\n    Example:\n    prime(11) == True\n    prime(12) == False\n    '''\n\ndef palindrome(s):\n    '''\n    Given a string, return True if it is a palindrome, False otherwise.\n    A palindrome is a word, phrase, or sequence that reads the same backward\n    as forward, e.g., madam or nurses run.\n    Example:\n    palindrome(\"madam\") == True\n    palindrome(\"nurses run\") == False\n    '''\n\ndef is_palindrome(s):\n    '''\n    Given a string, return True if it is a palindrome, False otherwise.\n    A palindrome is a word, phrase, or sequence that reads the same backward\n    as forward, e.g., madam or nurses run.\n    Example:\n    is_palindrome(\"madam\") == True\n    is_palindrome(\"nurses run\") == False\n    '''\n\ndef is_armstrong_number(num):\n    '''\n    Given an integer, return True if it is an Armstrong number, False\n    otherwise. An Armstrong number is a number that is the sum of its own\n    digits each raised to the power of the number of digits.\n    Example:\n    is_armstrong_number(93210) == True\n    is_armstrong_number(153) == False\n    '''\n\ndef is_armstrong_number(num):\n    '''\n    Given an integer, return True if it is an Armstrong number, False\n    otherwise. An Armstrong number is a number that is the sum of its own\n    digits each raised to the power of the number of digits.\n    Example:\n    is_armstrong_number(93210", "\ndef find_next_permutation(x):\n    '''\n    Given a non-decreasing integer x, find the smallest number greater than x \n    that is a permutation of x. If there is no such number, return -1. The \n    permutation of x must use all the digits from 1 to x, but the ordering of \n    digits is not important.\n    Example:\n    find_next_permutation(123456) == 123564\n    find_next_permutation(32) == 312\n    find_next_permutation(45) == -1\n    '''\n\ndef find_common_factors(x, y):\n    '''\n    Given two non-negative integers x and y, find their common factors. \n    Return a list of non-negative integers that is a common factor of x and y.\n    Example:\n    find_common_factors(24, 36) == [2, 3]\n    find_common_factors(3, 6) == [1, 2, 3, 6]\n    '''\n\ndef is_palindrome(x):\n    '''\n    Given a non-negative integer x, return True if x is a palindrome. \n    A palindrome is a number that remains the same when reversed. \n    Example:\n    is_palindrome(12321) == True\n    is_palindrome(1234) == False\n    '''\n\ndef is_palindrome_iterative(x):\n    '''\n    Given a non-negative integer x, return True if x is a palindrome. \n    A palindrome is a number that remains the same when reversed. \n    Example:\n    is_palindrome_iterative(12321) == True\n    is_palindrome_iterative(1234) == False\n    '''\n\ndef is_palindrome_recursive(x):\n    '''", "\ndef prime_number(num):\n    '''\n    Given an integer, return True if it's a prime number. False otherwise.\n    A prime number is a whole number greater than 1 that cannot be divided\n    by any number other than 1 and itself.\n    Example:\n    prime_number(3) == True\n    prime_number(11) == True\n    prime_number(12) == False\n    '''\n\ndef power(base, exponent):\n    '''\n    Given the base and exponent, return the base to the exponent power.\n    If the exponent is a negative number, then return the reciprocal\n    of the base to the absolute value of the exponent power.\n    Example:\n    power(2, 4) == 16\n    power(3, -2) == 0.1875\n    '''\n\ndef is_palindrome(num):\n    '''\n    Given a number, return True if it's a palindrome, False otherwise.\n    A palindrome is a word, phrase, number, or other sequence of characters \n    which reads the same backward as forward, such as madam or nurses run.\n    Example:\n    is_palindrome(12321) == True\n    is_palindrome(1234) == False\n    '''\n\ndef palindrome_permutation(string):\n    '''\n    Given a string, return a string containing all of the permutations of\n    that string in a palindrome.\n    Example:\n    palindrome_permutation('abcd') == 'dcba', 'cbad', 'bacd', 'abcd'\n    '''\n\ndef string_rotation(string, n):\n    '''\n    Given a string and a non-negative number, rotate the string by n\n    characters.\n    Example:\n    string_rotation('abcdefg', 3) == 'defgab'\n    '''\n\ndef compress(string):\n    '''\n    Given a string, return a"], ["\ndef find_max_rec(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max_rec([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max_rec([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max_rec([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\ndef find_max_rec_iterative(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max_rec_iterative([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max_rec_iterative([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max_rec_iterative([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n", "\nif __name__ == \"__main__\":\n    print(find_max([\"name\", \"of\", \"string\"]))\n    print(find_max([\"name\", \"enam\", \"game\"]))\n    print(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\n", "\ndef find_max_simple(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    max_length = 0\n    max_word = \"\"\n    for word in words:\n        length = 0\n        for char in word:\n            if char not in max_word:\n                length += 1\n        if length > max_length:\n            max_length = length\n            max_word = word\n    return max_word\n\nprint(find_max_simple([\"name\", \"of\", \"string\"]))\nprint(find_max_simple([\"name\", \"enam\", \"game\"]))\nprint(find_max_simple([\"aaaaaaa\", \"bb\" ,\"cc\"]))\nprint(find_max_simple([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\"]))\nprint(find_max_simple([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\"]))\nprint(find_max_simple([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\"]))\nprint(find_max_simple([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\", \"gg\"]))\nprint(find_max_simple([\"aaaaaaa\", \"bb\" ,\"cc\", \"dd\", \"ee\", \"ff\", \"gg\", \"hh\"]))\nprint(find_max_simple([\"aaaaaaa\", \"bb\"", "\ndef find_max_v2(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    if not words:\n        return \"\"\n    return min(words, key=lambda word: len(set(word)))\n\n\ndef find_max_v3(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    if not words:\n        return \"\"\n    return \"\".join(sorted(words)[0])\n", "\ndef find_max_len(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of characters. If multiple strings have maximum number of characters,\n    return the one which comes first in lexicographical order.\n\n    find_max_len([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max_len([\"name\", \"enam\", \"game\"]) == \"game\"\n    find_max_len([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\ndef find_max_sub_str(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max_sub_str([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max_sub_str([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max_sub_str([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\ndef find_max_sub_str_len(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of characters. If multiple strings have maximum number of characters,\n    return the one which comes first in lexicographical order.\n\n    find_max_sub_str_len([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max_sub_str_len([\"name\", \"enam\", \"game\"]) == \"game\"\n    find_max_sub_str_len([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\""], ["\ndef eat(number, need, remaining):\n    return [need - number, remaining]\n\n# test\nprint(eat(5, 6, 10))\nprint(eat(4, 8, 9))\nprint(eat(1, 10, 10))\nprint(eat(2, 11, 5))\n", "\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "\n# test code\ntest_number = 5\ntest_need = 6\ntest_remaining = 10\nprint(eat(test_number, test_need, test_remaining))\n\n# end test code", "", ""], ["", "", "", "\ndef main():\n    operator = ['*', '/', '+', '-']\n    operand = [1, 2, 3, 4, 5]\n    print(do_algebra(operator, operand))\n\n\nif __name__ == '__main__':\n    main()\n", ""], ["", "", "\nif __name__ == \"__main__\":\n    print(solve(\"1234\"))\n    print(solve(\"ab\"))\n    print(solve(\"#a@C\"))", "\nif __name__ == \"__main__\":\n    s = \"1234\"\n    print(solve(s))\n", ""], ["\ndef md5_to_string(md5_hash):\n    \"\"\"\n    Given a string 'md5_hash', return its original string.\n    If 'md5_hash' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n\ndef main():\n    # This code runs when you invoke the file in the command line.\n    # It should do nothing, but it's here to help you debug.\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef md5_to_string(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_to_string('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef is_valid_md5(text):\n    \"\"\"\n    Given a string 'text', return True if it is a valid md5 hash\n    otherwise return False.\n\n    >>> is_valid_md5('3e25960a79dbc69b674cd4ec67a72c62')\n    True\n    >>> is_valid_md5('931245234987654321')\n    False\n    \"\"\"\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "\ndef md5_to_string(md5_hash):\n    \"\"\"\n    Given a md5 hash string 'md5_hash', return its string equivalent.\n    If 'md5_hash' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n\ndef is_md5_hash(md5_hash):\n    \"\"\"\n    Given a md5 hash string 'md5_hash', return True if it's valid, otherwise return False.\n\n    >>> is_md5_hash('3e25960a79dbc69b674cd4ec67a72c62')\n    True\n    >>> is_md5_hash('not a md5 hash')\n    False\n    >>> is_md5_hash('')\n    False\n    \"\"\"\n\ndef hash_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent.\n\n    >>> hash_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\ndef hash_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent.\n\n    >>> hash_sha1('Hello world') == 'aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d'\n    \"\"\"\n\ndef hash_sha256(text):\n    \"\"\"\n    Given a string 'text', return its sha256 hash equivalent.\n\n    >>> hash_sha256('Hello world') == '2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c", "\ndef md5_to_string(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n\ndef is_md5_correct(text, md5_string):\n    \"\"\"\n    Given a string 'text' and its md5 hash equivalent 'md5_string',\n    return True if 'text' is correct, False otherwise.\n\n    >>> is_md5_correct('Hello world', '3e25960a79dbc69b674cd4ec67a72c62')\n    True\n    \"\"\"\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n", "#    return hashlib.md5(text.encode()).hexdigest()\n#    return hashlib.md5(text.encode(\"UTF-8\")).hexdigest()\n#    return hashlib.md5(text.encode(\"ascii\", \"ignore\")).hexdigest()\n    return hashlib.md5(text.encode()).hexdigest()\n\n\ndef md5_to_string(md5_hash):\n    \"\"\"\n    Given a md5 hash string, return the original string.\n    If 'md5_hash' is an empty string, return None.\n\n    >>> md5_to_string('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n    \"\"\"\n#    return md5_hash.decode('utf-8')\n#    return md5_hash.decode('ascii')\n    return md5_hash.decode()\n\n\ndef file_md5_hash(path):\n    \"\"\"\n    Given a path to a file, return its md5 hash.\n    If 'path' is an empty string, return None.\n\n    >>> file_md5_hash('data/day04_input.txt') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    with open(path, 'rb') as file:\n        return string_to_md5(file.read())\n\n\ndef md5_is_valid_password(password):\n    \"\"\"\n    Given a md5 hash string of a valid password, return True if the password is valid.\n    If 'password' is an empty string, return False.\n\n    >>> md5_is_valid_password('<PASSWORD>')\n    True\n\n    >>> md5_is_valid_password('<PASSWORD>')\n    False\n    \"\"\"\n#    return len(password) == 5 and password[0] == '0' and password[1:4].isdigit"], ["\ndef generate_integers_2(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers_2(2, 8) => [2, 4, 6, 8]\n    generate_integers_2(8, 2) => [2, 4, 6, 8]\n    generate_integers_2(10, 14) => []\n    \"\"\"\n", "\ndef generate_primes(up_to):\n    \"\"\"\n    Given a positive integer n, return a list of all prime numbers\n    less than or equal to n.\n\n    For example:\n    generate_primes(20) => [2, 3, 5, 7, 11, 13, 17, 19]\n    \"\"\"\n\ndef count_pairs(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the number of ordered pairs\n    (i, j) such that ai + aj = bi + bj, where a <= i <= j <= b.\n\n    For example:\n    count_pairs(1, 2) => 3\n    count_pairs(2, 1) => 0\n    count_pairs(2, 3) => 6\n    \"\"\"\n\ndef generate_pairs(a, b):\n    \"\"\"\n    Given two positive integers a and b, return all ordered pairs (i, j)\n    such that ai + aj = bi + bj, where a <= i <= j <= b.\n\n    For example:\n    generate_pairs(1, 2) => [(1, 1), (1, 2), (2, 1), (2, 2)]\n    generate_pairs(2, 1) => []\n    generate_pairs(2, 3) => [(2, 2), (2, 3), (3, 2), (3, 3),\n                             (3, 4), (4, 3), (4, 4)]\n    \"\"\"\n", "\nprint(generate_integers(2, 8))\nprint(generate_integers(8, 2))\nprint(generate_integers(10, 14))\n", "", ""]]}